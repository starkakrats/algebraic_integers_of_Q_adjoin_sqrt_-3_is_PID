{"name":"Std.Tactic.LabelAttr","instances":[],"imports":["Init","Lean.ScopedEnvExtension","Lean.DocString"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L92-L95","name":"Std.Tactic.LabelAttr.labelled","line":92,"kind":"def","docLink":"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.labelled","doc":"When `attrName` is an attribute created using `register_labelled_attr`,\nreturn the names of all declarations labelled using that attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.labelled\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LabelAttr</span>.<span class=\"name\">labelled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(attrName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L80-L88","name":"Lean.Parser.Command.registerLabelAttr","line":80,"kind":"def","docLink":"./Std/Tactic/LabelAttr.html#Lean.Parser.Command.registerLabelAttr","doc":"Initialize a new \"label\" attribute.\nDeclarations tagged with the attribute can be retrieved using `Std.Tactic.LabelAttr.labelled`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Lean.Parser.Command.registerLabelAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Command</span>.<span class=\"name\">registerLabelAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L69-L74","name":"Std.Tactic.LabelAttr.registerLabelAttr","line":69,"kind":"def","docLink":"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.registerLabelAttr","doc":"Construct a new \"label attribute\",\nwhich does nothing except keep track of the names of the declarations with that attribute.\n\nUsers will generally use the `register_label_attr` macro defined below.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.registerLabelAttr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LabelAttr</span>.<span class=\"name\">registerLabelAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(attrName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrDescr : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ref : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Std/Tactic/LabelAttr.html#_auto._@.Std.Tactic.LabelAttr._hyg.221\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtension\">Std.Tactic.LabelAttr.LabelExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L49-L61","name":"Std.Tactic.LabelAttr.mkLabelAttr","line":49,"kind":"def","docLink":"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.mkLabelAttr","doc":"Helper function for `registerLabelAttr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.mkLabelAttr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LabelAttr</span>.<span class=\"name\">mkLabelAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(attrName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(attrDescr : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ext : <a href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtension\">Std.Tactic.LabelAttr.LabelExtension</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ref : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Std/Tactic/LabelAttr.html#_auto._@.Std.Tactic.LabelAttr._hyg.119\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L41-L46","name":"Std.Tactic.LabelAttr.mkLabelExt","line":41,"kind":"def","docLink":"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.mkLabelExt","doc":"Helper function for `registerLabelAttr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.mkLabelExt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LabelAttr</span>.<span class=\"name\">mkLabelExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Std/Tactic/LabelAttr.html#_auto._@.Std.Tactic.LabelAttr._hyg.53\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtension\">Std.Tactic.LabelAttr.LabelExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L37-L38","name":"Std.Tactic.LabelAttr.labelExtensionMapRef","line":37,"kind":"opaque","docLink":"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.labelExtensionMapRef","doc":"Store the current `LabelExtension`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.labelExtensionMapRef\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LabelAttr</span>.<span class=\"name\">labelExtensionMapRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtensionMap\">Std.Tactic.LabelAttr.LabelExtensionMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L35-L35","name":"Std.Tactic.LabelAttr.LabelExtensionMap","line":35,"kind":"def","docLink":"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtensionMap","doc":"The collection of all current `LabelExtension`s, indexed by name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtensionMap\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LabelAttr</span>.<span class=\"name\">LabelExtensionMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LabelAttr.lean#L32-L32","name":"Std.Tactic.LabelAttr.LabelExtension","line":32,"kind":"def","docLink":"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtension","doc":"An environment extension that just tracks an array of names. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LabelAttr.html#Std.Tactic.LabelAttr.LabelExtension\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LabelAttr</span>.<span class=\"name\">LabelExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}