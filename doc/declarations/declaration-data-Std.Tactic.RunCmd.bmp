{"name":"Std.Tactic.RunCmd","instances":[],"imports":["Init","Lean.Elab.Eval","Std.Util.TermUnsafe"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/RunCmd.lean#L70-L82","name":"Std.Tactic.RunCmd.elabRunElab","line":70,"kind":"def","docLink":"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.elabRunElab","doc":"Elaborator for `by_elab`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.elabRunElab\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RunCmd</span>.<span class=\"name\">elabRunElab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/RunCmd.lean#L61-L67","name":"Std.Tactic.RunCmd.byElab","line":61,"kind":"def","docLink":"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.byElab","doc":"* The `by_elab doSeq` expression runs the `doSeq` as a `TermElabM Expr` to\n  synthesize the expression.\n* `by_elab fun expectedType? => do doSeq` receives the expected type (an `Option Expr`)\n  as well.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.byElab\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RunCmd</span>.<span class=\"name\">byElab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/RunCmd.lean#L56-L59","name":"Std.Tactic.RunCmd.runTac","line":56,"kind":"def","docLink":"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runTac","doc":"The `run_tac doSeq` tactic executes code in `TacticM Unit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runTac\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RunCmd</span>.<span class=\"name\">runTac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/RunCmd.lean#L53-L54","name":"Std.Tactic.RunCmd.runMeta","line":53,"kind":"def","docLink":"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runMeta","doc":"The `run_meta doSeq` command executes code in `MetaM Unit`.\nThis is almost the same as `#eval show MetaM Unit from do doSeq`,\nexcept that it doesn't print an empty diagnostic.\n\n(This is effectively a synonym for `run_elab`.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runMeta\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RunCmd</span>.<span class=\"name\">runMeta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/RunCmd.lean#L35-L44","name":"Std.Tactic.RunCmd.runElab","line":35,"kind":"def","docLink":"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runElab","doc":"The `run_elab doSeq` command executes code in `TermElabM Unit`.\nThis is almost the same as `#eval show TermElabM Unit from do doSeq`,\nexcept that it doesn't print an empty diagnostic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runElab\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RunCmd</span>.<span class=\"name\">runElab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/RunCmd.lean#L24-L33","name":"Std.Tactic.RunCmd.runCmd","line":24,"kind":"def","docLink":"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runCmd","doc":"The `run_cmd doSeq` command executes code in `CommandElabM Unit`.\nThis is almost the same as `#eval show CommandElabM Unit from do doSeq`,\nexcept that it doesn't print an empty diagnostic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/RunCmd.html#Std.Tactic.RunCmd.runCmd\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RunCmd</span>.<span class=\"name\">runCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}