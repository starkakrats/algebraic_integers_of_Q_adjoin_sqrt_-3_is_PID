{"name":"Mathlib.Data.BitVec.Defs","instances":[{"typeNames":["Nat","Std.BitVec"],"name":"Std.BitVec.instSMulNatBitVec","className":"SMul"},{"typeNames":["Int","Std.BitVec"],"name":"Std.BitVec.instSMulIntBitVec","className":"SMul"},{"typeNames":["Std.BitVec","Nat"],"name":"Std.BitVec.instPowBitVecNat","className":"Pow"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instNatCastBitVec","className":"NatCast"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instIntCastBitVec","className":"IntCast"}],"imports":["Init","Mathlib.Data.Fin.Basic","Mathlib.Data.Nat.Bitwise","Mathlib.Data.ZMod.Defs","Std.Data.BitVec"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L147-L147","name":"Std.BitVec.instIntCastBitVec","line":147,"kind":"instance","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instIntCastBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instIntCastBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instIntCastBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Cast.html#IntCast\">IntCast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L146-L146","name":"Std.BitVec.instNatCastBitVec","line":146,"kind":"instance","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instNatCastBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instNatCastBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instNatCastBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Cast.html#NatCast\">NatCast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L145-L145","name":"Std.BitVec.instPowBitVecNat","line":145,"kind":"instance","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instPowBitVecNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instPowBitVecNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instPowBitVecNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L144-L144","name":"Std.BitVec.instSMulIntBitVec","line":144,"kind":"instance","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instSMulIntBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instSMulIntBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instSMulIntBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L143-L143","name":"Std.BitVec.instSMulNatBitVec","line":143,"kind":"instance","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instSMulNatBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.instSMulNatBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instSMulNatBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L140-L141","name":"Std.BitVec.toBEList","line":140,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.toBEList","doc":"Convert a bitvector to a big-endian list of Booleans.\nThat is, the head of the list is the most significant bit\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.toBEList\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toBEList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L133-L134","name":"Std.BitVec.toLEList","line":133,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.toLEList","doc":"Convert a bitvector to a little-endian list of Booleans.\nThat is, the head of the list is the least significant bit\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.toLEList\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toLEList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L127-L127","name":"Std.BitVec.getMsb'","line":127,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.getMsb'","doc":"Return the `i`-th most significant bit, where `i` is a statically known in-bounds index "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.getMsb'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getMsb'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L124-L124","name":"Std.BitVec.getLsb'","line":124,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.getLsb'","doc":"Return the `i`-th least significant bit, where `i` is a statically known in-bounds index "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.getLsb'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L112-L113","name":"Std.BitVec.addLsb","line":112,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.addLsb","doc":"`addLsb r b` is `r + r + 1` if `b` is `true` and `r + r` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.addLsb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">addLsb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L104-L104","name":"Std.BitVec.sge","line":104,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.sge","doc":"Signed greater than or equal to for bitvectors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.sge\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L98-L98","name":"Std.BitVec.sgt","line":98,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.sgt","doc":"Signed greater than for bitvectors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.sgt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sgt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L91-L91","name":"Std.BitVec.uge","line":91,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.uge","doc":"Signed greater than or equal to for bitvectors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.uge\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">uge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L85-L85","name":"Std.BitVec.ugt","line":85,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.ugt","doc":"Unsigned greater than for bitvectors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.ugt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ugt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L71-L73","name":"Std.BitVec.sbb","line":71,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.sbb","doc":"Subtract with borrow "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.sbb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sbb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L64-L65","name":"Std.BitVec.adc'","line":64,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.adc'","doc":"Add with carry (no overflow)\n\nSee also `Std.BitVec.adc`, which stores the carry bit separately. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.adc'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">adc'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/BitVec/Defs.lean#L42-L42","name":"Std.BitVec.one","line":42,"kind":"def","docLink":"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.one","doc":"The bitvector representing `1`.\nThat is, the bitvector with least-significant bit `1` and all other bits `0` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/BitVec/Defs.html#Std.BitVec.one\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span></div></div>"}]}