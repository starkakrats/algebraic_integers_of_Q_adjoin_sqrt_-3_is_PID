{"name":"Mathlib.Logic.Hydra","instances":[],"imports":["Init","Mathlib.Data.Finsupp.Lex","Mathlib.Data.Finsupp.Multiset","Mathlib.Order.GameAdd"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L150-L151","name":"WellFounded.cutExpand","line":150,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#WellFounded.cutExpand","doc":"`CutExpand r` is well-founded when `r` is. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#WellFounded.cutExpand\"><span class=\"name\">WellFounded</span>.<span class=\"name\">cutExpand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L138-L146","name":"Acc.cutExpand","line":138,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Acc.cutExpand","doc":"A singleton `{a}` is accessible under `CutExpand r` if `a` is accessible under `r`,\nassuming `r` is irreflexive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Acc.cutExpand\"><span class=\"name\">Acc</span>.<span class=\"name\">cutExpand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hacc : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L126-L133","name":"Relation.acc_of_singleton","line":126,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.acc_of_singleton","doc":"A multiset is accessible under `CutExpand` if all its singleton subsets are,\nassuming `r` is irreflexive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.acc_of_singleton\"><span class=\"name\">Relation</span>.<span class=\"name\">acc_of_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\">∀ <span class=\"fn\">a</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L109-L121","name":"Relation.cutExpand_fibration","line":109,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.cutExpand_fibration","doc":"For any relation `r` on `α`, multiset addition `Multiset α × Multiset α → Multiset α` is a\nfibration between the game sum of `CutExpand r` with itself and `CutExpand r` itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.cutExpand_fibration\"><span class=\"name\">Relation</span>.<span class=\"name\">cutExpand_fibration</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Fibration\">Relation.Fibration</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L101-L104","name":"Relation.not_cutExpand_zero","line":101,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.not_cutExpand_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.not_cutExpand_zero\"><span class=\"name\">Relation</span>.<span class=\"name\">not_cutExpand_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L89-L98","name":"Relation.cutExpand_iff","line":89,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.cutExpand_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.cutExpand_iff\"><span class=\"name\">Relation</span>.<span class=\"name\">cutExpand_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span> <span class=\"fn\">s'</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (t : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>) (a : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">a'</span> ∈ <span class=\"fn\">t</span>, <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a'</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.erase\">Multiset.erase</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">t</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L85-L86","name":"Relation.cutExpand_add_left","line":85,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.cutExpand_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.cutExpand_add_left\"><span class=\"name\">Relation</span>.<span class=\"name\">cutExpand_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">u</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span> <span class=\"fn\">t</span> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L81-L82","name":"Relation.cutExpand_singleton_singleton","line":81,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.cutExpand_singleton_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.cutExpand_singleton_singleton\"><span class=\"name\">Relation</span>.<span class=\"name\">cutExpand_singleton_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x'</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span> <span class=\"fn\">{<span class=\"fn\">x'</span>}</span> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L77-L78","name":"Relation.cutExpand_singleton","line":77,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.cutExpand_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.cutExpand_singleton\"><span class=\"name\">Relation</span>.<span class=\"name\">cutExpand_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ <span class=\"fn\">x'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x'</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L62-L74","name":"Relation.cutExpand_le_invImage_lex","line":62,"kind":"theorem","docLink":"./Mathlib/Logic/Hydra.html#Relation.cutExpand_le_invImage_lex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.cutExpand_le_invImage_lex\"><span class=\"name\">Relation</span>.<span class=\"name\">cutExpand_le_invImage_lex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\">Relation.CutExpand</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Init/Core.html#InvImage\">InvImage</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Lex.html#Finsupp.Lex\">Finsupp.Lex</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">x_1</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>)</span> <span class=\"fn\">⇑<span class=\"fn\">Multiset.toFinsupp</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Hydra.lean#L56-L57","name":"Relation.CutExpand","line":56,"kind":"def","docLink":"./Mathlib/Logic/Hydra.html#Relation.CutExpand","doc":"The relation that specifies valid moves in our hydra game. `CutExpand r s' s`\nmeans that `s'` is obtained by removing one head `a ∈ s` and adding back an arbitrary\nmultiset `t` of heads such that all `a' ∈ t` satisfy `r a' a`.\n\nThis is most directly translated into `s' = s.erase a + t`, but `Multiset.erase` requires\n`DecidableEq α`, so we use the equivalent condition `s' + {a} = s + t` instead, which\nis also easier to verify for explicit multisets `s'`, `s` and `t`.\n\nWe also don't include the condition `a ∈ s` because `s' + {a} = s + t` already\nguarantees `a ∈ s + t`, and if `r` is irreflexive then `a ∉ t`, which is the\ncase when `r` is well-founded, the case we are primarily interested in.\n\nThe lemma `Relation.cutExpand_iff` below converts between this convenient definition\nand the direct translation when `r` is irreflexive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Hydra.html#Relation.CutExpand\"><span class=\"name\">Relation</span>.<span class=\"name\">CutExpand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s' : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}