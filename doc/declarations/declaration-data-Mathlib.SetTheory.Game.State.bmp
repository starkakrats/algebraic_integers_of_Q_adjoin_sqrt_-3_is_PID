{"name":"Mathlib.SetTheory.Game.State","instances":[{"typeNames":["SetTheory.PGame.LeftMoves"],"name":"SetTheory.PGame.fintypeLeftMovesOfStateAux","className":"Fintype"},{"typeNames":["SetTheory.PGame.RightMoves"],"name":"SetTheory.PGame.fintypeRightMovesOfStateAux","className":"Fintype"},{"typeNames":["SetTheory.PGame.ofStateAux"],"name":"SetTheory.PGame.shortOfStateAux","className":"SetTheory.PGame.Short"},{"typeNames":["SetTheory.PGame.ofState"],"name":"SetTheory.PGame.shortOfState","className":"SetTheory.PGame.Short"}],"imports":["Init","Mathlib.SetTheory.Game.Short"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L239-L240","name":"SetTheory.Game.ofState","line":239,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.Game.ofState","doc":"Construct a combinatorial `Game` from a state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.Game.ofState\"><span class=\"name\">SetTheory</span>.<span class=\"name\">Game</span>.<span class=\"name\">ofState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/Basic.html#SetTheory.Game\">SetTheory.Game</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L229-L231","name":"SetTheory.PGame.shortOfState","line":229,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.shortOfState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.shortOfState\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">shortOfState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Short.html#SetTheory.PGame.Short\">SetTheory.PGame.Short</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L210-L226","name":"SetTheory.PGame.shortOfStateAux","line":210,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.shortOfStateAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.shortOfStateAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">shortOfStateAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/Short.html#SetTheory.PGame.Short\">SetTheory.PGame.Short</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L205-L207","name":"SetTheory.PGame.fintypeRightMovesOfStateAux","line":205,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.fintypeRightMovesOfStateAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.fintypeRightMovesOfStateAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fintypeRightMovesOfStateAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L200-L202","name":"SetTheory.PGame.fintypeLeftMovesOfStateAux","line":200,"kind":"instance","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.fintypeLeftMovesOfStateAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.fintypeLeftMovesOfStateAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">fintypeLeftMovesOfStateAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L193-L197","name":"SetTheory.PGame.relabellingMoveRight","line":193,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveRight","doc":"The relabelling showing `moveRight` applied to a game constructed using `of`\nhas itself been constructed using `of`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveRight\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabellingMoveRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling\">SetTheory.PGame.Relabelling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight\">SetTheory.PGame.moveRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">t</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">Equiv.toFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.rightMovesOfState\">SetTheory.PGame.rightMovesOfState</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L178-L187","name":"SetTheory.PGame.relabellingMoveRightAux","line":178,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveRightAux","doc":"The relabelling showing `moveRight` applied to a game constructed using `ofStateAux`\nhas itself been constructed using `ofStateAux`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveRightAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabellingMoveRightAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling\">SetTheory.PGame.Relabelling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveRight\">SetTheory.PGame.moveRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">t</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.rightMovesOfStateAux\">SetTheory.PGame.rightMovesOfStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span>\n    <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.rightMovesOfStateAux\">SetTheory.PGame.rightMovesOfStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L168-L172","name":"SetTheory.PGame.relabellingMoveLeft","line":168,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveLeft","doc":"The relabelling showing `moveLeft` applied to a game constructed using `of`\nhas itself been constructed using `of`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveLeft\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabellingMoveLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling\">SetTheory.PGame.Relabelling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft\">SetTheory.PGame.moveLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">t</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">Equiv.toFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.leftMovesOfState\">SetTheory.PGame.leftMovesOfState</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L153-L162","name":"SetTheory.PGame.relabellingMoveLeftAux","line":153,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveLeftAux","doc":"The relabelling showing `moveLeft` applied to a game constructed using `ofStateAux`\nhas itself been constructed using `ofStateAux`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.relabellingMoveLeftAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">relabellingMoveLeftAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling\">SetTheory.PGame.Relabelling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.moveLeft\">SetTheory.PGame.moveLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">t</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.leftMovesOfStateAux\">SetTheory.PGame.leftMovesOfStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span>\n    <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.leftMovesOfStateAux\">SetTheory.PGame.leftMovesOfStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L146-L147","name":"SetTheory.PGame.rightMovesOfState","line":146,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.rightMovesOfState","doc":"The equivalence between `rightMoves` for a `PGame` constructed using `ofState s`, and\n`R s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.rightMovesOfState\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMovesOfState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">t</span> : <span class=\"fn\">S</span> // <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.r\">SetTheory.PGame.State.r</a> <span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L140-L141","name":"SetTheory.PGame.rightMovesOfStateAux","line":140,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.rightMovesOfStateAux","doc":"The equivalence between `rightMoves` for a `PGame` constructed using `ofStateAux _ s _`, and\n`R s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.rightMovesOfStateAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">rightMovesOfStateAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.RightMoves\">SetTheory.PGame.RightMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">t</span> : <span class=\"fn\">S</span> // <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.r\">SetTheory.PGame.State.r</a> <span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L134-L135","name":"SetTheory.PGame.leftMovesOfState","line":134,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.leftMovesOfState","doc":"The equivalence between `leftMoves` for a `PGame` constructed using `ofState s`, and `l s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.leftMovesOfState\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMovesOfState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\">SetTheory.PGame.ofState</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">t</span> : <span class=\"fn\">S</span> // <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.l\">SetTheory.PGame.State.l</a> <span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L129-L130","name":"SetTheory.PGame.leftMovesOfStateAux","line":129,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.leftMovesOfStateAux","doc":"The equivalence between `leftMoves` for a `PGame` constructed using `ofStateAux _ s _`, and\n`L s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.leftMovesOfStateAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">leftMovesOfStateAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.LeftMoves\">SetTheory.PGame.LeftMoves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">t</span> : <span class=\"fn\">S</span> // <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.l\">SetTheory.PGame.State.l</a> <span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L123-L124","name":"SetTheory.PGame.ofState","line":123,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState","doc":"Construct a combinatorial `PGame` from a state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofState\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L89-L119","name":"SetTheory.PGame.ofStateAuxRelabelling","line":89,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAuxRelabelling","doc":"Two different (valid) turn bounds give equivalent games. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAuxRelabelling\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofStateAuxRelabelling</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hm : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame.Relabelling\">SetTheory.PGame.Relabelling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span> <span class=\"fn\">hn</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\">SetTheory.PGame.ofStateAux</a> <span class=\"fn\">m</span> <span class=\"fn\">s</span> <span class=\"fn\">hm</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L77-L85","name":"SetTheory.PGame.ofStateAux","line":77,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux","doc":"Construct a `PGame` from a state and a (not necessarily optimal) bound on the number of\nturns remaining.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.ofStateAux\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">ofStateAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/SetTheory/Game/PGame.html#SetTheory.PGame\">SetTheory.PGame</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L69-L71","name":"SetTheory.PGame.turnBound_of_right","line":69,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_of_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_of_right\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">turnBound_of_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.r\">SetTheory.PGame.State.r</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L64-L66","name":"SetTheory.PGame.turnBound_of_left","line":64,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_of_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_of_left\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">turnBound_of_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.l\">SetTheory.PGame.State.l</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L57-L61","name":"SetTheory.PGame.turnBound_ne_zero_of_right_move","line":57,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_ne_zero_of_right_move","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_ne_zero_of_right_move\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">turnBound_ne_zero_of_right_move</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.r\">SetTheory.PGame.State.r</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L50-L54","name":"SetTheory.PGame.turnBound_ne_zero_of_left_move","line":50,"kind":"theorem","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_ne_zero_of_left_move","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.turnBound_ne_zero_of_left_move\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">turnBound_ne_zero_of_left_move</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.l\">SetTheory.PGame.State.l</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L43-L43","name":"SetTheory.PGame.State.right_bound","line":43,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.right_bound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.right_bound\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">State</span>.<span class=\"name\">right_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.r\">SetTheory.PGame.State.r</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L42-L42","name":"SetTheory.PGame.State.left_bound","line":42,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.left_bound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.left_bound\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">State</span>.<span class=\"name\">left_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.l\">SetTheory.PGame.State.l</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\">SetTheory.PGame.State.turnBound</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L41-L41","name":"SetTheory.PGame.State.r","line":41,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.r","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.r\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">State</span>.<span class=\"name\">r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">S</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L40-L40","name":"SetTheory.PGame.State.l","line":40,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.l","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.l\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">State</span>.<span class=\"name\">l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">S</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L39-L39","name":"SetTheory.PGame.State.turnBound","line":39,"kind":"def","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.turnBound\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">State</span>.<span class=\"name\">turnBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L38-L38","name":"SetTheory.PGame.State.mk","line":38,"kind":"ctor","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State.mk\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(turnBound : <span class=\"fn\"><span class=\"fn\">S</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><span class=\"fn\">S</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">S</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">S</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">S</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(left_bound : <span class=\"fn\">∀ {<span class=\"fn\">s </span>t : <span class=\"fn\">S</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">turnBound</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">turnBound</span> <span class=\"fn\">s</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(right_bound : <span class=\"fn\">∀ {<span class=\"fn\">s </span>t : <span class=\"fn\">S</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">turnBound</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">turnBound</span> <span class=\"fn\">s</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\">SetTheory.PGame.State</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Game/State.lean#L38-L43","name":"SetTheory.PGame.State","line":38,"kind":"class","docLink":"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State","doc":"`SetTheory.PGame.State S` describes how to interpret `s : S` as a state of a combinatorial game.\nUse `SetTheory.PGame.ofState s` or `SetTheory.Game.ofState s` to construct the game.\n\n`SetTheory.PGame.State.l : S → Finset S` and `SetTheory.PGame.State.r : S → Finset S` describe\nthe states reachable by a move by Left or Right. `SetTheory.PGame.State.turnBound : S → ℕ`\ngives an upper bound on the number of possible turns remaining from this state.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Game/State.html#SetTheory.PGame.State\"><span class=\"name\">SetTheory</span>.<span class=\"name\">PGame</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}