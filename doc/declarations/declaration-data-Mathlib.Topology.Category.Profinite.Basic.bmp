{"name":"Mathlib.Topology.Category.Profinite.Basic","instances":[{"typeNames":["Profinite"],"name":"Profinite.instInhabitedProfinite","className":"Inhabited"},{"typeNames":["Profinite"],"name":"Profinite.category","className":"CategoryTheory.Category"},{"typeNames":["Profinite"],"name":"Profinite.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["Profinite","TopCat"],"name":"Profinite.hasForget₂","className":"CategoryTheory.HasForget₂"},{"typeNames":["Profinite","_builtin_typeu"],"name":"Profinite.instCoeSortProfiniteType","className":"CoeSort"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"Profinite.instTotallyDisconnectedSpaceαTopologicalSpaceToTopToCompHausTopologicalSpace_coe","className":"TotallyDisconnectedSpace"},{"typeNames":["Prefunctor.obj"],"name":"Profinite.instTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","className":"TopologicalSpace"},{"typeNames":["Prefunctor.obj"],"name":"Profinite.instTotallyDisconnectedSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","className":"TotallyDisconnectedSpace"},{"typeNames":["Prefunctor.obj"],"name":"Profinite.instCompactSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","className":"CompactSpace"},{"typeNames":["Prefunctor.obj"],"name":"Profinite.instT2SpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","className":"T2Space"},{"typeNames":["profiniteToCompHaus"],"name":"instFullProfiniteCategoryCompHausCategoryProfiniteToCompHaus","className":"CategoryTheory.Full"},{"typeNames":["profiniteToCompHaus"],"name":"instFaithfulProfiniteCategoryCompHausCategoryProfiniteToCompHaus","className":"CategoryTheory.Faithful"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"instTotallyDisconnectedSpaceαTopologicalSpaceToTopObjProfiniteToQuiverToCategoryStructCategoryCompHausCategoryToPrefunctorProfiniteToCompHausTopologicalSpace_coe","className":"TotallyDisconnectedSpace"},{"typeNames":["Profinite.toTopCat"],"name":"instFullProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat","className":"CategoryTheory.Full"},{"typeNames":["Profinite.toTopCat"],"name":"instFaithfulProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat","className":"CategoryTheory.Faithful"},{"typeNames":["profiniteToCompHaus"],"name":"Profinite.toCompHaus.reflective","className":"CategoryTheory.Reflective"},{"typeNames":["profiniteToCompHaus"],"name":"Profinite.toCompHaus.createsLimits","className":"CategoryTheory.CreatesLimitsOfSize"},{"typeNames":["Profinite.toTopCat"],"name":"Profinite.toTopCat.reflective","className":"CategoryTheory.Reflective"},{"typeNames":["Profinite.toTopCat"],"name":"Profinite.toTopCat.createsLimits","className":"CategoryTheory.CreatesLimitsOfSize"},{"typeNames":["Profinite"],"name":"Profinite.hasLimits","className":"CategoryTheory.Limits.HasLimitsOfSize"},{"typeNames":["Profinite"],"name":"Profinite.hasColimits","className":"CategoryTheory.Limits.HasColimitsOfSize"},{"typeNames":["CategoryTheory.forget"],"name":"Profinite.forgetPreservesLimits","className":"CategoryTheory.Limits.PreservesLimitsOfSize"},{"typeNames":["CategoryTheory.forget"],"name":"Profinite.forget_reflectsIsomorphisms","className":"CategoryTheory.ReflectsIsomorphisms"},{"typeNames":[],"name":"Profinite.instEpiCompHausCategoryToCompHaus","className":"CategoryTheory.Epi"},{"typeNames":[],"name":"Profinite.instEpiProfiniteCategory","className":"CategoryTheory.Epi"}],"imports":["Init","Mathlib.Topology.Category.CompHaus.Basic","Mathlib.Topology.LocallyConstant.Basic","Mathlib.CategoryTheory.FintypeCat"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L414-L423","name":"Profinite.mono_iff_injective","line":414,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.mono_iff_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.mono_iff_injective\"><span class=\"name\">Profinite</span>.<span class=\"name\">mono_iff_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L410-L412","name":"Profinite.instEpiProfiniteCategory","line":410,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instEpiProfiniteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instEpiProfiniteCategory\"><span class=\"name\">Profinite</span>.<span class=\"name\">instEpiProfiniteCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L406-L408","name":"Profinite.instEpiCompHausCategoryToCompHaus","line":406,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instEpiCompHausCategoryToCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instEpiCompHausCategoryToCompHaus\"><span class=\"name\">Profinite</span>.<span class=\"name\">instEpiCompHausCategoryToCompHaus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L367-L403","name":"Profinite.epi_iff_surjective","line":367,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.epi_iff_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.epi_iff_surjective\"><span class=\"name\">Profinite</span>.<span class=\"name\">epi_iff_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L360-L364","name":"Profinite.isoEquivHomeo","line":360,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo","doc":"The equivalence between isomorphisms in `Profinite` and homeomorphisms\nof topological spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoEquivHomeo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L358-L358","name":"Profinite.isoEquivHomeo_symm_apply_hom_apply","line":358,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_symm_apply_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_symm_apply_hom_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoEquivHomeo_symm_apply_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Profinite.isoEquivHomeo</span>.symm</span> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L358-L358","name":"Profinite.isoEquivHomeo_apply_symm_apply","line":358,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_apply_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_apply_symm_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoEquivHomeo_apply_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></span>)</span>.obj <span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph.symm\">Homeomorph.symm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Profinite.isoEquivHomeo</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.inv</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L358-L358","name":"Profinite.isoEquivHomeo_apply_apply","line":358,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_apply_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoEquivHomeo_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></span>)</span>.obj <span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Profinite.isoEquivHomeo</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.hom</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L358-L358","name":"Profinite.isoEquivHomeo_symm_apply_inv","line":358,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_symm_apply_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoEquivHomeo_symm_apply_inv\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoEquivHomeo_symm_apply_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Profinite.isoEquivHomeo</span>.symm</span> <span class=\"fn\">f</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.mk\">ContinuousMap.mk</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L353-L353","name":"Profinite.homeoOfIso","line":353,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso","doc":"Construct a homeomorphism from an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso\"><span class=\"name\">Profinite</span>.<span class=\"name\">homeoOfIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L352-L352","name":"Profinite.homeoOfIso_symm_apply","line":352,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso_symm_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">homeoOfIso_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></span>)</span>.obj <span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph.symm\">Homeomorph.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso\">Profinite.homeoOfIso</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.inv</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L352-L352","name":"Profinite.homeoOfIso_apply","line":352,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">homeoOfIso_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></span>)</span>.obj <span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.homeoOfIso\">Profinite.homeoOfIso</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.hom</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L346-L348","name":"Profinite.isoOfHomeo","line":346,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo","doc":"Construct an isomorphism from a homeomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoOfHomeo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L344-L344","name":"Profinite.isoOfHomeo_hom","line":344,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo_hom\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoOfHomeo_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo\">Profinite.isoOfHomeo</a> <span class=\"fn\">f</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.mk\">ContinuousMap.mk</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L344-L344","name":"Profinite.isoOfHomeo_inv","line":344,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo_inv\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoOfHomeo_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfHomeo\">Profinite.isoOfHomeo</a> <span class=\"fn\">f</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.mk\">ContinuousMap.mk</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L337-L340","name":"Profinite.forget_reflectsIsomorphisms","line":337,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.forget_reflectsIsomorphisms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.forget_reflectsIsomorphisms\"><span class=\"name\">Profinite</span>.<span class=\"name\">forget_reflectsIsomorphisms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/ReflectsIso.html#CategoryTheory.ReflectsIsomorphisms\">CategoryTheory.ReflectsIsomorphisms</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L332-L334","name":"Profinite.isoOfBijective","line":332,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfBijective","doc":"Any continuous bijection of profinite spaces induces an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isoOfBijective\"><span class=\"name\">Profinite</span>.<span class=\"name\">isoOfBijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bij : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L326-L328","name":"Profinite.isIso_of_bijective","line":326,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isIso_of_bijective","doc":"Any continuous bijection of profinite spaces induces an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isIso_of_bijective\"><span class=\"name\">Profinite</span>.<span class=\"name\">isIso_of_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bij : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L321-L322","name":"Profinite.isClosedMap","line":321,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isClosedMap","doc":"Any morphism of profinite spaces is a closed map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isClosedMap\"><span class=\"name\">Profinite</span>.<span class=\"name\">isClosedMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#IsClosedMap\">IsClosedMap</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L314-L315","name":"Profinite.forgetPreservesLimits","line":314,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.forgetPreservesLimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.forgetPreservesLimits\"><span class=\"name\">Profinite</span>.<span class=\"name\">forgetPreservesLimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimits\">CategoryTheory.Limits.PreservesLimits</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L310-L311","name":"Profinite.hasColimits","line":310,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.hasColimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.hasColimits\"><span class=\"name\">Profinite</span>.<span class=\"name\">hasColimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasColimits\">CategoryTheory.Limits.HasColimits</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L306-L307","name":"Profinite.hasLimits","line":306,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.hasLimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.hasLimits\"><span class=\"name\">Profinite</span>.<span class=\"name\">hasLimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimits\">CategoryTheory.Limits.HasLimits</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L302-L303","name":"Profinite.toTopCat.createsLimits","line":302,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat.createsLimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat.createsLimits\"><span class=\"name\">Profinite</span>.<span class=\"name\">toTopCat</span>.<span class=\"name\">createsLimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.CreatesLimits\">CategoryTheory.CreatesLimits</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L298-L299","name":"Profinite.toTopCat.reflective","line":298,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat.reflective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat.reflective\"><span class=\"name\">Profinite</span>.<span class=\"name\">toTopCat</span>.<span class=\"name\">reflective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Adjunction/Reflective.html#CategoryTheory.Reflective\">CategoryTheory.Reflective</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L294-L295","name":"Profinite.toCompHaus.createsLimits","line":294,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus.createsLimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus.createsLimits\"><span class=\"name\">Profinite</span>.<span class=\"name\">toCompHaus</span>.<span class=\"name\">createsLimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.CreatesLimits\">CategoryTheory.CreatesLimits</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L290-L291","name":"Profinite.toCompHaus.reflective","line":290,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus.reflective","doc":"The category of profinite sets is reflective in the category of compact Hausdorff spaces "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus.reflective\"><span class=\"name\">Profinite</span>.<span class=\"name\">toCompHaus</span>.<span class=\"name\">reflective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Adjunction/Reflective.html#CategoryTheory.Reflective\">CategoryTheory.Reflective</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L285-L286","name":"Profinite.toProfiniteAdjToCompHaus","line":285,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toProfiniteAdjToCompHaus","doc":"The adjunction between CompHaus.to_Profinite and Profinite.to_CompHaus "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toProfiniteAdjToCompHaus\"><span class=\"name\">Profinite</span>.<span class=\"name\">toProfiniteAdjToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfinite\">CompHaus.toProfinite</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L276-L281","name":"Profinite.limitConeIsLimit","line":276,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.limitConeIsLimit","doc":"The limit cone `Profinite.limitCone F` is indeed a limit cone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.limitConeIsLimit\"><span class=\"name\">Profinite</span>.<span class=\"name\">limitConeIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\">ProfiniteMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.limitCone\">Profinite.limitCone</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L260-L272","name":"Profinite.limitCone","line":260,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.limitCone","doc":"An explicit limit cone for a functor `F : J ⥤ Profinite`, defined in terms of\n`CompHaus.limitCone`, which is defined in terms of `TopCat.limitCone`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.limitCone\"><span class=\"name\">Profinite</span>.<span class=\"name\">limitCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\">ProfiniteMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L254-L254","name":"ProfiniteMax","line":254,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax","doc":"Many definitions involving universe inequalities in Mathlib are expressed through use of `max u v`.\nUnfortunately, this leads to unbound universes which cannot be solved for during unification, eg\n`max u v =?= max v ?`.\nThe current solution is to wrap `Type max u v` in `TypeMax.{u,v}`\nto expose both universe parameters directly.\n\nSimilarly, for other concrete categories for which we need to refer to the maximum of two universes\n(e.g. any category for which we are constructing limits), we need an analogous abbreviation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\"><span class=\"name\">ProfiniteMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max w w') + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L234-L236","name":"FintypeCat.toProfinite","line":234,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite","doc":"The natural functor from `Fintype` to `Profinite`, endowing a finite type with the\ndiscrete topology. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">toProfinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L233-L233","name":"FintypeCat.toProfinite_obj_toCompHaus_toTop_str_IsOpen","line":233,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite_obj_toCompHaus_toTop_str_IsOpen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite_obj_toCompHaus_toTop_str_IsOpen\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">toProfinite_obj_toCompHaus_toTop_str_IsOpen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">↑<span class=\"fn\">A</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace.IsOpen\">TopologicalSpace.IsOpen</a> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L233-L233","name":"FintypeCat.toProfinite_obj_toCompHaus_toTop_α","line":233,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite_obj_toCompHaus_toTop_α","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite_obj_toCompHaus_toTop_α\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">toProfinite_obj_toCompHaus_toTop_α</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite\">FintypeCat.toProfinite</a>.obj <span class=\"fn\">A</span></span>)</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L233-L233","name":"FintypeCat.toProfinite_map_apply","line":233,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite_map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite_map_apply\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">toProfinite_map_apply</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.toProfinite\">FintypeCat.toProfinite</a>.map <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L225-L226","name":"FintypeCat.discreteTopology","line":225,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.discreteTopology","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.discreteTopology\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">discreteTopology</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">↑<span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L218-L218","name":"FintypeCat.botTopology","line":218,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.botTopology","doc":"Finite types are given the discrete topology. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#FintypeCat.botTopology\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">botTopology</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">↑<span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L212-L214","name":"CompHaus.toProfinite_obj'","line":212,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfinite_obj'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfinite_obj'\"><span class=\"name\">CompHaus</span>.<span class=\"name\">toProfinite_obj'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfinite\">CompHaus.toProfinite</a>.obj <span class=\"fn\">X</span></span>)</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/Basic.html#ConnectedComponents\">ConnectedComponents</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toTop</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L208-L209","name":"CompHaus.toProfinite","line":208,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfinite","doc":"The connected_components functor from compact Hausdorff spaces to profinite spaces,\nleft adjoint to the inclusion functor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfinite\"><span class=\"name\">CompHaus</span>.<span class=\"name\">toProfinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L195-L202","name":"Profinite.toCompHausEquivalence","line":195,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHausEquivalence","doc":"(Implementation) The bijection of homsets to establish the reflective adjunction of Profinite\nspaces in compact Hausdorff spaces.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHausEquivalence\"><span class=\"name\">Profinite</span>.<span class=\"name\">toCompHausEquivalence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfiniteObj\">CompHaus.toProfiniteObj</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.obj <span class=\"fn\">Y</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L184-L189","name":"CompHaus.toProfiniteObj","line":184,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfiniteObj","doc":"(Implementation) The object part of the connected_components functor from compact Hausdorff spaces\nto Profinite spaces, given by quotienting a space by its connected components.\nSee: https://stacks.math.columbia.edu/tag/0900\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#CompHaus.toProfiniteObj\"><span class=\"name\">CompHaus</span>.<span class=\"name\">toProfiniteObj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L170-L172","name":"Profinite.to_compHausToTopCat","line":170,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.to_compHausToTopCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.to_compHausToTopCat\"><span class=\"name\">Profinite</span>.<span class=\"name\">to_compHausToTopCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#compHausToTop\">compHausToTop</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L166-L167","name":"instFaithfulProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat","line":166,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#instFaithfulProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#instFaithfulProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat\"><span class=\"name\">instFaithfulProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L163-L164","name":"instFullProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat","line":163,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#instFullProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#instFullProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat\"><span class=\"name\">instFullProfiniteCategoryTopCatInstTopCatLargeCategoryToTopCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L157-L158","name":"Profinite.toTopCat","line":157,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat","doc":"The fully faithful embedding of `Profinite` in `TopCat`.\nThis is definitionally the same as the obvious composite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\"><span class=\"name\">Profinite</span>.<span class=\"name\">toTopCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L156-L156","name":"Profinite.toTopCat_obj","line":156,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat_obj\"><span class=\"name\">Profinite</span>.<span class=\"name\">toTopCat_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.InducedCategory\">CategoryTheory.InducedCategory</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus\">Profinite.toCompHaus</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L156-L156","name":"Profinite.toTopCat_map","line":156,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat_map\"><span class=\"name\">Profinite</span>.<span class=\"name\">toTopCat_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀\n  {<span class=\"fn\">X </span>Y :\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.InducedCategory\">CategoryTheory.InducedCategory</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.InducedCategory\">CategoryTheory.InducedCategory</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus\">Profinite.toCompHaus</a></span>) =&gt;\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span></span>}\n  (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L151-L152","name":"instTotallyDisconnectedSpaceαTopologicalSpaceToTopObjProfiniteToQuiverToCategoryStructCategoryCompHausCategoryToPrefunctorProfiniteToCompHausTopologicalSpace_coe","line":151,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#instTotallyDisconnectedSpaceαTopologicalSpaceToTopObjProfiniteToQuiverToCategoryStructCategoryCompHausCategoryToPrefunctorProfiniteToCompHausTopologicalSpace_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#instTotallyDisconnectedSpaceαTopologicalSpaceToTopObjProfiniteToQuiverToCategoryStructCategoryCompHausCategoryToPrefunctorProfiniteToCompHausTopologicalSpace_coe\"><span class=\"name\">instTotallyDisconnectedSpaceαTopologicalSpaceToTopObjProfiniteToQuiverToCategoryStructCategoryCompHausCategoryToPrefunctorProfiniteToCompHausTopologicalSpace_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/TotallyDisconnected.html#TotallyDisconnectedSpace\">TotallyDisconnectedSpace</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.obj <span class=\"fn\">X</span></span>)</span>.toTop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L147-L148","name":"instFaithfulProfiniteCategoryCompHausCategoryProfiniteToCompHaus","line":147,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#instFaithfulProfiniteCategoryCompHausCategoryProfiniteToCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#instFaithfulProfiniteCategoryCompHausCategoryProfiniteToCompHaus\"><span class=\"name\">instFaithfulProfiniteCategoryCompHausCategoryProfiniteToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L144-L145","name":"instFullProfiniteCategoryCompHausCategoryProfiniteToCompHaus","line":144,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#instFullProfiniteCategoryCompHausCategoryProfiniteToCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#instFullProfiniteCategoryCompHausCategoryProfiniteToCompHaus\"><span class=\"name\">instFullProfiniteCategoryCompHausCategoryProfiniteToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L138-L139","name":"profiniteToCompHaus","line":138,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus","doc":"The fully faithful embedding of `Profinite` in `CompHaus`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\"><span class=\"name\">profiniteToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L137-L137","name":"profiniteToCompHaus_map","line":137,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus_map\"><span class=\"name\">profiniteToCompHaus_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.InducedCategory\">CategoryTheory.InducedCategory</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus\">Profinite.toCompHaus</a></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L137-L137","name":"profiniteToCompHaus_obj","line":137,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus_obj\"><span class=\"name\">profiniteToCompHaus_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.obj <span class=\"fn\">self</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.toCompHaus</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L129-L131","name":"Profinite.coe_comp","line":129,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.coe_comp\"><span class=\"name\">Profinite</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.map <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.map <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L123-L124","name":"Profinite.coe_id","line":123,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.coe_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.coe_id\"><span class=\"name\">Profinite</span>.<span class=\"name\">coe_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L111-L113","name":"Profinite.instT2SpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","line":111,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instT2SpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instT2SpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory\"><span class=\"name\">Profinite</span>.<span class=\"name\">instT2SpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L107-L109","name":"Profinite.instCompactSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","line":107,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instCompactSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instCompactSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory\"><span class=\"name\">Profinite</span>.<span class=\"name\">instCompactSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L103-L105","name":"Profinite.instTotallyDisconnectedSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","line":103,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instTotallyDisconnectedSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instTotallyDisconnectedSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory\"><span class=\"name\">Profinite</span>.<span class=\"name\">instTotallyDisconnectedSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategoryInstTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/TotallyDisconnected.html#TotallyDisconnectedSpace\">TotallyDisconnectedSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L99-L101","name":"Profinite.instTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","line":99,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory\"><span class=\"name\">Profinite</span>.<span class=\"name\">instTopologicalSpaceObjProfiniteToQuiverToCategoryStructCategoryTypeTypesToPrefunctorForgetConcreteCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L88-L89","name":"Profinite.instTotallyDisconnectedSpaceαTopologicalSpaceToTopToCompHausTopologicalSpace_coe","line":88,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instTotallyDisconnectedSpaceαTopologicalSpaceToTopToCompHausTopologicalSpace_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instTotallyDisconnectedSpaceαTopologicalSpaceToTopToCompHausTopologicalSpace_coe\"><span class=\"name\">Profinite</span>.<span class=\"name\">instTotallyDisconnectedSpaceαTopologicalSpaceToTopToCompHausTopologicalSpace_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/TotallyDisconnected.html#TotallyDisconnectedSpace\">TotallyDisconnectedSpace</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L84-L86","name":"Profinite.forget_ContinuousMap_mk","line":84,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.forget_ContinuousMap_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.forget_ContinuousMap_mk\"><span class=\"name\">Profinite</span>.<span class=\"name\">forget_ContinuousMap_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.toCompHaus</span>.toTop</span></span> → <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.toCompHaus</span>.toTop</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span>.map <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.mk\">ContinuousMap.mk</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L79-L80","name":"Profinite.instCoeSortProfiniteType","line":79,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instCoeSortProfiniteType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instCoeSortProfiniteType\"><span class=\"name\">Profinite</span>.<span class=\"name\">instCoeSortProfiniteType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L75-L76","name":"Profinite.hasForget₂","line":75,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.hasForget₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.hasForget₂\"><span class=\"name\">Profinite</span>.<span class=\"name\">hasForget₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L71-L72","name":"Profinite.concreteCategory","line":71,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.concreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.concreteCategory\"><span class=\"name\">Profinite</span>.<span class=\"name\">concreteCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L67-L68","name":"Profinite.category","line":67,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.category","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.category\"><span class=\"name\">Profinite</span>.<span class=\"name\">category</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_1, u_1 + 1}</a>          <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L64-L65","name":"Profinite.instInhabitedProfinite","line":64,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instInhabitedProfinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.instInhabitedProfinite\"><span class=\"name\">Profinite</span>.<span class=\"name\">instInhabitedProfinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L59-L61","name":"Profinite.of","line":59,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.of","doc":"Construct a term of `Profinite` from a type endowed with the structure of a\ncompact, Hausdorff and totally disconnected topological space.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.of\"><span class=\"name\">Profinite</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/TotallyDisconnected.html#TotallyDisconnectedSpace\">TotallyDisconnectedSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L51-L51","name":"Profinite.isTotallyDisconnected","line":51,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isTotallyDisconnected","doc":"A profinite space is totally disconnected. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.isTotallyDisconnected\"><span class=\"name\">Profinite</span>.<span class=\"name\">isTotallyDisconnected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/TotallyDisconnected.html#TotallyDisconnectedSpace\">TotallyDisconnectedSpace</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.toCompHaus</span>.toTop</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L49-L49","name":"Profinite.toCompHaus","line":49,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus","doc":"The underlying compact Hausdorff space of a profinite space. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toCompHaus\"><span class=\"name\">Profinite</span>.<span class=\"name\">toCompHaus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L47-L47","name":"Profinite.mk","line":47,"kind":"ctor","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.mk\"><span class=\"name\">Profinite</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toCompHaus : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[isTotallyDisconnected : <span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/TotallyDisconnected.html#TotallyDisconnectedSpace\">TotallyDisconnectedSpace</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">toCompHaus</span>.toTop</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Basic.lean#L47-L51","name":"Profinite","line":47,"kind":"structure","docLink":"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite","doc":"The type of profinite topological spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\"><span class=\"name\">Profinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}