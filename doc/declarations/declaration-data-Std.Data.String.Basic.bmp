{"name":"Std.Data.String.Basic","instances":[{"typeNames":["String","Substring"],"name":"instCoeStringSubstring","className":"Coe"}],"imports":["Init","Std.Data.Nat.Lemmas","Std.Data.Array.Match"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L195-L196","name":"String.count","line":195,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.count","doc":"Count the occurrences of a character in a string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.count\"><span class=\"name\">String</span>.<span class=\"name\">count</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L191-L192","name":"String.stripSuffix","line":191,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.stripSuffix","doc":"`s.stripSuffix suff` will remove `suff` from the end of `s` if it occurs there,\nor otherwise return `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.stripSuffix\"><span class=\"name\">String</span>.<span class=\"name\">stripSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suff : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L186-L187","name":"String.stripPrefix","line":186,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.stripPrefix","doc":"`s.stripPrefix pre` will remove `pre` from the beginning of `s` if it occurs there,\nor otherwise return `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.stripPrefix\"><span class=\"name\">String</span>.<span class=\"name\">stripPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L181-L182","name":"String.dropSuffix?","line":181,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.dropSuffix?","doc":"If `suff` is a suffix of `s`, i.e. `s = t ++ suff`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.dropSuffix?\"><span class=\"name\">String</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suff : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L175-L176","name":"String.dropPrefix?","line":175,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.dropPrefix?","doc":"If `pre` is a prefix of `s`, i.e. `s = pre ++ t`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.dropPrefix?\"><span class=\"name\">String</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L169-L170","name":"String.containsSubstr","line":169,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.containsSubstr","doc":"Returns true iff `pattern` occurs as a substring of `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.containsSubstr\"><span class=\"name\">String</span>.<span class=\"name\">containsSubstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L165-L166","name":"String.findSubstr?","line":165,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.findSubstr?","doc":"Returns the first substring of `s` that matches `pattern`,\nor `none` if there is no such substring.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.findSubstr?\"><span class=\"name\">String</span>.<span class=\"name\">findSubstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L161-L162","name":"String.findAllSubstr","line":161,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.findAllSubstr","doc":"Returns all the substrings of `s` that match `pattern`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.findAllSubstr\"><span class=\"name\">String</span>.<span class=\"name\">findAllSubstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L153-L154","name":"Substring.containsSubstr","line":153,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.containsSubstr","doc":"Returns true iff `pattern` occurs as a substring of `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.containsSubstr\"><span class=\"name\">Substring</span>.<span class=\"name\">containsSubstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L147-L148","name":"Substring.findSubstr?","line":147,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.findSubstr?","doc":"Returns the first substring of `s` that matches `pattern`,\nor `none` if there is no such substring.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.findSubstr?\"><span class=\"name\">Substring</span>.<span class=\"name\">findSubstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L140-L141","name":"Substring.findAllSubstr","line":140,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.findAllSubstr","doc":"Returns all the substrings of `s` that match `pattern`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.findAllSubstr\"><span class=\"name\">Substring</span>.<span class=\"name\">findAllSubstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L130-L135","name":"Substring.dropSuffix?","line":130,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.dropSuffix?","doc":"If `suff` is a suffix of `s`, i.e. `s = t ++ suff`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.dropSuffix?\"><span class=\"name\">Substring</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suff : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L120-L125","name":"Substring.dropPrefix?","line":120,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.dropPrefix?","doc":"If `pre` is a prefix of `s`, i.e. `s = pre ++ t`, returns the remainder `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.dropPrefix?\"><span class=\"name\">Substring</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L104-L114","name":"Substring.commonSuffix.loop","line":104,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.commonSuffix.loop","doc":"Returns the starting position of the common prefix, working down from `spos, tpos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.commonSuffix.loop\"><span class=\"name\">Substring</span>.<span class=\"name\">commonSuffix</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(spos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tpos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L100-L115","name":"Substring.commonSuffix","line":100,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.commonSuffix","doc":"Returns the longest common suffix of two substrings.\nThe returned substring will use the same underlying string as `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.commonSuffix\"><span class=\"name\">Substring</span>.<span class=\"name\">commonSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L85-L93","name":"Substring.commonPrefix.loop","line":85,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.commonPrefix.loop","doc":"Returns the ending position of the common prefix, working up from `spos, tpos`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.commonPrefix.loop\"><span class=\"name\">Substring</span>.<span class=\"name\">commonPrefix</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(spos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tpos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L81-L94","name":"Substring.commonPrefix","line":81,"kind":"def","docLink":"./Std/Data/String/Basic.html#Substring.commonPrefix","doc":"Returns the longest common prefix of two substrings.\nThe returned substring will use the same underlying string as `s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#Substring.commonPrefix\"><span class=\"name\">Substring</span>.<span class=\"name\">commonPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L65-L71","name":"String.Matcher.find?","line":65,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.Matcher.find?","doc":"Find the first substring of `s` matching `m.pattern`, or `none` if no such substring exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.find?\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L56-L62","name":"String.Matcher.findAll.loop","line":56,"kind":"opaque","docLink":"./Std/Data/String/Basic.html#String.Matcher.findAll.loop","doc":"Accumulator loop for `String.Matcher.findAll` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.findAll.loop\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">findAll</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(am : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L52-L62","name":"String.Matcher.findAll","line":52,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.Matcher.findAll","doc":"Find all substrings of `s` matching `m.pattern`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.findAll\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">findAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L49-L49","name":"String.Matcher.patternSize","line":49,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.Matcher.patternSize","doc":"The byte size of the string pattern for the matcher "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.patternSize\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">patternSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L45-L46","name":"String.Matcher.ofString","line":45,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.Matcher.ofString","doc":"Make KMP matcher from pattern string "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.ofString\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">ofString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L40-L42","name":"String.Matcher.ofSubstring","line":40,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.Matcher.ofSubstring","doc":"Make KMP matcher from pattern substring "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.ofSubstring\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">ofSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L37-L37","name":"String.Matcher.pattern","line":37,"kind":"def","docLink":"./Std/Data/String/Basic.html#String.Matcher.pattern","doc":"The pattern for the matcher "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.pattern\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">pattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L35-L35","name":"String.Matcher.mk","line":35,"kind":"ctor","docLink":"./Std/Data/String/Basic.html#String.Matcher.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher.mk\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toMatcher : <span class=\"fn\"><a href=\"./Std/Data/Array/Match.html#Array.Matcher\">Array.Matcher</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pattern : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/String/Basic.html#String.Matcher\">String.Matcher</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L35-L37","name":"String.Matcher","line":35,"kind":"structure","docLink":"./Std/Data/String/Basic.html#String.Matcher","doc":"Knuth-Morris-Pratt matcher type\n\nThis type is used to keep data for running the Knuth-Morris-Pratt (KMP) string matching algorithm.\nKMP is a linear time algorithm to locate all substrings of a string that match a given pattern.\nGenerating the algorithm data is also linear in the length of the pattern but the data can be\nre-used to match the same pattern over different strings.\n\nThe KMP data for a pattern string can be generated using `Matcher.ofString`. Then `Matcher.find?`\nand `Matcher.findAll` can be used to run the algorithm on an input string.\n```\ndef m := Matcher.ofString \"abba\"\n\n#eval Option.isSome <| m.find? \"AbbabbA\" -- false\n#eval Option.isSome <| m.find? \"aabbaa\" -- true\n\n#eval Array.size <| m.findAll \"abbabba\" -- 2\n#eval Array.size <| m.findAll \"abbabbabba\" -- 3\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Matcher\"><span class=\"name\">String</span>.<span class=\"name\">Matcher</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Std/Data/Array/Match.html#Array.Matcher\"><span class=\"name\">Array</span>.<span class=\"name\">Matcher</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L13-L14","name":"String.Pos.ne_zero_of_lt","line":13,"kind":"theorem","docLink":"./Std/Data/String/Basic.html#String.Pos.ne_zero_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#String.Pos.ne_zero_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_zero_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Basic.lean#L9-L9","name":"instCoeStringSubstring","line":9,"kind":"instance","docLink":"./Std/Data/String/Basic.html#instCoeStringSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Basic.html#instCoeStringSubstring\"><span class=\"name\">instCoeStringSubstring</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"}]}