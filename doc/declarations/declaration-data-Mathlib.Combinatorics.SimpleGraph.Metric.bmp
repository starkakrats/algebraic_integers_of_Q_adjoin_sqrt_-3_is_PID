{"name":"Mathlib.Combinatorics.SimpleGraph.Metric","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Connectivity","Mathlib.Data.Nat.Lattice"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L118-L122","name":"SimpleGraph.dist_comm","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_comm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dist_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">v</span> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L105-L110","name":"SimpleGraph.Connected.dist_triangle","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.dist_triangle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.dist_triangle\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">dist_triangle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hconn : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected\">SimpleGraph.Connected</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L99-L102","name":"SimpleGraph.nonempty_of_pos_dist","line":99,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.nonempty_of_pos_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.nonempty_of_pos_dist\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">nonempty_of_pos_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L95-L96","name":"SimpleGraph.dist_eq_zero_of_not_reachable","line":95,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_eq_zero_of_not_reachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_eq_zero_of_not_reachable\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dist_eq_zero_of_not_reachable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable\">SimpleGraph.Reachable</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L90-L92","name":"SimpleGraph.Connected.pos_dist_of_ne","line":90,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.pos_dist_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.pos_dist_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">pos_dist_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hconn : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected\">SimpleGraph.Connected</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hne : <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L86-L87","name":"SimpleGraph.Connected.dist_eq_zero_iff","line":86,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.dist_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.dist_eq_zero_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">dist_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hconn : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected\">SimpleGraph.Connected</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L81-L83","name":"SimpleGraph.Reachable.pos_dist_of_ne","line":81,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Reachable.pos_dist_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Reachable.pos_dist_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Reachable</span>.<span class=\"name\">pos_dist_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable\">SimpleGraph.Reachable</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hne : <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L77-L78","name":"SimpleGraph.Reachable.dist_eq_zero_iff","line":77,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Reachable.dist_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Reachable.dist_eq_zero_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Reachable</span>.<span class=\"name\">dist_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable\">SimpleGraph.Reachable</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L74-L74","name":"SimpleGraph.dist_self","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_self\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dist_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L70-L71","name":"SimpleGraph.dist_eq_zero_iff_eq_or_not_reachable","line":70,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_eq_zero_iff_eq_or_not_reachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_eq_zero_iff_eq_or_not_reachable\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dist_eq_zero_iff_eq_or_not_reachable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable\">SimpleGraph.Reachable</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L65-L66","name":"SimpleGraph.dist_le","line":65,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dist_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk\">SimpleGraph.Walk</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length\">SimpleGraph.Walk.length</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L60-L62","name":"SimpleGraph.Connected.exists_walk_of_dist","line":60,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.exists_walk_of_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Connected.exists_walk_of_dist\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">exists_walk_of_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hconn : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Connected\">SimpleGraph.Connected</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk\">SimpleGraph.Walk</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length\">SimpleGraph.Walk.length</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L55-L57","name":"SimpleGraph.Reachable.exists_walk_of_dist","line":55,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Reachable.exists_walk_of_dist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.Reachable.exists_walk_of_dist\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Reachable</span>.<span class=\"name\">exists_walk_of_dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Reachable\">SimpleGraph.Reachable</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk\">SimpleGraph.Walk</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity.html#SimpleGraph.Walk.length\">SimpleGraph.Walk.length</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\">SimpleGraph.dist</a> <span class=\"fn\">G</span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Metric.lean#L49-L50","name":"SimpleGraph.dist","line":49,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist","doc":"The distance between two vertices is the length of the shortest walk between them.\nIf no such walk exists, this uses the junk value of `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Metric.html#SimpleGraph.dist\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">dist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"}]}