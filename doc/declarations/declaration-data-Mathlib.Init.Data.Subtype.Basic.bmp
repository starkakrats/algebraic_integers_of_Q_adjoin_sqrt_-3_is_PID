{"name":"Mathlib.Init.Data.Subtype.Basic","instances":[],"imports":["Init","Std.Logic","Mathlib.Mathport.Rename"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Subtype/Basic.lean#L45-L46","name":"Subtype.inhabited","line":45,"kind":"def","docLink":"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.inhabited","doc":"If there is some element satisfying the predicate, then the subtype is inhabited. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.inhabited\"><span class=\"name\">Subtype</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Subtype/Basic.lean#L34-L35","name":"Subtype.ne_of_val_ne","line":34,"kind":"theorem","docLink":"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.ne_of_val_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.ne_of_val_ne\"><span class=\"name\">Subtype</span>.<span class=\"name\">ne_of_val_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> }</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> }</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a1</span>.val</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">a2</span>.val</span></span> → <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Subtype/Basic.lean#L28-L29","name":"Subtype.tag_irrelevant","line":28,"kind":"theorem","docLink":"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.tag_irrelevant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.tag_irrelevant\"><span class=\"name\">Subtype</span>.<span class=\"name\">tag_irrelevant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">a</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h1</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">a</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h2</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Subtype/Basic.lean#L22-L23","name":"Subtype.exists_of_subtype","line":22,"kind":"theorem","docLink":"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.exists_of_subtype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Subtype/Basic.html#Subtype.exists_of_subtype\"><span class=\"name\">Subtype</span>.<span class=\"name\">exists_of_subtype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> }</span> → <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></div></div>"}]}