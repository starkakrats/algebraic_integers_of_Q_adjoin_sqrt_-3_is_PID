{"name":"Mathlib.CategoryTheory.Bicategory.Coherence","instances":[{"typeNames":["Quiver.Hom"],"name":"CategoryTheory.FreeBicategory.locally_thin","className":"Subsingleton"}],"imports":["Init","Mathlib.CategoryTheory.PathCategory","Mathlib.CategoryTheory.Functor.FullyFaithful","Mathlib.CategoryTheory.Bicategory.Free","Mathlib.CategoryTheory.Bicategory.LocallyDiscrete"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L249-L254","name":"CategoryTheory.FreeBicategory.inclusion","line":249,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusion","doc":"The inclusion pseudofunctor from the locally discrete bicategory on the path category into the\nfree bicategory.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">inclusion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.Pseudofunctor\">CategoryTheory.Pseudofunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">B</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory\">CategoryTheory.FreeBicategory</a> <span class=\"fn\">B</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L239-L243","name":"CategoryTheory.FreeBicategory.inclusionMapCompAux","line":239,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionMapCompAux","doc":"Auxiliary definition for `inclusion`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionMapCompAux\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">inclusionMapCompAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\">f</span> }</span> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\">g</span> }</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\">f</span> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\">g</span> }</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L233-L235","name":"CategoryTheory.FreeBicategory.locally_thin","line":233,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.locally_thin","doc":"The coherence theorem for bicategories. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.locally_thin\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">locally_thin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory\">CategoryTheory.FreeBicategory</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory\">CategoryTheory.FreeBicategory</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.IsThin\">Quiver.IsThin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L218-L229","name":"CategoryTheory.FreeBicategory.normalizeEquiv","line":218,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeEquiv","doc":"Normalization as an equivalence of categories. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalizeEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L207-L214","name":"CategoryTheory.FreeBicategory.normalizeUnitIso","line":207,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeUnitIso","doc":"Auxiliary definition for `normalizeEquiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeUnitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalizeUnitIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory\">CategoryTheory.FreeBicategory</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory\">CategoryTheory.FreeBicategory</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.Pseudofunctor.mapFunctor\">CategoryTheory.Pseudofunctor.mapFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalize\">CategoryTheory.FreeBicategory.normalize</a> <span class=\"fn\">B</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionPath\">CategoryTheory.FreeBicategory.inclusionPath</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L197-L203","name":"CategoryTheory.FreeBicategory.normalize","line":197,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalize","doc":"The normalization pseudofunctor for the free bicategory on a quiver `B`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalize\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.Pseudofunctor\">CategoryTheory.Pseudofunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory\">CategoryTheory.FreeBicategory</a> <span class=\"fn\">B</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">B</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L188-L193","name":"CategoryTheory.FreeBicategory.normalizeAux_nil_comp","line":188,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux_nil_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux_nil_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalizeAux_nil_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">Quiver.Path.nil</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom.comp\">CategoryTheory.FreeBicategory.Hom.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">Quiver.Path.nil</span> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">Quiver.Path.nil</span> <span class=\"fn\">g</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L161-L183","name":"CategoryTheory.FreeBicategory.normalize_naturality","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalize_naturality","doc":"The 2-isomorphism `normalizeIso p f` is natural in `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalize_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalize_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeft\">CategoryTheory.Bicategory.whiskerLeft</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\">p</span> }</span></span>)</span> <span class=\"fn\">η</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeIso\">CategoryTheory.FreeBicategory.normalizeIso</a> <span class=\"fn\">p</span> <span class=\"fn\">g</span></span>)</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeIso\">CategoryTheory.FreeBicategory.normalizeIso</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.PrelaxFunctor.map₂\">CategoryTheory.PrelaxFunctor.map₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">p</span> <span class=\"fn\">g</span></span> }</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L148-L157","name":"CategoryTheory.FreeBicategory.normalizeAux_congr","line":148,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux_congr","doc":"Given a 2-morphism between `f` and `g` in the free bicategory, we have the equality\n`normalizeAux p f = normalizeAux p g`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux_congr\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalizeAux_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">p</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L136-L142","name":"CategoryTheory.FreeBicategory.normalizeIso","line":136,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeIso","doc":"A 2-isomorphism between a partially-normalized 1-morphism in the free bicategory to the\nfully-normalized 1-morphism.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalizeIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\">p</span> }</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\">CategoryTheory.FreeBicategory.normalizeAux</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L107-L110","name":"CategoryTheory.FreeBicategory.normalizeAux","line":107,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux","doc":"The normalization of the composition of `p : Path a b` and `f : Hom b c`.\n`p` will eventually be taken to be `nil` and we then get the normalization\nof `f` alone, but the auxiliary `p` is necessary for Lean to accept the definition of\n`normalizeIso` and the `whisker_left` case of `normalizeAux_congr` and `normalize_naturality`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.normalizeAux\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">normalizeAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L94-L98","name":"CategoryTheory.FreeBicategory.preinclusion_map₂","line":94,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion_map₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion_map₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">preinclusion_map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.PrelaxFunctor.map₂\">CategoryTheory.PrelaxFunctor.map₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.map <span class=\"fn\">g</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L89-L90","name":"CategoryTheory.FreeBicategory.preinclusion_obj","line":89,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">preinclusion_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\">CategoryTheory.FreeBicategory.preinclusion</a> <span class=\"fn\">B</span></span>)</span></span>)</span>.obj <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L81-L85","name":"CategoryTheory.FreeBicategory.preinclusion","line":81,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion","doc":"The inclusion from the locally discrete bicategory on the path category into the free bicategory\nas a prelax functor. This will be promoted to a pseudofunctor after proving the coherence theorem.\nSee `inclusion`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.preinclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">preinclusion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.PrelaxFunctor\">CategoryTheory.PrelaxFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">B</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory\">CategoryTheory.FreeBicategory</a> <span class=\"fn\">B</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L73-L74","name":"CategoryTheory.FreeBicategory.inclusionPath","line":73,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionPath","doc":"The discrete category on the paths includes into the category of 1-morphisms in the free\nbicategory.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionPath\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">inclusionPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L67-L68","name":"CategoryTheory.FreeBicategory.homCategory'","line":67,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.homCategory'","doc":"Category structure on `Hom a b`. In this file, we will use `Hom a b` for `a b : B`\n(precisely, `FreeBicategory.Hom a b`) instead of the definitionally equal expression\n`a ⟶ b` for `a b : FreeBicategory B`. The main reason is that we have to annoyingly write\n`@Quiver.Hom (FreeBicategory B) _ a b` to get the latter expression when given `a b : B`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.homCategory'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">homCategory'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{max u v, max u v}</a>               <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/Coherence.lean#L56-L58","name":"CategoryTheory.FreeBicategory.inclusionPathAux","line":56,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionPathAux","doc":"Auxiliary definition for `inclusionPath`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Coherence.html#CategoryTheory.FreeBicategory.inclusionPathAux\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeBicategory</span>.<span class=\"name\">inclusionPathAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.Hom\">CategoryTheory.FreeBicategory.Hom</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"}]}