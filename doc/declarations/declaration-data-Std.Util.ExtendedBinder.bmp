{"name":"Std.Util.ExtendedBinder","instances":[],"imports":["Init","Lean.Elab.MacroArgUtil","Lean.Linter.MissingDocs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L139-L140","name":"Std.ExtendedBinder.«binderTerm≠_»","line":139,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm≠_»","doc":"Declare `∃ x ≠ y, ...` as syntax for `∃ x, x ≠ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm≠_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«binderTerm≠_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L137-L138","name":"Std.ExtendedBinder.«binderTerm≤_»","line":137,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm≤_»","doc":"Declare `∃ x ≤ y, ...` as syntax for `∃ x, x ≤ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm≤_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«binderTerm≤_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L135-L136","name":"Std.ExtendedBinder.«binderTerm<_»","line":135,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm<_»","doc":"Declare `∃ x < y, ...` as syntax for `∃ x, x < y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm<_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«binderTerm<_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L133-L134","name":"Std.ExtendedBinder.«binderTerm≥_»","line":133,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm≥_»","doc":"Declare `∃ x ≥ y, ...` as syntax for `∃ x, x ≥ y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm≥_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«binderTerm≥_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L131-L132","name":"Std.ExtendedBinder.«binderTerm>_»","line":131,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm>_»","doc":"Declare `∃ x > y, ...` as syntax for `∃ x, x > y ∧ ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«binderTerm>_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«binderTerm>_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L126-L129","name":"Std.ExtendedBinder.checkBinderPredicate","line":126,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.checkBinderPredicate","doc":"Missing docs handler for `binder_predicate` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.checkBinderPredicate\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">checkBinderPredicate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Linter/MissingDocs.html#Lean.Linter.MissingDocs.SimpleHandler\">Lean.Linter.MissingDocs.SimpleHandler</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L92-L100","name":"Std.ExtendedBinder.binderPredicate","line":92,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.binderPredicate","doc":"Declares a binder predicate.  For example:\n```\nbinder_predicate x \" > \" y:term => `($x > $y)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.binderPredicate\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">binderPredicate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L78-L79","name":"Std.ExtendedBinder.«term∀ᵉ_,_»","line":78,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∀ᵉ_,_»","doc":"The syntax `∀ᵉ (x < 2) (y < 3), p x y` is shorthand for `∀ x < 2, ∀ y < 3, p x y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∀ᵉ_,_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«term∀ᵉ_,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L67-L68","name":"Std.ExtendedBinder.«term∃ᵉ_,_»","line":67,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∃ᵉ_,_»","doc":"The syntax `∃ᵉ (x < 2) (y < 3), p x y` is shorthand for `∃ x < 2, ∃ y < 3, p x y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∃ᵉ_,_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«term∃ᵉ_,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L64-L65","name":"Std.ExtendedBinder.extBinders","line":64,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinders","doc":"A single (unparenthesized) binder, or a list of parenthesized binders "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinders\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">extBinders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L62-L63","name":"Std.ExtendedBinder.extBinderCollection","line":62,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinderCollection","doc":"A list of parenthesized binders "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinderCollection\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">extBinderCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L60-L61","name":"Std.ExtendedBinder.extBinderParenthesized","line":60,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinderParenthesized","doc":"A extended binder in parentheses "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinderParenthesized\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">extBinderParenthesized</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L55-L59","name":"Std.ExtendedBinder.extBinder","line":55,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinder","doc":"An extended binder has the form `x`, `x : ty`, or `x pred`\nwhere `pred` is a `binderPred` like `< 2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.extBinder\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">extBinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L34-L38","name":"Std.ExtendedBinder.«term∀__,_»","line":34,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∀__,_»","doc":"The notation `∀ x < 2, p x` is shorthand for `∀ x, x < 2 → p x`,\nand similarly for other binary operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∀__,_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«term∀__,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L29-L33","name":"Std.ExtendedBinder.«term∃__,_»","line":29,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∃__,_»","doc":"The notation `∃ x < 2, p x` is shorthand for `∃ x, x < 2 ∧ p x`,\nand similarly for other binary operators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«term∃__,_»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«term∃__,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L22-L25","name":"Std.ExtendedBinder.«termSatisfies_binder_pred%__»","line":22,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«termSatisfies_binder_pred%__»","doc":"`satisfies_binder_pred% t pred` expands to a proposition expressing that `t` satisfies `pred`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.«termSatisfies_binder_pred%__»\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">«termSatisfies_binder_pred%__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L16-L20","name":"Lean.Parser.Category.binderPred","line":16,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Lean.Parser.Category.binderPred","doc":"The syntax category of binder predicates contains predicates like `> 0`, `∈ s`, etc.\n(`: t` should not be a binder predicate because it would clash with the built-in syntax for ∀/∃.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Lean.Parser.Category.binderPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">binderPred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Lean.Parser.Category</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/ExtendedBinder.lean#L16-L20","name":"Std.ExtendedBinder.binderPred.quot","line":16,"kind":"def","docLink":"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.binderPred.quot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/ExtendedBinder.html#Std.ExtendedBinder.binderPred.quot\"><span class=\"name\">Std</span>.<span class=\"name\">ExtendedBinder</span>.<span class=\"name\">binderPred</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}