{"name":"Mathlib.Tactic.Rify","instances":[],"imports":["Init","Mathlib.Tactic.Qify","Mathlib.Data.Real.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rify.lean#L82-L83","name":"Mathlib.Tactic.Rify.ofNat_rat_real","line":82,"kind":"theorem","docLink":"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.ofNat_rat_real","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.ofNat_rat_real\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rify</span>.<span class=\"name\">ofNat_rat_real</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Cast/Defs.html#Nat.AtLeastTwo\">Nat.AtLeastTwo</a> <span class=\"fn\">a</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rify.lean#L79-L79","name":"Mathlib.Tactic.Rify.rat_cast_ne","line":79,"kind":"theorem","docLink":"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_ne\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rify</span>.<span class=\"name\">rat_cast_ne</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rify.lean#L78-L78","name":"Mathlib.Tactic.Rify.rat_cast_lt","line":78,"kind":"theorem","docLink":"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_lt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rify</span>.<span class=\"name\">rat_cast_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rify.lean#L77-L77","name":"Mathlib.Tactic.Rify.rat_cast_le","line":77,"kind":"theorem","docLink":"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rify</span>.<span class=\"name\">rat_cast_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rify.lean#L76-L76","name":"Mathlib.Tactic.Rify.rat_cast_eq","line":76,"kind":"theorem","docLink":"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rat_cast_eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rify</span>.<span class=\"name\">rat_cast_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rify.lean#L40-L67","name":"Mathlib.Tactic.Rify.rify","line":40,"kind":"def","docLink":"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rify","doc":"The `rify` tactic is used to shift propositions from `ℕ`, `ℤ` or `ℚ` to `ℝ`.\nAlthough less useful than its cousins `zify` and `qify`, it can be useful when your\ngoal or context already involves real numbers.\n\nIn the example below, assumption `hn` is about natural numbers, `hk` is about integers\nand involves casting a natural number to `ℤ`, and the conclusion is about real numbers.\nThe proof uses `rify` to lift both assumptions to `ℝ` before calling `linarith`.\n```\nexample {n : ℕ} {k : ℤ} (hn : 8 ≤ n) (hk : 2 * k ≤ n + 2) :\n    (0 : ℝ) < n - k - 1 := by\n  rify at hn hk /- Now have hn : 8 ≤ (n : ℝ)   hk : 2 * (k : ℝ) ≤ (n : ℝ) + 2-/\n  linarith\n```\n\n`rify` makes use of the `@[zify_simps]`, `@[qify_simps]` and `@[rify_simps]` attributes to move\npropositions, and the `push_cast` tactic to simplify the `ℝ`-valued expressions.\n\n`rify` can be given extra lemmas to use in simplification. This is especially useful in the\npresence of nat subtraction: passing `≤` arguments will allow `push_cast` to do more work.\n```\nexample (a b c : ℕ) (h : a - b < c) (hab : b ≤ a) : a < b + c := by\n  rify [hab] at h ⊢\n  linarith\n```\nNote that `zify` or `qify` would work just as well in the above example (and `zify` is the natural\nchoice since it is enough to get rid of the pathological `ℕ` subtraction). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rify.html#Mathlib.Tactic.Rify.rify\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rify</span>.<span class=\"name\">rify</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}