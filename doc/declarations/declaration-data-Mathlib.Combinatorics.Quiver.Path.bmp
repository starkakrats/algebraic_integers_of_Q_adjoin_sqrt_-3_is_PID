{"name":"Mathlib.Combinatorics.Quiver.Path","instances":[{"typeNames":["Quiver.Path"],"name":"Quiver.Path.instInhabitedPath","className":"Inhabited"}],"imports":["Init","Mathlib.Combinatorics.Quiver.Basic","Mathlib.Logic.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L234-L235","name":"Prefunctor.mapPath_toPath","line":234,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_toPath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_toPath\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">mapPath_toPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">Prefunctor.mapPath</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">Quiver.Hom.toPath</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">Quiver.Hom.toPath</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L227-L230","name":"Prefunctor.mapPath_comp","line":227,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_comp\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">mapPath_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">Prefunctor.mapPath</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">Prefunctor.mapPath</a> <span class=\"fn\">F</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">Prefunctor.mapPath</a> <span class=\"fn\">F</span> <span class=\"fn\">q</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L221-L223","name":"Prefunctor.mapPath_cons","line":221,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_cons\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">mapPath_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">Prefunctor.mapPath</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">Prefunctor.mapPath</a> <span class=\"fn\">F</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L216-L217","name":"Prefunctor.mapPath_nil","line":216,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath_nil\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">mapPath_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">Prefunctor.mapPath</a> <span class=\"fn\">F</span> <span class=\"fn\">Quiver.Path.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Quiver.Path.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L210-L212","name":"Prefunctor.mapPath","line":210,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath","doc":"The image of a path under a prefunctor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\"><span class=\"name\">Prefunctor</span>.<span class=\"name\">mapPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L195-L196","name":"Quiver.Path.toList_inj","line":195,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_inj\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">toList_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\">V</span>), <span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList\">Quiver.Path.toList</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList\">Quiver.Path.toList</a> <span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L184-L191","name":"Quiver.Path.toList_injective","line":184,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_injective\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">toList_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\">V</span>), <span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">Quiver.Path.toList</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L176-L179","name":"Quiver.Path.toList_chain_nonempty","line":176,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_chain_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_chain_nonempty\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">toList_chain_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Chain\">List.Chain</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> y : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList\">Quiver.Path.toList</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L171-L173","name":"Quiver.Path.toList_comp","line":171,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_comp","doc":"`Quiver.Path.toList` is a contravariant functor. The inversion comes from `Quiver.Path` and\n`List` having different preferred directions for adding elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">toList_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList\">Quiver.Path.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList\">Quiver.Path.toList</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList\">Quiver.Path.toList</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L163-L165","name":"Quiver.Path.toList","line":163,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList","doc":"Turn a path into a list. The list contains `a` at its head, but not `b` a priori. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.toList\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L157-L158","name":"Quiver.Path.comp_inj_right","line":157,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj_right\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_inj_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">q₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L152-L153","name":"Quiver.Path.comp_inj_left","line":152,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj_left\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_inj_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p₁</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p₂</span> <span class=\"fn\">q</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L147-L148","name":"Quiver.Path.comp_injective_right","line":147,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_injective_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_injective_right\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_injective_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L143-L144","name":"Quiver.Path.comp_injective_left","line":143,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_injective_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_injective_left\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_injective_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L137-L140","name":"Quiver.Path.comp_inj'","line":137,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj'\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_inj'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">p₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p₁</span> <span class=\"fn\">q₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p₂</span> <span class=\"fn\">q₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">q₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L123-L134","name":"Quiver.Path.comp_inj","line":123,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_inj\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">q₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">q₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p₁</span> <span class=\"fn\">q₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p₂</span> <span class=\"fn\">q₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">q₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L118-L120","name":"Quiver.Path.length_comp","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">length_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L111-L114","name":"Quiver.Path.comp_assoc","line":111,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_assoc\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">q</span> <span class=\"fn\">r</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L105-L107","name":"Quiver.Path.nil_comp","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">nil_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">Quiver.Path.nil</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L100-L101","name":"Quiver.Path.comp_nil","line":100,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">Quiver.Path.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L94-L96","name":"Quiver.Path.comp_cons","line":94,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">q</span> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\">Quiver.Path.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span>)</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L88-L90","name":"Quiver.Path.comp","line":88,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp","doc":"Composition of paths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L81-L84","name":"Quiver.Path.eq_of_length_zero","line":81,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.eq_of_length_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.eq_of_length_zero\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">eq_of_length_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hzero : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L77-L78","name":"Quiver.Path.length_cons","line":77,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">length_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L72-L73","name":"Quiver.Path.length_nil","line":72,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">length_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">Quiver.Path.length</a> <span class=\"fn\">Quiver.Path.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L68-L69","name":"Quiver.Path.instInhabitedPath","line":68,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.instInhabitedPath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.instInhabitedPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">instInhabitedPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L63-L65","name":"Quiver.Path.length","line":63,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length","doc":"The length of a path is the number of arrows it uses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L58-L59","name":"Quiver.Path.hom_heq_of_cons_eq_cons","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.hom_heq_of_cons_eq_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.hom_heq_of_cons_eq_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">hom_heq_of_cons_eq_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e' : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p'</span> <span class=\"fn\">e'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">e</span> <span class=\"fn\">e'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L54-L55","name":"Quiver.Path.heq_of_cons_eq_cons","line":54,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.heq_of_cons_eq_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.heq_of_cons_eq_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">heq_of_cons_eq_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e' : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p'</span> <span class=\"fn\">e'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">p</span> <span class=\"fn\">p'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L50-L51","name":"Quiver.Path.obj_eq_of_cons_eq_cons","line":50,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.obj_eq_of_cons_eq_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.obj_eq_of_cons_eq_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">obj_eq_of_cons_eq_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e' : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p'</span> <span class=\"fn\">e'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L46-L47","name":"Quiver.Path.cons_ne_nil","line":46,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons_ne_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons_ne_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cons_ne_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">Quiver.Path.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L42-L43","name":"Quiver.Path.nil_ne_cons","line":42,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil_ne_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil_ne_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">nil_ne_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Quiver.Path.nil</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L34-L35","name":"Quiver.Hom.toPath","line":34,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath","doc":"An arrow viewed as a path of length one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">toPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L27-L27","name":"Quiver.Path.cons","line":27,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L26-L26","name":"Quiver.Path.nil","line":26,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/Path.lean#L25-L27","name":"Quiver.Path","line":25,"kind":"inductive","docLink":"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path","doc":"`Path a b` is the type of paths from `a` to `b` through the arrows of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Sort</a> (max (u + 1) v)</span></div></div>"}]}