{"name":"Std.Tactic.Relation.Symm","instances":[],"imports":["Init","Lean.Meta.Reduce","Lean.Elab.Tactic.Location","Std.Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Relation/Symm.lean#L110-L119","name":"Std.Tactic.tacticSymm_","line":110,"kind":"def","docLink":"./Std/Tactic/Relation/Symm.html#Std.Tactic.tacticSymm_","doc":"* `symm` applies to a goal whose target has the form `t ~ u` where `~` is a symmetric relation,\n  that is, a relation which has a symmetry lemma tagged with the attribute [symm].\n  It replaces the target with `u ~ t`.\n* `symm at h` will rewrite a hypothesis `h : t ~ u` to `h : u ~ t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Relation/Symm.html#Std.Tactic.tacticSymm_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticSymm_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Relation/Symm.lean#L100-L102","name":"Lean.MVarId.applySymmAt","line":100,"kind":"def","docLink":"./Std/Tactic/Relation/Symm.html#Lean.MVarId.applySymmAt","doc":"Use a symmetry lemma (i.e. marked with `@[symm]`) to replace a hypothesis in a goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Relation/Symm.html#Lean.MVarId.applySymmAt\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">applySymmAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(h : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Relation/Symm.lean#L85-L97","name":"Lean.MVarId.applySymm","line":85,"kind":"def","docLink":"./Std/Tactic/Relation/Symm.html#Lean.MVarId.applySymm","doc":"Apply a symmetry lemma (i.e. marked with `@[symm]`) to a metavariable.\n\nThe type of `g` should be of the form `a ~ b`, and is used to index the symm lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Relation/Symm.html#Lean.MVarId.applySymm\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">applySymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Relation/Symm.lean#L62-L73","name":"Lean.Expr.applySymm","line":62,"kind":"def","docLink":"./Std/Tactic/Relation/Symm.html#Lean.Expr.applySymm","doc":"Given a term `e : a ~ b`, construct a term in `b ~ a` using `@[symm]` lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Relation/Symm.html#Lean.Expr.applySymm\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">applySymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Relation/Symm.lean#L56-L59","name":"Lean.Expr.getSymmLems","line":56,"kind":"def","docLink":"./Std/Tactic/Relation/Symm.html#Lean.Expr.getSymmLems","doc":"Return the symmetry lemmas that match the target type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Relation/Symm.html#Lean.Expr.getSymmLems\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getSymmLems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tgt : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Relation/Symm.lean#L26-L32","name":"Std.Tactic.symmExt","line":26,"kind":"opaque","docLink":"./Std/Tactic/Relation/Symm.html#Std.Tactic.symmExt","doc":"Environment extensions for symm lemmas "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Relation/Symm.html#Std.Tactic.symmExt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">symmExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Relation/Symm.lean#L24-L24","name":"Std.Tactic.symmExt.config","line":24,"kind":"def","docLink":"./Std/Tactic/Relation/Symm.html#Std.Tactic.symmExt.config","doc":"Discrimation tree settings for the `symm` extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Relation/Symm.html#Std.Tactic.symmExt.config\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">symmExt</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"}]}