{"name":"Aesop.BuiltinRules.Subst","instances":[],"imports":["Init","Aesop.Frontend.Attribute"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/BuiltinRules/Subst.lean#L81-L99","name":"Aesop.BuiltinRules.subst","line":81,"kind":"def","docLink":"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.subst\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Basic.html#Aesop.RuleTac\">Aesop.RuleTac</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/BuiltinRules/Subst.lean#L77-L78","name":"Aesop.BuiltinRules.tacticAesop_subst_","line":77,"kind":"def","docLink":"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.tacticAesop_subst_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.tacticAesop_subst_\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">tacticAesop_subst_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/BuiltinRules/Subst.lean#L74-L75","name":"Aesop.BuiltinRules.«tacticAesop_subst[_,,]»","line":74,"kind":"def","docLink":"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.«tacticAesop_subst[_,,]»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.«tacticAesop_subst[_,,]»\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">«tacticAesop_subst[_,,]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/BuiltinRules/Subst.lean#L63-L72","name":"Aesop.BuiltinRules.elabAesopSubst","line":63,"kind":"def","docLink":"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.elabAesopSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.elabAesopSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">elabAesopSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/BuiltinRules/Subst.lean#L41-L60","name":"Aesop.BuiltinRules.substFVars","line":41,"kind":"def","docLink":"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.substFVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules/Subst.html#Aesop.BuiltinRules.substFVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">substFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarIds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Lean.Meta.FVarSubst</a></span></span>)</span></span></div></div>"}]}