{"name":"Std.Data.BitVec.Lemmas","instances":[],"imports":["Init","Std.Data.Bool","Std.Data.BitVec.Basic","Std.Data.Nat.Lemmas","Std.Tactic.Simpa"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L165-L167","name":"Std.BitVec.add_zero","line":165,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.add_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L163-L163","name":"Std.BitVec.toNat_add","line":163,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_add","doc":"Definition of bitvector addition as a nat.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_add\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L147-L156","name":"Std.BitVec.truncate_succ","line":147,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_succ\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">truncate_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\">Std.BitVec.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L143-L145","name":"Std.BitVec.getLsb_truncate","line":143,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_truncate\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L139-L141","name":"Std.BitVec.getLsb_zeroExtend","line":139,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_zeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L135-L137","name":"Std.BitVec.getLsb_zeroExtend'","line":135,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_zeroExtend'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_zeroExtend'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ge : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend'\">Std.BitVec.zeroExtend'</a> <span class=\"fn\">ge</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L132-L133","name":"Std.BitVec.toNat_truncate","line":132,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_truncate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_truncate\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L130-L130","name":"Std.BitVec.truncate_eq","line":130,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.truncate_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">truncate_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L126-L128","name":"Std.BitVec.zeroExtend_zero","line":126,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">m</span> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L121-L124","name":"Std.BitVec.zeroExtend_eq","line":121,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.zeroExtend_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L111-L119","name":"Std.BitVec.toNat_zeroExtend","line":111,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_zeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\">Std.BitVec.zeroExtend</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L106-L109","name":"Std.BitVec.toNat_zeroExtend'","line":106,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zeroExtend'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_zeroExtend'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend'\">Std.BitVec.zeroExtend'</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L89-L102","name":"Std.BitVec.getLsb_cons","line":89,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_cons\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\">Std.BitVec.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span> then <span class=\"fn\">b</span> else <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L83-L85","name":"Std.BitVec.toNat_cons","line":83,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cons\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\">Std.BitVec.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.toNat\">Bool.toNat</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L81-L81","name":"Std.BitVec.toNat_cast","line":81,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">e</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L78-L79","name":"Std.BitVec.toNat_append","line":78,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_append\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L67-L76","name":"Std.BitVec.ofNat_toNat","line":67,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.ofNat_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span>)</span>#<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\">Std.BitVec.truncate</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L62-L62","name":"Std.BitVec.toNat_zero","line":62,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L59-L60","name":"Std.BitVec.toNat_ofNat","line":59,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">w</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L57-L57","name":"Std.BitVec.toNat_ofFin","line":57,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">{ <span class=\"fn\">toFin</span> := <span class=\"fn\">x</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L54-L55","name":"Std.BitVec.toNat_ofBool","line":54,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_ofBool\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_ofBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Bool.html#Bool.toNat\">Bool.toNat</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L35-L52","name":"Std.BitVec.eq_of_getMsb_eq","line":35,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getMsb_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getMsb_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_of_getMsb_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">i</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\">Std.BitVec.getMsb</a> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">i</span>.val</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L24-L33","name":"Std.BitVec.eq_of_getLsb_eq","line":24,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getLsb_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_getLsb_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_of_getLsb_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">i</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">y</span> <span class=\"fn\"><span class=\"fn\">i</span>.val</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L18-L22","name":"Std.BitVec.getLsb_ge","line":18,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.getLsb_ge\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ge : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L16-L16","name":"Std.BitVec.testBit_toNat","line":16,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.testBit_toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.testBit_toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">testBit_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Nat/Basic.html#Nat.testBit\">Nat.testBit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\">Std.BitVec.getLsb</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L13-L14","name":"Std.BitVec.toNat_eq","line":13,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.toNat_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Lemmas.lean#L10-L11","name":"Std.BitVec.eq_of_toNat_eq","line":10,"kind":"theorem","docLink":"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_toNat_eq","doc":"Prove equality of bitvectors in terms of nat operations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Lemmas.html#Std.BitVec.eq_of_toNat_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_of_toNat_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">j</span></span></span> → <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span></span></div></div>"}]}