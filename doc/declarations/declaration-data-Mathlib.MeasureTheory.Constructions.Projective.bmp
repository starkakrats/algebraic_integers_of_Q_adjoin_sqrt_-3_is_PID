{"name":"Mathlib.MeasureTheory.Constructions.Projective","instances":[],"imports":["Init","Mathlib.MeasureTheory.Constructions.Cylinders","Mathlib.MeasureTheory.Measure.Typeclasses"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L145-L152","name":"MeasureTheory.IsProjectiveLimit.unique","line":145,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.unique","doc":"The projective limit of a family of finite measures is unique. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.unique\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveLimit</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">μ</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">ν</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L140-L142","name":"MeasureTheory.IsProjectiveLimit.measure_univ_unique","line":140,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.measure_univ_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.measure_univ_unique\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveLimit</span>.<span class=\"name\">measure_univ_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">μ</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">ν</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L134-L138","name":"MeasureTheory.IsProjectiveLimit.isProbabilityMeasure","line":134,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.isProbabilityMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.isProbabilityMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveLimit</span>.<span class=\"name\">isProbabilityMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsProbabilityMeasure\">MeasureTheory.IsProbabilityMeasure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">μ</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsProbabilityMeasure\">MeasureTheory.IsProbabilityMeasure</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L128-L132","name":"MeasureTheory.IsProjectiveLimit.isFiniteMeasure","line":128,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.isFiniteMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.isFiniteMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveLimit</span>.<span class=\"name\">isFiniteMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">μ</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L124-L126","name":"MeasureTheory.IsProjectiveLimit.measure_univ_eq","line":124,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.measure_univ_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.measure_univ_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveLimit</span>.<span class=\"name\">measure_univ_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">μ</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">I</span></span>)</span></span> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L118-L122","name":"MeasureTheory.IsProjectiveLimit.measure_cylinder","line":118,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.measure_cylinder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit.measure_cylinder\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveLimit</span>.<span class=\"name\">measure_cylinder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\">MeasureTheory.IsProjectiveLimit</a> <span class=\"fn\">μ</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Cylinders.html#MeasureTheory.cylinder\">MeasureTheory.cylinder</a> <span class=\"fn\">I</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">I</span></span>)</span></span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L110-L112","name":"MeasureTheory.IsProjectiveLimit","line":110,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit","doc":"A measure `μ` is the projective limit of a family of measures indexed by finite sets of `ι` if\nfor all `I : Finset ι`, the projection from `∀ i, α i` to `∀ i : I, α i` maps `μ` to `P I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveLimit\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L88-L104","name":"MeasureTheory.IsProjectiveMeasureFamily.congr_cylinder","line":88,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.congr_cylinder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.congr_cylinder\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveMeasureFamily</span>.<span class=\"name\">congr_cylinder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hP : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily\">MeasureTheory.IsProjectiveMeasureFamily</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hT : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Cylinders.html#MeasureTheory.cylinder\">MeasureTheory.cylinder</a> <span class=\"fn\">I</span> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Cylinders.html#MeasureTheory.cylinder\">MeasureTheory.cylinder</a> <span class=\"fn\">J</span> <span class=\"fn\">T</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">I</span></span>)</span></span> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">J</span></span>)</span></span> <span class=\"fn\">T</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L67-L86","name":"MeasureTheory.IsProjectiveMeasureFamily.congr_cylinder_of_subset","line":67,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.congr_cylinder_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.congr_cylinder_of_subset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveMeasureFamily</span>.<span class=\"name\">congr_cylinder_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hP : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily\">MeasureTheory.IsProjectiveMeasureFamily</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hT : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Cylinders.html#MeasureTheory.cylinder\">MeasureTheory.cylinder</a> <span class=\"fn\">I</span> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Cylinders.html#MeasureTheory.cylinder\">MeasureTheory.cylinder</a> <span class=\"fn\">J</span> <span class=\"fn\">T</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hJI : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">I</span></span>)</span></span> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">J</span></span>)</span></span> <span class=\"fn\">T</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L61-L65","name":"MeasureTheory.IsProjectiveMeasureFamily.measure_univ_eq","line":61,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.measure_univ_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.measure_univ_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveMeasureFamily</span>.<span class=\"name\">measure_univ_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hP : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily\">MeasureTheory.IsProjectiveMeasureFamily</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">I</span></span>)</span></span> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">J</span></span>)</span></span> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L51-L59","name":"MeasureTheory.IsProjectiveMeasureFamily.measure_univ_eq_of_subset","line":51,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.measure_univ_eq_of_subset","doc":"Auxiliary lemma for `measure_univ_eq`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily.measure_univ_eq_of_subset\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveMeasureFamily</span>.<span class=\"name\">measure_univ_eq_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hP : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily\">MeasureTheory.IsProjectiveMeasureFamily</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hJI : <span class=\"fn\"><span class=\"fn\">J</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">I</span></span>)</span></span> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">J</span></span>)</span></span> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Constructions/Projective.lean#L41-L44","name":"MeasureTheory.IsProjectiveMeasureFamily","line":41,"kind":"def","docLink":"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily","doc":"A family of measures indexed by finite sets of `ι` is projective if, for finite sets `J ⊆ I`,\nthe projection from `∀ i : I, α i` to `∀ i : J, α i` maps `P I` to `P J`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Constructions/Projective.html#MeasureTheory.IsProjectiveMeasureFamily\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">IsProjectiveMeasureFamily</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}