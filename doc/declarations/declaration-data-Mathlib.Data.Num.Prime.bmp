{"name":"Mathlib.Data.Num.Prime","instances":[{"typeNames":["PosNum.Prime"],"name":"PosNum.decidablePrime","className":"Decidable"},{"typeNames":["Num.Prime"],"name":"Num.decidablePrime","className":"Decidable"}],"imports":["Init","Mathlib.Data.Num.Lemmas","Mathlib.Data.Nat.Prime","Mathlib.Tactic.Ring"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L130-L132","name":"Num.decidablePrime","line":130,"kind":"instance","docLink":"./Mathlib/Data/Num/Prime.html#Num.decidablePrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#Num.decidablePrime\"><span class=\"name\">Num</span>.<span class=\"name\">decidablePrime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <a href=\"./Mathlib/Data/Num/Prime.html#Num.Prime\">Num.Prime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L126-L127","name":"Num.Prime","line":126,"kind":"def","docLink":"./Mathlib/Data/Num/Prime.html#Num.Prime","doc":"Primality predicate for a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#Num.Prime\"><span class=\"name\">Num</span>.<span class=\"name\">Prime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L119-L121","name":"Num.minFac_to_nat","line":119,"kind":"theorem","docLink":"./Mathlib/Data/Num/Prime.html#Num.minFac_to_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#Num.minFac_to_nat\"><span class=\"name\">Num</span>.<span class=\"name\">minFac_to_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Prime.html#Num.minFac\">Num.minFac</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime.html#Nat.minFac\">Nat.minFac</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L113-L115","name":"Num.minFac","line":113,"kind":"def","docLink":"./Mathlib/Data/Num/Prime.html#Num.minFac","doc":"Returns the smallest prime factor of `n ≠ 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#Num.minFac\"><span class=\"name\">Num</span>.<span class=\"name\">minFac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L91-L105","name":"PosNum.decidablePrime","line":91,"kind":"instance","docLink":"./Mathlib/Data/Num/Prime.html#PosNum.decidablePrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#PosNum.decidablePrime\"><span class=\"name\">PosNum</span>.<span class=\"name\">decidablePrime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <a href=\"./Mathlib/Data/Num/Prime.html#PosNum.Prime\">PosNum.Prime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L87-L88","name":"PosNum.Prime","line":87,"kind":"def","docLink":"./Mathlib/Data/Num/Prime.html#PosNum.Prime","doc":"Primality predicate for a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#PosNum.Prime\"><span class=\"name\">PosNum</span>.<span class=\"name\">Prime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L65-L82","name":"PosNum.minFac_to_nat","line":65,"kind":"theorem","docLink":"./Mathlib/Data/Num/Prime.html#PosNum.minFac_to_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#PosNum.minFac_to_nat\"><span class=\"name\">PosNum</span>.<span class=\"name\">minFac_to_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Prime.html#PosNum.minFac\">PosNum.minFac</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime.html#Nat.minFac\">Nat.minFac</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L58-L61","name":"PosNum.minFac","line":58,"kind":"def","docLink":"./Mathlib/Data/Num/Prime.html#PosNum.minFac","doc":"Returns the smallest prime factor of `n ≠ 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#PosNum.minFac\"><span class=\"name\">PosNum</span>.<span class=\"name\">minFac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L44-L54","name":"PosNum.minFacAux_to_nat","line":44,"kind":"theorem","docLink":"./Mathlib/Data/Num/Prime.html#PosNum.minFacAux_to_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#PosNum.minFacAux_to_nat\"><span class=\"name\">PosNum</span>.<span class=\"name\">minFacAux_to_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fuel : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Nat/Basic.html#Nat.sqrt\">Nat.sqrt</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">fuel</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit1\">PosNum.bit1</a> <span class=\"fn\">k</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Prime.html#PosNum.minFacAux\">PosNum.minFacAux</a> <span class=\"fn\">n</span> <span class=\"fn\">fuel</span> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime.html#Nat.minFacAux\">Nat.minFacAux</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit1\">PosNum.bit1</a> <span class=\"fn\">k</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Prime.lean#L37-L40","name":"PosNum.minFacAux","line":37,"kind":"def","docLink":"./Mathlib/Data/Num/Prime.html#PosNum.minFacAux","doc":"Auxiliary function for computing the smallest prime factor of a `PosNum`. Unlike\n`Nat.minFacAux`, we use a natural number `fuel` variable that is set to an upper bound on the\nnumber of iterations. It is initialized to the number `n` we are determining primality for. Even\nthough this is exponential in the input (since it is a `Nat`, not a `Num`), it will get lazily\nevaluated during kernel reduction, so we will only require about `sqrt n` unfoldings, for the\n`sqrt n` iterations of the loop. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Prime.html#PosNum.minFacAux\"><span class=\"name\">PosNum</span>.<span class=\"name\">minFacAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></span></div></div>"}]}