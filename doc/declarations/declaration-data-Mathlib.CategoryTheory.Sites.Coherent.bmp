{"name":"Mathlib.CategoryTheory.Sites.Coherent","instances":[],"imports":["Init","Mathlib.CategoryTheory.Sites.Canonical","Mathlib.CategoryTheory.Sites.Coverage","Mathlib.CategoryTheory.Sites.EffectiveEpimorphic","Mathlib.Data.Fintype.Sigma"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L185-L208","name":"CategoryTheory.coherentTopology.mem_sieves_iff_hasEffectiveEpiFamily","line":185,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.mem_sieves_iff_hasEffectiveEpiFamily","doc":"A sieve belongs to the coherent topology if and only if it contains a finite\n`EffectiveEpiFamily`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.mem_sieves_iff_hasEffectiveEpiFamily\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">coherentTopology</span>.<span class=\"name\">mem_sieves_iff_hasEffectiveEpiFamily</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_2}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sieves.html#CategoryTheory.Sieve\">CategoryTheory.Sieve</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Grothendieck.html#CategoryTheory.GrothendieckTopology.sieves\">CategoryTheory.GrothendieckTopology.sieves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">X</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (α : <a href=\"./foundational_types.html\">Type</a>) (x : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>) (Y : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>) (π : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">Y</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">S</span>.arrows <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">a</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L147-L179","name":"CategoryTheory.EffectiveEpiFamily.transitive_of_finite","line":147,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.EffectiveEpiFamily.transitive_of_finite","doc":"Effective epi families in a precoherent category are transitive, in the sense that an\n`EffectiveEpiFamily` and an `EffectiveEpiFamily` over each member, the composition is an\n`EffectiveEpiFamily`.\nNote: The finiteness condition is an artifact of the proof and is probably unnecessary.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.EffectiveEpiFamily.transitive_of_finite\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">EffectiveEpiFamily</span>.<span class=\"name\">transitive_of_finite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_2}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(π : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">Y</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y_n : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(π_n : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y_n</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">Y</span> <span class=\"fn\">a</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y_n</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π_n</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">c</span> : <span class=\"fn\">(a : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">Y_n</span> <span class=\"fn\"><span class=\"fn\">c</span>.fst</span> <span class=\"fn\"><span class=\"fn\">c</span>.snd</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">c</span> : <span class=\"fn\">(a : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π_n</span> <span class=\"fn\"><span class=\"fn\">c</span>.fst</span> <span class=\"fn\"><span class=\"fn\">c</span>.snd</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\"><span class=\"fn\">c</span>.fst</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L132-L133","name":"CategoryTheory.coherentTopology.subcanonical","line":132,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.subcanonical","doc":"The coherent topology on a precoherent category is subcanonical. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.subcanonical\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">coherentTopology</span>.<span class=\"name\">subcanonical</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_2}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Canonical.html#CategoryTheory.Sheaf.Subcanonical\">CategoryTheory.Sheaf.Subcanonical</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L115-L129","name":"CategoryTheory.coherentTopology.isSheaf_yoneda_obj","line":115,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.isSheaf_yoneda_obj","doc":"Every Yoneda-presheaf is a sheaf for the coherent topology. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.isSheaf_yoneda_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">coherentTopology</span>.<span class=\"name\">isSheaf_yoneda_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_2}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(W : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">W</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L99-L112","name":"CategoryTheory.coherentTopology.mem_sieves_of_hasEffectiveEpiFamily","line":99,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.mem_sieves_of_hasEffectiveEpiFamily","doc":"For a precoherent category, any sieve that contains an `EffectiveEpiFamily` is a sieve of the\ncoherent topology.\nNote: This is one direction of `mem_sieves_iff_hasEffectiveEpiFamily`, but is needed for the proof.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology.mem_sieves_of_hasEffectiveEpiFamily\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">coherentTopology</span>.<span class=\"name\">mem_sieves_of_hasEffectiveEpiFamily</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_3, u_2}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sieves.html#CategoryTheory.Sieve\">CategoryTheory.Sieve</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (α : <a href=\"./foundational_types.html\">Type</a>) (x : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>) (Y : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>) (π : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">Y</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">S</span>.arrows <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span> <span class=\"fn\">a</span></span>)</span></span></span></span></span>)</span> →\n  <span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Grothendieck.html#CategoryTheory.GrothendieckTopology.sieves\">CategoryTheory.GrothendieckTopology.sieves</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">X</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L74-L86","name":"CategoryTheory.isSheaf_coherent","line":74,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.isSheaf_coherent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.isSheaf_coherent\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">isSheaf_coherent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> w)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">P</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">B</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>] (<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>) (<span class=\"fn\">π</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">X</span> <span class=\"fn\">π</span></span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/IsSheafFor.html#CategoryTheory.Presieve.IsSheafFor\">CategoryTheory.Presieve.IsSheafFor</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sieves.html#CategoryTheory.Presieve.ofArrows\">CategoryTheory.Presieve.ofArrows</a> <span class=\"fn\">X</span> <span class=\"fn\">π</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L71-L72","name":"CategoryTheory.coherentTopology","line":71,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology","doc":"The coherent Grothendieck topology on a precoherent category `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentTopology\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">coherentTopology</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Grothendieck.html#CategoryTheory.GrothendieckTopology\">CategoryTheory.GrothendieckTopology</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L58-L66","name":"CategoryTheory.coherentCoverage","line":58,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentCoverage","doc":"The coherent coverage on a precoherent category `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.coherentCoverage\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">coherentCoverage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coverage.html#CategoryTheory.Coverage\">CategoryTheory.Coverage</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L47-L47","name":"CategoryTheory.Precoherent.pullback","line":47,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent.pullback","doc":"Given an effective epi family `π₁` over `B₁` and a morphism `f : B₂ ⟶ B₁`, there exists\nan effective epi family `π₂` over `B₂`, such that `π₂` factors through `π₁`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent.pullback\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Precoherent</span>.<span class=\"name\">pullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B₁ : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B₂ : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X₁ : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₁ : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X₁</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B₁</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">X₁</span> <span class=\"fn\">π₁</span></span> →\n  <span class=\"fn\">∃ (β : <a href=\"./foundational_types.html\">Type</a>) (x : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>) (X₂ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">C</span></span>) (π₂ : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X₂</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B₂</span></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">X₂</span> <span class=\"fn\">π₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">∃ (i : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α</span></span>) (ι : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X₂</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <span class=\"fn\">b</span></span>)</span></span></span></span>),\n        <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <span class=\"fn\">b</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π₂</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">f</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L42-L42","name":"CategoryTheory.Precoherent.mk","line":42,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Precoherent</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pullback : <span class=\"fn\">∀ {<span class=\"fn\">B₁ </span>B₂ : <span class=\"fn\">C</span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">B₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B₁</span></span>) (<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>] (<span class=\"fn\">X₁</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>) (<span class=\"fn\">π₁</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X₁</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B₁</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">X₁</span> <span class=\"fn\">π₁</span></span> →\n    <span class=\"fn\">∃ (β : <a href=\"./foundational_types.html\">Type</a>) (x : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>) (X₂ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">C</span></span>) (π₂ : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X₂</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B₂</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/EffectiveEpimorphic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">X₂</span> <span class=\"fn\">π₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\">∃ (i : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α</span></span>) (ι : <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X₂</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">X₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <span class=\"fn\">b</span></span>)</span></span></span></span>),\n          <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <span class=\"fn\">b</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π₂</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">f</span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\">CategoryTheory.Precoherent</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Coherent.lean#L42-L53","name":"CategoryTheory.Precoherent","line":42,"kind":"class","docLink":"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent","doc":"The condition `Precoherent C` is essentially the minimal condition required to define the\ncoherent coverage on `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Coherent.html#CategoryTheory.Precoherent\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Precoherent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}