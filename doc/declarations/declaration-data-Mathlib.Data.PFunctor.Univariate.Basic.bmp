{"name":"Mathlib.Data.PFunctor.Univariate.Basic","instances":[{"typeNames":["PFunctor"],"name":"PFunctor.instInhabitedPFunctor","className":"Inhabited"},{"typeNames":["PFunctor"],"name":"PFunctor.instCoeFunPFunctorForAllTypeType","className":"CoeFun"},{"typeNames":["PFunctor.Obj"],"name":"PFunctor.Obj.inhabited","className":"Inhabited"},{"typeNames":["PFunctor.Obj"],"name":"PFunctor.instFunctorObj","className":"Functor"},{"typeNames":["PFunctor.Obj"],"name":"PFunctor.instLawfulFunctorObjInstFunctorObj","className":"LawfulFunctor"},{"typeNames":["PFunctor.Idx"],"name":"PFunctor.Idx.inhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Data.W.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L243-L254","name":"PFunctor.supp_eq","line":243,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.supp_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.supp_eq\"><span class=\"name\">PFunctor</span>.<span class=\"name\">supp_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L219-L238","name":"PFunctor.liftr_iff","line":219,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.liftr_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.liftr_iff\"><span class=\"name\">PFunctor</span>.<span class=\"name\">liftr_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftr\">Functor.Liftr</a> <span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (f₀ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>) (f₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f₀</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f₁</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₀</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L210-L216","name":"PFunctor.liftp_iff'","line":210,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.liftp_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.liftp_iff'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">liftp_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L197-L207","name":"PFunctor.liftp_iff","line":197,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.liftp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.liftp_iff\"><span class=\"name\">PFunctor</span>.<span class=\"name\">liftp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L182-L183","name":"PFunctor.comp.get","line":182,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp.get","doc":"destructor for composition "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp.get\"><span class=\"name\">PFunctor</span>.<span class=\"name\">comp</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P₂ : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P₁ : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp\">PFunctor.comp</a> <span class=\"fn\">P₂</span> <span class=\"fn\">P₁</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">P₂</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">P₁</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L177-L178","name":"PFunctor.comp.mk","line":177,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp.mk","doc":"constructor for composition "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">comp</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P₂ : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P₁ : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P₂</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">P₁</span> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp\">PFunctor.comp</a> <span class=\"fn\">P₂</span> <span class=\"fn\">P₁</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L172-L173","name":"PFunctor.comp","line":172,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp","doc":"functor composition for polynomial functors "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.comp\"><span class=\"name\">PFunctor</span>.<span class=\"name\">comp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P₂ : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P₁ : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L157-L161","name":"PFunctor.iget_map","line":157,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.iget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.iget_map\"><span class=\"name\">PFunctor</span>.<span class=\"name\">iget_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">P</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\">PFunctor.Idx</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.iget\">PFunctor.Obj.iget</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.iget\">PFunctor.Obj.iget</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L153-L153","name":"PFunctor.fst_map","line":153,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.fst_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.fst_map\"><span class=\"name\">PFunctor</span>.<span class=\"name\">fst_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>.fst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L148-L149","name":"PFunctor.Obj.iget","line":148,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.iget","doc":"`x.iget i` takes the component of `x` designated by `i` if any is or returns\na default value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.iget\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Obj</span>.<span class=\"name\">iget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">P</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\">PFunctor.Idx</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L140-L141","name":"PFunctor.Idx.inhabited","line":140,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Idx</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">P</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">default</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\">PFunctor.Idx</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L136-L137","name":"PFunctor.Idx","line":136,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx","doc":"`Idx` identifies a location inside the application of a pfunctor.\nFor `F : PFunctor`, `x : F α` and `i : F.Idx`, `i` can designate\none part of `x` or is invalid, if `i.1 ≠ x.1` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L128-L128","name":"PFunctor.W.mk_dest","line":128,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.mk_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.mk_dest\"><span class=\"name\">PFunctor</span>.<span class=\"name\">W</span>.<span class=\"name\">mk_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.mk\">PFunctor.W.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">PFunctor.W.dest</a> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L124-L124","name":"PFunctor.W.dest_mk","line":124,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">W</span>.<span class=\"name\">dest_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">PFunctor.W.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.mk\">PFunctor.W.mk</a> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L119-L120","name":"PFunctor.W.mk","line":119,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.mk","doc":"constructor for W-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">W</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L114-L115","name":"PFunctor.W.dest","line":114,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest","doc":"destructor for W-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\"><span class=\"name\">PFunctor</span>.<span class=\"name\">W</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span> → <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L109-L110","name":"PFunctor.W.children","line":109,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.children","doc":"children of the root of a W tree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.children\"><span class=\"name\">PFunctor</span>.<span class=\"name\">W</span>.<span class=\"name\">children</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.head\">PFunctor.W.head</a> <span class=\"fn\">x</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L104-L105","name":"PFunctor.W.head","line":104,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.head","doc":"root element of a W tree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.head\"><span class=\"name\">PFunctor</span>.<span class=\"name\">W</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">P</span></span> → <span class=\"fn\"><span class=\"fn\">P</span>.A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L92-L93","name":"PFunctor.W","line":92,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W","doc":"re-export existing definition of W-types and\nadapt it to a packaged definition of polynomial functor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\"><span class=\"name\">PFunctor</span>.<span class=\"name\">W</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L85-L88","name":"PFunctor.instLawfulFunctorObjInstFunctorObj","line":85,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instLawfulFunctorObjInstFunctorObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instLawfulFunctorObjInstFunctorObj\"><span class=\"name\">PFunctor</span>.<span class=\"name\">instLawfulFunctorObjInstFunctorObj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulFunctor\">LawfulFunctor</a> <span class=\"fn\">↑<span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L81-L82","name":"PFunctor.map_map","line":81,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map_map\"><span class=\"name\">PFunctor</span>.<span class=\"name\">map_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L77-L77","name":"PFunctor.id_map","line":77,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.id_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.id_map\"><span class=\"name\">PFunctor</span>.<span class=\"name\">id_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v₁}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">id</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L71-L73","name":"PFunctor.map_eq","line":71,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map_eq\"><span class=\"name\">PFunctor</span>.<span class=\"name\">map_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">g</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L67-L68","name":"PFunctor.map_eq_map","line":67,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map_eq_map","doc":"We prefer `PFunctor.map` to `Functor.map` because it is universe-polymorphic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map_eq_map\"><span class=\"name\">PFunctor</span>.<span class=\"name\">map_eq_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L63-L63","name":"PFunctor.instFunctorObj","line":63,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instFunctorObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instFunctorObj\"><span class=\"name\">PFunctor</span>.<span class=\"name\">instFunctorObj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">↑<span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L59-L60","name":"PFunctor.Obj.inhabited","line":59,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Obj</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">P</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L55-L56","name":"PFunctor.map","line":55,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map","doc":"Applying `P` to a morphism of `Type` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\"><span class=\"name\">PFunctor</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> v₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L51-L52","name":"PFunctor.instCoeFunPFunctorForAllTypeType","line":51,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instCoeFunPFunctorForAllTypeType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instCoeFunPFunctorForAllTypeType\"><span class=\"name\">PFunctor</span>.<span class=\"name\">instCoeFunPFunctorForAllTypeType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>) =&gt; <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> (max u v)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L47-L48","name":"PFunctor.Obj","line":47,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj","doc":"Applying `P` to an object of `Type` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L40-L41","name":"PFunctor.instInhabitedPFunctor","line":40,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instInhabitedPFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.instInhabitedPFunctor\"><span class=\"name\">PFunctor</span>.<span class=\"name\">instInhabitedPFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u_1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L35-L35","name":"PFunctor.B","line":35,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B","doc":"The child family of types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\"><span class=\"name\">PFunctor</span>.<span class=\"name\">B</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.A</span> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L33-L33","name":"PFunctor.A","line":33,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A","doc":"The head type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\"><span class=\"name\">PFunctor</span>.<span class=\"name\">A</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L31-L31","name":"PFunctor.mk","line":31,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\">A</span> → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Univariate/Basic.lean#L31-L35","name":"PFunctor","line":31,"kind":"structure","docLink":"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor","doc":"A polynomial functor `P` is given by a type `A` and a family `B` of types over `A`. `P` maps\nany type `α` to a new type `P α`, which is defined as the sigma type `Σ x, P.B x → α`.\n\nAn element of `P α` is a pair `⟨a, f⟩`, where `a` is an element of a type `A` and\n`f : B a → α`. Think of `a` as the shape of the object and `f` as an index to the relevant\nelements of `α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\"><span class=\"name\">PFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}