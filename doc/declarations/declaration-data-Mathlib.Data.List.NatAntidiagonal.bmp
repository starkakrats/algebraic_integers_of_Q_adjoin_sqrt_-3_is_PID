{"name":"Mathlib.Data.List.NatAntidiagonal","instances":[],"imports":["Init","Mathlib.Data.List.Nodup","Mathlib.Data.List.Range"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L95-L100","name":"List.Nat.map_swap_antidiagonal","line":95,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.map_swap_antidiagonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.map_swap_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">map_swap_antidiagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">Prod.swap</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L85-L92","name":"List.Nat.antidiagonal_succ_succ'","line":85,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ_succ'\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_succ_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">0</span>, <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">0</span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L76-L82","name":"List.Nat.antidiagonal_succ'","line":76,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ'\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">id</span> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">0</span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L68-L73","name":"List.Nat.antidiagonal_succ","line":68,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">0</span>, <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">id</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L63-L64","name":"List.Nat.nodup_antidiagonal","line":63,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.nodup_antidiagonal","doc":"The antidiagonal of `n` does not contain duplicate entries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.nodup_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">nodup_antidiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Nodup\">List.Nodup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L58-L59","name":"List.Nat.antidiagonal_zero","line":58,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_zero","doc":"The antidiagonal of `0` is the list `[(0, 0)]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_zero\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">0</span>, <span class=\"fn\">0</span>)</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L52-L53","name":"List.Nat.length_antidiagonal","line":52,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.length_antidiagonal","doc":"The length of the antidiagonal of `n` is `n + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.length_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">length_antidiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L38-L47","name":"List.Nat.mem_antidiagonal","line":38,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.mem_antidiagonal","doc":"A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.mem_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mem_antidiagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">List.Nat.antidiagonal</a> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/NatAntidiagonal.lean#L32-L33","name":"List.Nat.antidiagonal","line":32,"kind":"def","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal","doc":"The antidiagonal of a natural number `n` is the list of pairs `(i, j)` such that `i + j = n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"}]}