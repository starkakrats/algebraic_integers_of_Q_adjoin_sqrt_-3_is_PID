{"name":"Mathlib.Analysis.BoxIntegral.Partition.Filter","instances":[{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams","className":"PartialOrder"},{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams","className":"BoundedOrder"},{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","className":"Inhabited"},{"typeNames":[],"name":"BoxIntegral.IntegrationParams.instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams","className":"Decidable"},{"typeNames":["Eq"],"name":"BoxIntegral.IntegrationParams.instDecidableEqIntegrationParams","className":"Decidable"},{"typeNames":["BoxIntegral.IntegrationParams.toFilterDistortioniUnion"],"name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.IntegrationParams.toFilterDistortion"],"name":"BoxIntegral.IntegrationParams.toFilterDistortion_neBot","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.IntegrationParams.toFilter"],"name":"BoxIntegral.IntegrationParams.toFilter_neBot","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.IntegrationParams.toFilteriUnion"],"name":"BoxIntegral.IntegrationParams.toFilteriUnion_neBot","className":"Filter.NeBot"}],"imports":["Init","Mathlib.Analysis.BoxIntegral.Partition.SubboxInduction","Mathlib.Analysis.BoxIntegral.Partition.Split"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L562-L567","name":"BoxIntegral.IntegrationParams.eventually_isPartition","line":562,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.eventually_isPartition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.eventually_isPartition\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">eventually_isPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ᶠ (π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>) in <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>,\n  <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">BoxIntegral.TaggedPrepartition.IsPartition</a> <span class=\"fn\">π</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L556-L559","name":"BoxIntegral.IntegrationParams.toFilteriUnion_neBot","line":556,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.NeBot\">Filter.NeBot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L552-L553","name":"BoxIntegral.IntegrationParams.toFilter_neBot","line":552,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.NeBot\">Filter.NeBot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">BoxIntegral.IntegrationParams.toFilter</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L547-L549","name":"BoxIntegral.IntegrationParams.toFilterDistortion_neBot","line":547,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortion_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.NeBot\">Filter.NeBot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">BoxIntegral.IntegrationParams.toFilterDistortion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box.distortion\">BoxIntegral.Box.distortion</a> <span class=\"fn\">I</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L542-L544","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","line":542,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortioniUnion_neBot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.NeBot\">Filter.NeBot</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\">BoxIntegral.IntegrationParams.toFilterDistortioniUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π₀</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">BoxIntegral.Prepartition.compl</a> <span class=\"fn\">π₀</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">π₀</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L535-L539","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot","line":535,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortioniUnion_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π₀</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">BoxIntegral.Prepartition.compl</a> <span class=\"fn\">π₀</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.NeBot\">Filter.NeBot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\">BoxIntegral.IntegrationParams.toFilterDistortioniUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">π₀</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L528-L532","name":"BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition","line":528,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">exists_memBaseSet_isPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box.distortion\">BoxIntegral.Box.distortion</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">BoxIntegral.TaggedPrepartition.IsPartition</a> <span class=\"fn\">π</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L520-L525","name":"BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq","line":520,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">exists_memBaseSet_le_iUnion_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π₀</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">BoxIntegral.Prepartition.compl</a> <span class=\"fn\">π₀</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π</span>.toPrepartition</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">π₀</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π₀</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L503-L517","name":"BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top","line":503,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">tendsto_embedBox_toFilteriUnion_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">J</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.embedBox\">BoxIntegral.TaggedPrepartition.embedBox</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">h</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.single\">BoxIntegral.Prepartition.single</a> <span class=\"fn\">J</span> <span class=\"fn\">I</span> <span class=\"fn\">h</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L497-L500","name":"BoxIntegral.IntegrationParams.hasBasis_toFilter","line":497,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilter\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">BoxIntegral.IntegrationParams.toFilter</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span></span>)</span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span></span>) =&gt;\n  <span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span> | <span class=\"fn\">∃ (c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">π</span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L490-L494","name":"BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top","line":490,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilteriUnion_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span></span>)</span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span></span>) =&gt;\n  <span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span> |\n    <span class=\"fn\">∃ (c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>),\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">BoxIntegral.TaggedPrepartition.IsPartition</a> <span class=\"fn\">π</span></span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L483-L487","name":"BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion","line":483,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilteriUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>), <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span></span>)</span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span></span>) =&gt;\n  <span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span> |\n    <span class=\"fn\">∃ (c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>),\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π₀</span></span></span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L476-L480","name":"BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion","line":476,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilterDistortioniUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\">BoxIntegral.IntegrationParams.toFilterDistortioniUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">π₀</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>) =&gt;\n  <span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span> |\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π₀</span></span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L467-L473","name":"BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion","line":467,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilterDistortion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">BoxIntegral.IntegrationParams.toFilterDistortion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>) =&gt;\n  <span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L462-L464","name":"BoxIntegral.IntegrationParams.toFilteriUnion_congr","line":462,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_congr\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π₁ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π₂ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">π₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">π₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L457-L459","name":"BoxIntegral.IntegrationParams.toFilteriUnion_mono","line":457,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l₁</span> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l₂</span> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L451-L453","name":"BoxIntegral.IntegrationParams.toFilter_mono","line":451,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">BoxIntegral.IntegrationParams.toFilter</a> <span class=\"fn\">l₁</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">BoxIntegral.IntegrationParams.toFilter</a> <span class=\"fn\">l₂</span> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L443-L447","name":"BoxIntegral.IntegrationParams.toFilterDistortion_mono","line":443,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortion_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">BoxIntegral.IntegrationParams.toFilterDistortion</a> <span class=\"fn\">l₁</span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">BoxIntegral.IntegrationParams.toFilterDistortion</a> <span class=\"fn\">l₂</span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L437-L439","name":"BoxIntegral.IntegrationParams.RCond.min","line":437,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.min\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">RCond</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span> <span class=\"fn\">r₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span> <span class=\"fn\">r₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L432-L434","name":"BoxIntegral.IntegrationParams.RCond.mono","line":432,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">RCond</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l₂</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l₁</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L418-L428","name":"BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet","line":418,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">biUnionTagged_memBaseSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{πi : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">J</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ <span class=\"fn\">J</span> ∈ <span class=\"fn\">π</span>, <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">J</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">πi</span> <span class=\"fn\">J</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">∀ <span class=\"fn\">J</span> ∈ <span class=\"fn\">π</span>, <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">BoxIntegral.TaggedPrepartition.IsPartition</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">πi</span> <span class=\"fn\">J</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">BoxIntegral.Prepartition.compl</a> <span class=\"fn\">π</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.Prepartition.biUnionTagged\">BoxIntegral.Prepartition.biUnionTagged</a> <span class=\"fn\">π</span> <span class=\"fn\">πi</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L395-L415","name":"BoxIntegral.IntegrationParams.MemBaseSet.filter","line":395,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.filter\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.filter\">BoxIntegral.TaggedPrepartition.filter</a> <span class=\"fn\">π</span> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L385-L392","name":"BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate","line":385,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">unionComplToSubordinate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π₁ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hπ₁ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hle : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">BoxIntegral.Box.Icc</span> <span class=\"fn\">I</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π₂ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π₁</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/SubboxInduction.html#BoxIntegral.TaggedPrepartition.unionComplToSubordinate\">BoxIntegral.TaggedPrepartition.unionComplToSubordinate</a> <span class=\"fn\">π₁</span> <span class=\"fn\">π₂</span> <span class=\"fn\">hU</span> <span class=\"fn\">r₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L371-L382","name":"BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl","line":371,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">exists_common_compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π₁ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π₂ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span> <span class=\"fn\">r₂</span> <span class=\"fn\">π₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π₁</span></span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₁</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L366-L368","name":"BoxIntegral.IntegrationParams.MemBaseSet.mono","line":366,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\">BoxIntegral.Box.Icc</span> <span class=\"fn\">I</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l₁</span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l₂</span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span> <span class=\"fn\">r₂</span> <span class=\"fn\">π</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L357-L362","name":"BoxIntegral.IntegrationParams.MemBaseSet.mono'","line":357,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono'\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">mono'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\">∀ <span class=\"fn\">J</span> ∈ <span class=\"fn\">π</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.tag\">BoxIntegral.TaggedPrepartition.tag</a> <span class=\"fn\">π</span> <span class=\"fn\">J</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.tag\">BoxIntegral.TaggedPrepartition.tag</a> <span class=\"fn\">π</span> <span class=\"fn\">J</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hπ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l₁</span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l₂</span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span> <span class=\"fn\">r₂</span> <span class=\"fn\">π</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L352-L354","name":"BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq","line":352,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter_inf_iUnion_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">BoxIntegral.IntegrationParams.toFilter</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a>     <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.principal\">Filter.principal</a>\n      <span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span> |\n        <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π₀</span></span></span>}</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">BoxIntegral.IntegrationParams.toFilteriUnion</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L346-L348","name":"BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false","line":346,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">rCond_of_bRiemann_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bRiemann</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">BoxIntegral.IntegrationParams.RCond</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L342-L343","name":"BoxIntegral.IntegrationParams.toFilteriUnion","line":342,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilteriUnion I π₀` if for any `c : ℝ≥0`\nthere exists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s`\ncontains each prepartition `π` such that `l.MemBaseSet I c r π` and `π.iUnion = π₀.iUnion`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L335-L336","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion","line":335,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilterDistortioniUnion I c π₀` if\nthere exists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s`\ncontains each prepartition `π` such that `l.MemBaseSet I c r π` and `π.iUnion = π₀.iUnion`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortioniUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π₀ : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L328-L329","name":"BoxIntegral.IntegrationParams.toFilter","line":328,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilter I` if for any `c : ℝ≥0` there\nexists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that\n`s` contains each prepartition `π` such that `l.MemBaseSet I c r π`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L320-L322","name":"BoxIntegral.IntegrationParams.toFilterDistortion","line":320,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilterDistortion I c` if there exists\na function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s` contains each\nprepartition `π` such that `l.MemBaseSet I c r π`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L313-L314","name":"BoxIntegral.IntegrationParams.RCond","line":313,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond","doc":"A predicate saying that in case `l.bRiemann = true`, the function `r` is a constant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">RCond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L308-L308","name":"BoxIntegral.IntegrationParams.MemBaseSet.exists_compl","line":308,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_compl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_compl\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">exists_compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n  <span class=\"fn\">∃ (π' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π</span></span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L307-L307","name":"BoxIntegral.IntegrationParams.MemBaseSet.distortion_le","line":307,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.distortion_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.distortion_le\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">distortion_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.distortion\">BoxIntegral.TaggedPrepartition.distortion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L306-L306","name":"BoxIntegral.IntegrationParams.MemBaseSet.isHenstock","line":306,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isHenstock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isHenstock\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">isHenstock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bHenstock</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsHenstock\">BoxIntegral.TaggedPrepartition.IsHenstock</a> <span class=\"fn\">π</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L305-L305","name":"BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate","line":305,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">isSubordinate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsSubordinate\">BoxIntegral.TaggedPrepartition.IsSubordinate</a> <span class=\"fn\">π</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L303-L303","name":"BoxIntegral.IntegrationParams.MemBaseSet.mk","line":303,"kind":"ctor","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mk\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(isSubordinate : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsSubordinate\">BoxIntegral.TaggedPrepartition.IsSubordinate</a> <span class=\"fn\">π</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isHenstock : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bHenstock</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsHenstock\">BoxIntegral.TaggedPrepartition.IsHenstock</a> <span class=\"fn\">π</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(distortion_le : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.distortion\">BoxIntegral.TaggedPrepartition.distortion</a> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exists_compl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n  <span class=\"fn\">∃ (π' : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">BoxIntegral.Prepartition</a> <span class=\"fn\">I</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">BoxIntegral.Prepartition.iUnion</a> <span class=\"fn\">π'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">BoxIntegral.TaggedPrepartition.iUnion</a> <span class=\"fn\">π</span></span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">BoxIntegral.Prepartition.distortion</a> <span class=\"fn\">π'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">BoxIntegral.IntegrationParams.MemBaseSet</a> <span class=\"fn\">l</span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L303-L309","name":"BoxIntegral.IntegrationParams.MemBaseSet","line":303,"kind":"structure","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet","doc":"The predicate corresponding to a base set of the filter defined by an\n`IntegrationParams`. It says that\n\n* if `l.bHenstock`, then `π` is a Henstock prepartition, i.e. each tag belongs to the corresponding\n  closed box;\n* `π` is subordinate to `r`;\n* if `l.bDistortion`, then the distortion of each box in `π` is less than or equal to `c`;\n* if `l.bDistortion`, then there exists a prepartition `π'` with distortion `≤ c` that covers\n  exactly `I \\ π.iUnion`.\n\nThe last condition is automatically verified for partitions, and is used in the proof of the\nSacks-Henstock inequality to compare two prepartitions covering the same part of the box.\n\nIt is also automatically satisfied for any `c > 1`, see TODO section of the module docstring for\ndetails. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">BoxIntegral.Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Intervals/Basic.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(π : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">BoxIntegral.TaggedPrepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L283-L284","name":"BoxIntegral.IntegrationParams.gp_le","line":283,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.gp_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.gp_le\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">gp_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.GP\">BoxIntegral.IntegrationParams.GP</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L279-L279","name":"BoxIntegral.IntegrationParams.henstock_le_mcShane","line":279,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_mcShane","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_mcShane\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">henstock_le_mcShane</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock\">BoxIntegral.IntegrationParams.Henstock</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.McShane\">BoxIntegral.IntegrationParams.McShane</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L275-L275","name":"BoxIntegral.IntegrationParams.henstock_le_riemann","line":275,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_riemann","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_riemann\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">henstock_le_riemann</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock\">BoxIntegral.IntegrationParams.Henstock</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Riemann\">BoxIntegral.IntegrationParams.Riemann</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L271-L271","name":"BoxIntegral.IntegrationParams.GP","line":271,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.GP","doc":"The `BoxIntegral.IntegrationParams` corresponding to the generalized Perron integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r` and each tag belongs to the corresponding closed box. We also\nrequire an upper estimate on the distortion of all boxes of the partition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.GP\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">GP</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L262-L263","name":"BoxIntegral.IntegrationParams.McShane","line":262,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.McShane","doc":"The `BoxIntegral.IntegrationParams` corresponding to the McShane integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r`; the tags may be outside of the corresponding closed box\n(but still inside the ambient closed box `I.Icc`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.McShane\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">McShane</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L253-L254","name":"BoxIntegral.IntegrationParams.Henstock","line":253,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock","doc":"The `BoxIntegral.IntegrationParams` corresponding to the Henstock-Kurzweil integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r` and each tag belongs to the corresponding closed box. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">Henstock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L243-L246","name":"BoxIntegral.IntegrationParams.Riemann","line":243,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Riemann","doc":"The `BoxIntegral.IntegrationParams` corresponding to the Riemann integral. In the\ncorresponding filter, we require that the diameters of all boxes `J` of a tagged partition are\nbounded from above by a constant upper estimate that may not depend on the geometry of `J`, and each\ntag belongs to the corresponding closed box. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Riemann\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">Riemann</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L236-L237","name":"BoxIntegral.IntegrationParams.instDecidableEqIntegrationParams","line":236,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableEqIntegrationParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableEqIntegrationParams\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instDecidableEqIntegrationParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L233-L234","name":"BoxIntegral.IntegrationParams.instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams","line":233,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instDecidableRelIntegrationParamsLeToLEToPreorderInstPartialOrderIntegrationParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L230-L231","name":"BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","line":230,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instInhabitedIntegrationParams","doc":"The value `BoxIntegral.IntegrationParams.GP = ⊥`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instInhabitedIntegrationParams\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instInhabitedIntegrationParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L223-L224","name":"BoxIntegral.IntegrationParams.instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams","line":223,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instBoundedOrderIntegrationParamsToLEToPreorderInstPartialOrderIntegrationParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L219-L220","name":"BoxIntegral.IntegrationParams.isoProd","line":219,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.isoProd","doc":"Auxiliary `OrderIso` with a product type used to lift a `BoundedOrder` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.isoProd\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">isoProd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L215-L216","name":"BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams","line":215,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instPartialOrderIntegrationParams\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instPartialOrderIntegrationParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L208-L212","name":"BoxIntegral.IntegrationParams.equivProd","line":208,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.equivProd","doc":"Auxiliary equivalence with a product type used to lift an order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.equivProd\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">equivProd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L200-L200","name":"BoxIntegral.IntegrationParams.bDistortion","line":200,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">bDistortion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L200-L200","name":"BoxIntegral.IntegrationParams.bHenstock","line":200,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">bHenstock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L200-L200","name":"BoxIntegral.IntegrationParams.bRiemann","line":200,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">bRiemann</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L199-L199","name":"BoxIntegral.IntegrationParams.mk","line":199,"kind":"ctor","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.mk\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(bRiemann : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bHenstock : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bDistortion : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L199-L200","name":"BoxIntegral.IntegrationParams","line":199,"kind":"structure","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams","doc":"An `IntegrationParams` is a structure holding 3 boolean values used to define a filter to be\nused in the definition of a box-integrable function.\n\n* `bRiemann`: the value `true` means that the filter corresponds to a Riemann-style integral, i.e.\n  in the definition of integrability we require a constant upper estimate `r` on the size of boxes\n  of a tagged partition; the value `false` means that the estimate may depend on the position of the\n  tag.\n\n* `bHenstock`: the value `true` means that we require that each tag belongs to its own closed box;\n  the value `false` means that we only require that tags belong to the ambient box.\n\n* `bDistortion`: the value `true` means that `r` can depend on the maximal ratio of sides of the\n  same box of a partition. Presence of this case makes quite a few proofs harder but we can prove\n  the divergence theorem only for the filter `BoxIntegral.IntegrationParams.GP = ⊥ =\n  {bRiemann := false, bHenstock := true, bDistortion := true}`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L198-L198","name":"BoxIntegral.IntegrationParams.ext_iff","line":198,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext_iff\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.bRiemann</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.bRiemann</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.bHenstock</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.bHenstock</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.bDistortion</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L198-L198","name":"BoxIntegral.IntegrationParams.ext","line":198,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">BoxIntegral.IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bRiemann : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.bRiemann</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.bRiemann</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bHenstock : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.bHenstock</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.bHenstock</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bDistortion : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.bDistortion</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.bDistortion</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"}]}