{"name":"Mathlib.Data.Seq.Computation","instances":[{"typeNames":["Computation"],"name":"Computation.instCoeTCComputation","className":"CoeTC"},{"typeNames":["Computation"],"name":"Computation.instInhabitedComputation","className":"Inhabited"},{"typeNames":["Computation"],"name":"Computation.instMembershipComputation","className":"Membership"},{"typeNames":["Computation.pure"],"name":"Computation.ret_terminates","className":"Computation.Terminates"},{"typeNames":["Computation.think"],"name":"Computation.think_terminates","className":"Computation.Terminates"},{"typeNames":["Computation.thinkN"],"name":"Computation.thinkN_terminates","className":"Computation.Terminates"},{"typeNames":["Computation"],"name":"Computation.instBindComputation","className":"Bind"},{"typeNames":["Computation.bind"],"name":"Computation.terminates_bind","className":"Computation.Terminates"},{"typeNames":["Computation"],"name":"Computation.monad","className":"Monad"},{"typeNames":["Computation"],"name":"Computation.instLawfulMonadComputationMonad","className":"LawfulMonad"},{"typeNames":["Computation.map"],"name":"Computation.terminates_map","className":"Computation.Terminates"},{"typeNames":["Computation"],"name":"Computation.instAlternativeComputation","className":"Alternative"}],"imports":["Init","Mathlib.Data.Stream.Init","Mathlib.Tactic.Common"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1291-L1297","name":"Computation.liftRel_rec","line":1291,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_rec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_rec\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">ca</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">cb</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">cb</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hc : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1277-L1288","name":"Computation.LiftRelRec.lem","line":1277,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelRec.lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelRec.lem\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelRec</span>.<span class=\"name\">lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">ca</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">cb</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">cb</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hc : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1272-L1274","name":"Computation.LiftRelAux.ret_right","line":1272,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_right\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span>.<span class=\"name\">ret_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1266-L1268","name":"Computation.LiftRelAux.swap","line":1266,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.swap\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1255-L1263","name":"Computation.LiftRelAux.ret_left","line":1255,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux.ret_left\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span>.<span class=\"name\">ret_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">cb</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1250-L1252","name":"Computation.liftRelAux_inr_inr","line":1250,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inr\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inr_inr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">ca</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}\n  {<span class=\"fn\">cb</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α_1</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">cb</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1247-L1249","name":"Computation.liftRelAux_inr_inl","line":1247,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inr_inl\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inr_inl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">b</span> : <span class=\"fn\">α_1</span>}\n  {<span class=\"fn\">ca</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1244-L1246","name":"Computation.liftRelAux_inl_inr","line":1244,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inr\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inl_inr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}\n  {<span class=\"fn\">cb</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α_1</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">cb</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">α_1</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1243-L1243","name":"Computation.liftRelAux_inl_inl","line":1243,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRelAux_inl_inl\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRelAux_inl_inl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>} {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">α_1</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\">Computation.LiftRelAux</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1233-L1238","name":"Computation.LiftRelAux","line":1233,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux","doc":"Alternate definition of `LiftRel` over relations between `Computation`s"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRelAux\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRelAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1226-L1229","name":"Computation.map_congr","line":1226,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">map_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1213-L1222","name":"Computation.liftRel_map","line":1213,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_map\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f1</span> <span class=\"fn\">s1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f2</span> <span class=\"fn\">s2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1206-L1210","name":"Computation.liftRel_congr","line":1206,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">ca</span> <span class=\"fn\">ca'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">cb</span> <span class=\"fn\">cb'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca'</span> <span class=\"fn\">cb'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1201-L1203","name":"Computation.liftRel_mem_cases","line":1201,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_mem_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_mem_cases\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_mem_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Ha : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Hb : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1196-L1198","name":"Computation.liftRel_think_right","line":1196,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_right\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_think_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">cb</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1188-L1192","name":"Computation.liftRel_think_left","line":1188,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_think_left\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_think_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">ca</span></span>)</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1181-L1184","name":"Computation.liftRel_pure","line":1181,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1174-L1175","name":"Computation.liftRel_pure_right","line":1174,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_right\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_pure_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1166-L1170","name":"Computation.liftRel_pure_left","line":1166,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_pure_left\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_pure_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1147-L1162","name":"Computation.liftRel_bind","line":1147,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s1</span> <span class=\"fn\">f1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s2</span> <span class=\"fn\">f2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1132-L1144","name":"Computation.liftRel_def","line":1132,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_def\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">cb</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1127-L1129","name":"Computation.exists_of_liftRel_right","line":1127,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_right\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_liftRel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1122-L1124","name":"Computation.exists_of_liftRel_left","line":1122,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_liftRel_left\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_liftRel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1116-L1119","name":"Computation.liftRel_of_mem","line":1116,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.liftRel_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">liftRel_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ma : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ab : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1109-L1113","name":"Computation.rel_of_liftRel","line":1109,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.rel_of_liftRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.rel_of_liftRel\"><span class=\"name\">Computation</span>.<span class=\"name\">rel_of_liftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span> → <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ca</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cb</span></span> → <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1098-L1106","name":"Computation.terminates_of_liftRel","line":1098,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_liftRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_liftRel\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_of_liftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">t</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1087-L1095","name":"Computation.LiftRel.imp","line":1087,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.imp\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1078-L1080","name":"Computation.LiftRel.equiv","line":1078,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">R</span></span> → <span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1066-L1075","name":"Computation.LiftRel.trans","line":1066,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.trans\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Transitive\">Transitive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Transitive\">Transitive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1056-L1063","name":"Computation.LiftRel.symm","line":1056,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.symm\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Symmetric\">Symmetric</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1052-L1053","name":"Computation.LiftRel.refl","line":1052,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.refl\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Reflexive\">Reflexive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Logic.html#Reflexive\">Reflexive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1045-L1049","name":"Computation.lift_eq_iff_equiv","line":1045,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.lift_eq_iff_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.lift_eq_iff_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">lift_eq_iff_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1040-L1042","name":"Computation.LiftRel.swap","line":1040,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel.swap\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">cb</span> <span class=\"fn\">ca</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">ca</span> <span class=\"fn\">cb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1036-L1037","name":"Computation.LiftRel","line":1036,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel","doc":"`LiftRel R ca cb` is a generalization of `Equiv` to relations other than\nequality. It asserts that if `ca` terminates with `a`, then `cb` terminates with\nsome `b` such that `R a b`, and if `cb` terminates with `b` then `ca` terminates\nwith some `a` such that `R a b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\"><span class=\"name\">Computation</span>.<span class=\"name\">LiftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ca : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cb : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1028-L1029","name":"Computation.equiv_pure_of_mem","line":1028,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.equiv_pure_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.equiv_pure_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">equiv_pure_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1018-L1025","name":"Computation.bind_congr","line":1018,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f1 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f2 : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s1</span> <span class=\"fn\">f1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s2</span> <span class=\"fn\">f2</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1014-L1014","name":"Computation.thinkN_equiv","line":1014,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1011-L1011","name":"Computation.think_equiv","line":1011,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">think_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1006-L1008","name":"Computation.get_equiv","line":1006,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">get_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">c₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">c₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L1002-L1003","name":"Computation.promises_congr","line":1002,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.promises_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.promises_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">promises_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">c₁</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">c₂</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L998-L999","name":"Computation.terminates_congr","line":998,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_congr\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">c₁</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">c₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L994-L995","name":"Computation.equiv_of_mem","line":994,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.equiv_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.equiv_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">equiv_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L990-L991","name":"Computation.Equiv.equivalence","line":990,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.equivalence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.equivalence\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">equivalence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">Computation.Equiv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L986-L987","name":"Computation.Equiv.trans","line":986,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.trans\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">t</span> <span class=\"fn\">u</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L982-L982","name":"Computation.Equiv.symm","line":982,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.symm\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">t</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L978-L978","name":"Computation.Equiv.refl","line":978,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv.refl\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Computation.Equiv</a> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L974-L975","name":"Computation.«term_~_»","line":974,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.«term_~_»","doc":"equivalence relation for computations"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.«term_~_»\"><span class=\"name\">Computation</span>.<span class=\"name\">«term_~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L969-L970","name":"Computation.Equiv","line":969,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Equiv","doc":"`c₁ ~ c₂` asserts that `c₁` and `c₂` either both terminate with the same result,\nor both loop forever. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\"><span class=\"name\">Computation</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L960-L964","name":"Computation.orElse_empty","line":960,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">c</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L952-L956","name":"Computation.empty_orElse","line":952,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.empty_orElse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty_orElse\"><span class=\"name\">Computation</span>.<span class=\"name\">empty_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">c</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L944-L948","name":"Computation.orElse_think","line":944,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse_think\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">c₁</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">c₂</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">c₁</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">c₂</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L935-L939","name":"Computation.orElse_pure","line":935,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">c₁</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L926-L930","name":"Computation.ret_orElse","line":926,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_orElse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_orElse\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">c₂</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L919-L922","name":"Computation.instAlternativeComputation","line":919,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instAlternativeComputation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instAlternativeComputation\"><span class=\"name\">Computation</span>.<span class=\"name\">instAlternativeComputation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L907-L916","name":"Computation.orElse","line":907,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.orElse","doc":"`c₁ <|> c₂` calculates `c₁` and `c₂` simultaneously, returning\nthe first one that gives a result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.orElse\"><span class=\"name\">Computation</span>.<span class=\"name\">orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L897-L901","name":"Computation.terminates_map_iff","line":897,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map_iff\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L893-L894","name":"Computation.terminates_map","line":893,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_map\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L886-L890","name":"Computation.exists_of_mem_map","line":886,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_map\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L882-L883","name":"Computation.mem_map","line":882,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_map\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L878-L879","name":"Computation.map_think'","line":878,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_think'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_think'\"><span class=\"name\">Computation</span>.<span class=\"name\">map_think'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L873-L874","name":"Computation.map_pure'","line":873,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_pure'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_pure'\"><span class=\"name\">Computation</span>.<span class=\"name\">map_pure'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L868-L869","name":"Computation.pure_def","line":868,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.pure_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure_def\"><span class=\"name\">Computation</span>.<span class=\"name\">pure_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L863-L864","name":"Computation.has_map_eq_map","line":863,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.has_map_eq_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.has_map_eq_map\"><span class=\"name\">Computation</span>.<span class=\"name\">has_map_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L857-L861","name":"Computation.instLawfulMonadComputationMonad","line":857,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instLawfulMonadComputationMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instLawfulMonadComputationMonad\"><span class=\"name\">Computation</span>.<span class=\"name\">instLawfulMonadComputationMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L852-L855","name":"Computation.monad","line":852,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.monad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.monad\"><span class=\"name\">Computation</span>.<span class=\"name\">monad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L846-L849","name":"Computation.bind_promises","line":846,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L839-L843","name":"Computation.exists_of_mem_bind","line":839,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_of_mem_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_of_mem_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L824-L836","name":"Computation.of_results_bind","line":824,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_results_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_results_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">of_results_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∃ (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L818-L821","name":"Computation.length_bind","line":818,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">length_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L812-L814","name":"Computation.get_bind","line":812,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">get_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L806-L808","name":"Computation.terminates_bind","line":806,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L799-L803","name":"Computation.mem_bind","line":799,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L783-L796","name":"Computation.results_bind","line":783,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">results_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L766-L780","name":"Computation.bind_assoc","line":766,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_assoc\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">g</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L755-L762","name":"Computation.bind_pure'","line":755,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure'\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_pure'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">Computation.pure</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L742-L750","name":"Computation.bind_pure","line":742,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">bind_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Computation.pure</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L737-L738","name":"Computation.think_bind","line":737,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">think_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">c</span> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L722-L733","name":"Computation.ret_bind","line":722,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L714-L718","name":"Computation.map_comp","line":714,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_comp\"><span class=\"name\">Computation</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L706-L711","name":"Computation.map_id","line":706,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_id\"><span class=\"name\">Computation</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">id</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L701-L702","name":"Computation.destruct_map","line":701,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_map\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.lmap\">Computation.lmap</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.rmap\">Computation.rmap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L696-L697","name":"Computation.map_think","line":696,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_think\"><span class=\"name\">Computation</span>.<span class=\"name\">map_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L691-L692","name":"Computation.map_pure","line":691,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\">Computation.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L686-L687","name":"Computation.join","line":686,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.join","doc":"Flatten a computation of computations into a single computation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.join\"><span class=\"name\">Computation</span>.<span class=\"name\">join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L681-L682","name":"Computation.has_bind_eq_bind","line":681,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.has_bind_eq_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.has_bind_eq_bind\"><span class=\"name\">Computation</span>.<span class=\"name\">has_bind_eq_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\">Computation.bind</a> <span class=\"fn\">c</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L678-L679","name":"Computation.instBindComputation","line":678,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instBindComputation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instBindComputation\"><span class=\"name\">Computation</span>.<span class=\"name\">instBindComputation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L674-L675","name":"Computation.bind","line":674,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.bind","doc":"Compose two computations into a monadic `bind` operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.bind\"><span class=\"name\">Computation</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L663-L669","name":"Computation.Bind.f","line":663,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Bind.f","doc":"bind over a function mapping `α` to a `Computation`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Bind.f\"><span class=\"name\">Computation</span>.<span class=\"name\">Bind</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L656-L658","name":"Computation.Bind.g","line":656,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Bind.g","doc":"bind over a `Sum` of `Computation`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Bind.g\"><span class=\"name\">Computation</span>.<span class=\"name\">Bind</span>.<span class=\"name\">g</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L646-L652","name":"Computation.map","line":646,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.map","doc":"Map a function on the result of a computation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.map\"><span class=\"name\">Computation</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L637-L642","name":"Computation.terminatesRecOn","line":637,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminatesRecOn","doc":"Recursor based on assertion of `Terminates`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminatesRecOn\"><span class=\"name\">Computation</span>.<span class=\"name\">terminatesRecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L628-L633","name":"Computation.memRecOn","line":628,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.memRecOn","doc":"Recursor based on membership"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.memRecOn\"><span class=\"name\">Computation</span>.<span class=\"name\">memRecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L621-L623","name":"Computation.eq_thinkN'","line":621,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN'\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_thinkN'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L606-L617","name":"Computation.eq_thinkN","line":606,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L600-L602","name":"Computation.length_thinkN","line":600,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">length_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L594-L595","name":"Computation.results_thinkN_pure","line":594,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">results_thinkN_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L587-L590","name":"Computation.results_thinkN","line":587,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">results_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L581-L584","name":"Computation.results_think_iff","line":581,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_think_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_think_iff\"><span class=\"name\">Computation</span>.<span class=\"name\">results_think_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L573-L577","name":"Computation.of_results_think","line":573,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_results_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_results_think\"><span class=\"name\">Computation</span>.<span class=\"name\">of_results_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L568-L570","name":"Computation.results_think","line":568,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_think\"><span class=\"name\">Computation</span>.<span class=\"name\">results_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L556-L565","name":"Computation.length_think","line":556,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_think\"><span class=\"name\">Computation</span>.<span class=\"name\">length_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L551-L552","name":"Computation.results_pure","line":551,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">results_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L546-L548","name":"Computation.length_pure","line":546,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">length_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L541-L542","name":"Computation.get_pure","line":541,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">get_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L535-L537","name":"Computation.exists_results_of_mem","line":535,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.exists_results_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.exists_results_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">exists_results_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L531-L532","name":"Computation.Results.len_unique","line":531,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.len_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.len_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">len_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L526-L528","name":"Computation.Results.val_unique","line":526,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.val_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.val_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">val_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L522-L523","name":"Computation.Results.length","line":522,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.length\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L518-L519","name":"Computation.Results.terminates","line":518,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L514-L515","name":"Computation.Results.mem","line":514,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results.mem\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L510-L511","name":"Computation.results_of_terminates'","line":510,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates'\"><span class=\"name\">Computation</span>.<span class=\"name\">results_of_terminates'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L505-L507","name":"Computation.results_of_terminates","line":505,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.results_of_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">results_of_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[_T : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\">Computation.Results</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\">Computation.length</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L501-L502","name":"Computation.Results","line":501,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Results","doc":"`Results s a n` completely characterizes a terminating computation:\nit asserts that `s` terminates after exactly `n` steps, with result `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Results\"><span class=\"name\">Computation</span>.<span class=\"name\">Results</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L493-L494","name":"Computation.get_eq_of_promises","line":493,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">get_eq_of_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L486-L490","name":"Computation.mem_of_promises","line":486,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_of_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L483-L483","name":"Computation.get_promises","line":483,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">get_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L478-L479","name":"Computation.get_thinkN","line":478,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_thinkN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">get_thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L471-L474","name":"Computation.get_think","line":471,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_think\"><span class=\"name\">Computation</span>.<span class=\"name\">get_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L467-L467","name":"Computation.mem_of_get_eq","line":467,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_of_get_eq\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_of_get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L463-L464","name":"Computation.get_eq_of_mem","line":463,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_eq_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">get_eq_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L459-L460","name":"Computation.get_mem","line":459,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">get_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\">Computation.get</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L455-L456","name":"Computation.get","line":455,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.get","doc":"`get s` returns the result of a terminating computation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.get\"><span class=\"name\">Computation</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L450-L451","name":"Computation.length","line":450,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.length","doc":"`length s` gets the number of steps of a terminating computation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.length\"><span class=\"name\">Computation</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L442-L442","name":"Computation.empty_promises","line":442,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.empty_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">empty_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L439-L439","name":"Computation.mem_promises","line":439,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_promises","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_promises\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\">Computation.Promises</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L435-L437","name":"Computation.«term_~>_»","line":435,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.«term_~>_»","doc":"`Promises s a`, or `s ~> a`, asserts that although the computation `s`\nmay not terminate, if it does, then the result is `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.«term_~>_»\"><span class=\"name\">Computation</span>.<span class=\"name\">«term_~>_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L430-L431","name":"Computation.Promises","line":430,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Promises","doc":"`Promises s a`, or `s ~> a`, asserts that although the computation `s`\nmay not terminate, if it does, then the result is `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Promises\"><span class=\"name\">Computation</span>.<span class=\"name\">Promises</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L423-L424","name":"Computation.of_thinkN_terminates","line":423,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_thinkN_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_thinkN_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">of_thinkN_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L418-L419","name":"Computation.thinkN_terminates","line":418,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L412-L414","name":"Computation.thinkN_mem","line":412,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\">Computation.thinkN</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L406-L409","name":"Computation.eq_empty_of_not_terminates","line":406,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_empty_of_not_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_empty_of_not_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_empty_of_not_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L403-L403","name":"Computation.not_terminates_empty","line":403,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.not_terminates_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.not_terminates_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">not_terminates_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L400-L400","name":"Computation.not_mem_empty","line":400,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.not_mem_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L396-L397","name":"Computation.of_think_terminates","line":396,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_think_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_think_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">of_think_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L389-L393","name":"Computation.of_think_mem","line":389,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.of_think_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.of_think_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">of_think_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L385-L386","name":"Computation.think_terminates","line":385,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">think_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L381-L382","name":"Computation.think_mem","line":381,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">think_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L377-L378","name":"Computation.ret_terminates","line":377,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L373-L374","name":"Computation.eq_of_pure_mem","line":373,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_pure_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_pure_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_of_pure_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L369-L370","name":"Computation.ret_mem","line":369,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.ret_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.ret_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">ret_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L360-L366","name":"Computation.terminates_def","line":360,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_def\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.isSome\">Option.isSome</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L356-L357","name":"Computation.terminates_of_mem","line":356,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_of_mem\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L352-L353","name":"Computation.terminates_iff","line":352,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.terminates_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.terminates_iff\"><span class=\"name\">Computation</span>.<span class=\"name\">terminates_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L349-L349","name":"Computation.Terminates.term","line":349,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.term","doc":"assertion that there is some term `a` such that the `Computation` terminates "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.term\"><span class=\"name\">Computation</span>.<span class=\"name\">Terminates</span>.<span class=\"name\">term</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L347-L347","name":"Computation.Terminates.mk","line":347,"kind":"ctor","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates.mk\"><span class=\"name\">Computation</span>.<span class=\"name\">Terminates</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(term : <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Computation.Terminates</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L347-L349","name":"Computation.Terminates","line":347,"kind":"class","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Terminates","doc":"`Terminates s` asserts that the computation `s` eventually terminates with some value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\"><span class=\"name\">Computation</span>.<span class=\"name\">Terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L342-L343","name":"Computation.Mem.left_unique","line":342,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Mem.left_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Mem.left_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">Mem</span>.<span class=\"name\">left_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LeftUnique\">Relator.LeftUnique</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L336-L339","name":"Computation.mem_unique","line":336,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.mem_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.mem_unique\"><span class=\"name\">Computation</span>.<span class=\"name\">mem_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L330-L333","name":"Computation.le_stable","line":330,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.le_stable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.le_stable\"><span class=\"name\">Computation</span>.<span class=\"name\">le_stable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">s</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">s</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L327-L328","name":"Computation.instMembershipComputation","line":327,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instMembershipComputation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instMembershipComputation\"><span class=\"name\">Computation</span>.<span class=\"name\">instMembershipComputation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L323-L324","name":"Computation.Mem","line":323,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Mem","doc":"Assertion that a `Computation` limits to a given value"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Mem\"><span class=\"name\">Computation</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L293-L315","name":"Computation.eq_of_bisim","line":293,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.eq_of_bisim\"><span class=\"name\">Computation</span>.<span class=\"name\">eq_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.IsBisimulation\">Computation.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L288-L289","name":"Computation.IsBisimulation","line":288,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.IsBisimulation","doc":"Attribute expressing bisimilarity over two `Computation`s"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.IsBisimulation\"><span class=\"name\">Computation</span>.<span class=\"name\">IsBisimulation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L279-L282","name":"Computation.BisimO","line":279,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.BisimO","doc":"Bisimilarity over a sum of `Computation`s"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.BisimO\"><span class=\"name\">Computation</span>.<span class=\"name\">BisimO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L253-L267","name":"Computation.corec_eq","line":253,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.corec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec_eq\"><span class=\"name\">Computation</span>.<span class=\"name\">corec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.rmap\">Computation.rmap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\">Computation.corec</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L240-L242","name":"Computation.rmap","line":240,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.rmap","doc":"right map of `⊕` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.rmap\"><span class=\"name\">Computation</span>.<span class=\"name\">rmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L234-L236","name":"Computation.lmap","line":234,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.lmap","doc":"left map of `⊕` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.lmap\"><span class=\"name\">Computation</span>.<span class=\"name\">lmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L219-L230","name":"Computation.corec","line":219,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.corec","doc":"`corec f b` is the corecursor for `Computation α` as a coinductive type.\nIf `f b = inl a` then `corec f b = pure a`, and if `f b = inl b'` then\n`corec f b = think (corec f b')`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.corec\"><span class=\"name\">Computation</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L206-L212","name":"Computation.Corec.f","line":206,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.Corec.f","doc":"Corecursor constructor for `corec`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.Corec.f\"><span class=\"name\">Computation</span>.<span class=\"name\">Corec</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L193-L202","name":"Computation.recOn","line":193,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.recOn","doc":"Recursion principle for computations, compare with `List.recOn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.recOn\"><span class=\"name\">Computation</span>.<span class=\"name\">recOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L188-L189","name":"Computation.think_empty","line":188,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">think_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L184-L185","name":"Computation.tail_empty","line":184,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">tail_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail\">Computation.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L179-L180","name":"Computation.tail_think","line":179,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail_think\"><span class=\"name\">Computation</span>.<span class=\"name\">tail_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail\">Computation.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L174-L175","name":"Computation.tail_pure","line":174,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">tail_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail\">Computation.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L169-L170","name":"Computation.head_empty","line":169,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">head_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.head\">Computation.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L164-L165","name":"Computation.head_think","line":164,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head_think\"><span class=\"name\">Computation</span>.<span class=\"name\">head_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.head\">Computation.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L159-L160","name":"Computation.head_pure","line":159,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">head_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.head\">Computation.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L154-L155","name":"Computation.destruct_empty","line":154,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_empty\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\">Computation.empty</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L149-L150","name":"Computation.destruct_think","line":149,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_think\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L144-L145","name":"Computation.destruct_pure","line":144,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L130-L140","name":"Computation.destruct_eq_think","line":130,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_think","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_think\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_eq_think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">s'</span></span></span> → <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\">Computation.think</a> <span class=\"fn\">s'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L118-L127","name":"Computation.destruct_eq_pure","line":118,"kind":"theorem","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct_eq_pure\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct_eq_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\">Computation.destruct</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\">Computation.pure</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L111-L115","name":"Computation.run","line":111,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.run","doc":"`run c` is an unsound meta function that runs `c` to completion, possibly\nresulting in an infinite loop in the VM. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.run\"><span class=\"name\">Computation</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L103-L106","name":"Computation.destruct","line":103,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.destruct","doc":"`destruct c` is the destructor for `Computation α` as a coinductive type.\nIt returns `inl a` if `c = pure a` and `inr c'` if `c = think c'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.destruct\"><span class=\"name\">Computation</span>.<span class=\"name\">destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L97-L98","name":"Computation.runFor","line":97,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.runFor","doc":"`runFor c n` evaluates `c` for `n` steps and returns the result, or `none`\nif it did not terminate after `n` steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.runFor\"><span class=\"name\">Computation</span>.<span class=\"name\">runFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L92-L93","name":"Computation.instInhabitedComputation","line":92,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instInhabitedComputation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instInhabitedComputation\"><span class=\"name\">Computation</span>.<span class=\"name\">instInhabitedComputation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L88-L89","name":"Computation.empty","line":88,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.empty","doc":"`empty α` is the computation that never returns, an infinite sequence of\n`think`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.empty\"><span class=\"name\">Computation</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L82-L83","name":"Computation.tail","line":82,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.tail","doc":"`tail c` is the remainder of computation, either `c` if `c = pure a`\nor `c'` if `c = think c'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.tail\"><span class=\"name\">Computation</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L75-L76","name":"Computation.head","line":75,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.head","doc":"`head c` is the first step of computation, either `some a` if `c = pure a`\nor `none` if `c = think c'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.head\"><span class=\"name\">Computation</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L66-L68","name":"Computation.thinkN","line":66,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.thinkN","doc":"`thinkN c n` is the computation that delays for `n` ticks and then performs\ncomputation `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.thinkN\"><span class=\"name\">Computation</span>.<span class=\"name\">thinkN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L57-L61","name":"Computation.think","line":57,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.think","doc":"`think c` is the computation that delays for one \"tick\" and then performs\ncomputation `c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.think\"><span class=\"name\">Computation</span>.<span class=\"name\">think</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L50-L51","name":"Computation.instCoeTCComputation","line":50,"kind":"instance","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.instCoeTCComputation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.instCoeTCComputation\"><span class=\"name\">Computation</span>.<span class=\"name\">instCoeTCComputation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTC\">CoeTC</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L46-L47","name":"Computation.pure","line":46,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation.pure","doc":"`pure a` is the computation that immediately terminates with result `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation.pure\"><span class=\"name\">Computation</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Seq/Computation.lean#L35-L36","name":"Computation","line":35,"kind":"def","docLink":"./Mathlib/Data/Seq/Computation.html#Computation","doc":"`Computation α` is the type of unbounded computations returning `α`.\nAn element of `Computation α` is an infinite sequence of `Option α` such\nthat if `f n = some a` for some `n` then it is constantly `some a` after that. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Seq/Computation.html#Computation\"><span class=\"name\">Computation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}