{"name":"Std.Tactic.Instances","instances":[],"imports":["Init","Lean.Elab.Command","Lean.PrettyPrinter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Instances.lean#L63-L64","name":"Std.Tactic.Instances.«command#instances__:_»","line":63,"kind":"def","docLink":"./Std/Tactic/Instances.html#Std.Tactic.Instances.«command#instances__:_»","doc":"`#instances term` prints all the instances for the given class.\nFor example, `#instances Add _` gives all `Add` instances, and `#instances Add Nat` gives the\n`Nat` instance. The `term` can be any type that can appear in `[...]` binders.\n\nTrailing underscores can be omitted, and `#instances Add` and `#instances Add _` are equivalent;\nthe command adds metavariables until the argument is no longer a function.\n\nThe `#instances` command is closely related to `#synth`, but `#synth` does the full\ninstance synthesis algorithm and `#instances` does the first step of finding potential instances. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Instances.html#Std.Tactic.Instances.«command#instances__:_»\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Instances</span>.<span class=\"name\">«command#instances__:_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Instances.lean#L20-L60","name":"Std.Tactic.Instances.instancesCmd","line":20,"kind":"def","docLink":"./Std/Tactic/Instances.html#Std.Tactic.Instances.instancesCmd","doc":"`#instances term` prints all the instances for the given class.\nFor example, `#instances Add _` gives all `Add` instances, and `#instances Add Nat` gives the\n`Nat` instance. The `term` can be any type that can appear in `[...]` binders.\n\nTrailing underscores can be omitted, and `#instances Add` and `#instances Add _` are equivalent;\nthe command adds metavariables until the argument is no longer a function.\n\nThe `#instances` command is closely related to `#synth`, but `#synth` does the full\ninstance synthesis algorithm and `#instances` does the first step of finding potential instances. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Instances.html#Std.Tactic.Instances.instancesCmd\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Instances</span>.<span class=\"name\">instancesCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}