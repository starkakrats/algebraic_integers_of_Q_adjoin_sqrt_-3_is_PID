{"name":"Mathlib.Algebra.Category.ModuleCat.Biproducts","instances":[{"typeNames":["ModuleCat"],"name":"ModuleCat.instHasBinaryBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory","className":"CategoryTheory.Limits.HasBinaryBiproducts"},{"typeNames":["ModuleCat"],"name":"ModuleCat.instHasFiniteBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory","className":"CategoryTheory.Limits.HasFiniteBiproducts"}],"imports":["Init","Mathlib.Algebra.Group.Pi","Mathlib.CategoryTheory.Limits.Shapes.Biproducts","Mathlib.Algebra.Category.ModuleCat.Abelian","Mathlib.Algebra.Homology.ShortComplex.ModuleCat"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L177-L183","name":"lequivProdOfLeftSplitExact","line":177,"kind":"def","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#lequivProdOfLeftSplitExact","doc":"The isomorphism `A × B ≃ₗ[R] M` coming from a left split exact sequence `0 ⟶ A ⟶ M ⟶ B ⟶ 0`\nof modules."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#lequivProdOfLeftSplitExact\"><span class=\"name\">lequivProdOfLeftSplitExact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exac : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.range\">LinearMap.range</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> ∘ₗ <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LinearMap.id</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">B</span></span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L167-L173","name":"lequivProdOfRightSplitExact","line":167,"kind":"def","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#lequivProdOfRightSplitExact","doc":"The isomorphism `A × B ≃ₗ[R] M` coming from a right split exact sequence `0 ⟶ A ⟶ M ⟶ B ⟶ 0`\nof modules."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#lequivProdOfRightSplitExact\"><span class=\"name\">lequivProdOfRightSplitExact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">j</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exac : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.range\">LinearMap.range</a> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> ∘ₗ <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LinearMap.id</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">B</span></span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L148-L150","name":"ModuleCat.biproductIsoPi_inv_comp_π","line":148,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi_inv_comp_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi_inv_comp_π\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biproductIsoPi_inv_comp_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi\">ModuleCat.biproductIsoPi</a> <span class=\"fn\">f</span></span>)</span>.inv</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.π\">CategoryTheory.Limits.biproduct.π</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Pi.html#LinearMap.proj\">LinearMap.proj</a> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L147-L147","name":"ModuleCat.biproductIsoPi_inv_comp_π_apply","line":147,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi_inv_comp_π_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi_inv_comp_π_apply\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biproductIsoPi_inv_comp_π_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>)</span>.obj <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone\">ModuleCat.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.cone</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.π\">CategoryTheory.Limits.biproduct.π</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit.conePointUniqueUpToIso\">CategoryTheory.Limits.IsLimit.conePointUniqueUpToIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.isLimit\">CategoryTheory.Limits.biproduct.isLimit</a> <span class=\"fn\">f</span></span>)</span>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone\">ModuleCat.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.isLimit</span></span>)</span>.inv</span>\n      <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Pi.html#LinearMap.proj\">LinearMap.proj</a> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L139-L141","name":"ModuleCat.biproductIsoPi","line":139,"kind":"def","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi","doc":"We verify that the biproduct we've just defined is isomorphic to the `ModuleCat R` structure\non the dependent function type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biproductIsoPi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct\">⨁</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L138-L138","name":"ModuleCat.biproductIsoPi_hom_apply","line":138,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi_hom_apply\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biproductIsoPi_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.Bicone.toCone\">CategoryTheory.Limits.Bicone.toCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.bicone\">CategoryTheory.Limits.biproduct.bicone</a> <span class=\"fn\">f</span></span>)</span></span>)</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biproductIsoPi\">ModuleCat.biproductIsoPi</a> <span class=\"fn\">f</span></span>)</span>.hom</span> <span class=\"fn\">x</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biproduct.π\">CategoryTheory.Limits.biproduct.π</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L116-L126","name":"ModuleCat.HasLimit.productLimitCone","line":116,"kind":"def","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone","doc":"Construct limit data for a product in `ModuleCat R`, using `ModuleCat.of R (∀ j, F.obj j)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.LimitCone\">CategoryTheory.Limits.LimitCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.functor\">CategoryTheory.Discrete.functor</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L115-L115","name":"ModuleCat.HasLimit.productLimitCone_cone_π","line":115,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone_cone_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone_cone_π\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone_cone_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone\">ModuleCat.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.cone</span>.π</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.natTrans\">CategoryTheory.Discrete.natTrans</a> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">J</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Pi.html#LinearMap.proj\">LinearMap.proj</a> <span class=\"fn\"><span class=\"fn\">j</span>.as</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L115-L115","name":"ModuleCat.HasLimit.productLimitCone_cone_pt","line":115,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone_cone_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone_cone_pt\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone_cone_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone\">ModuleCat.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.cone</span>.pt</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L115-L115","name":"ModuleCat.HasLimit.productLimitCone_isLimit_lift","line":115,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone_isLimit_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone_isLimit_lift\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">productLimitCone_isLimit_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit.lift\">CategoryTheory.Limits.IsLimit.lift</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.productLimitCone\">ModuleCat.HasLimit.productLimitCone</a> <span class=\"fn\">f</span></span>)</span>.isLimit</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.lift\">ModuleCat.HasLimit.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L103-L110","name":"ModuleCat.HasLimit.lift","line":103,"kind":"def","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.lift","doc":"The map from an arbitrary cone over an indexed family of abelian groups\nto the cartesian product of those groups.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.lift\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.pt</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">J</span>) → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L102-L102","name":"ModuleCat.HasLimit.lift_apply","line":102,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.lift_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.lift_apply\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">HasLimit</span>.<span class=\"name\">lift_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">s</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.HasLimit.lift\">ModuleCat.HasLimit.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.π</span>.app <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\">j</span> }</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L90-L92","name":"ModuleCat.biprodIsoProd_inv_comp_snd","line":90,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_snd\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biprodIsoProd_inv_comp_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd\">ModuleCat.biprodIsoProd</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.inv</span> <span class=\"fn\">CategoryTheory.Limits.biprod.snd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Prod.html#LinearMap.snd\">LinearMap.snd</a> <span class=\"fn\">R</span> <span class=\"fn\">↑<span class=\"fn\">M</span></span> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L89-L89","name":"ModuleCat.biprodIsoProd_inv_comp_snd_apply","line":89,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_snd_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_snd_apply\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biprodIsoProd_inv_comp_snd_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>)</span>.obj <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.cone</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.snd</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit.conePointUniqueUpToIso\">CategoryTheory.Limits.IsLimit.conePointUniqueUpToIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.BinaryBiproduct.isLimit\">CategoryTheory.Limits.BinaryBiproduct.isLimit</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.isLimit</span></span>)</span>.inv</span>\n      <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Prod.html#LinearMap.snd\">LinearMap.snd</a> <span class=\"fn\">R</span> <span class=\"fn\">↑<span class=\"fn\">M</span></span> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L84-L86","name":"ModuleCat.biprodIsoProd_inv_comp_fst","line":84,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_fst\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biprodIsoProd_inv_comp_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd\">ModuleCat.biprodIsoProd</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.inv</span> <span class=\"fn\">CategoryTheory.Limits.biprod.fst</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Prod.html#LinearMap.fst\">LinearMap.fst</a> <span class=\"fn\">R</span> <span class=\"fn\">↑<span class=\"fn\">M</span></span> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L83-L83","name":"ModuleCat.biprodIsoProd_inv_comp_fst_apply","line":83,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_fst_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_inv_comp_fst_apply\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biprodIsoProd_inv_comp_fst_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>)</span>.obj <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.cone</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.fst</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit.conePointUniqueUpToIso\">CategoryTheory.Limits.IsLimit.conePointUniqueUpToIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.BinaryBiproduct.isLimit\">CategoryTheory.Limits.BinaryBiproduct.isLimit</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.isLimit</span></span>)</span>.inv</span>\n      <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Prod.html#LinearMap.fst\">LinearMap.fst</a> <span class=\"fn\">R</span> <span class=\"fn\">↑<span class=\"fn\">M</span></span> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L75-L77","name":"ModuleCat.biprodIsoProd","line":75,"kind":"def","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd","doc":"We verify that the biproduct in `ModuleCat R` is isomorphic to\nthe cartesian product of the underlying types:\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biprodIsoProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.biprod\">⊞</a> <span class=\"fn\">N</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L74-L74","name":"ModuleCat.biprodIsoProd_hom_apply","line":74,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd_hom_apply\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">biprodIsoProd_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.BinaryBicone.toCone\">CategoryTheory.Limits.BinaryBicone.toCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.BinaryBiproduct.bicone\">CategoryTheory.Limits.BinaryBiproduct.bicone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>)</span>.pt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.biprodIsoProd\">ModuleCat.biprodIsoProd</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.hom</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.fst</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">CategoryTheory.Limits.biprod.snd</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L66-L68","name":"ModuleCat.binaryProductLimitCone_cone_π_app_right","line":66,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_cone_π_app_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_cone_π_app_right\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">binaryProductLimitCone_cone_π_app_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.cone</span>.π</span>.app <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.right\">CategoryTheory.Limits.WalkingPair.right</a> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Prod.html#LinearMap.snd\">LinearMap.snd</a> <span class=\"fn\">R</span> <span class=\"fn\">↑<span class=\"fn\">M</span></span> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L60-L62","name":"ModuleCat.binaryProductLimitCone_cone_π_app_left","line":60,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_cone_π_app_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_cone_π_app_left\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">binaryProductLimitCone_cone_π_app_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.cone</span>.π</span>.app <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.left\">CategoryTheory.Limits.WalkingPair.left</a> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Prod.html#LinearMap.fst\">LinearMap.fst</a> <span class=\"fn\">R</span> <span class=\"fn\">↑<span class=\"fn\">M</span></span> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L43-L56","name":"ModuleCat.binaryProductLimitCone","line":43,"kind":"def","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone","doc":"Construct limit data for a binary product in `ModuleCat R`, using `ModuleCat.of R (M × N)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">binaryProductLimitCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.LimitCone\">CategoryTheory.Limits.LimitCone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.pair\">CategoryTheory.Limits.pair</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L42-L42","name":"ModuleCat.binaryProductLimitCone_cone_pt","line":42,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_cone_pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_cone_pt\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">binaryProductLimitCone_cone_pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.cone</span>.pt</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<span class=\"fn\">N</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L42-L42","name":"ModuleCat.binaryProductLimitCone_isLimit_lift","line":42,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_isLimit_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone_isLimit_lift\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">binaryProductLimitCone_isLimit_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(N : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.pair\">CategoryTheory.Limits.pair</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit.lift\">CategoryTheory.Limits.IsLimit.lift</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.binaryProductLimitCone\">ModuleCat.binaryProductLimitCone</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span>.isLimit</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Prod.html#LinearMap.prod\">LinearMap.prod</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.π</span>.app <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.left\">CategoryTheory.Limits.WalkingPair.left</a> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.π</span>.app <span class=\"fn\">{ <span class=\"fn\">as</span> := <a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.WalkingPair.right\">CategoryTheory.Limits.WalkingPair.right</a> }</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L35-L36","name":"ModuleCat.instHasFiniteBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory","line":35,"kind":"instance","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.instHasFiniteBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.instHasFiniteBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">instHasFiniteBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.HasFiniteBiproducts\">CategoryTheory.Limits.HasFiniteBiproducts</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/ModuleCat/Biproducts.lean#L32-L33","name":"ModuleCat.instHasBinaryBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory","line":32,"kind":"instance","docLink":"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.instHasBinaryBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/ModuleCat/Biproducts.html#ModuleCat.instHasBinaryBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory\"><span class=\"name\">ModuleCat</span>.<span class=\"name\">instHasBinaryBiproductsModuleCatModuleCategoryPreadditiveHasZeroMorphismsInstPreadditiveModuleCatModuleCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.HasBinaryBiproducts\">CategoryTheory.Limits.HasBinaryBiproducts</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">R</span></span>)</span></span></div></div>"}]}