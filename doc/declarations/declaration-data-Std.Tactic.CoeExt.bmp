{"name":"Std.Tactic.CoeExt","instances":[{"typeNames":["Std.Tactic.Coe.CoeFnType"],"name":"Std.Tactic.Coe.instInhabitedCoeFnType","className":"Inhabited"},{"typeNames":["Std.Tactic.Coe.CoeFnType"],"name":"Std.Tactic.Coe.instReprCoeFnType","className":"Repr"},{"typeNames":["Eq"],"name":"Std.Tactic.Coe.instDecidableEqCoeFnType","className":"Decidable"},{"typeNames":["Std.Tactic.Coe.CoeFnType"],"name":"Std.Tactic.Coe.instToExprCoeFnType","className":"Lean.ToExpr"},{"typeNames":["Std.Tactic.Coe.CoeFnInfo"],"name":"Std.Tactic.Coe.instInhabitedCoeFnInfo","className":"Inhabited"},{"typeNames":["Std.Tactic.Coe.CoeFnInfo"],"name":"Std.Tactic.Coe.instReprCoeFnInfo","className":"Repr"},{"typeNames":["Std.Tactic.Coe.CoeFnInfo"],"name":"Std.Tactic.Coe.instToExprCoeFnInfo","className":"Lean.ToExpr"}],"imports":["Init","Lean.PrettyPrinter.Delaborator.Builtins","Std.Lean.Delaborator"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L130-L135","name":"Std.Tactic.Coe.Attr.coe","line":130,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.Attr.coe","doc":"The `@[coe]` attribute on a function (which should also appear in a\n`instance : Coe A B := ⟨myFn⟩` declaration) allows the delaborator to show\napplications of this function as `↑` when printing expressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.Attr.coe\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">Attr</span>.<span class=\"name\">coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L121-L128","name":"Std.Tactic.Coe.registerCoercion","line":121,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.registerCoercion","doc":"Add `name` to the coercion extension and add a coercion delaborator for the function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.registerCoercion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">registerCoercion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L107-L118","name":"Std.Tactic.Coe.addCoeDelaborator","line":107,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.addCoeDelaborator","doc":"Add a coercion delaborator for the given function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.addCoeDelaborator\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">addCoeDelaborator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L94-L104","name":"Std.Tactic.Coe.coeDelaborator","line":94,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeDelaborator","doc":"This delaborator tries to elide functions which are known coercions.\nFor example, `Int.ofNat` is a coercion, so instead of printing `ofNat n` we just print `↑n`,\nand when re-parsing this we can (usually) recover the specific coercion being used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeDelaborator\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">coeDelaborator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L84-L85","name":"Std.Tactic.Coe.getCoeFnInfo?","line":84,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.getCoeFnInfo?","doc":"Lookup the coercion information for a given function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.getCoeFnInfo?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">getCoeFnInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L76-L81","name":"Std.Tactic.Coe.coeExt","line":76,"kind":"opaque","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeExt","doc":"The environment extension for tracking coercion functions for delaboration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeExt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">coeExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L72-L74","name":"Std.Tactic.Coe.instToExprCoeFnInfo","line":72,"kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instToExprCoeFnInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instToExprCoeFnInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">instToExprCoeFnInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L70-L70","name":"Std.Tactic.Coe.instReprCoeFnInfo","line":70,"kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instReprCoeFnInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instReprCoeFnInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">instReprCoeFnInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L70-L70","name":"Std.Tactic.Coe.instInhabitedCoeFnInfo","line":70,"kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instInhabitedCoeFnInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instInhabitedCoeFnInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">instInhabitedCoeFnInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L69-L69","name":"Std.Tactic.Coe.CoeFnInfo.type","line":69,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.type","doc":"The type of coercion "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.type\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnInfo</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L67-L67","name":"Std.Tactic.Coe.CoeFnInfo.coercee","line":67,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.coercee","doc":"The argument index that represents the value being coerced "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.coercee\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnInfo</span>.<span class=\"name\">coercee</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L65-L65","name":"Std.Tactic.Coe.CoeFnInfo.numArgs","line":65,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.numArgs","doc":"The number of arguments to the coercion function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.numArgs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnInfo</span>.<span class=\"name\">numArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L63-L63","name":"Std.Tactic.Coe.CoeFnInfo.mk","line":63,"kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(numArgs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(coercee : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\">Std.Tactic.Coe.CoeFnInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L63-L70","name":"Std.Tactic.Coe.CoeFnInfo","line":63,"kind":"structure","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo","doc":"Information associated to a coercion function to enable sensible delaboration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L55-L60","name":"Std.Tactic.Coe.instToExprCoeFnType","line":55,"kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instToExprCoeFnType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instToExprCoeFnType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">instToExprCoeFnType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L53-L53","name":"Std.Tactic.Coe.instDecidableEqCoeFnType","line":53,"kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instDecidableEqCoeFnType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instDecidableEqCoeFnType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">instDecidableEqCoeFnType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L53-L53","name":"Std.Tactic.Coe.instReprCoeFnType","line":53,"kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instReprCoeFnType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instReprCoeFnType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">instReprCoeFnType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L53-L53","name":"Std.Tactic.Coe.instInhabitedCoeFnType","line":53,"kind":"instance","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instInhabitedCoeFnType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.instInhabitedCoeFnType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">instInhabitedCoeFnType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L51-L52","name":"Std.Tactic.Coe.CoeFnType.coeSort","line":51,"kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coeSort","doc":"The coercion to a type, see `CoeSort.coe` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coeSort\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnType</span>.<span class=\"name\">coeSort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L49-L50","name":"Std.Tactic.Coe.CoeFnType.coeFun","line":49,"kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coeFun","doc":"The coercion to a function type, see `CoeFun.coe` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coeFun\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnType</span>.<span class=\"name\">coeFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L47-L48","name":"Std.Tactic.Coe.CoeFnType.coe","line":47,"kind":"ctor","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coe","doc":"The basic coercion `↑x`, see `CoeT.coe` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType.coe\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnType</span>.<span class=\"name\">coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\">Std.Tactic.Coe.CoeFnType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L46-L53","name":"Std.Tactic.Coe.CoeFnType","line":46,"kind":"inductive","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType","doc":"The different types of coercions that are supported by the `coe` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.CoeFnType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">CoeFnType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L37-L43","name":"Std.Tactic.Coe.coeSortNotation","line":37,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeSortNotation","doc":"`↥ t` coerces `t` to a type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeSortNotation\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">coeSortNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/CoeExt.lean#L28-L35","name":"Std.Tactic.Coe.coeFunNotation","line":28,"kind":"def","docLink":"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeFunNotation","doc":"`⇑ t` coerces `t` to a function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/CoeExt.html#Std.Tactic.Coe.coeFunNotation\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Coe</span>.<span class=\"name\">coeFunNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}