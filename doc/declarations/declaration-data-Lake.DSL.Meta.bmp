{"name":"Lake.DSL.Meta","instances":[{"typeNames":["System.FilePath"],"name":"Lake.DSL.instToExprFilePath","className":"Lean.ToExpr"}],"imports":["Init","Lean.Elab.Eval","Lean.Elab.ElabRules"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L101-L103","name":"Lake.DSL.instToExprFilePath","line":101,"kind":"instance","docLink":"./Lake/DSL/Meta.html#Lake.DSL.instToExprFilePath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.instToExprFilePath\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">instToExprFilePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">Lake.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L79-L97","name":"Lake.DSL.elabRunIO","line":79,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.elabRunIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.elabRunIO\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">elabRunIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L72-L76","name":"Lake.DSL.runIO","line":72,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.runIO","doc":"Executes a term of type `IO α` at elaboration-time\nand produces an expression corresponding to the result via `ToExpr α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.runIO\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">runIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L69-L70","name":"Lake.DSL.toExprIO","line":69,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.toExprIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.toExprIO\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">toExprIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L67-L67","name":"Lake.DSL.evalExpr","line":67,"kind":"opaque","docLink":"./Lake/DSL/Meta.html#Lake.DSL.evalExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.evalExpr\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">evalExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(safety : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety.safe\">Lean.DefinitionSafety.safe</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L31-L56","name":"Lake.DSL.metaIf","line":31,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.metaIf","doc":"The `meta if` command has two forms:\n\n```lean\nmeta if <c:term> then <a:command>\nmeta if <c:term> then <a:command> else <b:command>\n```\n\nIt expands to the command `a` if the term `c` evaluates to true\n(at elaboration time). Otherwise, it expands to command `b` (if an `else`\nclause is provided).\n\nOne can use this command to specify, for example, external library targets\nonly available on specific platforms:\n\n```lean\nmeta if System.Platform.isWindows then\nextern_lib winOnlyLib := ...\nelse meta if System.Platform.isOSX then\nextern_lib macOnlyLib := ...\nelse\nextern_lib linuxOnlyLib := ...\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.metaIf\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">metaIf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L26-L29","name":"Lake.DSL.expandCmdDo","line":26,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.expandCmdDo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.expandCmdDo\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">expandCmdDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lake.DSL.cmdDo</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Command\">Lean.Command</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L19-L24","name":"Lake.DSL.cmdDo","line":19,"kind":"def","docLink":"./Lake/DSL/Meta.html#Lake.DSL.cmdDo","doc":"The `do` command syntax groups multiple similarly indented commands together.\nThe group can then be passed to another command that usually only accepts a\nsingle command (e.g., `meta if`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.cmdDo\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">cmdDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/lake/Lake/DSL/Meta.lean#L17-L17","name":"Lake.DSL.evalTerm","line":17,"kind":"opaque","docLink":"./Lake/DSL/Meta.html#Lake.DSL.evalTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Meta.html#Lake.DSL.evalTerm\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">evalTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(safety : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">Lean.DefinitionSafety</a> <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety.safe\">Lean.DefinitionSafety.safe</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span></div></div>"}]}