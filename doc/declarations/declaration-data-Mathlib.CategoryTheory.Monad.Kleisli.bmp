{"name":"Mathlib.CategoryTheory.Monad.Kleisli","instances":[{"typeNames":["CategoryTheory.Kleisli"],"name":"CategoryTheory.Kleisli.instInhabitedKleisli","className":"Inhabited"},{"typeNames":["CategoryTheory.Kleisli"],"name":"CategoryTheory.Kleisli.Kleisli.category","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.Cokleisli"],"name":"CategoryTheory.Cokleisli.instInhabitedCokleisli","className":"Inhabited"},{"typeNames":["CategoryTheory.Cokleisli"],"name":"CategoryTheory.Cokleisli.Cokleisli.category","className":"CategoryTheory.Category"}],"imports":["Init","Mathlib.CategoryTheory.Adjunction.Basic","Mathlib.CategoryTheory.Monad.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L179-L180","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisliCompFromCokleisliIsoSelf","line":179,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisliCompFromCokleisliIsoSelf","doc":"The composition of the adjunction gives the original functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisliCompFromCokleisliIsoSelf\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisliCompFromCokleisliIsoSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">CategoryTheory.Cokleisli.Adjunction.toCokleisli</a> <span class=\"fn\">U</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">CategoryTheory.Cokleisli.Adjunction.fromCokleisli</a> <span class=\"fn\">U</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\">U</span>.toFunctor</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L168-L175","name":"CategoryTheory.Cokleisli.Adjunction.adj","line":168,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.adj","doc":"The co-Kleisli adjunction which gives rise to the monad `(U, ε_ U, δ_ U)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">CategoryTheory.Cokleisli.Adjunction.fromCokleisli</a> <span class=\"fn\">U</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">CategoryTheory.Cokleisli.Adjunction.toCokleisli</a> <span class=\"fn\">U</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L154-L164","name":"CategoryTheory.Cokleisli.Adjunction.fromCokleisli","line":154,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli","doc":"The left adjoint of the adjunction which induces the comonad `(U, ε_ U, δ_ U)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromCokleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">CategoryTheory.Cokleisli</a> <span class=\"fn\">U</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L153-L153","name":"CategoryTheory.Cokleisli.Adjunction.fromCokleisli_map","line":153,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromCokleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">CategoryTheory.Cokleisli</a> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">CategoryTheory.Cokleisli</a> <span class=\"fn\">U</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">CategoryTheory.Cokleisli.Adjunction.fromCokleisli</a> <span class=\"fn\">U</span></span>)</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad.δ\">CategoryTheory.Comonad.δ</a> <span class=\"fn\">U</span></span>)</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">U</span>.map <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L153-L153","name":"CategoryTheory.Cokleisli.Adjunction.fromCokleisli_obj","line":153,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromCokleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">CategoryTheory.Cokleisli</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">CategoryTheory.Cokleisli.Adjunction.fromCokleisli</a> <span class=\"fn\">U</span></span>)</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">U</span>.obj <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L143-L149","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisli","line":143,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli","doc":"The right adjoint of the adjunction which induces the comonad `(U, ε_ U, δ_ U)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">CategoryTheory.Cokleisli</a> <span class=\"fn\">U</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L142-L142","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisli_map","line":142,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">C</span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">CategoryTheory.Cokleisli.Adjunction.toCokleisli</a> <span class=\"fn\">U</span></span>)</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad.ε\">CategoryTheory.Comonad.ε</a> <span class=\"fn\">U</span></span>)</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L142-L142","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisli_obj","line":142,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">CategoryTheory.Cokleisli.Adjunction.toCokleisli</a> <span class=\"fn\">U</span></span>)</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L125-L136","name":"CategoryTheory.Cokleisli.Cokleisli.category","line":125,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Cokleisli.category","doc":"The co-Kleisli category on a comonad `U`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Cokleisli.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">CategoryTheory.Cokleisli</a> <span class=\"fn\">U</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L121-L122","name":"CategoryTheory.Cokleisli.instInhabitedCokleisli","line":121,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.instInhabitedCokleisli","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.instInhabitedCokleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">instInhabitedCokleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">CategoryTheory.Cokleisli</a> <span class=\"fn\">U</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L113-L114","name":"CategoryTheory.Cokleisli","line":113,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli","doc":"The objects for the co-Kleisli category of the comonad `U : Comonad C`, which are the same\nthing as objects of the base category `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(_U : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">CategoryTheory.Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L101-L102","name":"CategoryTheory.Kleisli.Adjunction.toKleisliCompFromKleisliIsoSelf","line":101,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisliCompFromKleisliIsoSelf","doc":"The composition of the adjunction gives the original functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisliCompFromKleisliIsoSelf\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisliCompFromKleisliIsoSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">CategoryTheory.Kleisli.Adjunction.toKleisli</a> <span class=\"fn\">T</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">CategoryTheory.Kleisli.Adjunction.fromKleisli</a> <span class=\"fn\">T</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\">T</span>.toFunctor</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L89-L97","name":"CategoryTheory.Kleisli.Adjunction.adj","line":89,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.adj","doc":"The Kleisli adjunction which gives rise to the monad `(T, η_ T, μ_ T)`.\ncf Lemma 5.2.11 of [Riehl][riehl2017]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">CategoryTheory.Kleisli.Adjunction.toKleisli</a> <span class=\"fn\">T</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">CategoryTheory.Kleisli.Adjunction.fromKleisli</a> <span class=\"fn\">T</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L75-L84","name":"CategoryTheory.Kleisli.Adjunction.fromKleisli","line":75,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli","doc":"The right adjoint of the adjunction which induces the monad `(T, η_ T, μ_ T)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromKleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">CategoryTheory.Kleisli</a> <span class=\"fn\">T</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L74-L74","name":"CategoryTheory.Kleisli.Adjunction.fromKleisli_obj","line":74,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromKleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">CategoryTheory.Kleisli</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">CategoryTheory.Kleisli.Adjunction.fromKleisli</a> <span class=\"fn\">T</span></span>)</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">T</span>.obj <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L74-L74","name":"CategoryTheory.Kleisli.Adjunction.fromKleisli_map","line":74,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromKleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">CategoryTheory.Kleisli</a> <span class=\"fn\">T</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">CategoryTheory.Kleisli.Adjunction.fromKleisli</a> <span class=\"fn\">T</span></span>)</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">T</span>.map <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad.μ\">CategoryTheory.Monad.μ</a> <span class=\"fn\">T</span></span>)</span>.app <span class=\"fn\">Y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L64-L70","name":"CategoryTheory.Kleisli.Adjunction.toKleisli","line":64,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli","doc":"The left adjoint of the adjunction which induces the monad `(T, η_ T, μ_ T)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">CategoryTheory.Kleisli</a> <span class=\"fn\">T</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L63-L63","name":"CategoryTheory.Kleisli.Adjunction.toKleisli_map","line":63,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">CategoryTheory.Kleisli.Adjunction.toKleisli</a> <span class=\"fn\">T</span></span>)</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad.η\">CategoryTheory.Monad.η</a> <span class=\"fn\">T</span></span>)</span>.app <span class=\"fn\">Y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L63-L63","name":"CategoryTheory.Kleisli.Adjunction.toKleisli_obj","line":63,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">CategoryTheory.Kleisli.Adjunction.toKleisli</a> <span class=\"fn\">T</span></span>)</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L47-L57","name":"CategoryTheory.Kleisli.Kleisli.category","line":47,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Kleisli.category","doc":"The Kleisli category on a monad `T`.\ncf Definition 5.2.9 in [Riehl][riehl2017]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Kleisli.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">CategoryTheory.Kleisli</a> <span class=\"fn\">T</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L42-L43","name":"CategoryTheory.Kleisli.instInhabitedKleisli","line":42,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.instInhabitedKleisli","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.instInhabitedKleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">instInhabitedKleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">CategoryTheory.Kleisli</a> <span class=\"fn\">T</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monad/Kleisli.lean#L34-L35","name":"CategoryTheory.Kleisli","line":34,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli","doc":"The objects for the Kleisli category of the monad `T : Monad C`, which are the same\nthing as objects of the base category `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(_T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">CategoryTheory.Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}