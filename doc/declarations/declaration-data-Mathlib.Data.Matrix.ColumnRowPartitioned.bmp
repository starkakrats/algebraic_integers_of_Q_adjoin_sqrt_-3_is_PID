{"name":"Mathlib.Data.Matrix.ColumnRowPartitioned","instances":[],"imports":["Init","Mathlib.Data.Matrix.Basic","Mathlib.Data.Matrix.Block","Mathlib.LinearAlgebra.Matrix.NonsingularInverse"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L253-L256","name":"Matrix.conjTranspose_fromRows_eq_fromColumns_conjTranspose","line":253,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.conjTranspose_fromRows_eq_fromColumns_conjTranspose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.conjTranspose_fromRows_eq_fromColumns_conjTranspose\"><span class=\"name\">Matrix</span>.<span class=\"name\">conjTranspose_fromRows_eq_fromColumns_conjTranspose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#Star\">Star</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.conjTranspose\">Matrix.conjTranspose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.conjTranspose\">Matrix.conjTranspose</a> <span class=\"fn\">A₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.conjTranspose\">Matrix.conjTranspose</a> <span class=\"fn\">A₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L246-L249","name":"Matrix.conjTranspose_fromColumns_eq_fromRows_conjTranspose","line":246,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.conjTranspose_fromColumns_eq_fromRows_conjTranspose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.conjTranspose_fromColumns_eq_fromRows_conjTranspose\"><span class=\"name\">Matrix</span>.<span class=\"name\">conjTranspose_fromColumns_eq_fromRows_conjTranspose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Star/Basic.html#Star\">Star</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.conjTranspose\">Matrix.conjTranspose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.conjTranspose\">Matrix.conjTranspose</a> <span class=\"fn\">A₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.conjTranspose\">Matrix.conjTranspose</a> <span class=\"fn\">A₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L233-L237","name":"Matrix.equiv_compl_fromColumns_mul_fromRows_eq_one_comm","line":233,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.equiv_compl_fromColumns_mul_fromRows_eq_one_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.equiv_compl_fromColumns_mul_fromRows_eq_one_comm\"><span class=\"name\">Matrix</span>.<span class=\"name\">equiv_compl_fromColumns_mul_fromRows_eq_one_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">n</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">i</span> : <span class=\"fn\">n</span> // <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">i</span> : <span class=\"fn\">n</span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span></span> }</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">{ <span class=\"fn\">i</span> : <span class=\"fn\">n</span> // <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">{ <span class=\"fn\">i</span> : <span class=\"fn\">n</span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span></span> }</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L217-L229","name":"Matrix.fromColumns_mul_fromRows_eq_one_comm","line":217,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_mul_fromRows_eq_one_comm","doc":"Multiplication of a matrix by its inverse is commutative.\nThis is the column and row partitioned matrix form of `Matrix.mul_eq_one_comm`.\n\nThe condition `e : n ≃ n₁ ⊕ n₂` states that `fromColumns A₁ A₂` and `fromRows B₁ B₂` are \"square\".\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_mul_fromRows_eq_one_comm\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_mul_fromRows_eq_one_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">n₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">n₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">n₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L200-L204","name":"Matrix.fromBlocks_mul_fromRows","line":200,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromBlocks_mul_fromRows","doc":"A block matrix mulitplied by a row partitioned matrix gives a row partitioned matrix "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromBlocks_mul_fromRows\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromBlocks_mul_fromRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">B₁₁</span> <span class=\"fn\">B₁₂</span> <span class=\"fn\">B₂₁</span> <span class=\"fn\">B₂₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">B₁₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">A₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">B₁₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">A₂</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">B₂₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">A₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">B₂₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">A₂</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L193-L197","name":"Matrix.fromColumns_mul_fromBlocks","line":193,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_mul_fromBlocks","doc":"A column partitioned matrix multipiled by a block matrix results in a column partioned matrix "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_mul_fromBlocks\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_mul_fromBlocks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">m₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">m₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">m₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">m₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">B₁₁</span> <span class=\"fn\">B₁₂</span> <span class=\"fn\">B₂₁</span> <span class=\"fn\">B₂₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₁₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₂₁</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₁₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₂₂</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L186-L190","name":"Matrix.fromColumns_mul_fromRows","line":186,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_mul_fromRows","doc":"A column partitioned matrix mulitplied by a row partitioned matrix gives the sum of the \"outer\"\nproducts of the block matrices "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_mul_fromRows\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_mul_fromRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L178-L182","name":"Matrix.fromRows_mul_fromColumns","line":178,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_mul_fromColumns","doc":"A row partitioned matrix multiplied by a column partioned matrix gives a 2 by 2 block matrix "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_mul_fromColumns\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_mul_fromColumns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L172-L175","name":"Matrix.fromRows_fromColumn_eq_fromBlocks","line":172,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_fromColumn_eq_fromBlocks","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_fromColumn_eq_fromBlocks\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_fromColumn_eq_fromBlocks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(B₁₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">B₁₁</span> <span class=\"fn\">B₁₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">B₂₁</span> <span class=\"fn\">B₂₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">B₁₁</span> <span class=\"fn\">B₁₂</span> <span class=\"fn\">B₂₁</span> <span class=\"fn\">B₂₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L166-L169","name":"Matrix.fromColumns_fromRows_eq_fromBlocks","line":166,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_fromRows_eq_fromBlocks","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_fromRows_eq_fromBlocks\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_fromRows_eq_fromBlocks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(B₁₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁₁</span> <span class=\"fn\">B₂₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁₂</span> <span class=\"fn\">B₂₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Block.html#Matrix.fromBlocks\">Matrix.fromBlocks</a> <span class=\"fn\">B₁₁</span> <span class=\"fn\">B₁₂</span> <span class=\"fn\">B₂₁</span> <span class=\"fn\">B₂₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L162-L163","name":"Matrix.fromColumns_zero","line":162,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_zero\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L158-L159","name":"Matrix.fromRows_zero","line":158,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_zero\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L153-L155","name":"Matrix.mul_fromColumns","line":153,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.mul_fromColumns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.mul_fromColumns\"><span class=\"name\">Matrix</span>.<span class=\"name\">mul_fromColumns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L148-L150","name":"Matrix.fromRows_mul","line":148,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_mul\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">B</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L139-L141","name":"Matrix.transpose_fromRows","line":139,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.transpose_fromRows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.transpose_fromRows\"><span class=\"name\">Matrix</span>.<span class=\"name\">transpose_fromRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">A₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">A₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L133-L135","name":"Matrix.transpose_fromColumns","line":133,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.transpose_fromColumns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.transpose_fromColumns\"><span class=\"name\">Matrix</span>.<span class=\"name\">transpose_fromColumns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">A₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.transpose\">Matrix.transpose</a> <span class=\"fn\">A₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L127-L129","name":"Matrix.fromRows_ext_iff","line":127,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_ext_iff\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">B₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">B₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L123-L125","name":"Matrix.fromColumns_ext_iff","line":123,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_ext_iff\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">B₁</span> <span class=\"fn\">B₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">B₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">A₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">B₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L118-L121","name":"Matrix.fromColumns_inj","line":118,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_inj\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <span class=\"fn\">Matrix.fromColumns</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L113-L116","name":"Matrix.fromRows_inj","line":113,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_inj\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <span class=\"fn\">Matrix.fromRows</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L110-L111","name":"Matrix.fromRows_toRows","line":110,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_toRows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_toRows\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_toRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁\">Matrix.toRows₁</a> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂\">Matrix.toRows₂</a> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L105-L107","name":"Matrix.fromColumns_toColumns","line":105,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_toColumns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_toColumns\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_toColumns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">n₂</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁\">Matrix.toColumns₁</a> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂\">Matrix.toColumns₂</a> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L101-L102","name":"Matrix.toColumns₂_fromColumns","line":101,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂_fromColumns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂_fromColumns\"><span class=\"name\">Matrix</span>.<span class=\"name\">toColumns₂_fromColumns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂\">Matrix.toColumns₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L97-L98","name":"Matrix.toColumns₁_fromColumns","line":97,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁_fromColumns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁_fromColumns\"><span class=\"name\">Matrix</span>.<span class=\"name\">toColumns₁_fromColumns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁\">Matrix.toColumns₁</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L93-L94","name":"Matrix.toColumns₂_apply","line":93,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">toColumns₂_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">n₂</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂\">Matrix.toColumns₂</a> <span class=\"fn\">A</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L89-L90","name":"Matrix.toColumns₁_apply","line":89,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">toColumns₁_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">n₂</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁\">Matrix.toColumns₁</a> <span class=\"fn\">A</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L85-L86","name":"Matrix.toRows₂_fromRows","line":85,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂_fromRows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂_fromRows\"><span class=\"name\">Matrix</span>.<span class=\"name\">toRows₂_fromRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂\">Matrix.toRows₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L81-L82","name":"Matrix.toRows₁_fromRows","line":81,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁_fromRows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁_fromRows\"><span class=\"name\">Matrix</span>.<span class=\"name\">toRows₁_fromRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁\">Matrix.toRows₁</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L77-L78","name":"Matrix.toRows₂_apply","line":77,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">toRows₂_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂\">Matrix.toRows₂</a> <span class=\"fn\">A</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L73-L74","name":"Matrix.toRows₁_apply","line":73,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁_apply\"><span class=\"name\">Matrix</span>.<span class=\"name\">toRows₁_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁\">Matrix.toRows₁</a> <span class=\"fn\">A</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L69-L70","name":"Matrix.fromColumns_apply_inr","line":69,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_apply_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_apply_inr\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_apply_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L65-L66","name":"Matrix.fromColumns_apply_inl","line":65,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_apply_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns_apply_inl\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns_apply_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\">Matrix.fromColumns</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A₁</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L61-L62","name":"Matrix.fromRows_apply_inr","line":61,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_apply_inr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_apply_inr\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_apply_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L57-L58","name":"Matrix.fromRows_apply_inl","line":57,"kind":"theorem","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_apply_inl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows_apply_inl\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows_apply_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">m₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\">Matrix.fromRows</a> <span class=\"fn\">A₁</span> <span class=\"fn\">A₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">A₁</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L54-L54","name":"Matrix.toRows₂","line":54,"kind":"def","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂","doc":"Given a row partitioned matrix extract the second row "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₂\"><span class=\"name\">Matrix</span>.<span class=\"name\">toRows₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L51-L51","name":"Matrix.toRows₁","line":51,"kind":"def","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁","doc":"Given a row partitioned matrix extract the first row "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toRows₁\"><span class=\"name\">Matrix</span>.<span class=\"name\">toRows₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L48-L48","name":"Matrix.toColumns₂","line":48,"kind":"def","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂","doc":"Given a column partitioned matrix extract the second column "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₂\"><span class=\"name\">Matrix</span>.<span class=\"name\">toColumns₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">n₂</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L45-L45","name":"Matrix.toColumns₁","line":45,"kind":"def","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁","doc":"Given a column partitioned matrix extract the first column "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.toColumns₁\"><span class=\"name\">Matrix</span>.<span class=\"name\">toColumns₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">n₂</span></span>)</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L41-L42","name":"Matrix.fromColumns","line":41,"kind":"def","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns","doc":"Concatenate together two matrices B₁[m × n₁] and B₂[m × n₂] with the same rows (M) to get a\nbigger matrix indexed by [m × (n₁ ⊕ n₂)] "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromColumns\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromColumns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₁ : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₂ : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(B₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">n₂</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">n₂</span></span>)</span> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Matrix/ColumnRowPartitioned.lean#L36-L37","name":"Matrix.fromRows","line":36,"kind":"def","docLink":"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows","doc":"Concatenate together two matrices A₁[m₁ × N] and A₂[m₂ × N] with the same columns (N) to get a\nbigger matrix indexed by [(m₁ ⊕ m₂) × N] "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matrix/ColumnRowPartitioned.html#Matrix.fromRows\"><span class=\"name\">Matrix</span>.<span class=\"name\">fromRows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₁</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">m₂</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix\">Matrix</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span></span></div></div>"}]}