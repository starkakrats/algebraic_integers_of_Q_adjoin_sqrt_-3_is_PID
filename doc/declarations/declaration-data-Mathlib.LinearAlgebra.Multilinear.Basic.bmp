{"name":"Mathlib.LinearAlgebra.Multilinear.Basic","instances":[{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instFunLikeMultilinearMapForAll","className":"DFunLike"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instAddMultilinearMap","className":"Add"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instZeroMultilinearMap","className":"Zero"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instInhabitedMultilinearMap","className":"Inhabited"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instSMulMultilinearMap","className":"SMul"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.addCommMonoid","className":"AddCommMonoid"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instDistribMulActionMultilinearMapToAddMonoidAddCommMonoid","className":"DistribMulAction"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instModuleMultilinearMapAddCommMonoid","className":"Module"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instNoZeroSMulDivisorsMultilinearMapToZeroToMonoidWithZeroInstZeroMultilinearMapInstSMulMultilinearMapToMonoidToDistribMulAction","className":"NoZeroSMulDivisors"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instNegMultilinearMapToAddCommMonoid","className":"Neg"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instSubMultilinearMapToAddCommMonoid","className":"Sub"},{"typeNames":["MultilinearMap"],"name":"MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid","className":"AddCommGroup"}],"imports":["Init","Mathlib.Algebra.Algebra.Basic","Mathlib.Algebra.BigOperators.Order","Mathlib.Data.Fintype.BigOperators","Mathlib.Data.Fintype.Sort","Mathlib.Data.List.FinRange","Mathlib.LinearAlgebra.Pi"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1813-L1814","name":"MultilinearMap.range","line":1813,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.range","doc":"The range of a multilinear map, closed under scalar multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.range\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/SubMulAction.html#SubMulAction\">SubMulAction</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1807-L1809","name":"MultilinearMap.map_nonempty","line":1807,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_nonempty","doc":"The map is always nonempty. This lemma is needed to apply `SubMulAction.zero_mem`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_nonempty\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map\">MultilinearMap.map</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1792-L1803","name":"MultilinearMap.map","line":1792,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map","doc":"The pushforward of an indexed collection of submodule `p i ⊆ M₁ i` by `f : M₁ → M₂`.\n\nNote that this is not a submodule - it is not closed under addition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/SubMulAction.html#SubMulAction\">SubMulAction</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1771-L1776","name":"MultilinearMap.curryFinFinset_apply_const_aux","line":1771,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_apply_const_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_apply_const_aux\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset_apply_const_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Sort.html#finSumEquivOfFinset\">finSumEquivOfFinset</a> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">y</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1761-L1767","name":"MultilinearMap.curryFinFinset_apply_const","line":1761,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_apply_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_apply_const\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset_apply_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset\">MultilinearMap.curryFinFinset</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M'</span> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">y</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">y</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1753-L1757","name":"MultilinearMap.curryFinFinset_symm_apply_const","line":1753,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply_const\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset_symm_apply_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset\">MultilinearMap.curryFinFinset</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M'</span> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1741-L1750","name":"MultilinearMap.curryFinFinset_symm_apply_piecewise_const_aux","line":1741,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply_piecewise_const_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply_piecewise_const_aux\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset_symm_apply_piecewise_const_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Sort.html#finSumEquivOfFinset\">finSumEquivOfFinset</a> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1725-L1737","name":"MultilinearMap.curryFinFinset_symm_apply_piecewise_const","line":1725,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply_piecewise_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply_piecewise_const\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset_symm_apply_piecewise_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset\">MultilinearMap.curryFinFinset</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M'</span> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">y</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1714-L1721","name":"MultilinearMap.curryFinFinset_symm_apply","line":1714,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_symm_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset\">MultilinearMap.curryFinFinset</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M'</span> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Sort.html#finSumEquivOfFinset\">finSumEquivOfFinset</a> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt;\n    <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Sort.html#finSumEquivOfFinset\">finSumEquivOfFinset</a> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1706-L1710","name":"MultilinearMap.curryFinFinset_apply","line":1706,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mk : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span> → <span class=\"fn\">M'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ml : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset\">MultilinearMap.curryFinFinset</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M'</span> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">mk</span></span>)</span> <span class=\"fn\">ml</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">mk</span> <span class=\"fn\">ml</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Sort.html#finSumEquivOfFinset\">finSumEquivOfFinset</a> <span class=\"fn\">hk</span> <span class=\"fn\">hl</span></span>)</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1696-L1700","name":"MultilinearMap.curryFinFinset","line":1696,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset","doc":"If `s : Finset (Fin n)` is a finite set of cardinality `k` and its complement has cardinality\n`l`, then the space of multilinear maps on `fun i : Fin n => M'` is isomorphic to the space of\nmultilinear maps on `fun i : Fin k => M'` taking values in the space of multilinear maps\non `fun i : Fin l => M'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryFinFinset\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryFinFinset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M' : <a href=\"./foundational_types.html\">Type</a> v')</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1686-L1687","name":"MultilinearMap.coe_currySumEquiv_symm","line":1686,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_currySumEquiv_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_currySumEquiv_symm\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_currySumEquiv_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySumEquiv\">MultilinearMap.currySumEquiv</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M'</span> <span class=\"fn\">ι'</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">MultilinearMap.uncurrySum</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1680-L1681","name":"MultilinearMap.coe_currySumEquiv","line":1680,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_currySumEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_currySumEquiv\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_currySumEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySumEquiv\">MultilinearMap.currySumEquiv</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M'</span> <span class=\"fn\">ι'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">MultilinearMap.currySum</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1660-L1674","name":"MultilinearMap.currySumEquiv","line":1660,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySumEquiv","doc":"Linear equivalence between the space of multilinear maps on `∀ i : ι ⊕ ι', M'` and the space\nof multilinear maps on `∀ i : ι, M'` taking values in the space of multilinear maps\non `∀ i : ι', M'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySumEquiv\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">currySumEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> uι)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M' : <a href=\"./foundational_types.html\">Type</a> v')</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ι' : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1649-L1652","name":"MultilinearMap.uncurrySum_aux_apply","line":1649,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurrySum_aux_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurrySum_aux_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">uncurrySum_aux_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span> → <span class=\"fn\">M'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurrySum\">MultilinearMap.uncurrySum</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Sum.inl</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Sum.inr</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1631-L1645","name":"MultilinearMap.uncurrySum","line":1631,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurrySum","doc":"A multilinear map on `∀ i : ι, M'` taking values in the space of multilinear maps\non `∀ i : ι', M'` defines a multilinear map on `∀ i : ι ⊕ ι', M'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurrySum\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">uncurrySum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1624-L1626","name":"MultilinearMap.currySum_apply","line":1624,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySum_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySum_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">currySum_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">M'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">M'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySum\">MultilinearMap.currySum</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">u</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1603-L1620","name":"MultilinearMap.currySum","line":1603,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySum","doc":"A multilinear map on `∀ i : ι ⊕ ι', M'` defines a multilinear map on `∀ i : ι, M'`\ntaking values in the space of multilinear maps on `∀ i : ι', M'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.currySum\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">currySum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1581-L1594","name":"multilinearCurryRightEquiv","line":1581,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#multilinearCurryRightEquiv","doc":"The space of multilinear maps on `∀ (i : Fin (n+1)), M i` is canonically isomorphic to\nthe space of linear maps from the space of multilinear maps on `∀ (i : Fin n), M (castSucc i)` to\nthe space of linear maps on `M (last n)`, by separating the last variable. We register this\nisomorphism as a linear isomorphism in `multilinearCurryRightEquiv R M M₂`.\n\nThe direct and inverse maps are given by `f.uncurryRight` and `f.curryRight`. Use these\nunless you need the full framework of linear equivs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#multilinearCurryRightEquiv\"><span class=\"name\">multilinearCurryRightEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1566-L1569","name":"MultilinearMap.uncurry_curryRight","line":1566,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurry_curryRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurry_curryRight\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">uncurry_curryRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurryRight\">MultilinearMap.uncurryRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryRight\">MultilinearMap.curryRight</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1557-L1562","name":"MultilinearMap.curry_uncurryRight","line":1557,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curry_uncurryRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curry_uncurryRight\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curry_uncurryRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryRight\">MultilinearMap.curryRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurryRight\">MultilinearMap.uncurryRight</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1551-L1553","name":"MultilinearMap.curryRight_apply","line":1551,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryRight_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryRight_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryRight_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryRight\">MultilinearMap.curryRight</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1532-L1547","name":"MultilinearMap.curryRight","line":1532,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryRight","doc":"Given a multilinear map `f` in `n+1` variables, split the last variable to obtain\na multilinear map in `n` variables taking values in linear maps from `M (last n)` to `M₂`, given by\n`m ↦ (x ↦ f (snoc m x))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryRight\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1523-L1526","name":"MultilinearMap.uncurryRight_apply","line":1523,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurryRight_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurryRight_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">uncurryRight_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurryRight\">MultilinearMap.uncurryRight</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.init\">Fin.init</a> <span class=\"fn\">m</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1486-L1519","name":"MultilinearMap.uncurryRight","line":1486,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurryRight","doc":"Given a multilinear map `f` in `n` variables to the space of linear maps from `M (last n)` to\n`M₂`, construct the corresponding multilinear map on `n+1` variables obtained by concatenating\nthe variables, given by `m ↦ f (init m) (m (last n))`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurryRight\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">uncurryRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1464-L1475","name":"multilinearCurryLeftEquiv","line":1464,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#multilinearCurryLeftEquiv","doc":"The space of multilinear maps on `∀ (i : Fin (n+1)), M i` is canonically isomorphic to\nthe space of linear maps from `M 0` to the space of multilinear maps on\n`∀ (i : Fin n), M i.succ`, by separating the first variable. We register this isomorphism as a\nlinear isomorphism in `multilinearCurryLeftEquiv R M M₂`.\n\nThe direct and inverse maps are given by `f.uncurryLeft` and `f.curryLeft`. Use these\nunless you need the full framework of linear equivs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#multilinearCurryLeftEquiv\"><span class=\"name\">multilinearCurryLeftEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">M₂</span></span></span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1449-L1452","name":"MultilinearMap.uncurry_curryLeft","line":1449,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurry_curryLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.uncurry_curryLeft\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">uncurry_curryLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.uncurryLeft\">LinearMap.uncurryLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryLeft\">MultilinearMap.curryLeft</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1441-L1445","name":"LinearMap.curry_uncurryLeft","line":1441,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.curry_uncurryLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.curry_uncurryLeft\"><span class=\"name\">LinearMap</span>.<span class=\"name\">curry_uncurryLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">M₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryLeft\">MultilinearMap.curryLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.uncurryLeft\">LinearMap.uncurryLeft</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1435-L1437","name":"MultilinearMap.curryLeft_apply","line":1435,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryLeft_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryLeft_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryLeft_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryLeft\">MultilinearMap.curryLeft</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.cons\">Fin.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1414-L1431","name":"MultilinearMap.curryLeft","line":1414,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryLeft","doc":"Given a multilinear map `f` in `n+1` variables, split the first variable to obtain\na linear map into multilinear maps in `n` variables, given by `x ↦ (m ↦ f (cons x m))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.curryLeft\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">curryLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1407-L1409","name":"LinearMap.uncurryLeft_apply","line":1407,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.uncurryLeft_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.uncurryLeft_apply\"><span class=\"name\">LinearMap</span>.<span class=\"name\">uncurryLeft_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">M₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.uncurryLeft\">LinearMap.uncurryLeft</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">0</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.tail\">Fin.tail</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1379-L1403","name":"LinearMap.uncurryLeft","line":1379,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.uncurryLeft","doc":"Given a linear map `f` from `M 0` to multilinear maps on `n` variables,\nconstruct the corresponding multilinear map on `n+1` variables obtained by concatenating\nthe variables, given by `m ↦ f (m 0) (tail m)`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.uncurryLeft\"><span class=\"name\">LinearMap</span>.<span class=\"name\">uncurryLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">M₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1334-L1344","name":"MultilinearMap.piRingEquiv","line":1334,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.piRingEquiv","doc":"When `ι` is finite, multilinear maps on `R^ι` with values in `M₂` are in bijection with `M₂`,\nas such a multilinear map is completely determined by its value on the constant vector made of ones.\nWe register this bijection as a linear equivalence in `MultilinearMap.piRingEquiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.piRingEquiv\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">piRingEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1318-L1322","name":"MultilinearMap.map_add_sub_map_add_sub_linearDeriv","line":1318,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add_sub_map_add_sub_linearDeriv","doc":"This expresses the difference between the values of a multilinear map\nat two points \"close to `x`\" in terms of the \"derivative\" of the multilinear map at `x`\nand of \"second-order\" terms."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add_sub_map_add_sub_linearDeriv\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_add_sub_map_add_sub_linearDeriv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">h'</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.linearDeriv\">MultilinearMap.linearDeriv</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">h'</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.filter\">Finset.filter</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.card</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Powerset.html#Finset.powerset\">Finset.powerset</a> <span class=\"fn\">Finset.univ</span></span>)</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) =&gt;\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">h'</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1304-L1312","name":"MultilinearMap.map_add_eq_map_add_linearDeriv_add","line":1304,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add_eq_map_add_linearDeriv_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add_eq_map_add_linearDeriv_add\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_add_eq_map_add_linearDeriv_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.linearDeriv\">MultilinearMap.linearDeriv</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">h</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>     <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.filter\">Finset.filter</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.card</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Powerset.html#Finset.powerset\">Finset.powerset</a> <span class=\"fn\">Finset.univ</span></span>)</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) =&gt;\n      <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1289-L1301","name":"MultilinearMap.map_piecewise_sub_map_piecewise","line":1289,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_piecewise_sub_map_piecewise","doc":"This calculates the differences between the values of a multilinear map at\ntwo arguments that differ on a finset `s` of `ι`. It requires a\nlinear order on `ι` in order to express the result."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_piecewise_sub_map_piecewise\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_piecewise_sub_map_piecewise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">a</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">v</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt;\n    <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> then <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span> then <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">j</span></span> else <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">j</span></span></span> else <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">j</span></span></span></span> else <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">j</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1265-L1284","name":"MultilinearMap.map_sub_map_piecewise","line":1265,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sub_map_piecewise","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sub_map_piecewise\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_sub_map_piecewise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span> then <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">j</span></span> else <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">j</span></span></span> else <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">j</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1260-L1262","name":"MultilinearMap.map_update","line":1260,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1255-L1257","name":"MultilinearMap.map_sub","line":1255,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sub\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1248-L1251","name":"MultilinearMap.map_neg","line":1248,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_neg\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1227-L1238","name":"MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid","line":1227,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instAddCommGroupMultilinearMapToAddCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1223-L1224","name":"MultilinearMap.sub_apply","line":1223,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.sub_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.sub_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">sub_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1214-L1220","name":"MultilinearMap.instSubMultilinearMapToAddCommMonoid","line":1214,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instSubMultilinearMapToAddCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instSubMultilinearMapToAddCommMonoid\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instSubMultilinearMapToAddCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1210-L1211","name":"MultilinearMap.neg_apply","line":1210,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.neg_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.neg_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">neg_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1206-L1207","name":"MultilinearMap.instNegMultilinearMapToAddCommMonoid","line":1206,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instNegMultilinearMapToAddCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instNegMultilinearMapToAddCommMonoid\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instNegMultilinearMapToAddCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1195-L1196","name":"MultilinearMap.mkPiRing_eq_zero_iff","line":1195,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_eq_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_eq_zero_iff\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiRing_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing\">MultilinearMap.mkPiRing</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1191-L1192","name":"MultilinearMap.mkPiRing_zero","line":1191,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_zero\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiRing_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing\">MultilinearMap.mkPiRing</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1182-L1188","name":"MultilinearMap.mkPiRing_eq_iff","line":1182,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_eq_iff\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiRing_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z₁ : <span class=\"fn\">M₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z₂ : <span class=\"fn\">M₂</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing\">MultilinearMap.mkPiRing</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">z₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing\">MultilinearMap.mkPiRing</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">z₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1173-L1179","name":"MultilinearMap.mkPiRing_apply_one_eq_self","line":1173,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_apply_one_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_apply_one_eq_self\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiRing_apply_one_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing\">MultilinearMap.mkPiRing</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">1</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1168-L1170","name":"MultilinearMap.mkPiRing_apply","line":1168,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiRing_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing\">MultilinearMap.mkPiRing</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.prod\">Finset.prod</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1161-L1162","name":"MultilinearMap.mkPiRing","line":1161,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing","doc":"The canonical multilinear map on `R^ι` when `ι` is finite, associating to `m` the product of\nall the `m i` (multiplied by a fixed reference element `z` in the target module). See also\n`mkPiAlgebra` for a more general version. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiRing\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> uι)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1151-L1153","name":"MultilinearMap.smulRight_apply","line":1151,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.smulRight_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.smulRight_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">smulRight_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.smulRight\">MultilinearMap.smulRight</a> <span class=\"fn\">f</span> <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1146-L1147","name":"MultilinearMap.smulRight","line":1146,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.smulRight","doc":"Given an `R`-multilinear map `f` taking values in `R`, `f.smulRight z` is the map\nsending `m` to `f m • z`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.smulRight\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">smulRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1138-L1139","name":"MultilinearMap.mkPiAlgebraFin_apply_const","line":1138,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin_apply_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin_apply_const\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiAlgebraFin_apply_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin\">MultilinearMap.mkPiAlgebraFin</a> <span class=\"fn\">R</span> <span class=\"fn\">n</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1133-L1135","name":"MultilinearMap.mkPiAlgebraFin_apply","line":1133,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiAlgebraFin_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin\">MultilinearMap.mkPiAlgebraFin</a> <span class=\"fn\">R</span> <span class=\"fn\">n</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.ofFn\">List.ofFn</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1115-L1127","name":"MultilinearMap.mkPiAlgebraFin","line":1115,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin","doc":"Given an `R`-algebra `A`, `mkPiAlgebraFin` is the multilinear map on `A^n` associating\nto `m` the product of all the `m i`.\n\nSee also `MultilinearMap.mkPiAlgebra` for a version that assumes `[CommSemiring A]` but works\nfor `A^ι` with any finite type `ι`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebraFin\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiAlgebraFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1099-L1100","name":"MultilinearMap.mkPiAlgebra_apply","line":1099,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebra_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebra_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiAlgebra_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebra\">MultilinearMap.mkPiAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">ι</span> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.prod\">Finset.prod</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1090-L1093","name":"MultilinearMap.mkPiAlgebra","line":1090,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebra","doc":"Given an `R`-algebra `A`, `mkPiAlgebra` is the multilinear map on `A^ι` associating\nto `m` the product of all the `m i`.\n\nSee also `MultilinearMap.mkPiAlgebraFin` for a version that works with a non-commutative\nalgebra `A` but requires `ι = Fin n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mkPiAlgebra\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mkPiAlgebra</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> uι)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1071-L1077","name":"MultilinearMap.map_update_smul","line":1071,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update_smul\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_update_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">ι</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1065-L1067","name":"MultilinearMap.map_smul_univ","line":1065,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_smul_univ","doc":"Multiplicativity of a multilinear map along all coordinates at the same time,\nwriting `f (fun i => c i • m i)` as `(∏ i, c i) • f m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_smul_univ\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_smul_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.prod\">Finset.prod</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1047-L1060","name":"MultilinearMap.map_piecewise_smul","line":1047,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_piecewise_smul","doc":"If one multiplies by `c i` the coordinates in a finset `s`, then the image under a multilinear\nmap is multiplied by `∏ i in s, c i`. This is mainly an auxiliary statement to prove the result when\n`s = univ`, given in `map_smul_univ`, although it can be useful in its own right as it does not\nrequire the index set `ι` to be finite. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_piecewise_smul\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_piecewise_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span></span></span>)</span> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.prod\">Finset.prod</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">i</span></span></span></span>)</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1018-L1039","name":"MultilinearMap.compLinearMapMultilinear","line":1018,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapMultilinear","doc":"If `f` is a collection of linear maps, then the construction `MultilinearMap.compLinearMap`\nsending a multilinear map `g` to `g (f₁ ⬝ , ..., fₙ ⬝ )` is linear in `g` and multilinear in\n`f₁, ..., fₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapMultilinear\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMapMultilinear</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1018-L1018","name":"MultilinearMap.compLinearMapMultilinear_apply","line":1018,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapMultilinear_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapMultilinear_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMapMultilinear_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">MultilinearMap.compLinearMapMultilinear</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapₗ\">MultilinearMap.compLinearMapₗ</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1009-L1013","name":"MultilinearMap.compLinearMapₗ","line":1009,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapₗ","doc":"If `f` is a collection of linear maps, then the construction `MultilinearMap.compLinearMap`\nsending a multilinear map `g` to `g (f₁ ⬝ , ..., fₙ ⬝ )` is linear in `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapₗ\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMapₗ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L1009-L1009","name":"MultilinearMap.compLinearMapₗ_apply","line":1009,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapₗ_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapₗ_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMapₗ_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMapₗ\">MultilinearMap.compLinearMapₗ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L984-L990","name":"MultilinearMap.domDomCongrLinearEquiv","line":984,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv","doc":"`MultilinearMap.domDomCongr` as a `LinearEquiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrLinearEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">S</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₂</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L983-L983","name":"MultilinearMap.domDomCongrLinearEquiv_symm_apply","line":983,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv_symm_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrLinearEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₂</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv\">MultilinearMap.domDomCongrLinearEquiv</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">σ</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.invFun\">Equiv.invFun</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv\">MultilinearMap.domDomCongrEquiv</a> <span class=\"fn\">σ</span></span>)</span>.toEquiv</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L983-L983","name":"MultilinearMap.domDomCongrLinearEquiv_apply","line":983,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrLinearEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv\">MultilinearMap.domDomCongrLinearEquiv</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">σ</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">Equiv.toFun</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv\">MultilinearMap.domDomCongrEquiv</a> <span class=\"fn\">σ</span></span>)</span>.toEquiv</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L969-L975","name":"MultilinearMap.constLinearEquivOfIsEmpty","line":969,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty","doc":"The space of constant maps is equivalent to the space of maps that are multilinear with respect\nto an empty family. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">constLinearEquivOfIsEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">S</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L968-L968","name":"MultilinearMap.constLinearEquivOfIsEmpty_symm_apply","line":968,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty_symm_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">constLinearEquivOfIsEmpty_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty\">MultilinearMap.constLinearEquivOfIsEmpty</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L968-L968","name":"MultilinearMap.constLinearEquivOfIsEmpty_apply","line":968,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">constLinearEquivOfIsEmpty_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constLinearEquivOfIsEmpty\">MultilinearMap.constLinearEquivOfIsEmpty</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constOfIsEmpty\">MultilinearMap.constOfIsEmpty</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L924-L961","name":"MultilinearMap.domDomCongrLinearEquiv'","line":924,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'","doc":"The dependent version of `MultilinearMap.domDomCongrLinearEquiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrLinearEquiv'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">S</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L923-L923","name":"MultilinearMap.domDomCongrLinearEquiv'_apply","line":923,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrLinearEquiv'_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'\">MultilinearMap.domDomCongrLinearEquiv'</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span> <span class=\"fn\">σ</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span>.symm</span></span></span>,\n    <span class=\"fn\">map_add'</span> :=\n      <span class=\"fn\">(_ :\n        <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι'</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) (<span class=\"fn\">x </span>y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span>),\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span>.symm</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span>.symm</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>               <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span>.symm</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span>,\n    <span class=\"fn\">map_smul'</span> :=\n      <span class=\"fn\">(_ :\n        <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι'</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span>),\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span>.symm</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span>.symm</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L923-L923","name":"MultilinearMap.domDomCongrLinearEquiv'_symm_apply","line":923,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'_symm_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrLinearEquiv'_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.symm</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrLinearEquiv'\">MultilinearMap.domDomCongrLinearEquiv'</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span> <span class=\"fn\">σ</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span></span></span>,\n    <span class=\"fn\">map_add'</span> :=\n      <span class=\"fn\">(_ :\n        <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">x </span>y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>               <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span>,\n    <span class=\"fn\">map_smul'</span> :=\n      <span class=\"fn\">(_ :\n        <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.piCongrLeft'\">Equiv.piCongrLeft'</a> <span class=\"fn\">M₁</span> <span class=\"fn\">σ</span></span>)</span></span></a>)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L914-L918","name":"MultilinearMap.ofSubsingletonₗ","line":914,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ","doc":"Linear equivalence between linear maps `M₂ →ₗ[R] M₃`\nand one-multilinear maps `MultilinearMap R (fun _ : ι ↦ M₂) M₃`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ofSubsingletonₗ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">S</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L913-L913","name":"MultilinearMap.ofSubsingletonₗ_apply","line":913,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ofSubsingletonₗ_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ\">MultilinearMap.ofSubsingletonₗ</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton\">MultilinearMap.ofSubsingleton</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L913-L913","name":"MultilinearMap.ofSubsingletonₗ_symm_apply","line":913,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ_symm_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ofSubsingletonₗ_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./foundational_types.html\">Type</a> uS)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingletonₗ\">MultilinearMap.ofSubsingletonₗ</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton\">MultilinearMap.ofSubsingleton</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">i</span></span>)</span>.symm</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L902-L903","name":"MultilinearMap.instNoZeroSMulDivisorsMultilinearMapToZeroToMonoidWithZeroInstZeroMultilinearMapInstSMulMultilinearMapToMonoidToDistribMulAction","line":902,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instNoZeroSMulDivisorsMultilinearMapToZeroToMonoidWithZeroInstZeroMultilinearMapInstSMulMultilinearMapToMonoidToDistribMulAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instNoZeroSMulDivisorsMultilinearMapToZeroToMonoidWithZeroInstZeroMultilinearMapInstSMulMultilinearMapToMonoidToDistribMulAction\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instNoZeroSMulDivisorsMultilinearMapToZeroToMonoidWithZeroInstZeroMultilinearMapInstSMulMultilinearMapToMonoidToDistribMulAction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> uS}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L899-L900","name":"MultilinearMap.instModuleMultilinearMapAddCommMonoid","line":899,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instModuleMultilinearMapAddCommMonoid","doc":"The space of multilinear maps over an algebra over `R` is a module over `R`, for the pointwise\naddition and scalar multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instModuleMultilinearMapAddCommMonoid\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instModuleMultilinearMapAddCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> uS}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L889-L891","name":"MultilinearMap.instDistribMulActionMultilinearMapToAddMonoidAddCommMonoid","line":889,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instDistribMulActionMultilinearMapToAddMonoidAddCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instDistribMulActionMultilinearMapToAddMonoidAddCommMonoid\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instDistribMulActionMultilinearMapToAddMonoidAddCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./foundational_types.html\">Type</a> uS}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">S</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">R</span> <span class=\"fn\">S</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L873-L877","name":"LinearMap.compMultilinearMap_domDomCongr","line":873,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap_domDomCongr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap_domDomCongr\"><span class=\"name\">LinearMap</span>.<span class=\"name\">compMultilinearMap_domDomCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\">LinearMap.compMultilinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\">LinearMap.compMultilinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ</span> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L863-L867","name":"LinearMap.compMultilinearMap_codRestrict","line":863,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap_codRestrict","doc":"The multilinear version of `LinearMap.comp_codRestrict` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap_codRestrict\"><span class=\"name\">LinearMap</span>.<span class=\"name\">compMultilinearMap_codRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">M₂</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\">LinearMap.compMultilinearMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/LinearMap.html#LinearMap.codRestrict\">LinearMap.codRestrict</a> <span class=\"fn\">p</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.codRestrict\">MultilinearMap.codRestrict</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\">LinearMap.compMultilinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">p</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L856-L858","name":"LinearMap.subtype_compMultilinearMap_codRestrict","line":856,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.subtype_compMultilinearMap_codRestrict","doc":"The multilinear version of `LinearMap.subtype_comp_codRestrict` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.subtype_compMultilinearMap_codRestrict\"><span class=\"name\">LinearMap</span>.<span class=\"name\">subtype_compMultilinearMap_codRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\">LinearMap.compMultilinearMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/LinearMap.html#Submodule.subtype\">Submodule.subtype</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.codRestrict\">MultilinearMap.codRestrict</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L849-L851","name":"LinearMap.compMultilinearMap_apply","line":849,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap_apply\"><span class=\"name\">LinearMap</span>.<span class=\"name\">compMultilinearMap_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\">LinearMap.compMultilinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L843-L845","name":"LinearMap.coe_compMultilinearMap","line":843,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.coe_compMultilinearMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.coe_compMultilinearMap\"><span class=\"name\">LinearMap</span>.<span class=\"name\">coe_compMultilinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\">LinearMap.compMultilinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L836-L839","name":"LinearMap.compMultilinearMap","line":836,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap","doc":"Composing a multilinear map with a linear map gives again a multilinear map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#LinearMap.compMultilinearMap\"><span class=\"name\">LinearMap</span>.<span class=\"name\">compMultilinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L819-L824","name":"MultilinearMap.linearDeriv_apply","line":819,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.linearDeriv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.linearDeriv_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">linearDeriv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.linearDeriv\">MultilinearMap.linearDeriv</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L814-L816","name":"MultilinearMap.linearDeriv","line":814,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.linearDeriv","doc":"The \"derivative\" of a multilinear map, as a linear map from `(i : ι) → M₁ i` to `M₂`.\nFor continuous multilinear maps, this will indeed be the derivative."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.linearDeriv\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">linearDeriv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L807-L809","name":"MultilinearMap.domDomRestrict_apply","line":807,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomRestrict_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomRestrict_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomRestrict_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomRestrict\">MultilinearMap.domDomRestrict</a> <span class=\"fn\">f</span> <span class=\"fn\">P</span> <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">j</span></span> then <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">j</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span> else <span class=\"fn\"><span class=\"fn\">z</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">j</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L793-L804","name":"MultilinearMap.domDomRestrict","line":793,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomRestrict","doc":"Given a multilinear map `f` on `(i : ι) → M i`, a (decidable) predicate `P` on `ι` and\nan element `z` of `(i : {a // ¬ P a}) → M₁ i`, construct a multilinear map on\n`(i : {a // P a}) → M₁ i)` whose value at `x` is `f` evaluated at the vector with `i`th coordinate\n`x i` if `P i` and `z i` otherwise.\n\nThe naming is similar to `MultilinearMap.domDomCongr`: here we are applying the restriction to the\ndomain of the domain.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomRestrict\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> }</span>) =&gt; <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L768-L783","name":"MultilinearMap.domDomRestrict_aux","line":768,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomRestrict_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomRestrict_aux\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomRestrict_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> }</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span></span> }</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">ι</span> // <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">j</span></span> then <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">j</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span> else <span class=\"fn\"><span class=\"fn\">z</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">j</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">if h : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">j</span></span> then <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">j</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span> else <span class=\"fn\"><span class=\"fn\">z</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">j</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">i</span></span>)</span>\n    <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L757-L759","name":"MultilinearMap.domDomCongr_eq_iff","line":757,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_eq_iff","doc":"The results of applying `domDomCongr` to two maps are equal if\nand only if those maps are. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_eq_iff\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongr_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ</span> <span class=\"fn\">g</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L737-L749","name":"MultilinearMap.domDomCongrEquiv","line":737,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv","doc":"`MultilinearMap.domDomCongr` as an equivalence.\n\nThis is declared separately because it does not work with dot notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₂</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L736-L736","name":"MultilinearMap.domDomCongrEquiv_apply","line":736,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv\">MultilinearMap.domDomCongrEquiv</a> <span class=\"fn\">σ</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L736-L736","name":"MultilinearMap.domDomCongrEquiv_symm_apply","line":736,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv_symm_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongrEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₂</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongrEquiv\">MultilinearMap.domDomCongrEquiv</a> <span class=\"fn\">σ</span></span>)</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\"><span class=\"fn\">σ</span>.symm</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L727-L730","name":"MultilinearMap.domDomCongr_mul","line":727,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_mul\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongr_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ₁ : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">ι₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(σ₂ : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">ι₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">σ₁</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ₁</span> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L721-L724","name":"MultilinearMap.domDomCongr_trans","line":721,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_trans\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₃ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ₁ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(σ₂ : <span class=\"fn\"><span class=\"fn\">ι₂</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ₁</span>.trans <span class=\"fn\">σ₂</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ₁</span> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L707-L717","name":"MultilinearMap.domDomCongr","line":707,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr","doc":"Transfer the arguments to a map along an equivalence between argument indices.\n\nThe naming is derived from `Finsupp.domCongr`, noting that here the permutation applies to the\ndomain of the domain. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₂</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L706-L706","name":"MultilinearMap.domDomCongr_apply","line":706,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">domDomCongr_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₁ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι₂ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(σ : <span class=\"fn\"><span class=\"fn\">ι₁</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">ι₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι₂</span> → <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.domDomCongr\">MultilinearMap.domDomCongr</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι₁</span>) =&gt; <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L692-L693","name":"MultilinearMap.coe_restrictScalars","line":692,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_restrictScalars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_restrictScalars\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_restrictScalars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">A</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.restrictScalars\">MultilinearMap.restrictScalars</a> <span class=\"fn\">R</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L685-L688","name":"MultilinearMap.restrictScalars","line":685,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.restrictScalars","doc":"Reinterpret an `A`-multilinear map as an `R`-multilinear map, if `A` is an algebra over `R`\nand their actions on all involved modules agree with the action of `R` on `A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.restrictScalars\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">restrictScalars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#IsScalarTower\">IsScalarTower</a> <span class=\"fn\">R</span> <span class=\"fn\">A</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">A</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L668-L672","name":"MultilinearMap.codRestrict","line":668,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.codRestrict","doc":"Restrict the codomain of a multilinear map to a submodule.\n\nThis is the multilinear version of `LinearMap.codRestrict`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.codRestrict\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">codRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">↥<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L667-L667","name":"MultilinearMap.codRestrict_apply_coe","line":667,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.codRestrict_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.codRestrict_apply_coe\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">codRestrict_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Submodule/Basic.html#Submodule\">Submodule</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.codRestrict\">MultilinearMap.codRestrict</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L654-L659","name":"MultilinearMap.map_update_sum","line":654,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update_sum\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_update_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">t</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">t</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L649-L651","name":"MultilinearMap.map_sum","line":649,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sum","doc":"If `f` is multilinear, then `f (Σ_{j₁} g₁ j₁, ..., Σ_{jₙ} gₙ jₙ)` is the sum of\n`f (g₁ (r 1), ..., gₙ (r n))` where `r` ranges over all functions `r`. This follows from\nmultilinearity by expanding successively with respect to each coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sum\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L641-L643","name":"MultilinearMap.map_sum_finset","line":641,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sum_finset","doc":"If `f` is multilinear, then `f (Σ_{j₁ ∈ A₁} g₁ j₁, ..., Σ_{jₙ ∈ Aₙ} gₙ jₙ)` is the sum of\n`f (g₁ (r 1), ..., gₙ (r n))` where `r` ranges over all functions with `r 1 ∈ A₁`, ...,\n`r n ∈ Aₙ`. This follows from multilinearity by expanding successively with respect to each\ncoordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sum_finset\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_sum_finset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Pi.html#Fintype.piFinset\">Fintype.piFinset</a> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L499-L634","name":"MultilinearMap.map_sum_finset_aux","line":499,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sum_finset_aux","doc":"If `f` is multilinear, then `f (Σ_{j₁ ∈ A₁} g₁ j₁, ..., Σ_{jₙ ∈ Aₙ} gₙ jₙ)` is the sum of\n`f (g₁ (r 1), ..., gₙ (r n))` where `r` ranges over all functions with `r 1 ∈ A₁`, ...,\n`r n ∈ Aₙ`. This follows from multilinearity by expanding successively with respect to each\ncoordinate. Here, we give an auxiliary statement tailored for an inductive proof. Use instead\n`map_sum_finset`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_sum_finset_aux\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_sum_finset_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i</span></span>)</span>.card</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Pi.html#Fintype.piFinset\">Fintype.piFinset</a> <span class=\"fn\">A</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L483-L485","name":"MultilinearMap.map_add_univ","line":483,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add_univ","doc":"Additivity of a multilinear map along all coordinates at the same time,\nwriting `f (m + m')` as the sum of `f (s.piecewise m m')` over all sets `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add_univ\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_add_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m' : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">m</span> <span class=\"fn\">m'</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L449-L478","name":"MultilinearMap.map_piecewise_add","line":449,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_piecewise_add","doc":"If one adds to a vector `m'` another vector `m`, but only for coordinates in a finset `t`, then\nthe image under a multilinear map `f` is the sum of `f (s.piecewise m m')` along all subsets `s` of\n`t`. This is mainly an auxiliary statement to prove the result when `t = univ`, given in\n`map_add_univ`, although it can be useful in its own right as it does not require the index set `ι`\nto be finite."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_piecewise_add\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_piecewise_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m' : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">t</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m'</span></span>)</span> <span class=\"fn\">m'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Powerset.html#Finset.powerset\">Finset.powerset</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">ι</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.piecewise\">Finset.piecewise</a> <span class=\"fn\">s</span> <span class=\"fn\">m</span> <span class=\"fn\">m'</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L436-L439","name":"MultilinearMap.comp_linearEquiv_eq_zero_iff","line":436,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.comp_linearEquiv_eq_zero_iff","doc":"Composing a multilinear map with a linear equiv on each argument gives the zero map\nif and only if the multilinear map is the zero map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.comp_linearEquiv_eq_zero_iff\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">comp_linearEquiv_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L428-L430","name":"MultilinearMap.compLinearMap_inj","line":428,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_inj\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMap_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g₁ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g₂ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g₁</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g₂</span> <span class=\"fn\">f</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L422-L425","name":"MultilinearMap.compLinearMap_injective","line":422,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_injective","doc":"Composing with a family of surjective linear maps is injective. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_injective\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMap_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L416-L418","name":"MultilinearMap.compLinearMap_id","line":416,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_id","doc":"Composing a multilinear map with the identity linear map in each argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_id\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMap_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">LinearMap.id</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L409-L411","name":"MultilinearMap.zero_compLinearMap","line":409,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.zero_compLinearMap","doc":"Composing the zero multilinear map with a linear map in each argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.zero_compLinearMap\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">zero_compLinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">0</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L401-L404","name":"MultilinearMap.compLinearMap_assoc","line":401,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_assoc","doc":"Composing a multilinear map twice with a linear map in each argument is\nthe same as composing with their composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_assoc\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMap_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁'' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁''</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁''</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁''</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₁ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁''</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f₂ : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f₁</span></span>)</span> <span class=\"fn\">f₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">i</span></span> ∘ₗ <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">i</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L394-L396","name":"MultilinearMap.compLinearMap_apply","line":394,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMap_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\">MultilinearMap.compLinearMap</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L380-L390","name":"MultilinearMap.compLinearMap","line":380,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap","doc":"If `g` is a multilinear map and `f` is a collection of linear maps,\nthen `g (f₁ m₁, ..., fₙ mₙ)` is again a multilinear map, that we call\n`g.compLinearMap f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.compLinearMap\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">compLinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁' : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁'</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><span class=\"fn\">M₁'</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L366-L368","name":"MultilinearMap.snoc_smul","line":366,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.snoc_smul","doc":"In the specific case of multilinear maps on spaces indexed by `Fin (n+1)`, where one can build\nan element of `∀ (i : Fin (n+1)), M i` using `cons`, one can express directly the multiplicativity\nof a multilinear map along the first variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.snoc_smul\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">snoc_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L357-L360","name":"MultilinearMap.snoc_add","line":357,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.snoc_add","doc":"In the specific case of multilinear maps on spaces indexed by `Fin (n+1)`, where one can build\nan element of `∀ (i : Fin (n+1)), M i` using `snoc`, one can express directly the additivity of a\nmultilinear map along the first variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.snoc_add\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">snoc_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Fin/Basic.html#Fin.last\">Fin.last</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">m</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L349-L351","name":"MultilinearMap.cons_smul","line":349,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.cons_smul","doc":"In the specific case of multilinear maps on spaces indexed by `Fin (n+1)`, where one can build\nan element of `∀ (i : Fin (n+1)), M i` using `cons`, one can express directly the multiplicativity\nof a multilinear map along the first variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.cons_smul\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">cons_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.cons\">Fin.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.cons\">Fin.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L341-L343","name":"MultilinearMap.cons_add","line":341,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.cons_add","doc":"In the specific case of multilinear maps on spaces indexed by `Fin (n+1)`, where one can build\nan element of `∀ (i : Fin (n+1)), M i` using `cons`, one can express directly the additivity of a\nmultilinear map along the first variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.cons_add\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">cons_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">Fin.succ</a> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.cons\">Fin.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.cons\">Fin.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.cons\">Fin.cons</a> <span class=\"fn\">y</span> <span class=\"fn\">m</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L318-L335","name":"MultilinearMap.restr","line":318,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.restr","doc":"Given a multilinear map `f` on `n` variables (parameterized by `Fin n`) and a subset `s` of `k`\nof these variables, one gets a new multilinear map on `Fin k` by varying these variables, and fixing\nthe other ones equal to a given value `z`. It is denoted by `f.restr s hk z`, where `hk` is a\nproof that the cardinality of `s` is `k`. The implicit identification between `Fin k` and `s` that\nwe use is the canonical (increasing) bijection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.restr\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">restr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.card</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">M'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\">M'</span></span>)</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L303-L306","name":"MultilinearMap.constOfIsEmpty","line":303,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constOfIsEmpty","doc":"The constant map is multilinear when `ι` is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constOfIsEmpty\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">constOfIsEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L302-L302","name":"MultilinearMap.constOfIsEmpty_apply","line":302,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constOfIsEmpty_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constOfIsEmpty_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">constOfIsEmpty_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.constOfIsEmpty\">MultilinearMap.constOfIsEmpty</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L283-L294","name":"MultilinearMap.ofSubsingleton","line":283,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton","doc":"Equivalence between linear maps `M₂ →ₗ[R] M₃` and one-multilinear maps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ofSubsingleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L282-L282","name":"MultilinearMap.ofSubsingleton_apply_apply","line":282,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton_apply_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ofSubsingleton_apply_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton\">MultilinearMap.ofSubsingleton</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L282-L282","name":"MultilinearMap.ofSubsingleton_symm_apply_apply","line":282,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton_symm_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton_symm_apply_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ofSubsingleton_symm_apply_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₃ : <a href=\"./foundational_types.html\">Type</a> v₃)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">M₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ofSubsingleton\">MultilinearMap.ofSubsingleton</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span> <span class=\"fn\">M₃</span> <span class=\"fn\">i</span></span>)</span>.symm</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L269-L273","name":"MultilinearMap.pi","line":269,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.pi","doc":"Combine a family of multilinear maps with the same domain and codomains `M' i` into a\nmultilinear map taking values in the space of functions `∀ i, M' i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.pi\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <span class=\"fn\"><span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M'</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><span class=\"fn\">M'</span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L268-L268","name":"MultilinearMap.pi_apply","line":268,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.pi_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.pi_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">pi_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M' : <span class=\"fn\"><span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M'</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) → <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M'</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.pi\">MultilinearMap.pi</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L258-L262","name":"MultilinearMap.prod","line":258,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.prod","doc":"The cartesian product of two multilinear maps, as a multilinear map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.prod\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₂</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">M₃</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L257-L257","name":"MultilinearMap.prod_apply","line":257,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.prod_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.prod_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">prod_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₃ : <a href=\"./foundational_types.html\">Type</a> v₃}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₃</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.prod\">MultilinearMap.prod</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L249-L252","name":"MultilinearMap.toLinearMap","line":249,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toLinearMap","doc":"If `f` is a multilinear map, then `f.toLinearMap m i` is the linear map obtained by fixing all\ncoordinates but `i` equal to those of `m`, and varying the `i`-th coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toLinearMap\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">toLinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L248-L248","name":"MultilinearMap.toLinearMap_apply","line":248,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toLinearMap_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toLinearMap_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">toLinearMap_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toLinearMap\">MultilinearMap.toLinearMap</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L242-L243","name":"MultilinearMap.sum_apply","line":242,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.sum_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.sum_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">sum_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">m</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L238-L240","name":"MultilinearMap.coe_sum","line":238,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_sum\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L234-L235","name":"MultilinearMap.coeAddMonoidHom","line":234,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coeAddMonoidHom","doc":"Coercion of a multilinear map to a function as an additive monoid homomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coeAddMonoidHom\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coeAddMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span> → <span class=\"fn\">M₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L234-L234","name":"MultilinearMap.coeAddMonoidHom_apply","line":234,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coeAddMonoidHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coeAddMonoidHom_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coeAddMonoidHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">MultilinearMap.coeAddMonoidHom</span> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L229-L230","name":"MultilinearMap.addCommMonoid","line":229,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.addCommMonoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.addCommMonoid\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">addCommMonoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L223-L224","name":"MultilinearMap.coe_smul","line":223,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_smul\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">R'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">R'</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">A</span> <span class=\"fn\">R'</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">A</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L219-L220","name":"MultilinearMap.smul_apply","line":219,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.smul_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.smul_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">smul_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">R'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">R'</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">A</span> <span class=\"fn\">R'</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">A</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L213-L216","name":"MultilinearMap.instSMulMultilinearMap","line":213,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instSMulMultilinearMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instSMulMultilinearMap\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instSMulMultilinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R' : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">R'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#DistribMulAction\">DistribMulAction</a> <span class=\"fn\">R'</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">A</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#SMulCommClass\">SMulCommClass</a> <span class=\"fn\">A</span> <span class=\"fn\">R'</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#SMul\">SMul</a> <span class=\"fn\">R'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">A</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L204-L205","name":"MultilinearMap.zero_apply","line":204,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.zero_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L200-L201","name":"MultilinearMap.instInhabitedMultilinearMap","line":200,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instInhabitedMultilinearMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instInhabitedMultilinearMap\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instInhabitedMultilinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L197-L198","name":"MultilinearMap.instZeroMultilinearMap","line":197,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instZeroMultilinearMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instZeroMultilinearMap\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instZeroMultilinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L193-L194","name":"MultilinearMap.add_apply","line":193,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.add_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.add_apply\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">add_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">f'</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L187-L190","name":"MultilinearMap.instAddMultilinearMap","line":187,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instAddMultilinearMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instAddMultilinearMap\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instAddMultilinearMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L182-L184","name":"MultilinearMap.map_zero","line":182,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_zero\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L177-L178","name":"MultilinearMap.map_update_zero","line":177,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_update_zero\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_update_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">0</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L170-L173","name":"MultilinearMap.map_coord_zero","line":170,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_coord_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_coord_zero\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_coord_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L165-L167","name":"MultilinearMap.map_smul","line":165,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_smul\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L159-L161","name":"MultilinearMap.map_add","line":159,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L154-L155","name":"MultilinearMap.mk_coe","line":154,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mk_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mk_coe\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mk_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">x </span>y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">⇑<span class=\"fn\">f</span></span>, <span class=\"fn\">map_add'</span> := <span class=\"fn\">h₁</span>, <span class=\"fn\">map_smul'</span> := <span class=\"fn\">h₂</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L149-L150","name":"MultilinearMap.ext_iff","line":149,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ext_iff\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L145-L146","name":"MultilinearMap.ext","line":145,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.ext\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f' : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L140-L141","name":"MultilinearMap.coe_inj","line":140,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_inj\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">g</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L135-L136","name":"MultilinearMap.coe_injective","line":135,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_injective\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">DFunLike.coe</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L131-L132","name":"MultilinearMap.congr_arg","line":131,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.congr_arg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.congr_arg\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">congr_arg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L127-L128","name":"MultilinearMap.congr_fun","line":127,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.congr_fun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.congr_fun\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">congr_fun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L123-L124","name":"MultilinearMap.coe_mk","line":123,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.coe_mk\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">coe_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span> → <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">x </span>y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\">f</span>, <span class=\"fn\">map_add'</span> := <span class=\"fn\">h₁</span>, <span class=\"fn\">map_smul'</span> := <span class=\"fn\">h₂</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L118-L119","name":"MultilinearMap.toFun_eq_coe","line":118,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun_eq_coe\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">toFun_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.toFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L111-L113","name":"MultilinearMap.instFunLikeMultilinearMapForAll","line":111,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instFunLikeMultilinearMapForAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.instFunLikeMultilinearMapForAll\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">instFunLikeMultilinearMapForAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L94-L94","name":"MultilinearMap.map_smul'","line":94,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_smul'","doc":"A multilinear map is compatible with scalar multiplication in every argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_smul'\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_smul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun\">MultilinearMap.toFun</a> <span class=\"fn\">self</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun\">MultilinearMap.toFun</a> <span class=\"fn\">self</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L90-L90","name":"MultilinearMap.map_add'","line":90,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add'","doc":"A multilinear map is additive in every argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.map_add'\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">map_add'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun\">MultilinearMap.toFun</a> <span class=\"fn\">self</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun\">MultilinearMap.toFun</a> <span class=\"fn\">self</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun\">MultilinearMap.toFun</a> <span class=\"fn\">self</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L88-L88","name":"MultilinearMap.toFun","line":88,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun","doc":"The underlying multivariate function of a multilinear map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.toFun\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span> → <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L85-L85","name":"MultilinearMap.mk","line":85,"kind":"ctor","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap.mk\"><span class=\"name\">MultilinearMap</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> uR}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M₂ : <a href=\"./foundational_types.html\">Type</a> v₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFun : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>)</span> → <span class=\"fn\">M₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map_add' : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">x </span>y : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(map_smul' : <span class=\"fn\">∀ [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">ι</span></span>] (<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) (<span class=\"fn\">c</span> : <span class=\"fn\">R</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\">toFun</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.update\">Function.update</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\">MultilinearMap</a> <span class=\"fn\">R</span> <span class=\"fn\">M₁</span> <span class=\"fn\">M₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/LinearAlgebra/Multilinear/Basic.lean#L85-L96","name":"MultilinearMap","line":85,"kind":"structure","docLink":"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap","doc":"Multilinear maps over the ring `R`, from `∀ i, M₁ i` to `M₂` where `M₁ i` and `M₂` are modules\nover `R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Multilinear/Basic.html#MultilinearMap\"><span class=\"name\">MultilinearMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(R : <a href=\"./foundational_types.html\">Type</a> uR)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> uι}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M₁ : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Type</a> v₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(M₂ : <a href=\"./foundational_types.html\">Type</a> v₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M₁</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max uι v₁) v₂)</div></div>"}]}