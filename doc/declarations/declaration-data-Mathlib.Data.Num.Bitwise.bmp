{"name":"Mathlib.Data.Num.Bitwise","instances":[{"typeNames":["PosNum"],"name":"PosNum.instOrOpPosNum","className":"OrOp"},{"typeNames":["PosNum","PosNum","Num"],"name":"PosNum.instHAndPosNumNum","className":"HAnd"},{"typeNames":["PosNum","PosNum","Num"],"name":"PosNum.instHXorPosNumNum","className":"HXor"},{"typeNames":["PosNum","Nat","PosNum"],"name":"PosNum.instHShiftLeftPosNumNat","className":"HShiftLeft"},{"typeNames":["PosNum","Nat","Num"],"name":"PosNum.instHShiftRightPosNumNatNum","className":"HShiftRight"},{"typeNames":["Num"],"name":"Num.instOrOpNum","className":"OrOp"},{"typeNames":["Num"],"name":"Num.instAndOpNum","className":"AndOp"},{"typeNames":["Num"],"name":"Num.instXorNum","className":"Xor"},{"typeNames":["Num","Nat","Num"],"name":"Num.instHShiftLeftNumNat","className":"HShiftLeft"},{"typeNames":["Num","Nat","Num"],"name":"Num.instHShiftRightNumNat","className":"HShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqNzsNum","className":"Decidable"},{"typeNames":["Eq"],"name":"instDecidableEqSNum","className":"Decidable"},{"typeNames":["NzsNum","SNum"],"name":"instCoeNzsNumSNum","className":"Coe"},{"typeNames":["SNum"],"name":"instZeroSNum","className":"Zero"},{"typeNames":["NzsNum"],"name":"instOneNzsNum","className":"One"},{"typeNames":["SNum"],"name":"instOneSNum","className":"One"},{"typeNames":["NzsNum"],"name":"instInhabitedNzsNum","className":"Inhabited"},{"typeNames":["SNum"],"name":"instInhabitedSNum","className":"Inhabited"},{"typeNames":["SNum"],"name":"SNum.instNegSNum","className":"Neg"},{"typeNames":["SNum"],"name":"SNum.instAddSNum","className":"Add"},{"typeNames":["SNum"],"name":"SNum.instSubSNum","className":"Sub"},{"typeNames":["SNum"],"name":"SNum.instMulSNum","className":"Mul"}],"imports":["Init","Mathlib.Data.Num.Basic","Mathlib.Data.Bool.Basic","Mathlib.Data.Vector.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L492-L493","name":"SNum.instMulSNum","line":492,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instMulSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instMulSNum\"><span class=\"name\">SNum</span>.<span class=\"name\">instMulSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L488-L489","name":"SNum.mul","line":488,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.mul","doc":"Multiply two `SNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.mul\"><span class=\"name\">SNum</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L484-L485","name":"SNum.instSubSNum","line":484,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instSubSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instSubSNum\"><span class=\"name\">SNum</span>.<span class=\"name\">instSubSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L480-L481","name":"SNum.sub","line":480,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.sub","doc":"Subtract two `SNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.sub\"><span class=\"name\">SNum</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L476-L477","name":"SNum.instAddSNum","line":476,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instAddSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instAddSNum\"><span class=\"name\">SNum</span>.<span class=\"name\">instAddSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L472-L473","name":"SNum.add","line":472,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.add","doc":"Add two `SNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.add\"><span class=\"name\">SNum</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L466-L468","name":"SNum.cAdd","line":466,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.cAdd","doc":"`SNum.cAdd n m a` is `n + m + a` (where `a` should be read as either 0 or 1).\n`a` represents a carry bit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.cAdd\"><span class=\"name\">SNum</span>.<span class=\"name\">cAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L459-L461","name":"SNum.bits","line":459,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bits","doc":"`a.bits n` is the vector of the `n` first bits of `a` (starting from the LSB). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bits\"><span class=\"name\">SNum</span>.<span class=\"name\">bits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L447-L451","name":"SNum.czAdd","line":447,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.czAdd","doc":"`SNum.czAdd a b n` is `n + a - b` (where `a` and `b` should be read as either 0 or 1).\nThis is useful to implement the carry system in `cAdd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.czAdd\"><span class=\"name\">SNum</span>.<span class=\"name\">czAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L442-L443","name":"SNum.instNegSNum","line":442,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instNegSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instNegSNum\"><span class=\"name\">SNum</span>.<span class=\"name\">instNegSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L438-L439","name":"SNum.neg","line":438,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.neg","doc":"The opposite of a `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.neg\"><span class=\"name\">SNum</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L433-L434","name":"SNum.pred","line":433,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.pred","doc":"The predecessor of a `SNum` (i.e. the operation of removing one). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.pred\"><span class=\"name\">SNum</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L428-L429","name":"SNum.succ","line":428,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.succ","doc":"The successor of a `SNum` (i.e. the operation adding one). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.succ\"><span class=\"name\">SNum</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L422-L424","name":"SNum.testBit","line":422,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.testBit","doc":"`SNum.testBit n a` is `true` iff the `n`-th bit (starting from the LSB) of `a` is active.\nIf the size of `a` is less than `n`, this evaluates to `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.testBit\"><span class=\"name\">SNum</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L416-L417","name":"SNum.rec'","line":416,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.rec'","doc":"An induction principle for `SNum` which avoids relying on `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.rec'\"><span class=\"name\">SNum</span>.<span class=\"name\">rec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L410-L412","name":"SNum.drec'","line":410,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.drec'","doc":"A dependent induction principle for `SNum` which avoids relying on `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.drec'\"><span class=\"name\">SNum</span>.<span class=\"name\">drec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">SNum.zero</a> <span class=\"fn\">b</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">SNum.bit</a> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L404-L406","name":"SNum.tail","line":404,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.tail","doc":"The `tail` of a `SNum` is obtained by removing the LSB.\nEdge cases: `tail 1 = 0`, `tail (-2) = -1`, `tail 0 = 0` and `tail (-1) = -1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.tail\"><span class=\"name\">SNum</span>.<span class=\"name\">tail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L397-L399","name":"SNum.head","line":397,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.head","doc":"The `head` of a `SNum` is the boolean value of its LSB. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.head\"><span class=\"name\">SNum</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L384-L387","name":"NzsNum.drec'","line":384,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.drec'","doc":"A dependent induction principle for `NzsNum`, with base cases\n`0 : SNum` and `(-1) : SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.drec'\"><span class=\"name\">NzsNum</span>.<span class=\"name\">drec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">SNum.zero</a> <span class=\"fn\">b</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">SNum.bit</a> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.nz\">SNum.nz</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L373-L373","name":"SNum.bit_one","line":373,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit_one\"><span class=\"name\">SNum</span>.<span class=\"name\">bit_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">SNum.bit</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">SNum.zero</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.nz\">SNum.nz</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.msb\">NzsNum.msb</a> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L370-L370","name":"SNum.bit_zero","line":370,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit_zero\"><span class=\"name\">SNum</span>.<span class=\"name\">bit_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">SNum.bit</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">SNum.zero</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">SNum.zero</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L366-L367","name":"SNum.bit1","line":366,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit1","doc":"Add an active bit at the end of a `SNum`. This mimics `ZNum.bit1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit1\"><span class=\"name\">SNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L361-L362","name":"SNum.bit0","line":361,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit0","doc":"Add an inactive bit at the end of a `SNum`. This mimics `ZNum.bit0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit0\"><span class=\"name\">SNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L357-L358","name":"SNum.«term_::_»","line":357,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.«term_::_»","doc":"Add a bit at the end of a `SNum`. This mimics `NzsNum.bit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.«term_::_»\"><span class=\"name\">SNum</span>.<span class=\"name\">«term_::_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L351-L353","name":"SNum.bit","line":351,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit","doc":"Add a bit at the end of a `SNum`. This mimics `NzsNum.bit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\"><span class=\"name\">SNum</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L346-L347","name":"SNum.«term~_»","line":346,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.«term~_»","doc":"Bitwise `not` for `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.«term~_»\"><span class=\"name\">SNum</span>.<span class=\"name\">«term~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L339-L341","name":"SNum.not","line":339,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.not","doc":"Bitwise `not` for `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.not\"><span class=\"name\">SNum</span>.<span class=\"name\">not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L332-L334","name":"SNum.sign","line":332,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.sign","doc":"Sign of a `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.sign\"><span class=\"name\">SNum</span>.<span class=\"name\">sign</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L320-L322","name":"NzsNum.tail","line":320,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.tail","doc":"The `tail` of a `NzsNum` is the `SNum` obtained by removing the LSB.\nEdge cases: `tail 1 = 0` and `tail (-2) = -1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.tail\"><span class=\"name\">NzsNum</span>.<span class=\"name\">tail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L313-L315","name":"NzsNum.head","line":313,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.head","doc":"The `head` of a `NzsNum` is the boolean value of its LSB. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.head\"><span class=\"name\">NzsNum</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L308-L309","name":"NzsNum.bit1","line":308,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit1","doc":"Add an active bit at the end of a `NzsNum`. This mimics `PosNum.bit1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit1\"><span class=\"name\">NzsNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L303-L304","name":"NzsNum.bit0","line":303,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit0","doc":"Add an inactive bit at the end of a `NzsNum`. This mimics `PosNum.bit0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit0\"><span class=\"name\">NzsNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L299-L300","name":"NzsNum.«term~_»","line":299,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term~_»","doc":"Bitwise `not` for `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term~_»\"><span class=\"name\">NzsNum</span>.<span class=\"name\">«term~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L293-L295","name":"NzsNum.not","line":293,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.not","doc":"Bitwise `not` for `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.not\"><span class=\"name\">NzsNum</span>.<span class=\"name\">not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L286-L288","name":"NzsNum.sign","line":286,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.sign","doc":"Sign of a `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.sign\"><span class=\"name\">NzsNum</span>.<span class=\"name\">sign</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L282-L283","name":"NzsNum.«term_::_»","line":282,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term_::_»","doc":"Add a bit at the end of a `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term_::_»\"><span class=\"name\">NzsNum</span>.<span class=\"name\">«term_::_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L270-L271","name":"instInhabitedSNum","line":270,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instInhabitedSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instInhabitedSNum\"><span class=\"name\">instInhabitedSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L267-L268","name":"instInhabitedNzsNum","line":267,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instInhabitedNzsNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instInhabitedNzsNum\"><span class=\"name\">instInhabitedNzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L264-L265","name":"instOneSNum","line":264,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instOneSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instOneSNum\"><span class=\"name\">instOneSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L261-L262","name":"instOneNzsNum","line":261,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instOneNzsNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instOneNzsNum\"><span class=\"name\">instOneNzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L258-L259","name":"instZeroSNum","line":258,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instZeroSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instZeroSNum\"><span class=\"name\">instZeroSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L255-L256","name":"instCoeNzsNumSNum","line":255,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instCoeNzsNumSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instCoeNzsNumSNum\"><span class=\"name\">instCoeNzsNumSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L252-L252","name":"instDecidableEqSNum","line":252,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instDecidableEqSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instDecidableEqSNum\"><span class=\"name\">instDecidableEqSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L251-L251","name":"SNum.nz","line":251,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.nz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.nz\"><span class=\"name\">SNum</span>.<span class=\"name\">nz</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L250-L250","name":"SNum.zero","line":250,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\"><span class=\"name\">SNum</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L249-L252","name":"SNum","line":249,"kind":"inductive","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum","doc":"Alternative representation of integers using a sign bit at the end.\nThe convention on sign here is to have the argument to `msb` denote\nthe sign of the MSB itself, with all higher bits set to the negation\nof this sign. The result is interpreted in two's complement.\n\n   13  = ..0001101(base 2) = nz (bit1 (bit0 (bit1 (msb true))))\n   -13 = ..1110011(base 2) = nz (bit1 (bit1 (bit0 (msb false))))\n\nAs with `Num`, a special case must be added for zero, which has no msb,\nbut by two's complement symmetry there is a second special case for -1.\nHere the `Bool` field indicates the sign of the number.\n\n   0  = ..0000000(base 2) = zero false\n   -1 = ..1111111(base 2) = zero true "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum\"><span class=\"name\">SNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L232-L232","name":"instDecidableEqNzsNum","line":232,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instDecidableEqNzsNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instDecidableEqNzsNum\"><span class=\"name\">instDecidableEqNzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L230-L231","name":"NzsNum.bit","line":230,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit","doc":"Add a bit at the end of a `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit\"><span class=\"name\">NzsNum</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L229-L229","name":"NzsNum.msb","line":229,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.msb","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.msb\"><span class=\"name\">NzsNum</span>.<span class=\"name\">msb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L228-L232","name":"NzsNum","line":228,"kind":"inductive","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum","doc":"This is a nonzero (and \"non minus one\") version of `SNum`.\nSee the documentation of `SNum` for more details. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\"><span class=\"name\">NzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L219-L221","name":"Num.oneBits","line":219,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.oneBits","doc":"`n.oneBits` is the list of indices of active bits in the binary representation of `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.oneBits\"><span class=\"name\">Num</span>.<span class=\"name\">oneBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L213-L215","name":"Num.testBit","line":213,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.testBit","doc":"`a.testBit n` is `true` iff the `n`-th bit (starting from the LSB) in the binary representation\nof `a` is active. If the size of `a` is less than `n`, this evaluates to `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.testBit\"><span class=\"name\">Num</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L209-L209","name":"Num.shiftr_eq_shiftRight","line":209,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftr_eq_shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftr_eq_shiftRight\"><span class=\"name\">Num</span>.<span class=\"name\">shiftr_eq_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftr\">Num.shiftr</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L207-L207","name":"Num.instHShiftRightNumNat","line":207,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftRightNumNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftRightNumNat\"><span class=\"name\">Num</span>.<span class=\"name\">instHShiftRightNumNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L202-L204","name":"Num.shiftr","line":202,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftr","doc":"Right-shift the binary representation of a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftr\"><span class=\"name\">Num</span>.<span class=\"name\">shiftr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L199-L199","name":"Num.shiftl_eq_shiftLeft","line":199,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftl_eq_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftl_eq_shiftLeft\"><span class=\"name\">Num</span>.<span class=\"name\">shiftl_eq_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftl\">Num.shiftl</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L197-L197","name":"Num.instHShiftLeftNumNat","line":197,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftLeftNumNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftLeftNumNat\"><span class=\"name\">Num</span>.<span class=\"name\">instHShiftLeftNumNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L192-L194","name":"Num.shiftl","line":192,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftl","doc":"Left-shift the binary representation of a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftl\"><span class=\"name\">Num</span>.<span class=\"name\">shiftl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L189-L189","name":"Num.lxor_eq_xor","line":189,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lxor_eq_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lxor_eq_xor\"><span class=\"name\">Num</span>.<span class=\"name\">lxor_eq_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#Num.lxor\">Num.lxor</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L187-L187","name":"Num.instXorNum","line":187,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instXorNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instXorNum\"><span class=\"name\">Num</span>.<span class=\"name\">instXorNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L181-L184","name":"Num.lxor","line":181,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lxor","doc":"Bitwise \"xor\" for `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lxor\"><span class=\"name\">Num</span>.<span class=\"name\">lxor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L174-L177","name":"Num.ldiff","line":174,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.ldiff","doc":"Bitwise `fun a b ↦ a && !b` for `Num`. For example, `ldiff 5 9 = 4`:\n```\n 101\n1001\n----\n 100\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.ldiff\"><span class=\"name\">Num</span>.<span class=\"name\">ldiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L164-L164","name":"Num.land_eq_and","line":164,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.land_eq_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.land_eq_and\"><span class=\"name\">Num</span>.<span class=\"name\">land_eq_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#Num.land\">Num.land</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L162-L162","name":"Num.instAndOpNum","line":162,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instAndOpNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instAndOpNum\"><span class=\"name\">Num</span>.<span class=\"name\">instAndOpNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L156-L159","name":"Num.land","line":156,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.land","doc":"Bitwise \"and\" for `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.land\"><span class=\"name\">Num</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L153-L153","name":"Num.lor_eq_or","line":153,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lor_eq_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lor_eq_or\"><span class=\"name\">Num</span>.<span class=\"name\">lor_eq_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#Num.lor\">Num.lor</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L151-L151","name":"Num.instOrOpNum","line":151,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instOrOpNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instOrOpNum\"><span class=\"name\">Num</span>.<span class=\"name\">instOrOpNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L145-L148","name":"Num.lor","line":145,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lor","doc":"Bitwise \"or\" for `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lor\"><span class=\"name\">Num</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L138-L138","name":"PosNum.shiftr_eq_shiftRight","line":138,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr_eq_shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr_eq_shiftRight\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftr_eq_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr\">PosNum.shiftr</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L136-L136","name":"PosNum.instHShiftRightPosNumNatNum","line":136,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftRightPosNumNatNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftRightPosNumNatNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHShiftRightPosNumNatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L129-L133","name":"PosNum.shiftr","line":129,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr","doc":"Right-shift the binary representation of a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L124-L126","name":"PosNum.shiftl_succ_eq_bit0_shiftl","line":124,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_succ_eq_bit0_shiftl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_succ_eq_bit0_shiftl\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftl_succ_eq_bit0_shiftl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit0\">PosNum.bit0</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L119-L119","name":"PosNum.shiftl_eq_shiftLeft","line":119,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_eq_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_eq_shiftLeft\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftl_eq_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl\">PosNum.shiftl</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L117-L117","name":"PosNum.instHShiftLeftPosNumNat","line":117,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftLeftPosNumNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftLeftPosNumNat\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHShiftLeftPosNumNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L112-L114","name":"PosNum.shiftl","line":112,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl","doc":"Left-shift the binary representation of a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L105-L108","name":"PosNum.oneBits","line":105,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.oneBits","doc":"`n.oneBits 0` is the list of indices of active bits in the binary representation of `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.oneBits\"><span class=\"name\">PosNum</span>.<span class=\"name\">oneBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L95-L101","name":"PosNum.testBit","line":95,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.testBit","doc":"`a.testBit n` is `true` iff the `n`-th bit (starting from the LSB) in the binary representation\nof `a` is active. If the size of `a` is less than `n`, this evaluates to `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.testBit\"><span class=\"name\">PosNum</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L91-L91","name":"PosNum.lxor_eq_xor","line":91,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor_eq_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor_eq_xor\"><span class=\"name\">PosNum</span>.<span class=\"name\">lxor_eq_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor\">PosNum.lxor</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L89-L89","name":"PosNum.instHXorPosNumNum","line":89,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHXorPosNumNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHXorPosNumNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHXorPosNumNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HXor\">HXor</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L77-L86","name":"PosNum.lxor","line":77,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor","doc":"Bitwise \"xor\" for `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor\"><span class=\"name\">PosNum</span>.<span class=\"name\">lxor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L65-L73","name":"PosNum.ldiff","line":65,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.ldiff","doc":"Bitwise `fun a b ↦ a && !b` for `PosNum`. For example, `ldiff 5 9 = 4`:\n```\n 101\n1001\n----\n 100\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.ldiff\"><span class=\"name\">PosNum</span>.<span class=\"name\">ldiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L55-L55","name":"PosNum.land_eq_and","line":55,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.land_eq_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.land_eq_and\"><span class=\"name\">PosNum</span>.<span class=\"name\">land_eq_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.land\">PosNum.land</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L53-L53","name":"PosNum.instHAndPosNumNum","line":53,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHAndPosNumNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHAndPosNumNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHAndPosNumNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAnd\">HAnd</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L42-L50","name":"PosNum.land","line":42,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.land","doc":"Bitwise \"and\" for `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.land\"><span class=\"name\">PosNum</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L39-L39","name":"PosNum.lor_eq_or","line":39,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lor_eq_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lor_eq_or\"><span class=\"name\">PosNum</span>.<span class=\"name\">lor_eq_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lor\">PosNum.lor</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L37-L37","name":"PosNum.instOrOpPosNum","line":37,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instOrOpPosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instOrOpPosNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instOrOpPosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Num/Bitwise.lean#L26-L34","name":"PosNum.lor","line":26,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lor","doc":"Bitwise \"or\" for `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lor\"><span class=\"name\">PosNum</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"}]}