{"name":"Mathlib.Data.PFunctor.Multivariate.W","instances":[{"typeNames":["MvPFunctor.WPath"],"name":"MvPFunctor.WPath.inhabited","className":"Inhabited"},{"typeNames":["MvPFunctor.W"],"name":"MvPFunctor.mvfunctorW","className":"MvFunctor"}],"imports":["Init","Mathlib.Data.PFunctor.Multivariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L311-L312","name":"MvPFunctor.wDest'_wMk'","line":311,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wDest'_wMk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'\">MvPFunctor.wDest'</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk'\">MvPFunctor.wMk'</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L306-L307","name":"MvPFunctor.wDest'_wMk","line":306,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wDest'_wMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'\">MvPFunctor.wDest'</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">MvPFunctor.wMk</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.splitFun\">TypeVec.splitFun</a> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L301-L302","name":"MvPFunctor.wDest'","line":301,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'","doc":"Destructor for the W-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wDest'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L295-L296","name":"MvPFunctor.wMk'","line":295,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk'","doc":"Constructor for the W-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L280-L284","name":"MvPFunctor.map_objAppend1","line":280,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.map_objAppend1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.map_objAppend1\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">map_objAppend1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap\">MvPFunctor.wMap</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1\">MvPFunctor.objAppend1</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1\">MvPFunctor.objAppend1</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f'</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap\">MvPFunctor.wMap</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L275-L277","name":"MvPFunctor.objAppend1","line":275,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1","doc":"Constructor of a value of `P.obj (α ::: β)` from components.\nUseful to avoid complicated type annotation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">objAppend1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L249-L266","name":"MvPFunctor.w_map_wMk","line":249,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_map_wMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_map_wMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">w_map_wMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">MvPFunctor.wMk</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">MvPFunctor.wMk</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f'</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L243-L245","name":"MvPFunctor.wMk_eq","line":243,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk_eq\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMk_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">MvPFunctor.wMk</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">g'</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span></span> }</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">MvPFunctor.wPathCasesOn</a> <span class=\"fn\">P</span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L239-L239","name":"MvPFunctor.wMap","line":239,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap","doc":"W-types are functorial "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L232-L234","name":"MvPFunctor.w_cases","line":232,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_cases\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">w_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ih : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)\n  (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">MvPFunctor.wMk</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L217-L228","name":"MvPFunctor.w_ind","line":217,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_ind","doc":"Induction principle for `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_ind\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">w_ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ih : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)\n  (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">MvPFunctor.wMk</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L206-L212","name":"MvPFunctor.wRec_eq","line":206,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec_eq","doc":"Defining equation for the recursor of `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec_eq\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span></span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec\">MvPFunctor.wRec</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">MvPFunctor.wMk</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec\">MvPFunctor.wRec</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L195-L201","name":"MvPFunctor.wRec","line":195,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec","doc":"Recursor for `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span></span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L187-L190","name":"MvPFunctor.wMk","line":187,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk","doc":"Constructor for `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L170-L174","name":"MvPFunctor.wp_ind","line":170,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp_ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp_ind\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wp_ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ih : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>)\n  (<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">MvPFunctor.wPathDestRight</a> <span class=\"fn\">P</span> <span class=\"fn\">f'</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">f'</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L162-L165","name":"MvPFunctor.wpRec_eq","line":162,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec_eq\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wpRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_2}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) →\n  <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>) →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span></span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec\">MvPFunctor.wpRec</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec\">MvPFunctor.wpRec</a> <span class=\"fn\">P</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">MvPFunctor.wPathDestRight</a> <span class=\"fn\">P</span> <span class=\"fn\">f'</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L155-L158","name":"MvPFunctor.wpRec","line":155,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wpRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_2}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>) →\n  <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>) →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span></span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L149-L151","name":"MvPFunctor.wpMk","line":149,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpMk","doc":"Constructor for `wp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wpMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L139-L139","name":"MvPFunctor.mvfunctorW","line":139,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.mvfunctorW","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.mvfunctorW\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">mvfunctorW</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">MvPFunctor.W</a> <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L134-L135","name":"MvPFunctor.W","line":134,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W","doc":"W-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">W</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L126-L128","name":"MvPFunctor.wp","line":126,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp","doc":"Polynomial functor for the W-type of `P`. `A` is a data-less well-founded\ntree whereas, for a given `a : A`, `B a` is a valid path in tree `a` so\nthat `Wp.obj α` is made of a tree and a function from its valid paths to\nthe values it contains  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L115-L118","name":"MvPFunctor.comp_wPathCasesOn","line":115,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.comp_wPathCasesOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.comp_wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">comp_wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_2}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">MvPFunctor.wPathCasesOn</a> <span class=\"fn\">P</span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">MvPFunctor.wPathCasesOn</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">g'</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L109-L111","name":"MvPFunctor.wPathCasesOn_eta","line":109,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn_eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn_eta\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathCasesOn_eta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">MvPFunctor.wPathCasesOn</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft\">MvPFunctor.wPathDestLeft</a> <span class=\"fn\">P</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">MvPFunctor.wPathDestRight</a> <span class=\"fn\">P</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L103-L105","name":"MvPFunctor.wPathDestRight_wPathCasesOn","line":103,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight_wPathCasesOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight_wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestRight_wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">MvPFunctor.wPathDestRight</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">MvPFunctor.wPathCasesOn</a> <span class=\"fn\">P</span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L97-L99","name":"MvPFunctor.wPathDestLeft_wPathCasesOn","line":97,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft_wPathCasesOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft_wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestLeft_wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft\">MvPFunctor.wPathDestLeft</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">MvPFunctor.wPathCasesOn</a> <span class=\"fn\">P</span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L91-L93","name":"MvPFunctor.wPathDestRight","line":91,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight","doc":"Specialized destructor on `WPath` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L85-L86","name":"MvPFunctor.wPathDestLeft","line":85,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft","doc":"Specialized destructor on `WPath` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L75-L80","name":"MvPFunctor.wPathCasesOn","line":75,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn","doc":"Specialized destructor on `WPath` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L67-L70","name":"MvPFunctor.WPath.inhabited","line":67,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.inhabited\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[I : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.head\">PFunctor.W.head</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L62-L63","name":"MvPFunctor.WPath.child","line":62,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.child","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.child\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span>.<span class=\"name\">child</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L61-L61","name":"MvPFunctor.WPath.root","line":61,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.root\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">P</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">MvPFunctor.WPath</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/PFunctor/Multivariate/W.lean#L60-L63","name":"MvPFunctor.WPath","line":60,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath","doc":"A path from the root of a tree to one of its node "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">P</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span></span></div></div>"}]}