{"name":"Std.Data.BinomialHeap.Basic","instances":[{"typeNames":["Std.BinomialHeap.Imp.HeapNode"],"name":"Std.BinomialHeap.Imp.instReprHeapNode","className":"Repr"},{"typeNames":["Std.BinomialHeap.Imp.Heap"],"name":"Std.BinomialHeap.Imp.instReprHeap","className":"Repr"},{"typeNames":["Std.BinomialHeap.Imp.Heap.rankGT"],"name":"Std.BinomialHeap.Imp.instDecidableRankGT","className":"Decidable"},{"typeNames":["Std.BinomialHeap"],"name":"Std.BinomialHeap.instEmptyCollectionBinomialHeap","className":"EmptyCollection"},{"typeNames":["Std.BinomialHeap"],"name":"Std.BinomialHeap.instInhabitedBinomialHeap","className":"Inhabited"},{"typeNames":["Std.BinomialHeap"],"name":"Std.BinomialHeap.instStreamBinomialHeap","className":"Stream"},{"typeNames":["Std.BinomialHeap"],"name":"Std.BinomialHeap.instForInBinomialHeap","className":"ForIn"}],"imports":["Init","Std.Classes.Order","Std.Control.ForInStep.Basic","Std.Data.Nat.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L588-L588","name":"Std.BinomialHeap.toArrayUnordered","line":588,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toArrayUnordered","doc":"`O(n)`. Convert the heap to an array in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toArrayUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L585-L585","name":"Std.BinomialHeap.toListUnordered","line":585,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toListUnordered","doc":"`O(n)`. Convert the heap to a list in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toListUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L582-L582","name":"Std.BinomialHeap.toArray","line":582,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toArray","doc":"`O(n log n)`. Convert the heap to an array in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L579-L579","name":"Std.BinomialHeap.toList","line":579,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toList","doc":"`O(n log n)`. Convert the heap to a list in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.toList\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L576-L576","name":"Std.BinomialHeap.fold","line":576,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.fold","doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.fold\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L569-L570","name":"Std.BinomialHeap.foldM","line":569,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.foldM","doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.foldM\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L563-L563","name":"Std.BinomialHeap.tail","line":563,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.tail","doc":"`O(log n)`. Removes the smallest element from the heap, if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.tail\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L557-L560","name":"Std.BinomialHeap.tail?","line":557,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.tail?","doc":"`O(log n)`. Removes the smallest element from the heap, or `none` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.tail?\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L554-L554","name":"Std.BinomialHeap.headI","line":554,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.headI","doc":"`O(log n)`. Returns the smallest element in the heap, or `default` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.headI\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">headI</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L551-L551","name":"Std.BinomialHeap.head!","line":551,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.head!","doc":"`O(log n)`. Returns the smallest element in the heap, or panics if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.head!\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">head!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L548-L548","name":"Std.BinomialHeap.head?","line":548,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.head?","doc":"`O(log n)`. Returns the smallest element in the heap, or `none` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.head?\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L545-L545","name":"Std.BinomialHeap.instForInBinomialHeap","line":545,"kind":"instance","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instForInBinomialHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instForInBinomialHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instForInBinomialHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L542-L543","name":"Std.BinomialHeap.forIn","line":542,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.forIn","doc":"`O(n log n)`. Implementation of `for x in (b : BinomialHeap α le) ...` notation,\nwhich iterates over the elements in the heap in increasing order.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.forIn\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L536-L536","name":"Std.BinomialHeap.instStreamBinomialHeap","line":536,"kind":"instance","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instStreamBinomialHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instStreamBinomialHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instStreamBinomialHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L531-L534","name":"Std.BinomialHeap.deleteMin","line":531,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.deleteMin","doc":"`O(log n)`. Remove and return the minimum element from the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L528-L528","name":"Std.BinomialHeap.ofArray","line":528,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.ofArray","doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L525-L525","name":"Std.BinomialHeap.ofList","line":525,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.ofList","doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L522-L522","name":"Std.BinomialHeap.insert","line":522,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.insert","doc":"`O(log n)`. Add element `a` to the given heap `h`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.insert\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L518-L519","name":"Std.BinomialHeap.merge","line":518,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.merge","doc":"`O(log n)`. Merge the contents of two heaps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.merge\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L515-L515","name":"Std.BinomialHeap.singleton","line":515,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.singleton","doc":"`O(1)`. Make a new heap containing `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L512-L512","name":"Std.BinomialHeap.size","line":512,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.size","doc":"`O(log n)`. The number of elements in the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.size\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L509-L509","name":"Std.BinomialHeap.isEmpty","line":509,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.isEmpty","doc":"`O(1)`. Is the heap empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L506-L506","name":"Std.BinomialHeap.instInhabitedBinomialHeap","line":506,"kind":"instance","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instInhabitedBinomialHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instInhabitedBinomialHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instInhabitedBinomialHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L505-L505","name":"Std.BinomialHeap.instEmptyCollectionBinomialHeap","line":505,"kind":"instance","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instEmptyCollectionBinomialHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.instEmptyCollectionBinomialHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instEmptyCollectionBinomialHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L503-L503","name":"Std.BinomialHeap.empty","line":503,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.empty","doc":"`O(1)`. Make a new empty binomial heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.empty\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L496-L497","name":"Std.mkBinomialHeap","line":496,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.mkBinomialHeap","doc":"`O(1)`. Make a new empty binomial heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.mkBinomialHeap\"><span class=\"name\">Std</span>.<span class=\"name\">mkBinomialHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\">Std.BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L492-L493","name":"Std.BinomialHeap","line":492,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap","doc":"A [binomial heap](https://en.wikipedia.org/wiki/Binomial_heap) is a data structure which supports\nthe following primary operations:\n\n* `insert : α → BinomialHeap α → BinomialHeap α`: add an element to the heap\n* `deleteMin : BinomialHeap α → Option (α × BinomialHeap α)`:\n  remove the minimum element from the heap\n* `merge : BinomialHeap α → BinomialHeap α → BinomialHeap α`: combine two heaps\n\nThe first two operations are known as a \"priority queue\", so this could be called\na \"mergeable priority queue\". The standard choice for a priority queue is a binary heap,\nwhich supports `insert` and `deleteMin` in `O(log n)`, but `merge` is `O(n)`.\nWith a `BinomialHeap`, all three operations are `O(log n)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L467-L471","name":"Std.BinomialHeap.Imp.Heap.WF.tail","line":467,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.tail\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hwf : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail\">Std.BinomialHeap.Imp.Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L462-L465","name":"Std.BinomialHeap.Imp.Heap.WF.tail?","line":462,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.tail?\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{tl : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hwf : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail?\">Std.BinomialHeap.Imp.Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">tl</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">tl</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L450-L460","name":"Std.BinomialHeap.Imp.Heap.WF.deleteMin","line":450,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.deleteMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.deleteMin\">Std.BinomialHeap.Imp.Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">s'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L439-L448","name":"Std.BinomialHeap.Imp.Heap.WF.findMin","line":439,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.findMin","doc":"The conditions under which `findMin` is well-formed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.findMin\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">findMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\">Std.BinomialHeap.Imp.FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\">Std.BinomialHeap.Imp.FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.findMin\">Std.BinomialHeap.Imp.Heap.findMin</a> <span class=\"fn\">le</span> <span class=\"fn\">k</span> <span class=\"fn\">s</span> <span class=\"fn\">res</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L436-L436","name":"Std.BinomialHeap.Imp.FindMin.WF.next","line":436,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.next","doc":"`next` is a binomial heap with ranks above `rank + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.next\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\">Std.BinomialHeap.Imp.FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.rank</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\"><span class=\"fn\">res</span>.next</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L434-L434","name":"Std.BinomialHeap.Imp.FindMin.WF.node","line":434,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.node","doc":"`node` is a well formed forest of rank `rank` with `val` at the root. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.node\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\">Std.BinomialHeap.Imp.FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF\">Std.BinomialHeap.Imp.HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">res</span>.val</span> <span class=\"fn\"><span class=\"fn\">res</span>.node</span> <span class=\"fn\"><span class=\"fn\">self</span>.rank</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L432-L432","name":"Std.BinomialHeap.Imp.FindMin.WF.before","line":432,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.before","doc":"`before` is a difference list which can be appended to a binomial heap\nwith ranks at least `rank` to produce another well formed heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.before\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">before</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\">Std.BinomialHeap.Imp.FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">self</span>.rank</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.before\">Std.BinomialHeap.Imp.FindMin.before</a> <span class=\"fn\">res</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L429-L429","name":"Std.BinomialHeap.Imp.FindMin.WF.rank","line":429,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.rank","doc":"The rank of the minimum element "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.rank\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">rank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\">Std.BinomialHeap.Imp.FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L427-L427","name":"Std.BinomialHeap.Imp.FindMin.WF.mk","line":427,"kind":"ctor","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF.mk\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rank : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(before : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">rank</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.before\">Std.BinomialHeap.Imp.FindMin.before</a> <span class=\"fn\">res</span> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(node : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF\">Std.BinomialHeap.Imp.HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">res</span>.val</span> <span class=\"fn\"><span class=\"fn\">res</span>.node</span> <span class=\"fn\">rank</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(next : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">rank</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\"><span class=\"fn\">res</span>.next</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\">Std.BinomialHeap.Imp.FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L427-L436","name":"Std.BinomialHeap.Imp.FindMin.WF","line":427,"kind":"structure","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF","doc":"The well formedness predicate for a `FindMin` value.\nThis is not actually a predicate, as it contains an additional data value\n`rank` corresponding to the rank of the returned node, which is omitted from `findMin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.WF\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L417-L420","name":"Std.BinomialHeap.Imp.HeapNode.WF.toHeap.go","line":417,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF.toHeap.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF.toHeap.go\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">toHeap</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF\">Std.BinomialHeap.Imp.HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.rank\">Std.BinomialHeap.Imp.HeapNode.rank</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">res</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap.go\">Std.BinomialHeap.Imp.HeapNode.toHeap.go</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.rank\">Std.BinomialHeap.Imp.HeapNode.rank</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">res</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L414-L420","name":"Std.BinomialHeap.Imp.HeapNode.WF.toHeap","line":414,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF.toHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF.toHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF\">Std.BinomialHeap.Imp.HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap\">Std.BinomialHeap.Imp.HeapNode.toHeap</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L410-L412","name":"Std.BinomialHeap.Imp.HeapNode.WF.rank_eq","line":410,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF.rank_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF.rank_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">rank_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF\">Std.BinomialHeap.Imp.HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.rank\">Std.BinomialHeap.Imp.HeapNode.rank</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L407-L408","name":"Std.BinomialHeap.Imp.Heap.WF.merge","line":407,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.merge\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">s₁ </span>s₂ : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.merge\">Std.BinomialHeap.Imp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L371-L405","name":"Std.BinomialHeap.Imp.Heap.WF.merge'","line":371,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.merge'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.merge'\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">s₁ </span>s₂ : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.merge\">Std.BinomialHeap.Imp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span></span>)</span> →\n          <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.merge\">Std.BinomialHeap.Imp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">n</span></span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L366-L369","name":"Std.BinomialHeap.Imp.Heap.WF.rankGT","line":366,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.rankGT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.rankGT\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">rankGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">lt</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L361-L364","name":"Std.BinomialHeap.Imp.Heap.rankGT.of_le","line":361,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT.of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT.of_le\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">rankGT</span>.<span class=\"name\">of_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n </span>n' : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">s</span> <span class=\"fn\">n'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L356-L359","name":"Std.BinomialHeap.Imp.Heap.WF.of_le","line":356,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.of_le\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n' : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n'</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n'</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L351-L354","name":"Std.BinomialHeap.Imp.Heap.WF.of_rankGT","line":351,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.of_rankGT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.of_rankGT\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">of_rankGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n'</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L349-L349","name":"Std.BinomialHeap.Imp.Heap.WF.singleton","line":349,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">singleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}, <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.singleton\">Std.BinomialHeap.Imp.Heap.singleton</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L347-L347","name":"Std.BinomialHeap.Imp.Heap.WF.nil","line":347,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF.nil\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}, <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\">Std.BinomialHeap.Imp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">Std.BinomialHeap.Imp.Heap.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L343-L345","name":"Std.BinomialHeap.Imp.Heap.WF","line":343,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF","doc":"The well formedness predicate for a binomial heap.\nIt asserts that:\n* It consists of a list of well formed trees with the specified ranks\n* The ranks are in strictly increasing order, and all are at least `n`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.WF\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L333-L335","name":"Std.BinomialHeap.Imp.HeapNode.WF","line":333,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF","doc":"The well formedness predicate for a heap node.\nIt asserts that:\n* If `a` is added at the top to make the forest into a tree, the resulting tree\n  is a `le`-min-heap (if `le` is well-behaved)\n* When interpreting `child` and `sibling` as left and right children of a binary tree,\n  it is a perfect binary tree with depth `r`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.WF\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L322-L323","name":"Std.BinomialHeap.Imp.Heap.toArrayUnordered","line":322,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toArrayUnordered","doc":"`O(n)`. Convert the heap to an array in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toArrayUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L318-L319","name":"Std.BinomialHeap.Imp.Heap.toListUnordered","line":318,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toListUnordered","doc":"`O(n)`. Convert the heap to a list in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toListUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L314-L315","name":"Std.BinomialHeap.Imp.Heap.foldTree","line":314,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.foldTree","doc":"`O(n)`. Fold a function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.foldTree\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(join : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L307-L309","name":"Std.BinomialHeap.Imp.Heap.foldTreeM","line":307,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.foldTreeM","doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.foldTreeM\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(join : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L302-L304","name":"Std.BinomialHeap.Imp.HeapNode.foldTreeM","line":302,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.foldTreeM","doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.foldTreeM\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(join : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L296-L296","name":"Std.BinomialHeap.Imp.Heap.toList","line":296,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toList","doc":"`O(n log n)`. Convert the heap to a list in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toList\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L293-L293","name":"Std.BinomialHeap.Imp.Heap.toArray","line":293,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toArray","doc":"`O(n log n)`. Convert the heap to an array in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L289-L290","name":"Std.BinomialHeap.Imp.Heap.fold","line":289,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.fold","doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.fold\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L276-L283","name":"Std.BinomialHeap.Imp.Heap.foldM","line":276,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.foldM","doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.foldM\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L266-L270","name":"Std.BinomialHeap.Imp.Heap.realSize_tail","line":266,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_tail\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail\">Std.BinomialHeap.Imp.Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L260-L264","name":"Std.BinomialHeap.Imp.Heap.realSize_tail?","line":260,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_tail?\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail?\">Std.BinomialHeap.Imp.Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L248-L258","name":"Std.BinomialHeap.Imp.Heap.realSize_deleteMin","line":248,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_deleteMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.deleteMin\">Std.BinomialHeap.Imp.Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L244-L246","name":"Std.BinomialHeap.Imp.HeapNode.realSize_toHeap.go","line":244,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize_toHeap.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize_toHeap.go\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize_toHeap</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{res : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap.go\">Std.BinomialHeap.Imp.HeapNode.toHeap.go</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">res</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize\">Std.BinomialHeap.Imp.HeapNode.realSize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">res</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L243-L246","name":"Std.BinomialHeap.Imp.HeapNode.realSize_toHeap","line":243,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize_toHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize_toHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize_toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap\">Std.BinomialHeap.Imp.HeapNode.toHeap</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize\">Std.BinomialHeap.Imp.HeapNode.realSize</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L206-L222","name":"Std.BinomialHeap.Imp.Heap.realSize_merge","line":206,"kind":"theorem","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize_merge\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.merge\">Std.BinomialHeap.Imp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\">Std.BinomialHeap.Imp.Heap.realSize</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L204-L204","name":"Std.BinomialHeap.Imp.Heap.tail","line":204,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail","doc":"`O(log n)`. Remove the minimum element of the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L200-L201","name":"Std.BinomialHeap.Imp.Heap.tail?","line":200,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail?","doc":"`O(log n)`. Get the tail of the binomial heap after removing the minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.tail?\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L193-L197","name":"Std.BinomialHeap.Imp.Heap.deleteMin","line":193,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.deleteMin","doc":"`O(log n)`. Find and remove the the minimum element from the binomial heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L183-L190","name":"Std.BinomialHeap.Imp.Heap.findMin","line":183,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.findMin","doc":"`O(log n)`. Find the minimum element, and return a data structure `FindMin` with information\nneeded to reconstruct the rest of the binomial heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.findMin\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">findMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L177-L177","name":"Std.BinomialHeap.Imp.FindMin.next","line":177,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.next","doc":"The forest after the minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.next\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L175-L175","name":"Std.BinomialHeap.Imp.FindMin.node","line":175,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.node","doc":"The children of the minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.node\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L173-L173","name":"Std.BinomialHeap.Imp.FindMin.val","line":173,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.val","doc":"The minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.val\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L171-L171","name":"Std.BinomialHeap.Imp.FindMin.before","line":171,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.before","doc":"The list of elements prior to the minimum element, encoded as a \"difference list\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.before\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">before</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L169-L169","name":"Std.BinomialHeap.Imp.FindMin.mk","line":169,"kind":"ctor","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin.mk\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(before : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(node : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(next : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\">Std.BinomialHeap.Imp.FindMin</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L169-L177","name":"Std.BinomialHeap.Imp.FindMin","line":169,"kind":"structure","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin","doc":"The return type of `FindMin`, which encodes various quantities needed to\nreconstruct the tree in `deleteMin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.FindMin\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L161-L163","name":"Std.BinomialHeap.Imp.Heap.head?","line":161,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.head?","doc":"`O(log n)`. Get the smallest element in the heap, if it has an element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.head?\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L156-L158","name":"Std.BinomialHeap.Imp.Heap.headD","line":156,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.headD","doc":"`O(log n)`. Get the smallest element in the heap, including the passed in value `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.headD\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">headD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L151-L153","name":"Std.BinomialHeap.Imp.HeapNode.toHeap.go","line":151,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap.go","doc":"Computes `s.toHeap ++ res` tail-recursively, assuming `n = s.rank`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap.go\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">toHeap</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L149-L153","name":"Std.BinomialHeap.Imp.HeapNode.toHeap","line":149,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap","doc":"`O(log n)`. Convert a `HeapNode` to a `Heap` by reversing the order of the nodes\nalong the `sibling` spine.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.toHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L128-L143","name":"Std.BinomialHeap.Imp.Heap.merge","line":128,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.merge","doc":"Merge two forests of binomial trees. The forests are assumed to be ordered\nby rank and `merge` maintains this invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.merge\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L121-L122","name":"Std.BinomialHeap.Imp.combine","line":121,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.combine","doc":"`O(1)`. Auxiliary for `Heap.merge`: combines two heap nodes of the same rank\ninto one with the next larger rank.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.combine\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n₁ : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n₂ : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L113-L115","name":"Std.BinomialHeap.Imp.Heap.length","line":113,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.length","doc":"`O(log n)`. The number of trees in the forest. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.length\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L107-L110","name":"Std.BinomialHeap.Imp.instDecidableRankGT","line":107,"kind":"instance","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.instDecidableRankGT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.instDecidableRankGT\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instDecidableRankGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>} → <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\">Std.BinomialHeap.Imp.Heap.rankGT</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L103-L105","name":"Std.BinomialHeap.Imp.Heap.rankGT","line":103,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT","doc":"`O(1)`. Auxiliary for `Heap.merge`: Is the minimum rank in `Heap` strictly larger than `n`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.rankGT\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">rankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L100-L100","name":"Std.BinomialHeap.Imp.Heap.singleton","line":100,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.singleton","doc":"`O(1)`. The heap containing a single value `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L95-L97","name":"Std.BinomialHeap.Imp.Heap.isEmpty","line":95,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.isEmpty","doc":"`O(1)`. Is the heap empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L90-L92","name":"Std.BinomialHeap.Imp.Heap.size","line":90,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.size","doc":"`O(log n)`. The number of elements in the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.size\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L85-L87","name":"Std.BinomialHeap.Imp.Heap.realSize","line":85,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize","doc":"`O(n)`. The \"real size\" of the heap, counting up how many values of type `α` are stored.\nThis is intended mainly for specification purposes.\nPrefer `Heap.size`, which is the same for well formed heaps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.realSize\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L78-L78","name":"Std.BinomialHeap.Imp.instReprHeap","line":78,"kind":"instance","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.instReprHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.instReprHeap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L75-L77","name":"Std.BinomialHeap.Imp.Heap.cons","line":75,"kind":"ctor","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.cons","doc":"A cons node contains a tree of root `val`, children `node` and rank `rank`,\nand then `next` which is the rest of the forest. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.cons\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rank : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(node : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(next : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L73-L74","name":"Std.BinomialHeap.Imp.Heap.nil","line":73,"kind":"ctor","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.nil","doc":"An empty heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap.nil\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\">Std.BinomialHeap.Imp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L72-L78","name":"Std.BinomialHeap.Imp.Heap","line":72,"kind":"inductive","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap","doc":"A `Heap` is the top level structure in a binomial heap.\nIt consists of a forest of `HeapNode`s with strictly increasing ranks.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.Heap\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L50-L52","name":"Std.BinomialHeap.Imp.HeapNode.rank","line":50,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.rank","doc":"`O(log n)`. The rank, or the number of trees in the forest.\nIt is also the depth of the forest.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.rank\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">rank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L44-L44","name":"Std.BinomialHeap.Imp.HeapNode.singleton","line":44,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.singleton","doc":"A node containing a single element `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L39-L41","name":"Std.BinomialHeap.Imp.HeapNode.realSize","line":39,"kind":"def","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize","doc":"The \"real size\" of the node, counting up how many values of type `α` are stored.\nThis is `O(n)` and is intended mainly for specification purposes.\nFor a well formed `HeapNode` the size is always `2^n - 1` where `n` is the depth.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.realSize\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L32-L32","name":"Std.BinomialHeap.Imp.instReprHeapNode","line":32,"kind":"instance","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.instReprHeapNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.instReprHeapNode\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeapNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L28-L31","name":"Std.BinomialHeap.Imp.HeapNode.node","line":28,"kind":"ctor","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.node","doc":"A forest of rank `r + 1` consists of a root `a`,\na forest `child` of rank `r` elements greater than `a`,\nand another forest `sibling` of rank `r`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.node\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(child : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sibling : <span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L26-L27","name":"Std.BinomialHeap.Imp.HeapNode.nil","line":26,"kind":"ctor","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.nil","doc":"An empty forest, which has depth `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode.nil\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\">Std.BinomialHeap.Imp.HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BinomialHeap/Basic.lean#L25-L32","name":"Std.BinomialHeap.Imp.HeapNode","line":25,"kind":"inductive","docLink":"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode","doc":"A `HeapNode` is one of the internal nodes of the binomial heap.\nIt is always a perfect binary tree, with the depth of the tree stored in the `Heap`.\nHowever the interpretation of the two pointers is different: we view the `child`\nas going to the first child of this node, and `sibling` goes to the next sibling\nof this tree. So it actually encodes a forest where each node has children\n`node.child`, `node.child.sibling`, `node.child.sibling.sibling`, etc.\n\nEach edge in this forest denotes a `le a b` relation that has been checked, so\nthe root is smaller than everything else under it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BinomialHeap/Basic.html#Std.BinomialHeap.Imp.HeapNode\"><span class=\"name\">Std</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}