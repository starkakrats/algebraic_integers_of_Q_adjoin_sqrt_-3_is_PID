{"name":"Std.CodeAction.Basic","instances":[],"imports":["Init","Lean.Elab.BuiltinTerm","Lean.Elab.BuiltinNotation","Std.Lean.InfoTree","Std.CodeAction.Attr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L212-L230","name":"Std.CodeAction.cmdCodeActionProvider","line":212,"kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.cmdCodeActionProvider","doc":"A code action which calls all `@[command_code_action]` code actions on each command.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.cmdCodeActionProvider\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">cmdCodeActionProvider</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions.html#Lean.Server.CodeActionProvider\">Lean.Server.CodeActionProvider</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L165-L207","name":"Std.CodeAction.tacticCodeActionProvider","line":165,"kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.tacticCodeActionProvider","doc":"A code action which calls `@[tactic_code_action]` code actions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.tacticCodeActionProvider\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">tacticCodeActionProvider</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions.html#Lean.Server.CodeActionProvider\">Lean.Server.CodeActionProvider</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L145-L162","name":"Std.CodeAction.findInfoTree?","line":145,"kind":"opaque","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findInfoTree?","doc":"Returns the info tree corresponding to a syntax, using `kind` and `range` for identification.\n(This is not foolproof, but it is a fairly accurate proxy for `Syntax` equality and a lot cheaper\nthan deep comparison.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.findInfoTree?\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findInfoTree?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tgtRange : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(canonicalOnly : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L98-L138","name":"Std.CodeAction.findTactic?.go","line":98,"kind":"opaque","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.go","doc":"Main recursion for `findTactic?`. This takes a `stack` context and a root syntax `stx`,\nand returns the best `FindTacticResult` it can find. It returns `none` (abort) if two or more\nresults are found, and `some none` (none yet) if no results are found. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.go\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findTactic?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(preferred : <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(range : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stack : <a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prev? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\">Std.CodeAction.FindTacticResult</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L91-L93","name":"Std.CodeAction.findTactic?.merge","line":91,"kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.merge","doc":"Merges the results of two `FindTacticResult`s. This just prefers the second (inner) one,\nunless the inner tactic is a dispreferred tactic sequence and the outer one is preferred.\nThis is used to implement whitespace-sensitive selection of tactic sequences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.merge\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findTactic?</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\">Std.CodeAction.FindTacticResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r₂ : <a href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\">Std.CodeAction.FindTacticResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\">Std.CodeAction.FindTacticResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L81-L86","name":"Std.CodeAction.findTactic?.visit","line":81,"kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.visit","doc":"Returns `none` if we should not visit this syntax at all, and `some false` if we only\nwant to visit it in \"extended\" mode (where we include trailing characters). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?.visit\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findTactic?</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(range : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prev? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L76-L138","name":"Std.CodeAction.findTactic?","line":76,"kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?","doc":"Find the syntax on which to trigger tactic code actions.\nThis is a pure syntax pass, without regard to elaboration information.\n\n* `preferred : String.Pos → Bool`: used to select \"preferred `tacticSeq`s\" based on the cursor\n  column, when the cursor selection would otherwise be ambiguous. For example, in:\n  ```\n  · foo\n    · bar\n      baz\n    |\n  ```\n  where the cursor is at the `|`, we select the `tacticSeq` starting with `foo`, while if the\n  cursor was indented to align with `baz` then we would select the `bar; baz` sequence instead.\n\n* `range`: the cursor selection. We do not do much with range selections; if a range selection\n  covers more than one tactic then we abort.\n\n* `root`: the root syntax to process\n\nThe return value is either a selected tactic, or a selected point in a tactic sequence.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.findTactic?\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findTactic?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(preferred : <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(range : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(root : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\">Std.CodeAction.FindTacticResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L49-L52","name":"Std.CodeAction.FindTacticResult.tacticSeq","line":49,"kind":"ctor","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult.tacticSeq","doc":"The cursor is between tactics, and the nearest enclosing range is a tactic sequence.\nCode actions will insert tactics at index `insertIdx` into the syntax\n(which is a nullNode of `tactic;*` inside a `tacticSeqBracketed` or `tacticSeq1Indented`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult.tacticSeq\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">FindTacticResult</span>.<span class=\"name\">tacticSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(preferred : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(insertIdx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a> → <a href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\">Std.CodeAction.FindTacticResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L47-L48","name":"Std.CodeAction.FindTacticResult.tactic","line":47,"kind":"ctor","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult.tactic","doc":"The nearest enclosing tactic is a tactic, with the given syntax stack. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult.tactic\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">FindTacticResult</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a> → <a href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\">Std.CodeAction.FindTacticResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L46-L52","name":"Std.CodeAction.FindTacticResult","line":46,"kind":"inductive","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult","doc":"The return value of `findTactic?`.\nThis is the syntax for which code actions will be triggered.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.FindTacticResult\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">FindTacticResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Basic.lean#L28-L40","name":"Std.CodeAction.holeCodeActionProvider","line":28,"kind":"def","docLink":"./Std/CodeAction/Basic.html#Std.CodeAction.holeCodeActionProvider","doc":"A code action which calls all `@[hole_code_action]` code actions on each hole\n(`?_`, `_`, or `sorry`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Basic.html#Std.CodeAction.holeCodeActionProvider\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">holeCodeActionProvider</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions.html#Lean.Server.CodeActionProvider\">Lean.Server.CodeActionProvider</a></div></div>"}]}