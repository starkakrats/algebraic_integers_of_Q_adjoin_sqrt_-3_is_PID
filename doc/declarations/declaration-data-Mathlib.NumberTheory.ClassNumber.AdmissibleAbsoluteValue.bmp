{"name":"Mathlib.NumberTheory.ClassNumber.AdmissibleAbsoluteValue","instances":[],"imports":["Init","Mathlib.Data.Real.Basic","Mathlib.Combinatorics.Pigeonhole","Mathlib.Algebra.Order.EuclideanAbsoluteValue"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean#L125-L131","name":"AbsoluteValue.IsAdmissible.exists_approx","line":125,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_approx","doc":"Any large enough family of vectors in `R^ι` has a pair of elements\nwhose remainders are close together, pointwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_approx\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">exists_approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/EuclideanDomain/Defs.html#EuclideanDomain\">EuclideanDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{abv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/AbsoluteValue.html#AbsoluteValue\">AbsoluteValue</a> <span class=\"fn\">R</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible\">AbsoluteValue.IsAdmissible</a> <span class=\"fn\">abv</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">h</span> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">ι</span></span></span>)</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i₀ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">h</span> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">ι</span></span></span>)</span></span>)</span></span>) (i₁ :\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">h</span> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">ι</span></span></span>)</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₀</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₁</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₀</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">ε</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean#L74-L120","name":"AbsoluteValue.IsAdmissible.exists_approx_aux","line":74,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_approx_aux","doc":"Any large enough family of vectors in `R^n` has a pair of elements\nwhose remainders are close together, pointwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_approx_aux\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">exists_approx_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/EuclideanDomain/Defs.html#EuclideanDomain\">EuclideanDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{abv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/AbsoluteValue.html#AbsoluteValue\">AbsoluteValue</a> <span class=\"fn\">R</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible\">AbsoluteValue.IsAdmissible</a> <span class=\"fn\">abv</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(_hε : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(_hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">h</span> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i₀ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">h</span> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>) (i₁ :\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">h</span> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₀</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₁</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₀</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">ε</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean#L62-L69","name":"AbsoluteValue.IsAdmissible.exists_partition","line":62,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_partition","doc":"For all `ε > 0` and finite families `A`, we can partition the remainders of `A` mod `b`\ninto `abv.card ε` sets, such that all elements in each part of remainders are close together. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_partition\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">exists_partition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/EuclideanDomain/Defs.html#EuclideanDomain\">EuclideanDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{abv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/AbsoluteValue.html#AbsoluteValue\">AbsoluteValue</a> <span class=\"fn\">R</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible\">AbsoluteValue.IsAdmissible</a> <span class=\"fn\">abv</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (t : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">h</span> <span class=\"fn\">ε</span></span>)</span></span></span>),\n  <span class=\"fn\">∀ (<span class=\"fn\">i₀ </span>i₁ : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i₁</span></span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₀</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">ε</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean#L47-L47","name":"AbsoluteValue.IsAdmissible.exists_partition'","line":47,"kind":"def","docLink":"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_partition'","doc":"For all `ε > 0` and finite families `A`, we can partition the remainders of `A` mod `b`\ninto `abv.card ε` sets, such that all elements in each part of remainders are close together. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.exists_partition'\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">exists_partition'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/EuclideanDomain/Defs.html#EuclideanDomain\">EuclideanDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{abv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/AbsoluteValue.html#AbsoluteValue\">AbsoluteValue</a> <span class=\"fn\">R</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible\">AbsoluteValue.IsAdmissible</a> <span class=\"fn\">abv</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span> →\n  <span class=\"fn\">∀ {<span class=\"fn\">b</span> : <span class=\"fn\">R</span>},\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> →\n      <span class=\"fn\">∀ (<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">R</span></span>),\n        <span class=\"fn\">∃ (t : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\">AbsoluteValue.IsAdmissible.card</a> <span class=\"fn\">self</span> <span class=\"fn\">ε</span></span>)</span></span></span>),\n          <span class=\"fn\">∀ (<span class=\"fn\">i₀ </span>i₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i₁</span></span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₀</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">ε</span></span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean#L44-L44","name":"AbsoluteValue.IsAdmissible.card","line":44,"kind":"def","docLink":"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.card\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/EuclideanDomain/Defs.html#EuclideanDomain\">EuclideanDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{abv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/AbsoluteValue.html#AbsoluteValue\">AbsoluteValue</a> <span class=\"fn\">R</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible\">AbsoluteValue.IsAdmissible</a> <span class=\"fn\">abv</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean#L43-L43","name":"AbsoluteValue.IsAdmissible.mk","line":43,"kind":"ctor","docLink":"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible.mk\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsAdmissible</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/EuclideanDomain/Defs.html#EuclideanDomain\">EuclideanDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{abv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/AbsoluteValue.html#AbsoluteValue\">AbsoluteValue</a> <span class=\"fn\">R</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toIsEuclidean : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/EuclideanAbsoluteValue.html#AbsoluteValue.IsEuclidean\">AbsoluteValue.IsEuclidean</a> <span class=\"fn\">abv</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(card : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exists_partition' : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) {<span class=\"fn\">ε</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span> →\n    <span class=\"fn\">∀ {<span class=\"fn\">b</span> : <span class=\"fn\">R</span>},\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> →\n        <span class=\"fn\">∀ (<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">R</span></span>),\n          <span class=\"fn\">∃ (t : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">card</span> <span class=\"fn\">ε</span></span>)</span></span></span>), <span class=\"fn\">∀ (<span class=\"fn\">i₀ </span>i₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i₁</span></span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">i₀</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abv</span> <span class=\"fn\">b</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">ε</span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible\">AbsoluteValue.IsAdmissible</a> <span class=\"fn\">abv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.lean#L43-L49","name":"AbsoluteValue.IsAdmissible","line":43,"kind":"structure","docLink":"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible","doc":"An absolute value `R → ℤ` is admissible if it respects the Euclidean domain\nstructure and a large enough set of elements in `R^n` will contain a pair of\nelements whose remainders are pointwise close together. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ClassNumber/AdmissibleAbsoluteValue.html#AbsoluteValue.IsAdmissible\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsAdmissible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/EuclideanDomain/Defs.html#EuclideanDomain\">EuclideanDomain</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(abv : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/AbsoluteValue.html#AbsoluteValue\">AbsoluteValue</a> <span class=\"fn\">R</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/EuclideanAbsoluteValue.html#AbsoluteValue.IsEuclidean\"><span class=\"name\">AbsoluteValue</span>.<span class=\"name\">IsEuclidean</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}