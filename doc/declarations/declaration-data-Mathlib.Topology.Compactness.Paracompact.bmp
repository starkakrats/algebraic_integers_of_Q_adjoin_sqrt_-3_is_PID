{"name":"Mathlib.Topology.Compactness.Paracompact","instances":[{"typeNames":["Prod"],"name":"instParacompactSpaceProdInstTopologicalSpaceProd","className":"ParacompactSpace"},{"typeNames":["Prod"],"name":"instParacompactSpaceProdInstTopologicalSpaceProd_1","className":"ParacompactSpace"},{"typeNames":[],"name":"paracompact_of_compact","className":"ParacompactSpace"},{"typeNames":[],"name":"paracompact_of_locallyCompact_sigmaCompact","className":"ParacompactSpace"},{"typeNames":[],"name":"T4Space.of_paracompactSpace_t2Space","className":"T4Space"}],"imports":["Init","Mathlib.Topology.Homeomorph","Mathlib.Data.Option.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L293-L317","name":"T4Space.of_paracompactSpace_t2Space","line":293,"kind":"instance","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#T4Space.of_paracompactSpace_t2Space","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#T4Space.of_paracompactSpace_t2Space\"><span class=\"name\">T4Space</span>.<span class=\"name\">of_paracompactSpace_t2Space</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T4Space\">T4Space</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L279-L287","name":"paracompact_of_locallyCompact_sigmaCompact","line":279,"kind":"instance","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#paracompact_of_locallyCompact_sigmaCompact","doc":"A locally compact sigma compact Hausdorff space is paracompact. See also\n`refinement_of_locallyCompact_sigmaCompact_of_nhds_basis` for a more precise statement. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#paracompact_of_locallyCompact_sigmaCompact\"><span class=\"name\">paracompact_of_locallyCompact_sigmaCompact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/LocallyCompact.html#WeaklyLocallyCompactSpace\">WeaklyLocallyCompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/SigmaCompact.html#SigmaCompactSpace\">SigmaCompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L266-L273","name":"refinement_of_locallyCompact_sigmaCompact_of_nhds_basis","line":266,"kind":"theorem","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#refinement_of_locallyCompact_sigmaCompact_of_nhds_basis","doc":"Let `X` be a locally compact sigma compact Hausdorff topological space. Suppose that for each\n`x` the sets `B x : Œπ x ‚Üí Set X` with the predicate `p x : Œπ x ‚Üí Prop` form a basis of the filter\n`ùìù x`. Then there exists a locally finite covering `fun i ‚Ü¶ B (c i) (r i)` of `X` such that each\n`r i` satisfies `p (c i)`.\n\nThe notation is inspired by the case `B x r = Metric.ball x r` but the theorem applies to\n`nhds_basis_opens` as well. If the covering must be subordinate to some open covering of `s`, then\nthe user should use a basis obtained by `Filter.HasBasis.restrict_subset` or a similar lemma, see\nthe proof of `paracompact_of_locallyCompact_sigmaCompact` for an example.\n\nThe formalization is based on two [ncatlab](https://ncatlab.org/) proofs:\n* [locally compact and sigma compact spaces are paracompact](https://ncatlab.org/nlab/show/locally+compact+and+sigma-compact+spaces+are+paracompact);\n* [open cover of smooth manifold admits locally finite refinement by closed balls](https://ncatlab.org/nlab/show/partition+of+unity#ExistenceOnSmoothManifolds).\n\nSee also `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set` for a version of this lemma\ndealing with a covering of a closed set.\n\nIn most cases (namely, if `B c r ‚à™ B c r'` is again a set of the form `B c r''`) it is possible\nto choose `Œ± = X`. This fact is not yet formalized in `mathlib`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#refinement_of_locallyCompact_sigmaCompact_of_nhds_basis\"><span class=\"name\">refinement_of_locallyCompact_sigmaCompact_of_nhds_basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/LocallyCompact.html#WeaklyLocallyCompactSpace\">WeaklyLocallyCompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/SigmaCompact.html#SigmaCompactSpace\">SigmaCompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œπ</span> <span class=\"fn\">x</span></span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œπ</span> <span class=\"fn\">x</span></span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (Œ± : <a href=\"./foundational_types.html\">Type</a> v) (c : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">X</span></span>) (r : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">Œπ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ãÉ (a : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyFinite.html#LocallyFinite\">LocallyFinite</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L196-L244","name":"refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set","line":196,"kind":"theorem","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set","doc":"Let `X` be a locally compact sigma compact Hausdorff topological space, let `s` be a closed set\nin `X`. Suppose that for each `x ‚àà s` the sets `B x : Œπ x ‚Üí Set X` with the predicate\n`p x : Œπ x ‚Üí Prop` form a basis of the filter `ùìù x`. Then there exists a locally finite covering\n`fun i ‚Ü¶ B (c i) (r i)` of `s` such that all ‚Äúcenters‚Äù `c i` belong to `s` and each `r i` satisfies\n`p (c i)`.\n\nThe notation is inspired by the case `B x r = Metric.ball x r` but the theorem applies to\n`nhds_basis_opens` as well. If the covering must be subordinate to some open covering of `s`, then\nthe user should use a basis obtained by `Filter.HasBasis.restrict_subset` or a similar lemma, see\nthe proof of `paracompact_of_locallyCompact_sigmaCompact` for an example.\n\nThe formalization is based on two [ncatlab](https://ncatlab.org/) proofs:\n* [locally compact and sigma compact spaces are paracompact](https://ncatlab.org/nlab/show/locally+compact+and+sigma-compact+spaces+are+paracompact);\n* [open cover of smooth manifold admits locally finite refinement by closed balls](https://ncatlab.org/nlab/show/partition+of+unity#ExistenceOnSmoothManifolds).\n\nSee also `refinement_of_locallyCompact_sigmaCompact_of_nhds_basis` for a version of this lemma\ndealing with a covering of the whole space.\n\nIn most cases (namely, if `B c r ‚à™ B c r'` is again a set of the form `B c r''`) it is possible\nto choose `Œ± = X`. This fact is not yet formalized in `mathlib`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set\"><span class=\"name\">refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/LocallyCompact.html#WeaklyLocallyCompactSpace\">WeaklyLocallyCompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/SigmaCompact.html#SigmaCompactSpace\">SigmaCompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œπ</span> <span class=\"fn\">x</span></span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œπ</span> <span class=\"fn\">x</span></span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hB : <span class=\"fn\">‚àÄ <span class=\"fn\">x</span> ‚àà <span class=\"fn\">s</span>, <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (Œ± : <a href=\"./foundational_types.html\">Type</a> v) (c : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">X</span></span>) (r : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">Œπ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">‚ãÉ (a : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span></span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyFinite.html#LocallyFinite\">LocallyFinite</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>) =&gt; <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L167-L173","name":"paracompact_of_compact","line":167,"kind":"instance","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#paracompact_of_compact","doc":"A compact space is paracompact. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#paracompact_of_compact\"><span class=\"name\">paracompact_of_compact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L162-L163","name":"instParacompactSpaceProdInstTopologicalSpaceProd_1","line":162,"kind":"instance","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#instParacompactSpaceProdInstTopologicalSpaceProd_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#instParacompactSpaceProdInstTopologicalSpaceProd_1\"><span class=\"name\">instParacompactSpaceProdInstTopologicalSpaceProd_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L136-L160","name":"instParacompactSpaceProdInstTopologicalSpaceProd","line":136,"kind":"instance","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#instParacompactSpaceProdInstTopologicalSpaceProd","doc":"The product of a compact space and a paracompact space is a paracompact space. The formalization\nis based on https://dantopology.wordpress.com/2009/10/24/compact-x-paracompact-is-paracompact/\nwith some minor modifications.\n\nThis version assumes that `X` in `X √ó Y` is compact and `Y` is paracompact, see next lemma for the\nother case. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#instParacompactSpaceProdInstTopologicalSpaceProd\"><span class=\"name\">instParacompactSpaceProdInstTopologicalSpaceProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L127-L128","name":"Homeomorph.paracompactSpace_iff","line":127,"kind":"theorem","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#Homeomorph.paracompactSpace_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#Homeomorph.paracompactSpace_iff\"><span class=\"name\">Homeomorph</span>.<span class=\"name\">paracompactSpace_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">‚âÉ‚Çú</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">Y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L115-L125","name":"ClosedEmbedding.paracompactSpace","line":115,"kind":"theorem","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#ClosedEmbedding.paracompactSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#ClosedEmbedding.paracompactSpace\"><span class=\"name\">ClosedEmbedding</span>.<span class=\"name\">paracompactSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(he : <span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#ClosedEmbedding\">ClosedEmbedding</a> <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L99-L112","name":"precise_refinement_set","line":99,"kind":"theorem","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#precise_refinement_set","doc":"In a paracompact space, every open covering of a closed set admits a locally finite refinement\nindexed by the same type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#precise_refinement_set\"><span class=\"name\">precise_refinement_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uo : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">‚ãÉ (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">‚ãÉ (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyFinite.html#LocallyFinite\">LocallyFinite</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L73-L94","name":"precise_refinement","line":73,"kind":"theorem","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#precise_refinement","doc":"Any open cover of a paracompact space has a locally finite *precise* refinement, that is,\none indexed on the same type with each open set contained in the corresponding original one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#precise_refinement\"><span class=\"name\">precise_refinement</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uo : <span class=\"fn\">‚àÄ (<span class=\"fn\">a</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uc : <span class=\"fn\"><span class=\"fn\">‚ãÉ (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (v : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">a</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ãÉ (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyFinite.html#LocallyFinite\">LocallyFinite</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">a</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">a</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L63-L63","name":"ParacompactSpace.locallyFinite_refinement","line":63,"kind":"def","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace.locallyFinite_refinement","doc":"Every open cover of a paracompact space assumes a locally finite refinement. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace.locallyFinite_refinement\"><span class=\"name\">ParacompactSpace</span>.<span class=\"name\">locallyFinite_refinement</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> ‚Üí\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ãÉ (a : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span> ‚Üí\n    <span class=\"fn\">‚àÉ (Œ≤ : <a href=\"./foundational_types.html\">Type</a> v) (t : <span class=\"fn\"><span class=\"fn\">Œ≤</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>) (_ : <span class=\"fn\">‚àÄ (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">b</span></span>)</span></span></span>) (_ : <span class=\"fn\"><span class=\"fn\">‚ãÉ (b : <span class=\"fn\">Œ≤</span>), <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span>),\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyFinite.html#LocallyFinite\">LocallyFinite</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>), <span class=\"fn\">‚àÉ (a : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L61-L61","name":"ParacompactSpace.mk","line":61,"kind":"ctor","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace.mk\"><span class=\"name\">ParacompactSpace</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(locallyFinite_refinement : <span class=\"fn\">‚àÄ (<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a> v) (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">‚àÄ (<span class=\"fn\">a</span> : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span> ‚Üí\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">‚ãÉ (a : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span> ‚Üí\n      <span class=\"fn\">‚àÉ (Œ≤ : <a href=\"./foundational_types.html\">Type</a> v) (t : <span class=\"fn\"><span class=\"fn\">Œ≤</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">X</span></span></span>) (_ : <span class=\"fn\">‚àÄ (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">b</span></span>)</span></span></span>) (_ : <span class=\"fn\"><span class=\"fn\">‚ãÉ (b : <span class=\"fn\">Œ≤</span>), <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span>),\n        <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyFinite.html#LocallyFinite\">LocallyFinite</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">b</span> : <span class=\"fn\">Œ≤</span>), <span class=\"fn\">‚àÉ (a : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">a</span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\">ParacompactSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Compactness/Paracompact.lean#L61-L66","name":"ParacompactSpace","line":61,"kind":"class","docLink":"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace","doc":"A topological space is called paracompact, if every open covering of this space admits a locally\nfinite refinement. We use the same universe for all types in the definition to avoid creating a\nclass like `ParacompactSpace.{u v}`. Due to lemma `precise_refinement` below, every open covering\n`s : Œ± ‚Üí Set X` indexed on `Œ± : Type v` has a *precise* locally finite refinement, i.e., a locally\nfinite refinement `t : Œ± ‚Üí Set X` indexed on the same type such that each `‚àÄ i, t i ‚äÜ s i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Compactness/Paracompact.html#ParacompactSpace\"><span class=\"name\">ParacompactSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}