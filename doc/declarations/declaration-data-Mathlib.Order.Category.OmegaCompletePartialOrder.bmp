{"name":"Mathlib.Order.Category.OmegaCompletePartialOrder","instances":[{"typeNames":["OmegaCompletePartialOrder.ContinuousHom"],"name":"ωCPO.instBundledHomTypeOmegaCompletePartialOrderContinuousHom","className":"CategoryTheory.BundledHom"},{"typeNames":["ωCPO"],"name":"ωCPO.instConcreteCategoryωCPOInstωCPOLargeCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["ωCPO","_builtin_typeu"],"name":"ωCPO.instCoeSortωCPOType","className":"CoeSort"},{"typeNames":["ωCPO"],"name":"ωCPO.instInhabitedωCPO","className":"Inhabited"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"ωCPO.instOmegaCompletePartialOrderα","className":"OmegaCompletePartialOrder"},{"typeNames":[],"name":"ωCPO.HasProducts.instHasProductωCPOInstωCPOLargeCategory","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["Subtype"],"name":"ωCPO.omegaCompletePartialOrderEqualizer","className":"OmegaCompletePartialOrder"},{"typeNames":["CategoryTheory.Discrete","ωCPO"],"name":"ωCPO.instHasProductsωCPOInstωCPOLargeCategory","className":"CategoryTheory.Limits.HasLimitsOfShape"},{"typeNames":["CategoryTheory.Limits.parallelPair"],"name":"ωCPO.instHasLimitWalkingParallelPairWalkingParallelPairHomCategoryωCPOInstωCPOLargeCategoryParallelPair","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["ωCPO"],"name":"ωCPO.instHasEqualizersωCPOInstωCPOLargeCategory","className":"CategoryTheory.Limits.HasLimitsOfShape"},{"typeNames":["ωCPO"],"name":"ωCPO.instHasLimitsωCPOInstωCPOLargeCategory","className":"CategoryTheory.Limits.HasLimitsOfSize"}],"imports":["Init","Mathlib.Order.OmegaCompletePartialOrder","Mathlib.CategoryTheory.Limits.Shapes.Products","Mathlib.CategoryTheory.Limits.Shapes.Equalizers","Mathlib.CategoryTheory.Limits.Constructions.LimitsOfProductsAndEqualizers","Mathlib.CategoryTheory.ConcreteCategory.BundledHom"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L150-L151","name":"ωCPO.instHasLimitsωCPOInstωCPOLargeCategory","line":150,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasLimitsωCPOInstωCPOLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasLimitsωCPOInstωCPOLargeCategory\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instHasLimitsωCPOInstωCPOLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimits\">CategoryTheory.Limits.HasLimits</a> <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L147-L148","name":"ωCPO.instHasEqualizersωCPOInstωCPOLargeCategory","line":147,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasEqualizersωCPOInstωCPOLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasEqualizersωCPOInstωCPOLargeCategory\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instHasEqualizersωCPOInstωCPOLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasEqualizers\">CategoryTheory.Limits.HasEqualizers</a> <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L144-L145","name":"ωCPO.instHasLimitWalkingParallelPairWalkingParallelPairHomCategoryωCPOInstωCPOLargeCategoryParallelPair","line":144,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasLimitWalkingParallelPairWalkingParallelPairHomCategoryωCPOInstωCPOLargeCategoryParallelPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasLimitWalkingParallelPairWalkingParallelPairHomCategoryωCPOInstωCPOLargeCategoryParallelPair\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instHasLimitWalkingParallelPairWalkingParallelPairHomCategoryωCPOInstωCPOLargeCategoryParallelPair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimit\">CategoryTheory.Limits.HasLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair\">CategoryTheory.Limits.parallelPair</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L141-L142","name":"ωCPO.instHasProductsωCPOInstωCPOLargeCategory","line":141,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasProductsωCPOInstωCPOLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instHasProductsωCPOInstωCPOLargeCategory\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instHasProductsωCPOInstωCPOLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProducts\">CategoryTheory.Limits.HasProducts</a> <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L129-L136","name":"ωCPO.HasEqualizers.isEqualizer","line":129,"kind":"def","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasEqualizers.isEqualizer","doc":"The equalizer fork is a limit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasEqualizers.isEqualizer\"><span class=\"name\">ωCPO</span>.<span class=\"name\">HasEqualizers</span>.<span class=\"name\">isEqualizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasEqualizers.equalizer\">ωCPO.HasEqualizers.equalizer</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L123-L125","name":"ωCPO.HasEqualizers.equalizer","line":123,"kind":"def","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasEqualizers.equalizer","doc":"A construction of the equalizer fork. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasEqualizers.equalizer\"><span class=\"name\">ωCPO</span>.<span class=\"name\">HasEqualizers</span>.<span class=\"name\">equalizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork\">CategoryTheory.Limits.Fork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L116-L118","name":"ωCPO.HasEqualizers.equalizerι","line":116,"kind":"def","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasEqualizers.equalizerι","doc":"The equalizer inclusion function as a `ContinuousHom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasEqualizers.equalizerι\"><span class=\"name\">ωCPO</span>.<span class=\"name\">HasEqualizers</span>.<span class=\"name\">equalizerι</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.ContinuousHom\">→𝒄</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.ContinuousHom\">→𝒄</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span></span> }</span> <a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.ContinuousHom\">→𝒄</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L103-L110","name":"ωCPO.omegaCompletePartialOrderEqualizer","line":103,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.omegaCompletePartialOrderEqualizer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.omegaCompletePartialOrderEqualizer\"><span class=\"name\">ωCPO</span>.<span class=\"name\">omegaCompletePartialOrderEqualizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.ContinuousHom\">→𝒄</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.ContinuousHom\">→𝒄</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L98-L99","name":"ωCPO.HasProducts.instHasProductωCPOInstωCPOLargeCategory","line":98,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasProducts.instHasProductωCPOInstωCPOLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasProducts.instHasProductωCPOInstωCPOLargeCategory\"><span class=\"name\">ωCPO</span>.<span class=\"name\">HasProducts</span>.<span class=\"name\">instHasProductωCPOInstωCPOLargeCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProduct\">CategoryTheory.Limits.HasProduct</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L85-L95","name":"ωCPO.HasProducts.isProduct","line":85,"kind":"def","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasProducts.isProduct","doc":"The pi-type is a limit cone for the product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasProducts.isProduct\"><span class=\"name\">ωCPO</span>.<span class=\"name\">HasProducts</span>.<span class=\"name\">isProduct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(J : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasProducts.product\">ωCPO.HasProducts.product</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L80-L81","name":"ωCPO.HasProducts.product","line":80,"kind":"def","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasProducts.product","doc":"The pi-type gives a cone for a product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.HasProducts.product\"><span class=\"name\">ωCPO</span>.<span class=\"name\">HasProducts</span>.<span class=\"name\">product</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">J</span> → <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Fan\">CategoryTheory.Limits.Fan</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L70-L71","name":"ωCPO.instOmegaCompletePartialOrderα","line":70,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instOmegaCompletePartialOrderα","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instOmegaCompletePartialOrderα\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instOmegaCompletePartialOrderα</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">↑<span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L67-L68","name":"ωCPO.instInhabitedωCPO","line":67,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instInhabitedωCPO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instInhabitedωCPO\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instInhabitedωCPO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L63-L64","name":"ωCPO.coe_of","line":63,"kind":"theorem","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.coe_of\"><span class=\"name\">ωCPO</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.of\">ωCPO.of</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L58-L59","name":"ωCPO.of","line":58,"kind":"def","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.of","doc":"Construct a bundled ωCPO from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.of\"><span class=\"name\">ωCPO</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder\">OmegaCompletePartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L54-L55","name":"ωCPO.instCoeSortωCPOType","line":54,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instCoeSortωCPOType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instCoeSortωCPOType\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instCoeSortωCPOType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L52-L52","name":"ωCPO.instConcreteCategoryωCPOInstωCPOLargeCategory","line":52,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instConcreteCategoryωCPOInstωCPOLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instConcreteCategoryωCPOInstωCPOLargeCategory\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instConcreteCategoryωCPOInstωCPOLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\">ωCPO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L44-L48","name":"ωCPO.instBundledHomTypeOmegaCompletePartialOrderContinuousHom","line":44,"kind":"instance","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instBundledHomTypeOmegaCompletePartialOrderContinuousHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO.instBundledHomTypeOmegaCompletePartialOrderContinuousHom\"><span class=\"name\">ωCPO</span>.<span class=\"name\">instBundledHomTypeOmegaCompletePartialOrderContinuousHom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/BundledHom.html#CategoryTheory.BundledHom\">CategoryTheory.BundledHom</a> <a href=\"./Mathlib/Order/OmegaCompletePartialOrder.html#OmegaCompletePartialOrder.ContinuousHom\">OmegaCompletePartialOrder.ContinuousHom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/OmegaCompletePartialOrder.lean#L36-L37","name":"ωCPO","line":36,"kind":"def","docLink":"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO","doc":"The category of types with an omega complete partial order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/OmegaCompletePartialOrder.html#ωCPO\"><span class=\"name\">ωCPO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}