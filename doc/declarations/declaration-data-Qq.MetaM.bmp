{"name":"Qq.MetaM","instances":[{"typeNames":["Qq.MaybeDefEq"],"name":"Qq.instReprMaybeDefEq","className":"Repr"}],"imports":["Init","Qq.Macro","Qq.Delab"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L57-L60","name":"Qq.assertDefEqQ","line":57,"kind":"def","docLink":"./Qq/MetaM.html#Qq.assertDefEqQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.assertDefEqQ\"><span class=\"name\">Qq</span>.<span class=\"name\">assertDefEqQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">«$a»</span> =Q <span class=\"fn\">«$b»</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L51-L55","name":"Qq.isDefEqQ","line":51,"kind":"def","docLink":"./Qq/MetaM.html#Qq.isDefEqQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.isDefEqQ\"><span class=\"name\">Qq</span>.<span class=\"name\">isDefEqQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">Qq.MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L46-L49","name":"Qq.instReprMaybeDefEq","line":46,"kind":"instance","docLink":"./Qq/MetaM.html#Qq.instReprMaybeDefEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.instReprMaybeDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">instReprMaybeDefEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>} →\n  <span class=\"fn\">{<span class=\"fn\">α</span> :\n      <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n      <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>} →\n    <span class=\"fn\">{<span class=\"fn\">a </span>b : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>} → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">Qq.MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L44-L44","name":"Qq.MaybeDefEq.notDefEq","line":44,"kind":"ctor","docLink":"./Qq/MetaM.html#Qq.MaybeDefEq.notDefEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeDefEq.notDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeDefEq</span>.<span class=\"name\">notDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">Qq.MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L43-L43","name":"Qq.MaybeDefEq.defEq","line":43,"kind":"ctor","docLink":"./Qq/MetaM.html#Qq.MaybeDefEq.defEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeDefEq.defEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeDefEq</span>.<span class=\"name\">defEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">«$a»</span> =Q <span class=\"fn\">«$b»</span></span> → <span class=\"fn\"><a href=\"./Qq/MetaM.html#Qq.MaybeDefEq\">Qq.MaybeDefEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L42-L44","name":"Qq.MaybeDefEq","line":42,"kind":"inductive","docLink":"./Qq/MetaM.html#Qq.MaybeDefEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.MaybeDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">MaybeDefEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L36-L40","name":"Qq.checkTypeQ","line":36,"kind":"def","docLink":"./Qq/MetaM.html#Qq.checkTypeQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.checkTypeQ\"><span class=\"name\">Qq</span>.<span class=\"name\">checkTypeQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<span class=\"fn\">«$ty»</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L31-L34","name":"Qq.inferTypeQ","line":31,"kind":"def","docLink":"./Qq/MetaM.html#Qq.inferTypeQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.inferTypeQ\"><span class=\"name\">Qq</span>.<span class=\"name\">inferTypeQ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(<span class=\"fn\">(u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>) ×\n    <span class=\"fn\">(α :\n      <span class=\"fn\">let u := <span class=\"fn\">u</span>;\n      <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span></span>) ×\n      <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L26-L29","name":"Qq.elabTermEnsuringTypeQ","line":26,"kind":"def","docLink":"./Qq/MetaM.html#Qq.elabTermEnsuringTypeQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.elabTermEnsuringTypeQ\"><span class=\"name\">Qq</span>.<span class=\"name\">elabTermEnsuringTypeQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(catchExPostpone : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(implicitLambda : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(errorMsgHeader? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\">«$expectedType»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L23-L24","name":"Qq.instantiateMVarsQ","line":23,"kind":"def","docLink":"./Qq/MetaM.html#Qq.instantiateMVarsQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.instantiateMVarsQ\"><span class=\"name\">Qq</span>.<span class=\"name\">instantiateMVarsQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L20-L21","name":"Qq.synthInstanceQ","line":20,"kind":"def","docLink":"./Qq/MetaM.html#Qq.synthInstanceQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.synthInstanceQ\"><span class=\"name\">Qq</span>.<span class=\"name\">synthInstanceQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L17-L18","name":"Qq.trySynthInstanceQ","line":17,"kind":"def","docLink":"./Qq/MetaM.html#Qq.trySynthInstanceQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.trySynthInstanceQ\"><span class=\"name\">Qq</span>.<span class=\"name\">trySynthInstanceQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/LOption.html#Lean.LOption\">Lean.LOption</a> <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L14-L15","name":"Qq.withLocalDeclQ","line":14,"kind":"def","docLink":"./Qq/MetaM.html#Qq.withLocalDeclQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.withLocalDeclQ\"><span class=\"name\">Qq</span>.<span class=\"name\">withLocalDeclQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bi : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">Q(<span class=\"fn\">«$β»</span>)</span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L11-L12","name":"Qq.withLocalDeclDQ","line":11,"kind":"def","docLink":"./Qq/MetaM.html#Qq.withLocalDeclDQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.withLocalDeclDQ\"><span class=\"name\">Qq</span>.<span class=\"name\">withLocalDeclDQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">Q(<span class=\"fn\">«$β»</span>)</span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/MetaM.lean#L8-L9","name":"Qq.mkFreshExprMVarQ","line":8,"kind":"def","docLink":"./Qq/MetaM.html#Qq.mkFreshExprMVarQ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/MetaM.html#Qq.mkFreshExprMVarQ\"><span class=\"name\">Qq</span>.<span class=\"name\">mkFreshExprMVarQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind\">Lean.MetavarKind</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarKind.natural\">Lean.MetavarKind.natural</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(userName : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">Q(<span class=\"fn\">«$ty»</span>)</span></span></div></div>"}]}