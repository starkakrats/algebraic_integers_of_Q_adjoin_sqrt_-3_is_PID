{"name":"Std.Tactic.ShowTerm","instances":[],"imports":["Init","Lean.Elab.ElabRules","Std.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/ShowTerm.lean#L42-L42","name":"Std.Tactic.by?","line":42,"kind":"def","docLink":"./Std/Tactic/ShowTerm.html#Std.Tactic.by?","doc":"The command `by?` will print a suggestion for replacing the proof block with a proof term\nusing `show_term`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/ShowTerm.html#Std.Tactic.by?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">by?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/ShowTerm.lean#L35-L36","name":"Std.Tactic.showTerm","line":35,"kind":"def","docLink":"./Std/Tactic/ShowTerm.html#Std.Tactic.showTerm","doc":"`show_term e` elaborates `e`, then prints the generated term.\n\n(For some tactics, the printed term will not be human readable.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/ShowTerm.html#Std.Tactic.showTerm\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">showTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/ShowTerm.lean#L23-L28","name":"Std.Tactic.showTermImpl","line":23,"kind":"def","docLink":"./Std/Tactic/ShowTerm.html#Std.Tactic.showTermImpl","doc":"Implementation of `show_term`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/ShowTerm.html#Std.Tactic.showTermImpl\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">showTermImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/ShowTerm.lean#L12-L21","name":"Std.Tactic.showTermTac","line":12,"kind":"def","docLink":"./Std/Tactic/ShowTerm.html#Std.Tactic.showTermTac","doc":"`show_term tac` runs `tac`, then prints the generated term in the form\n\"exact X Y Z\" or \"refine X ?_ Z\" if there are remaining subgoals.\n\n(For some tactics, the printed term will not be human readable.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/ShowTerm.html#Std.Tactic.showTermTac\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">showTermTac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}