{"name":"Std.Data.Range.Lemmas","instances":[],"imports":["Init","Std.Tactic.ByCases","Std.Data.List.Lemmas","Std.Data.List.Init.Attach"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Range/Lemmas.lean#L89-L102","name":"Std.Range.forIn_eq_forIn_range'","line":89,"kind":"theorem","docLink":"./Std/Data/Range/Lemmas.html#Std.Range.forIn_eq_forIn_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Range/Lemmas.html#Std.Range.forIn_eq_forIn_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forIn_eq_forIn_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems\">Std.Range.numElems</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.step</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Range/Lemmas.lean#L44-L87","name":"Std.Range.forIn'_eq_forIn_range'","line":44,"kind":"theorem","docLink":"./Std/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forIn'_eq_forIn_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Init/Attach.html#List.pmap\">List.pmap</a> <span class=\"fn\">Subtype.mk</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems\">Std.Range.numElems</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.step</span></span>)</span>\n      <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems\">Std.Range.numElems</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.step</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span></span></span>)</span></span>)</span>\n    <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">{ <span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span> }</span>) =&gt;\n    <span class=\"fn\">match (motive := <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span> }</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>)</span></span></span></span>) <span class=\"fn\">x</span> with\n    | <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">a</span>, <span class=\"fn\">property</span> := <span class=\"fn\">h</span> }</span> =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Range/Lemmas.lean#L35-L42","name":"Std.Range.mem_range'_elems","line":35,"kind":"theorem","docLink":"./Std/Data/Range/Lemmas.html#Std.Range.mem_range'_elems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Range/Lemmas.html#Std.Range.mem_range'_elems\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">mem_range'_elems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems\">Std.Range.numElems</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.step</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Range/Lemmas.lean#L21-L22","name":"Std.Range.numElems_step_1","line":21,"kind":"theorem","docLink":"./Std/Data/Range/Lemmas.html#Std.Range.numElems_step_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems_step_1\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems_step_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems\">Std.Range.numElems</a> <span class=\"fn\">{ <span class=\"fn\">start</span> := <span class=\"fn\">start</span>, <span class=\"fn\">stop</span> := <span class=\"fn\">stop</span>, <span class=\"fn\">step</span> := <span class=\"fn\">1</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">start</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Range/Lemmas.lean#L15-L19","name":"Std.Range.numElems_stop_le_start","line":15,"kind":"theorem","docLink":"./Std/Data/Range/Lemmas.html#Std.Range.numElems_stop_le_start","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems_stop_le_start\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems_stop_le_start</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.stop</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.start</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems\">Std.Range.numElems</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Range/Lemmas.lean#L8-L13","name":"Std.Range.numElems","line":8,"kind":"def","docLink":"./Std/Data/Range/Lemmas.html#Std.Range.numElems","doc":"The number of elements contained in a `Std.Range`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Range/Lemmas.html#Std.Range.numElems\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Init/Data/Range.html#Std.Range\">Std.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"}]}