{"name":"Mathlib.CategoryTheory.Bicategory.LocallyDiscrete","instances":[{"typeNames":["CategoryTheory.LocallyDiscrete"],"name":"CategoryTheory.LocallyDiscrete.instInhabitedLocallyDiscrete","className":"Inhabited"},{"typeNames":["CategoryTheory.LocallyDiscrete"],"name":"CategoryTheory.LocallyDiscrete.instCategoryStructLocallyDiscrete","className":"CategoryTheory.CategoryStruct"},{"typeNames":["Quiver.Hom"],"name":"CategoryTheory.LocallyDiscrete.homSmallCategory","className":"CategoryTheory.Category"},{"typeNames":["Quiver.Hom"],"name":"CategoryTheory.LocallyDiscrete.subsingleton2Hom","className":"Subsingleton"},{"typeNames":["CategoryTheory.LocallyDiscrete"],"name":"CategoryTheory.locallyDiscreteBicategory","className":"CategoryTheory.Bicategory"},{"typeNames":["CategoryTheory.LocallyDiscrete"],"name":"CategoryTheory.locallyDiscreteBicategory.strict","className":"CategoryTheory.Bicategory.Strict"}],"imports":["Init","Mathlib.CategoryTheory.DiscreteCategory","Mathlib.CategoryTheory.Bicategory.Functor","Mathlib.CategoryTheory.Bicategory.Strict"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L124-L130","name":"CategoryTheory.Functor.toOplaxFunctor","line":124,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor","doc":"If `B` is a strict bicategory and `I` is a (1-)category, any functor (of 1-categories) `I ⥤ B` can\nbe promoted to an oplax functor from `LocallyDiscrete I` to `B`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toOplaxFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Strict.html#CategoryTheory.Bicategory.Strict\">CategoryTheory.Bicategory.Strict</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">I</span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.OplaxFunctor\">CategoryTheory.OplaxFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">I</span></span>)</span> <span class=\"fn\">B</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L123-L123","name":"CategoryTheory.Functor.toOplaxFunctor_mapId","line":123,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_mapId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_mapId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toOplaxFunctor_mapId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Strict.html#CategoryTheory.Bicategory.Strict\">CategoryTheory.Bicategory.Strict</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">I</span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.OplaxFunctor.mapId\">CategoryTheory.OplaxFunctor.mapId</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor\">CategoryTheory.Functor.toOplaxFunctor</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">i</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L123-L123","name":"CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_toPrefunctor_map","line":123,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_toPrefunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_toPrefunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toOplaxFunctor_toPrelaxFunctor_toPrefunctor_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Strict.html#CategoryTheory.Bicategory.Strict\">CategoryTheory.Bicategory.Strict</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">I</span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">I</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor\">CategoryTheory.Functor.toOplaxFunctor</a> <span class=\"fn\">F</span></span>)</span>.toPrelaxFunctor</span></span>)</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.as</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L123-L123","name":"CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_map₂","line":123,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_map₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_map₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toOplaxFunctor_toPrelaxFunctor_map₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Strict.html#CategoryTheory.Bicategory.Strict\">CategoryTheory.Bicategory.Strict</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">I</span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">I</span></span>} {<span class=\"fn\">f </span>g : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>} (<span class=\"fn\">η</span> : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.PrelaxFunctor.map₂\">CategoryTheory.PrelaxFunctor.map₂</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor\">CategoryTheory.Functor.toOplaxFunctor</a> <span class=\"fn\">F</span></span>)</span>.toPrelaxFunctor</span> <span class=\"fn\">η</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><span class=\"fn\">F</span>.obj</span>, <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">I</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.as</span></span></span> }</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><span class=\"fn\">F</span>.obj</span>, <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">I</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.as</span></span></span> }</span>.map <span class=\"fn\">g</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L123-L123","name":"CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_toPrefunctor_obj","line":123,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_toPrefunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_toPrelaxFunctor_toPrefunctor_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toOplaxFunctor_toPrelaxFunctor_toPrefunctor_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Strict.html#CategoryTheory.Bicategory.Strict\">CategoryTheory.Bicategory.Strict</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">I</span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor\">CategoryTheory.Functor.toOplaxFunctor</a> <span class=\"fn\">F</span></span>)</span>.toPrelaxFunctor</span></span>)</span>.obj <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L123-L123","name":"CategoryTheory.Functor.toOplaxFunctor_mapComp","line":123,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_mapComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor_mapComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toOplaxFunctor_mapComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Strict.html#CategoryTheory.Bicategory.Strict\">CategoryTheory.Bicategory.Strict</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">I</span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a </span>b c : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">I</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Functor.html#CategoryTheory.OplaxFunctor.mapComp\">CategoryTheory.OplaxFunctor.mapComp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.Functor.toOplaxFunctor\">CategoryTheory.Functor.toOplaxFunctor</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">f</span>.as</span> <span class=\"fn\"><span class=\"fn\">g</span>.as</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.as</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\"><span class=\"fn\">g</span>.as</span></span>)</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L101-L114","name":"CategoryTheory.locallyDiscreteBicategory.strict","line":101,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.locallyDiscreteBicategory.strict","doc":"A locally discrete bicategory is strict. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.locallyDiscreteBicategory.strict\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">locallyDiscreteBicategory</span>.<span class=\"name\">strict</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Strict.html#CategoryTheory.Bicategory.Strict\">CategoryTheory.Bicategory.Strict</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L79-L97","name":"CategoryTheory.locallyDiscreteBicategory","line":79,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.locallyDiscreteBicategory","doc":"The locally discrete bicategory on a category is a bicategory in which the objects and the\n1-morphisms are the same as those in the underlying category, and the 2-morphisms are the\nequalities between 1-morphisms.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.locallyDiscreteBicategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">locallyDiscreteBicategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L67-L68","name":"CategoryTheory.LocallyDiscrete.eq_of_hom","line":67,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.eq_of_hom","doc":"Extract the equation from a 2-morphism in a locally discrete 2-category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.eq_of_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">LocallyDiscrete</span>.<span class=\"name\">eq_of_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryTheory.CategoryStruct.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(η : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L59-L64","name":"CategoryTheory.LocallyDiscrete.subsingleton2Hom","line":59,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.subsingleton2Hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.subsingleton2Hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">LocallyDiscrete</span>.<span class=\"name\">subsingleton2Hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryTheory.CategoryStruct.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L52-L55","name":"CategoryTheory.LocallyDiscrete.homSmallCategory","line":52,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.homSmallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.homSmallCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">LocallyDiscrete</span>.<span class=\"name\">homSmallCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryTheory.CategoryStruct.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L44-L48","name":"CategoryTheory.LocallyDiscrete.instCategoryStructLocallyDiscrete","line":44,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.instCategoryStructLocallyDiscrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.instCategoryStructLocallyDiscrete\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">LocallyDiscrete</span>.<span class=\"name\">instCategoryStructLocallyDiscrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryTheory.CategoryStruct.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryTheory.CategoryStruct.{v, u}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L42-L42","name":"CategoryTheory.LocallyDiscrete.instInhabitedLocallyDiscrete","line":42,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.instInhabitedLocallyDiscrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete.instInhabitedLocallyDiscrete\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">LocallyDiscrete</span>.<span class=\"name\">instInhabitedLocallyDiscrete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\">CategoryTheory.LocallyDiscrete</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.lean#L36-L37","name":"CategoryTheory.LocallyDiscrete","line":36,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete","doc":"A type synonym for promoting any type to a category,\nwith the only morphisms being equalities.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/LocallyDiscrete.html#CategoryTheory.LocallyDiscrete\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">LocallyDiscrete</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}