{"name":"Std.CodeAction.Attr","instances":[{"typeNames":["Std.CodeAction.TacticCodeActionEntry"],"name":"Std.CodeAction.instInhabitedTacticCodeActionEntry","className":"Inhabited"},{"typeNames":["Std.CodeAction.TacticCodeActions"],"name":"Std.CodeAction.instInhabitedTacticCodeActions","className":"Inhabited"},{"typeNames":["Std.CodeAction.CommandCodeActionEntry"],"name":"Std.CodeAction.instInhabitedCommandCodeActionEntry","className":"Inhabited"},{"typeNames":["Std.CodeAction.CommandCodeActions"],"name":"Std.CodeAction.instInhabitedCommandCodeActions","className":"Inhabited"}],"imports":["Init","Lean.Server.CodeActions","Std.Util.TermUnsafe"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L220-L232","name":"Std.CodeAction.command_code_action","line":220,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.command_code_action","doc":"This attribute marks a code action, which is used to suggest new tactics or replace existing ones.\n\n* `@[command_code_action kind]`: This is a code action which applies to applications of the command\n`kind` (a command syntax kind), which can replace the command or insert things before or after it.\n\n* `@[command_code_action kind₁ kind₂]`: shorthand for\n`@[command_code_action kind₁, command_code_action kind₂]`.\n\n* `@[command_code_action]`: This is a command code action that applies to all commands.\nUse sparingly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.command_code_action\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">command_code_action</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L207-L218","name":"Std.CodeAction.cmdCodeActionExt","line":207,"kind":"opaque","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.cmdCodeActionExt","doc":"An extension which collects all the command code actions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.cmdCodeActionExt\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">cmdCodeActionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\">Std.CodeAction.CommandCodeActionEntry</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\">Std.CodeAction.CommandCodeActionEntry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\">Std.CodeAction.CommandCodeActionEntry</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\">Std.CodeAction.CommandCodeActions</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L199-L205","name":"Std.CodeAction.CommandCodeActions.insert","line":199,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.insert","doc":"Insert a command code action entry into the `CommandCodeActions` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.insert\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActions</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\">Std.CodeAction.CommandCodeActions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacticKinds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\">Std.CodeAction.CommandCodeActions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L196-L196","name":"Std.CodeAction.instInhabitedCommandCodeActions","line":196,"kind":"instance","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedCommandCodeActions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedCommandCodeActions\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">instInhabitedCommandCodeActions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\">Std.CodeAction.CommandCodeActions</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L195-L195","name":"Std.CodeAction.CommandCodeActions.onCmd","line":195,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.onCmd","doc":"The list of command code actions to apply when a particular command kind is highlighted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.onCmd\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActions</span>.<span class=\"name\">onCmd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\">Std.CodeAction.CommandCodeActions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L193-L193","name":"Std.CodeAction.CommandCodeActions.onAnyCmd","line":193,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.onAnyCmd","doc":"The list of command code actions to apply on any command. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.onAnyCmd\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActions</span>.<span class=\"name\">onAnyCmd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\">Std.CodeAction.CommandCodeActions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L191-L191","name":"Std.CodeAction.CommandCodeActions.mk","line":191,"kind":"ctor","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions.mk\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActions</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(onAnyCmd : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(onCmd : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\">Std.CodeAction.CommandCodeActions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L191-L196","name":"Std.CodeAction.CommandCodeActions","line":191,"kind":"structure","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions","doc":"The state of the command code actions extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActions\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L188-L188","name":"Std.CodeAction.instInhabitedCommandCodeActionEntry","line":188,"kind":"instance","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedCommandCodeActionEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedCommandCodeActionEntry\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">instInhabitedCommandCodeActionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\">Std.CodeAction.CommandCodeActionEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L187-L187","name":"Std.CodeAction.CommandCodeActionEntry.cmdKinds","line":187,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry.cmdKinds","doc":"The command kinds that this extension supports.\nIf empty it is called on all command kinds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry.cmdKinds\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActionEntry</span>.<span class=\"name\">cmdKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\">Std.CodeAction.CommandCodeActionEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L184-L184","name":"Std.CodeAction.CommandCodeActionEntry.declName","line":184,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry.declName","doc":"The declaration to tag "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry.declName\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActionEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\">Std.CodeAction.CommandCodeActionEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L182-L182","name":"Std.CodeAction.CommandCodeActionEntry.mk","line":182,"kind":"ctor","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry.mk\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActionEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmdKinds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\">Std.CodeAction.CommandCodeActionEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L182-L188","name":"Std.CodeAction.CommandCodeActionEntry","line":182,"kind":"structure","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry","doc":"An entry in the command code actions extension, containing the attribute arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeActionEntry\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeActionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L177-L179","name":"Std.CodeAction.mkCommandCodeAction","line":177,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.mkCommandCodeAction","doc":"Read a command code action from a declaration of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.mkCommandCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">mkCommandCodeAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L172-L174","name":"Std.CodeAction.CommandCodeAction","line":172,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction","doc":"A command code action extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">CommandCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L131-L146","name":"Std.CodeAction.tactic_code_action","line":131,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.tactic_code_action","doc":"This attribute marks a code action, which is used to suggest new tactics or replace existing ones.\n\n* `@[tactic_code_action]`: This is a code action which applies to the spaces between tactics,\nto suggest a new tactic to change the goal state.\n\n* `@[tactic_code_action kind]`: This is a code action which applies to applications of the tactic\n`kind` (a tactic syntax kind), which can replace the tactic or insert things before or after it.\n\n* `@[tactic_code_action kind₁ kind₂]`: shorthand for\n`@[tactic_code_action kind₁, tactic_code_action kind₂]`.\n\n* `@[tactic_code_action *]`: This is a tactic code action that applies to all tactics.\nUse sparingly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.tactic_code_action\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">tactic_code_action</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L118-L129","name":"Std.CodeAction.tacticCodeActionExt","line":118,"kind":"opaque","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.tacticCodeActionExt","doc":"An extension which collects all the tactic code actions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.tacticCodeActionExt\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">tacticCodeActionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L106-L116","name":"Std.CodeAction.tacticSeqCodeActionExt","line":106,"kind":"opaque","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.tacticSeqCodeActionExt","doc":"An extension which collects all the tactic code actions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.tacticSeqCodeActionExt\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">tacticSeqCodeActionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\">Std.CodeAction.TacticSeqCodeAction</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\">Std.CodeAction.TacticSeqCodeAction</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L98-L104","name":"Std.CodeAction.TacticCodeActions.insert","line":98,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.insert","doc":"Insert a tactic code action entry into the `TacticCodeActions` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.insert\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacticKinds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(action : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L95-L95","name":"Std.CodeAction.instInhabitedTacticCodeActions","line":95,"kind":"instance","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActions\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">instInhabitedTacticCodeActions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L94-L94","name":"Std.CodeAction.TacticCodeActions.onTactic","line":94,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onTactic","doc":"The list of tactic code actions to apply when a particular tactic kind is highlighted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onTactic\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">onTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L92-L92","name":"Std.CodeAction.TacticCodeActions.onAnyTactic","line":92,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onAnyTactic","doc":"The list of tactic code actions to apply on any tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.onAnyTactic\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">onAnyTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L90-L90","name":"Std.CodeAction.TacticCodeActions.mk","line":90,"kind":"ctor","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions.mk\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(onAnyTactic : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(onTactic : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\">Std.CodeAction.TacticCodeActions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L90-L95","name":"Std.CodeAction.TacticCodeActions","line":90,"kind":"structure","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions","doc":"The state of the tactic code actions extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActions\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L87-L87","name":"Std.CodeAction.instInhabitedTacticCodeActionEntry","line":87,"kind":"instance","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActionEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.instInhabitedTacticCodeActionEntry\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">instInhabitedTacticCodeActionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L86-L86","name":"Std.CodeAction.TacticCodeActionEntry.tacticKinds","line":86,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.tacticKinds","doc":"The tactic kinds that this extension supports. If empty it is called on all tactic kinds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.tacticKinds\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span>.<span class=\"name\">tacticKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L84-L84","name":"Std.CodeAction.TacticCodeActionEntry.declName","line":84,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.declName","doc":"The declaration to tag "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.declName\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L82-L82","name":"Std.CodeAction.TacticCodeActionEntry.mk","line":82,"kind":"ctor","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry.mk\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tacticKinds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\">Std.CodeAction.TacticCodeActionEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L82-L87","name":"Std.CodeAction.TacticCodeActionEntry","line":82,"kind":"structure","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry","doc":"An entry in the tactic code actions extension, containing the attribute arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeActionEntry\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeActionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L77-L79","name":"Std.CodeAction.mkTacticSeqCodeAction","line":77,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticSeqCodeAction","doc":"Read a tacticSeq code action from a declaration of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticSeqCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">mkTacticSeqCodeAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\">Std.CodeAction.TacticSeqCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L72-L74","name":"Std.CodeAction.mkTacticCodeAction","line":72,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticCodeAction","doc":"Read a tactic code action from a declaration of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.mkTacticCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">mkTacticCodeAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\">Std.CodeAction.TacticCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L66-L69","name":"Std.CodeAction.TacticSeqCodeAction","line":66,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction","doc":"A tactic code action extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticSeqCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticSeqCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L60-L63","name":"Std.CodeAction.TacticCodeAction","line":60,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction","doc":"A tactic code action extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.TacticCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">TacticCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L35-L44","name":"Std.CodeAction.holeCodeActionExt","line":35,"kind":"opaque","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.holeCodeActionExt","doc":"An extension which collects all the hole code actions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.holeCodeActionExt\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">holeCodeActionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.HoleCodeAction\">Std.CodeAction.HoleCodeAction</a></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.HoleCodeAction\">Std.CodeAction.HoleCodeAction</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L31-L33","name":"Std.CodeAction.mkHoleCodeAction","line":31,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.mkHoleCodeAction","doc":"Read a hole code action from a declaration of the right type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.mkHoleCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">mkHoleCodeAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">Lean.ImportM</a> <a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.HoleCodeAction\">Std.CodeAction.HoleCodeAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/CodeAction/Attr.lean#L26-L28","name":"Std.CodeAction.HoleCodeAction","line":26,"kind":"def","docLink":"./Std/CodeAction/Attr.html#Std.CodeAction.HoleCodeAction","doc":"A hole code action extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/CodeAction/Attr.html#Std.CodeAction.HoleCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">HoleCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}