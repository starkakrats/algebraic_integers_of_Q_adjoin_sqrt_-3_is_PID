{"name":"Mathlib.CategoryTheory.Groupoid.FreeGroupoid","instances":[{"typeNames":["CategoryTheory.FreeGroupoid"],"name":"CategoryTheory.Groupoid.Free.instNonemptyFreeGroupoid","className":"Nonempty"},{"typeNames":["CategoryTheory.FreeGroupoid"],"name":"CategoryTheory.Groupoid.Free.instCategoryFreeGroupoid","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.FreeGroupoid"],"name":"CategoryTheory.FreeGroupoid.instGroupoid","className":"CategoryTheory.Groupoid"}],"imports":["Init","Mathlib.CategoryTheory.Category.Basic","Mathlib.CategoryTheory.Functor.Basic","Mathlib.CategoryTheory.Groupoid","Mathlib.Tactic.NthRewrite","Mathlib.CategoryTheory.PathCategory","Mathlib.CategoryTheory.Quotient","Mathlib.Combinatorics.Quiver.Symmetric"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L206-L209","name":"CategoryTheory.Groupoid.Free.freeGroupoidFunctor_comp","line":206,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.freeGroupoidFunctor_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.freeGroupoidFunctor_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">freeGroupoidFunctor_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V' : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V'' : <a href=\"./foundational_types.html\">Type</a> u''}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V''</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(œÜ : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(œÜ' : <span class=\"fn\"><span class=\"fn\">V'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V''</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.freeGroupoidFunctor\">CategoryTheory.freeGroupoidFunctor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">œÜ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\">œÜ'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.freeGroupoidFunctor\">CategoryTheory.freeGroupoidFunctor</a> <span class=\"fn\">œÜ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.freeGroupoidFunctor\">CategoryTheory.freeGroupoidFunctor</a> <span class=\"fn\">œÜ'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L200-L203","name":"CategoryTheory.Groupoid.Free.freeGroupoidFunctor_id","line":200,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.freeGroupoidFunctor_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.freeGroupoidFunctor_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">freeGroupoidFunctor_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.freeGroupoidFunctor\">CategoryTheory.freeGroupoidFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id\">ùü≠q</a> <span class=\"fn\">V</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L196-L197","name":"CategoryTheory.freeGroupoidFunctor","line":196,"kind":"def","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.freeGroupoidFunctor","doc":"The functor of free groupoid induced by a prefunctor of quivers "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.freeGroupoidFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">freeGroupoidFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V' : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(œÜ : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L174-L186","name":"CategoryTheory.Groupoid.Free.lift_unique","line":174,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift_unique\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">lift_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V' : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(œÜ : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ¶ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>)</span> <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hŒ¶ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.of\">CategoryTheory.Groupoid.Free.of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\"><span class=\"fn\">Œ¶</span>.toPrefunctor</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Œ¶</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift\">CategoryTheory.Groupoid.Free.lift</a> <span class=\"fn\">œÜ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L168-L171","name":"CategoryTheory.Groupoid.Free.lift_spec","line":168,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift_spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift_spec\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">lift_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V' : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(œÜ : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.of\">CategoryTheory.Groupoid.Free.of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift\">CategoryTheory.Groupoid.Free.lift</a> <span class=\"fn\">œÜ</span></span>)</span>.toPrefunctor</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L158-L165","name":"CategoryTheory.Groupoid.Free.lift","line":158,"kind":"def","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift","doc":"The lift of a prefunctor to a groupoid, to a functor from `FreeGroupoid V` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.lift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V' : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">V'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(œÜ : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>)</span> <span class=\"fn\">V'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L148-L150","name":"CategoryTheory.Groupoid.Free.of_eq","line":148,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.of_eq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.of\">CategoryTheory.Groupoid.Free.of</a> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.Symmetrify.of</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\">CategoryTheory.Paths.of</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">‚ãôq</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.functor\">CategoryTheory.Quotient.functor</a> <span class=\"fn\">CategoryTheory.Groupoid.Free.redStep</span></span>)</span>.toPrefunctor</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L143-L145","name":"CategoryTheory.Groupoid.Free.of","line":143,"kind":"def","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.of","doc":"The inclusion of the quiver on `V` to the underlying quiver on `FreeGroupoid V`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.of\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(V : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">‚•§q</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L136-L139","name":"CategoryTheory.FreeGroupoid.instGroupoid","line":136,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid.instGroupoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid.instGroupoid\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeGroupoid</span>.<span class=\"name\">instGroupoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L131-L133","name":"CategoryTheory.Groupoid.Free.quotInv","line":131,"kind":"def","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.quotInv","doc":"The inverse of an arrow in the free groupoid "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.quotInv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">quotInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L127-L128","name":"CategoryTheory.Groupoid.Free.instCategoryFreeGroupoid","line":127,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.instCategoryFreeGroupoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.instCategoryFreeGroupoid\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">instCategoryFreeGroupoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{max u v, u}</a>         <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L120-L124","name":"CategoryTheory.Groupoid.Free.congr_reverse_comp","line":120,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.congr_reverse_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.congr_reverse_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">congr_reverse_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.CompClosure\">CategoryTheory.Quotient.CompClosure</a> <span class=\"fn\">CategoryTheory.Groupoid.Free.redStep</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">Quiver.Path.reverse</a> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.CompClosure\">CategoryTheory.Quotient.CompClosure</a> <span class=\"fn\">CategoryTheory.Groupoid.Free.redStep</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">Y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L93-L117","name":"CategoryTheory.Groupoid.Free.congr_comp_reverse","line":93,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.congr_comp_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.congr_comp_reverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">congr_comp_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.CompClosure\">CategoryTheory.Quotient.CompClosure</a> <span class=\"fn\">CategoryTheory.Groupoid.Free.redStep</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">Quiver.Path.reverse</a> <span class=\"fn\">p</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.CompClosure\">CategoryTheory.Quotient.CompClosure</a> <span class=\"fn\">CategoryTheory.Groupoid.Free.redStep</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L81-L90","name":"CategoryTheory.Groupoid.Free.congr_reverse","line":81,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.congr_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.congr_reverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">congr_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.CompClosure\">CategoryTheory.Quotient.CompClosure</a> <span class=\"fn\">CategoryTheory.Groupoid.Free.redStep</span> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> ‚Üí\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#CategoryTheory.Quotient.CompClosure\">CategoryTheory.Quotient.CompClosure</a> <span class=\"fn\">CategoryTheory.Groupoid.Free.redStep</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">Quiver.Path.reverse</a> <span class=\"fn\">p</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Path.reverse\">Quiver.Path.reverse</a> <span class=\"fn\">q</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L78-L79","name":"CategoryTheory.Groupoid.Free.instNonemptyFreeGroupoid","line":78,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.instNonemptyFreeGroupoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.instNonemptyFreeGroupoid\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">instNonemptyFreeGroupoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\">CategoryTheory.FreeGroupoid</a> <span class=\"fn\">V</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L74-L75","name":"CategoryTheory.FreeGroupoid","line":74,"kind":"def","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid","doc":"The underlying vertices of the free groupoid "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.FreeGroupoid\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">FreeGroupoid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(V : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[Q : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L69-L70","name":"CategoryTheory.Groupoid.Free.redStep.step","line":69,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.redStep.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.redStep.step\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">redStep</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Z : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.redStep\">CategoryTheory.Groupoid.Free.redStep</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.Paths.of</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">Quiver.Hom.toPath</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Hom.toPath\">Quiver.Hom.toPath</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.reverse\">Quiver.reverse</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L68-L70","name":"CategoryTheory.Groupoid.Free.redStep","line":68,"kind":"inductive","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.redStep","doc":"The \"reduction\" relation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#CategoryTheory.Groupoid.Free.redStep\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Groupoid</span>.<span class=\"name\">Free</span>.<span class=\"name\">redStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Quotient.html#HomRel\">HomRel</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory.html#CategoryTheory.Paths\">CategoryTheory.Paths</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">V</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L62-L64","name":"Quiver.Hom.toNegPath","line":62,"kind":"def","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#Quiver.Hom.toNegPath","doc":"Shorthand for the \"forward\" arrow corresponding to `f` in `paths <| symmetrify V` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#Quiver.Hom.toNegPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">toNegPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Groupoid/FreeGroupoid.lean#L56-L58","name":"Quiver.Hom.toPosPath","line":56,"kind":"def","docLink":"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#Quiver.Hom.toPosPath","doc":"Shorthand for the \"forward\" arrow corresponding to `f` in `paths <| symmetrify V` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Groupoid/FreeGroupoid.html#Quiver.Hom.toPosPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">toPosPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span></div></div>"}]}