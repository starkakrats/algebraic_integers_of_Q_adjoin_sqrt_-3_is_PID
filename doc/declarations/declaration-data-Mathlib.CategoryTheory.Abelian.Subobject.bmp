{"name":"Mathlib.CategoryTheory.Abelian.Subobject","instances":[{"typeNames":["Opposite"],"name":"CategoryTheory.Abelian.wellPowered_opposite","className":"CategoryTheory.WellPowered"}],"imports":["Init","Mathlib.CategoryTheory.Subobject.Limits","Mathlib.CategoryTheory.Abelian.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Abelian/Subobject.lean#L63-L65","name":"CategoryTheory.Abelian.wellPowered_opposite","line":63,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.wellPowered_opposite","doc":"A well-powered abelian category is also well-copowered. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.wellPowered_opposite\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">wellPowered_opposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/WellPowered.html#CategoryTheory.WellPowered\">CategoryTheory.WellPowered</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/WellPowered.html#CategoryTheory.WellPowered\">CategoryTheory.WellPowered</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Abelian/Subobject.lean#L32-L59","name":"CategoryTheory.Abelian.subobjectIsoSubobjectOp","line":32,"kind":"def","docLink":"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp","doc":"In an abelian category, the subobjects and quotient objects of an object `X` are\norder-isomorphic via taking kernels and cokernels.\nImplemented here using subobjects in the opposite category,\nsince mathlib does not have a notion of quotient objects at the time of writing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">subobjectIsoSubobjectOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">CategoryTheory.Subobject</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">CategoryTheory.Subobject</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X</span></span>)</span></span>)</span><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Abelian/Subobject.lean#L31-L31","name":"CategoryTheory.Abelian.subobjectIsoSubobjectOp_symm_apply","line":31,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">subobjectIsoSubobjectOp_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">CategoryTheory.Subobject</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X</span></span>)</span></span>)</span><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp\">CategoryTheory.Abelian.subobjectIsoSubobjectOp</a> <span class=\"fn\">X</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.lift\">CategoryTheory.Subobject.lift</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.mk\">CategoryTheory.Subobject.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.kernel.ι\">CategoryTheory.Limits.kernel.ι</a> <span class=\"fn\"><span class=\"fn\">f</span>.unop</span></span>)</span></span></span>)</span>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\">∀ ⦃<span class=\"fn\">A </span>B : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X</span></span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X</span></span></span>) [<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]\n        [<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">g</span></span>] (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span></span>),\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">i</span>.hom</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span> →\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.mk\">CategoryTheory.Subobject.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.kernel.ι\">CategoryTheory.Limits.kernel.ι</a> <span class=\"fn\"><span class=\"fn\">f</span>.unop</span></span>)</span></span></span>)</span>\n              <span class=\"fn\">A</span> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">A</span> : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.mk\">CategoryTheory.Subobject.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.kernel.ι\">CategoryTheory.Limits.kernel.ι</a> <span class=\"fn\"><span class=\"fn\">f</span>.unop</span></span>)</span></span></span>)</span>\n              <span class=\"fn\">B</span> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span></span></span></span>)</span>\n    <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Abelian/Subobject.lean#L31-L31","name":"CategoryTheory.Abelian.subobjectIsoSubobjectOp_apply","line":31,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Abelian</span>.<span class=\"name\">subobjectIsoSubobjectOp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject\">CategoryTheory.Subobject</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Subobject.html#CategoryTheory.Abelian.subobjectIsoSubobjectOp\">CategoryTheory.Abelian.subobjectIsoSubobjectOp</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.lift\">CategoryTheory.Subobject.lift</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">A</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.mk\">CategoryTheory.Subobject.mk</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span>)</span>.op</span></span></span>)</span>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\">∀ ⦃<span class=\"fn\">A </span>B : <span class=\"fn\">C</span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>) [<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>] [<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">g</span></span>] (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span></span>),\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">i</span>.hom</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span> →\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">A</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.mk\">CategoryTheory.Subobject.mk</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span>)</span>.op</span></span></span>)</span>\n              <span class=\"fn\">A</span> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">A</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/Basic.html#CategoryTheory.Subobject.mk\">CategoryTheory.Subobject.mk</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span>)</span>.op</span></span></span>)</span>\n              <span class=\"fn\">B</span> <span class=\"fn\">g</span> <span class=\"fn\">hg</span></span></span></span></span>)</span>\n    <span class=\"fn\">a</span></span></span></div></div>"}]}