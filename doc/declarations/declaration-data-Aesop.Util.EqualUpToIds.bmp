{"name":"Aesop.Util.EqualUpToIds","instances":[{"typeNames":["Aesop.EqualUpToIds.EqualUpToIdsM"],"name":"Aesop.EqualUpToIds.instMonadEqualUpToIdsM","className":"Monad"}],"imports":["Init","Lean.Elab.Tactic.Basic","Std.Lean.Meta.SavedState"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L295-L307","name":"Aesop.runTacticMCapturingPostState","line":295,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.runTacticMCapturingPostState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.runTacticMCapturingPostState\"><span class=\"name\">Aesop</span>.<span class=\"name\">runTacticMCapturingPostState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(preState : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Lean.Meta.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(preGoals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Lean.Meta.SavedState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L289-L292","name":"Aesop.tacticStatesEqualUpToIds","line":289,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">tacticStatesEqualUpToIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L284-L287","name":"Aesop.unassignedMVarsEqualUptoIds","line":284,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">unassignedMVarsEqualUptoIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L273-L280","name":"Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","line":273,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">tacticStatesEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goals₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L270-L271","name":"Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","line":270,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L231-L264","name":"Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","line":231,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId₁ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mvarId₂ : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L216-L229","name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","line":216,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\">decls₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\">decls₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(gctx : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L206-L229","name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","line":206,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mdecl₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mdecl₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L191-L204","name":"Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","line":191,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localDeclsEqualUpToIdsCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L181-L189","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.compareMVarValues","line":181,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.compareMVarValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.compareMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore'</span>.<span class=\"name\">compareMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v₁ : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v₂ : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L174-L179","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.normalizeMVar","line":174,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.normalizeMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'.normalizeMVar\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore'</span>.<span class=\"name\">normalizeMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L128-L189","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'","line":128,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L122-L126","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.printExpr","line":122,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.printExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.printExpr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore</span>.<span class=\"name\">printExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mdecl : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L119-L120","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.instMVars","line":119,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.instMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore.instMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore</span>.<span class=\"name\">instMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L110-L126","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore","line":110,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L97-L97","name":"Aesop.EqualUpToIds.levelsEqualUpToIdsCore","line":97,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L73-L91","name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","line":73,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L67-L71","name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","line":67,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L62-L62","name":"Aesop.EqualUpToIds.MVarValue.delayedAssignment","line":62,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">delayedAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(da : <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">Lean.DelayedMetavarAssignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L61-L61","name":"Aesop.EqualUpToIds.MVarValue.expr","line":61,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L60-L60","name":"Aesop.EqualUpToIds.MVarValue.mvarId","line":60,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">Aesop.EqualUpToIds.MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L59-L62","name":"Aesop.EqualUpToIds.MVarValue","line":59,"kind":"inductive","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L57-L57","name":"Aesop.EqualUpToIds.GoalContext.equalFVarIds","line":57,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">equalFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L56-L56","name":"Aesop.EqualUpToIds.GoalContext.mdecl₂","line":56,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mdecl₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mdecl₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">mdecl₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L55-L55","name":"Aesop.EqualUpToIds.GoalContext.mdecl₁","line":55,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mdecl₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mdecl₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">mdecl₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L54-L54","name":"Aesop.EqualUpToIds.GoalContext.mk","line":54,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mdecl₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mdecl₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(equalFVarIds : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">Aesop.EqualUpToIds.GoalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L54-L57","name":"Aesop.EqualUpToIds.GoalContext","line":54,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L49-L52","name":"Aesop.EqualUpToIds.EqualUpToIdsM.run","line":49,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.run\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L46-L47","name":"Aesop.EqualUpToIds.instMonadEqualUpToIdsM","line":46,"kind":"instance","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.instMonadEqualUpToIdsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.instMonadEqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">instMonadEqualUpToIdsM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L40-L41","name":"Aesop.EqualUpToIds.readMCtx₂","line":40,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L37-L38","name":"Aesop.EqualUpToIds.readMCtx₁","line":37,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L34-L35","name":"Aesop.EqualUpToIds.readCommonMCtx","line":34,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readCommonMCtx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\">Aesop.EqualUpToIds.EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L31-L32","name":"Aesop.EqualUpToIds.EqualUpToIdsM","line":31,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L26-L26","name":"Aesop.EqualUpToIds.EqualUpToIdsM.State.equalLMVarIds","line":26,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State.equalLMVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State.equalLMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalLMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State\">Aesop.EqualUpToIds.EqualUpToIdsM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L25-L25","name":"Aesop.EqualUpToIds.EqualUpToIdsM.State.equalMVarIds","line":25,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State.equalMVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State.equalMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State\">Aesop.EqualUpToIds.EqualUpToIdsM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L24-L24","name":"Aesop.EqualUpToIds.EqualUpToIdsM.State.mk","line":24,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(equalMVarIds : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(equalLMVarIds : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State\">Aesop.EqualUpToIds.EqualUpToIdsM.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L24-L26","name":"Aesop.EqualUpToIds.EqualUpToIdsM.State","line":24,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.State\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L22-L22","name":"Aesop.EqualUpToIds.EqualUpToIdsM.Context.mctx₂","line":22,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.mctx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.mctx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context\">Aesop.EqualUpToIds.EqualUpToIdsM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L21-L21","name":"Aesop.EqualUpToIds.EqualUpToIdsM.Context.mctx₁","line":21,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.mctx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.mctx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context\">Aesop.EqualUpToIds.EqualUpToIdsM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L20-L20","name":"Aesop.EqualUpToIds.EqualUpToIdsM.Context.commonMCtx","line":20,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.commonMCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.commonMCtx\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">commonMCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context\">Aesop.EqualUpToIds.EqualUpToIdsM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L19-L19","name":"Aesop.EqualUpToIds.EqualUpToIdsM.Context.mk","line":19,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(commonMCtx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₁ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx₂ : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context\">Aesop.EqualUpToIds.EqualUpToIdsM.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Util/EqualUpToIds.lean#L19-L22","name":"Aesop.EqualUpToIds.EqualUpToIdsM.Context","line":19,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.EqualUpToIdsM.Context\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}