{"name":"Mathlib.Topology.Homotopy.HomotopyGroup","instances":[{"typeNames":["Path"],"name":"LoopSpace.inhabited","className":"Inhabited"},{"typeNames":["Set.Elem"],"name":"GenLoop.instFunLike","className":"DFunLike"},{"typeNames":["Set.Elem"],"name":"GenLoop.inhabited","className":"Inhabited"},{"typeNames":["Set.Elem"],"name":"GenLoop.Homotopic.setoid","className":"Setoid"},{"typeNames":["HomotopyGroup"],"name":"instInhabitedHomotopyGroup","className":"Inhabited"},{"typeNames":["HomotopyGroup"],"name":"HomotopyGroup.group","className":"Group"},{"typeNames":["HomotopyGroup"],"name":"HomotopyGroup.commGroup","className":"CommGroup"}],"imports":["Init","Mathlib.AlgebraicTopology.FundamentalGroupoid.FundamentalGroup","Mathlib.GroupTheory.EckmannHilton","Mathlib.Logic.Equiv.TransferInstance","Mathlib.Algebra.Group.Ext"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L567-L574","name":"HomotopyGroup.commGroup","line":567,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.commGroup","doc":"Multiplication on `HomotopyGroup N X x` is commutative for nontrivial `N`.\nIn particular, multiplication on `π_(n+2)` is commutative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.commGroup\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">commGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommGroup\">CommGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L561-L562","name":"HomotopyGroup.inv_spec","line":561,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.inv_spec","doc":"Characterization of multiplicative inverse "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.inv_spec\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">inv_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">⟦<span class=\"fn\">p</span>⟧</span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.symmAt\">GenLoop.symmAt</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L554-L557","name":"HomotopyGroup.mul_spec","line":554,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.mul_spec","doc":"Characterization of multiplication "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.mul_spec\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">mul_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> x_2 : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_2</span></span></span>)</span> <span class=\"fn\">⟦<span class=\"fn\">p</span>⟧</span> <span class=\"fn\">⟦<span class=\"fn\">q</span>⟧</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">i</span> <span class=\"fn\">q</span> <span class=\"fn\">p</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L549-L550","name":"HomotopyGroup.one_def","line":549,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.one_def","doc":"Characterization of multiplicative identity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.one_def\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">one_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\">GenLoop.const</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L541-L545","name":"HomotopyGroup.symmAt_indep","line":541,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.symmAt_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.symmAt_indep\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">symmAt_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.symmAt\">GenLoop.symmAt</a> <span class=\"fn\">i</span> <span class=\"fn\">f</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.symmAt\">GenLoop.symmAt</a> <span class=\"fn\">j</span> <span class=\"fn\">f</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L534-L538","name":"HomotopyGroup.transAt_indep","line":534,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.transAt_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.transAt_indep\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">transAt_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">i</span> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">j</span> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L524-L531","name":"HomotopyGroup.auxGroup_indep","line":524,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.auxGroup_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.auxGroup_indep\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">auxGroup_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.auxGroup\">HomotopyGroup.auxGroup</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.auxGroup\">HomotopyGroup.auxGroup</a> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L519-L521","name":"HomotopyGroup.isUnital_auxGroup","line":519,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.isUnital_auxGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.isUnital_auxGroup\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">isUnital_auxGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/EckmannHilton.html#EckmannHilton.IsUnital\">EckmannHilton.IsUnital</a> <span class=\"fn\">Mul.mul</span> <span class=\"fn\">⟦<span class=\"fn\">GenLoop.const</span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L515-L516","name":"HomotopyGroup.auxGroup","line":515,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.auxGroup","doc":"Group structure on `HomotopyGroup` obtained by pulling back path composition along the\n`i`th direction. The group structures for two different `i j : N` distribute over each\nother, and therefore are equal by the Eckmann-Hilton argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.auxGroup\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">auxGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L507-L508","name":"HomotopyGroup.group","line":507,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.group","doc":"Group structure on `HomotopyGroup N X x` for nonempty `N` (in particular `π_(n+1) X x`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.group\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">group</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L500-L501","name":"HomotopyGroup.pi1EquivFundamentalGroup","line":500,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.pi1EquivFundamentalGroup","doc":"The first homotopy group at `x` is in bijection with the fundamental group. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.pi1EquivFundamentalGroup\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">pi1EquivFundamentalGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.Pi\">HomotopyGroup.Pi</a> <span class=\"fn\">1</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/FundamentalGroupoid/FundamentalGroup.html#FundamentalGroup\">FundamentalGroup</a> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L479-L496","name":"homotopyGroupEquivFundamentalGroupOfUnique","line":479,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#homotopyGroupEquivFundamentalGroupOfUnique","doc":"The homotopy group at `x` indexed by a singleton is in bijection with the fundamental group,\ni.e. the loops based at `x` up to homotopy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#homotopyGroupEquivFundamentalGroupOfUnique\"><span class=\"name\">homotopyGroupEquivFundamentalGroupOfUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/FundamentalGroupoid/FundamentalGroup.html#FundamentalGroup\">FundamentalGroup</a> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L458-L469","name":"genLoopEquivOfUnique","line":458,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#genLoopEquivOfUnique","doc":"The 1-dimensional generalized loops based at `x` are in bijection with loops at `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#genLoopEquivOfUnique\"><span class=\"name\">genLoopEquivOfUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L453-L454","name":"HomotopyGroup.pi0EquivZerothHomotopy","line":453,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.pi0EquivZerothHomotopy","doc":"The 0th homotopy \"group\" is in bijection with `ZerothHomotopy`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.pi0EquivZerothHomotopy\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">pi0EquivZerothHomotopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.Pi\">HomotopyGroup.Pi</a> <span class=\"fn\">0</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/PathConnected.html#ZerothHomotopy\">ZerothHomotopy</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L435-L449","name":"homotopyGroupEquivZerothHomotopyOfIsEmpty","line":435,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#homotopyGroupEquivZerothHomotopyOfIsEmpty","doc":"The homotopy \"group\" indexed by an empty type is in bijection with\nthe path components of `X`, aka the `ZerothHomotopy`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#homotopyGroupEquivZerothHomotopyOfIsEmpty\"><span class=\"name\">homotopyGroupEquivZerothHomotopyOfIsEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/PathConnected.html#ZerothHomotopy\">ZerothHomotopy</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L424-L430","name":"genLoopHomeoOfIsEmpty","line":424,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#genLoopHomeoOfIsEmpty","doc":"The 0-dimensional generalized loops based at `x` are in bijection with `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#genLoopHomeoOfIsEmpty\"><span class=\"name\">genLoopHomeoOfIsEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L421-L421","name":"Topology.termπ_","line":421,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.termπ_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.termπ_\"><span class=\"name\">Topology</span>.<span class=\"name\">termπ_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L416-L417","name":"HomotopyGroup.Pi","line":416,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.Pi","doc":"Homotopy group of finite index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup.Pi\"><span class=\"name\">HomotopyGroup</span>.<span class=\"name\">Pi</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_3</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L407-L411","name":"homotopyGroupEquivFundamentalGroup","line":407,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#homotopyGroupEquivFundamentalGroup","doc":"Equivalence between the homotopy group of X and the fundamental group of\n`Ω^{j // j ≠ i} x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#homotopyGroupEquivFundamentalGroup\"><span class=\"name\">homotopyGroupEquivFundamentalGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/FundamentalGroupoid/FundamentalGroup.html#FundamentalGroup\">FundamentalGroup</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L398-L399","name":"instInhabitedHomotopyGroup","line":398,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#instInhabitedHomotopyGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#instInhabitedHomotopyGroup\"><span class=\"name\">instInhabitedHomotopyGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\">HomotopyGroup</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L393-L394","name":"HomotopyGroup","line":393,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup","doc":"The `n`th homotopy group at `x` defined as the quotient of `Ω^n x` by the\n`GenLoop.Homotopic` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#HomotopyGroup\"><span class=\"name\">HomotopyGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_3 u_4)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L383-L384","name":"GenLoop.fromLoop_symm_toLoop","line":383,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_symm_toLoop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_symm_toLoop\"><span class=\"name\">GenLoop</span>.<span class=\"name\">fromLoop_symm_toLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\">GenLoop.fromLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/PathConnected.html#Path.symm\">Path.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.symmAt\">GenLoop.symmAt</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L378-L380","name":"GenLoop.fromLoop_trans_toLoop","line":378,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_trans_toLoop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_trans_toLoop\"><span class=\"name\">GenLoop</span>.<span class=\"name\">fromLoop_trans_toLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\">GenLoop.fromLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/PathConnected.html#Path.trans\">Path.trans</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">q</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L370-L375","name":"GenLoop.transAt_distrib","line":370,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt_distrib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt_distrib\"><span class=\"name\">GenLoop</span>.<span class=\"name\">transAt_distrib</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">j</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">j</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">j</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">i</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\">GenLoop.transAt</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L365-L367","name":"GenLoop.symmAt","line":365,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.symmAt","doc":"Reversal of a `GenLoop` along the `i`th coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.symmAt\"><span class=\"name\">GenLoop</span>.<span class=\"name\">symmAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L350-L361","name":"GenLoop.transAt","line":350,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt","doc":"Concatenation of two `GenLoop`s along the `i`th coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.transAt\"><span class=\"name\">GenLoop</span>.<span class=\"name\">transAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L326-L346","name":"GenLoop.homotopicFrom","line":326,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopicFrom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopicFrom\"><span class=\"name\">GenLoop</span>.<span class=\"name\">homotopicFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic\">Path.Homotopic</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">q</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L317-L321","name":"GenLoop.homotopyFrom","line":317,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyFrom","doc":"The converse to `GenLoop.homotopyTo`: a homotopy between two loops in the space of\n`n`-dimensional loops can be seen as a homotopy between two `n+1`-dimensional paths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyFrom\"><span class=\"name\">GenLoop</span>.<span class=\"name\">homotopyFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy\">Path.Homotopy</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">q</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L317-L317","name":"GenLoop.homotopyFrom_apply","line":317,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyFrom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyFrom_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">homotopyFrom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopy\">Path.Homotopy</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">q</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyFrom\">GenLoop.homotopyFrom</a> <span class=\"fn\">i</span> <span class=\"fn\">H</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.1</span>, <span class=\"fn\"><span class=\"fn\">a</span>.2 <span class=\"fn\">i</span></span>)</span></span>)</span></span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></span> }</span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span>.2 <span class=\"fn\">↑<span class=\"fn\">j</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L299-L312","name":"GenLoop.homotopicTo","line":299,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopicTo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopicTo\"><span class=\"name\">GenLoop</span>.<span class=\"name\">homotopicTo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Path.html#Path.Homotopic\">Path.Homotopic</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">q</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L293-L296","name":"GenLoop.homotopyTo_apply","line":293,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyTo_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyTo_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">homotopyTo_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Basic.html#ContinuousMap.HomotopyRel\">ContinuousMap.HomotopyRel</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">q</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.boundary\">Cube.boundary</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tₙ : <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyTo\">GenLoop.homotopyTo</a> <span class=\"fn\">i</span> <span class=\"fn\">H</span></span>)</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">tₙ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">H</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.1</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt\">Cube.insertAt</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.2</span>, <span class=\"fn\">tₙ</span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L286-L289","name":"GenLoop.homotopyTo","line":286,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyTo","doc":"A homotopy between `n+1`-dimensional loops `p` and `q` constant on the boundary\nseen as a homotopy between two paths in the space of `n`-dimensional paths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.homotopyTo\"><span class=\"name\">GenLoop</span>.<span class=\"name\">homotopyTo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/Basic.html#ContinuousMap.HomotopyRel\">ContinuousMap.HomotopyRel</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">q</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.boundary\">Cube.boundary</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L279-L281","name":"GenLoop.cCompInsert","line":279,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.cCompInsert","doc":"Composition with `Cube.insertAt` as a continuous map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.cCompInsert\"><span class=\"name\">GenLoop</span>.<span class=\"name\">cCompInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L272-L274","name":"GenLoop.fromLoop_apply","line":272,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">fromLoop_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\">GenLoop.fromLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.splitAt\">Cube.splitAt</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">t</span></span>)</span>.2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L267-L269","name":"GenLoop.toLoop_apply","line":267,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">toLoop_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{tn : <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">tn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt\">Cube.insertAt</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">t</span>, <span class=\"fn\">tn</span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L257-L264","name":"GenLoop.loopHomeo","line":257,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo","doc":"The `n+1`-dimensional loops are in bijection with the loops in the space of\n`n`-dimensional loops with base point `const`.\nWe allow an arbitrary indexing type `N` in place of `Fin n` here. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo\"><span class=\"name\">GenLoop</span>.<span class=\"name\">loopHomeo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L256-L256","name":"GenLoop.loopHomeo_symm_apply","line":256,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo_symm_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">loopHomeo_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph.symm\">Homeomorph.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo\">GenLoop.loopHomeo</a> <span class=\"fn\">i</span></span>)</span></span>)</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\">GenLoop.fromLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L256-L256","name":"GenLoop.loopHomeo_apply","line":256,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">loopHomeo_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.loopHomeo\">GenLoop.loopHomeo</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L247-L250","name":"GenLoop.to_from","line":247,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.to_from","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.to_from\"><span class=\"name\">GenLoop</span>.<span class=\"name\">to_from</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\">GenLoop.fromLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L240-L244","name":"GenLoop.continuous_fromLoop","line":240,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.continuous_fromLoop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.continuous_fromLoop\"><span class=\"name\">GenLoop</span>.<span class=\"name\">continuous_fromLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\">GenLoop.fromLoop</a> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L227-L237","name":"GenLoop.fromLoop","line":227,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop","doc":"Generalized loop from a loop by uncurrying $I → (I^{N\\setminus\\{j\\}} → X)$ into $I^N → X$. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\"><span class=\"name\">GenLoop</span>.<span class=\"name\">fromLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L226-L226","name":"GenLoop.fromLoop_coe","line":226,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop_coe\"><span class=\"name\">GenLoop</span>.<span class=\"name\">fromLoop_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.fromLoop\">GenLoop.fromLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.comp\">ContinuousMap.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/CompactOpen.html#ContinuousMap.uncurry\">ContinuousMap.uncurry</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.comp\">ContinuousMap.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.mk\">ContinuousMap.mk</a> <span class=\"fn\">Subtype.val</span></span>)</span> <span class=\"fn\"><span class=\"fn\">p</span>.toContinuousMap</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#Homeomorph.toContinuousMap\">Homeomorph.toContinuousMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.splitAt\">Cube.splitAt</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L214-L222","name":"GenLoop.continuous_toLoop","line":214,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.continuous_toLoop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.continuous_toLoop\"><span class=\"name\">GenLoop</span>.<span class=\"name\">continuous_toLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L204-L210","name":"GenLoop.toLoop","line":204,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop","doc":"Loop from a generalized loop by currying $I^N → X$ into $I → (I^{N\\setminus\\{j\\}} → X)$. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\"><span class=\"name\">GenLoop</span>.<span class=\"name\">toLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\">LoopSpace</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">GenLoop.const</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L203-L203","name":"GenLoop.toLoop_apply_coe","line":203,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop_apply_coe\"><span class=\"name\">GenLoop</span>.<span class=\"name\">toLoop_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.toLoop\">GenLoop.toLoop</a> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/CompactOpen.html#ContinuousMap.curry\">ContinuousMap.curry</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap.comp\">ContinuousMap.comp</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#Homeomorph.toContinuousMap\">Homeomorph.toContinuousMap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt\">Cube.insertAt</a> <span class=\"fn\">i</span></span>)</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L192-L193","name":"GenLoop.Homotopic.setoid","line":192,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.setoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.setoid\"><span class=\"name\">GenLoop</span>.<span class=\"name\">Homotopic</span>.<span class=\"name\">setoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L188-L189","name":"GenLoop.Homotopic.equiv","line":188,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.equiv\"><span class=\"name\">GenLoop</span>.<span class=\"name\">Homotopic</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">GenLoop.Homotopic</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L184-L185","name":"GenLoop.Homotopic.trans","line":184,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.trans\"><span class=\"name\">GenLoop</span>.<span class=\"name\">Homotopic</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H0 : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L179-L180","name":"GenLoop.Homotopic.symm","line":179,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.symm\"><span class=\"name\">GenLoop</span>.<span class=\"name\">Homotopic</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L174-L175","name":"GenLoop.Homotopic.refl","line":174,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic.refl\"><span class=\"name\">GenLoop</span>.<span class=\"name\">Homotopic</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\">GenLoop.Homotopic</a> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L165-L166","name":"GenLoop.Homotopic","line":165,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic","doc":"The \"homotopic relative to boundary\" relation between `GenLoop`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.Homotopic\"><span class=\"name\">GenLoop</span>.<span class=\"name\">Homotopic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L161-L162","name":"GenLoop.inhabited","line":161,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.inhabited\"><span class=\"name\">GenLoop</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L157-L158","name":"GenLoop.const_apply","line":157,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.const_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.const_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">const_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">GenLoop.const</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L152-L153","name":"GenLoop.const","line":152,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.const","doc":"The constant `GenLoop` at `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.const\"><span class=\"name\">GenLoop</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L147-L148","name":"GenLoop.boundary","line":147,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.boundary","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.boundary\"><span class=\"name\">GenLoop</span>.<span class=\"name\">boundary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.boundary\">Cube.boundary</a> <span class=\"fn\">N</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L142-L144","name":"GenLoop.copy_eq","line":142,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.copy_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.copy_eq\"><span class=\"name\">GenLoop</span>.<span class=\"name\">copy_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.copy\">GenLoop.copy</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L138-L139","name":"GenLoop.coe_copy","line":138,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.coe_copy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.coe_copy\"><span class=\"name\">GenLoop</span>.<span class=\"name\">coe_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span> → <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.copy\">GenLoop.copy</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L132-L133","name":"GenLoop.copy","line":132,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.copy","doc":"Copy of a `GenLoop` with a new map from the unit cube equal to the old one.\nUseful to fix definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.copy\"><span class=\"name\">GenLoop</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span> → <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L126-L127","name":"GenLoop.mk_apply","line":126,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.mk_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.mk_apply\"><span class=\"name\">GenLoop</span>.<span class=\"name\">mk_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">f</span>, <span class=\"fn\">property</span> := <span class=\"fn\">H</span> }</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L121-L122","name":"GenLoop.ext","line":121,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.ext\"><span class=\"name\">GenLoop</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L115-L117","name":"GenLoop.instFunLike","line":115,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop.instFunLike\"><span class=\"name\">GenLoop</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\">GenLoop</a> <span class=\"fn\">N</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L107-L107","name":"Topology.Homotopy.«termΩ^»","line":107,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.Homotopy.«termΩ^»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.Homotopy.«termΩ^»\"><span class=\"name\">Topology</span>.<span class=\"name\">Homotopy</span>.<span class=\"name\">«termΩ^»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L103-L104","name":"GenLoop","line":103,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop","doc":"The `n`-dimensional generalized loops based at `x` in a space `X` are\ncontinuous functions `I^n → X` that sends the boundary to `x`.\nWe allow an arbitrary indexing type `N` in place of `Fin n` here. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#GenLoop\"><span class=\"name\">GenLoop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">X</span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L96-L97","name":"LoopSpace.inhabited","line":96,"kind":"instance","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace.inhabited\"><span class=\"name\">LoopSpace</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/PathConnected.html#Path\">Path</a> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L94-L94","name":"Topology.Homotopy.termΩ","line":94,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.Homotopy.termΩ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.Homotopy.termΩ\"><span class=\"name\">Topology</span>.<span class=\"name\">Homotopy</span>.<span class=\"name\">termΩ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L89-L90","name":"LoopSpace","line":89,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace","doc":"The space of paths with both endpoints equal to a specified point `x : X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#LoopSpace\"><span class=\"name\">LoopSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L76-L80","name":"Cube.insertAt_boundary","line":76,"kind":"theorem","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt_boundary","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt_boundary\"><span class=\"name\">Cube</span>.<span class=\"name\">insertAt_boundary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t₀ : <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">t₀</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.boundary\">Cube.boundary</a> <span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt\">Cube.insertAt</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">t₀</span>, <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.boundary\">Cube.boundary</a> <span class=\"fn\">N</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L72-L73","name":"Cube.insertAt","line":72,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt","doc":"The backward direction of the homeomorphism\nbetween the cube $I^N$ and $I × I^{N\\setminus\\{j\\}}$. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.insertAt\"><span class=\"name\">Cube</span>.<span class=\"name\">insertAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L65-L66","name":"Cube.splitAt","line":65,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.splitAt","doc":"The forward direction of the homeomorphism\nbetween the cube $I^N$ and $I × I^{N\\setminus\\{j\\}}$. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.splitAt\"><span class=\"name\">Cube</span>.<span class=\"name\">splitAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">j</span> : <span class=\"fn\">N</span> // <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span></span> }</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L56-L57","name":"Cube.boundary","line":56,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.boundary","doc":"The points in a cube with at least one projection equal to 0 or 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Cube.boundary\"><span class=\"name\">Cube</span>.<span class=\"name\">boundary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">↑<a href=\"./Mathlib/Topology/UnitInterval.html#unitInterval\">unitInterval</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L51-L51","name":"Topology.«termI^_»","line":51,"kind":"def","docLink":"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.«termI^_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Homotopy/HomotopyGroup.html#Topology.«termI^_»\"><span class=\"name\">Topology</span>.<span class=\"name\">«termI^_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}