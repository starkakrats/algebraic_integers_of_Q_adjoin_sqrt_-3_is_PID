{"name":"Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup","instances":[],"imports":["Init","Mathlib.Algebra.Category.GroupCat.Basic","Mathlib.Algebra.Group.Equiv.TypeTags"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L98-L101","name":"commGroupAddCommGroupEquivalence","line":98,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence","doc":"The equivalence of categories between `CommGroup` and `AddCommGroup`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\"><span class=\"name\">commGroupAddCommGroupEquivalence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_obj_str_neg","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_neg\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_obj_str_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Multiplicative.ofAdd</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Additive.toMul</span> <span class=\"fn\">x</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_obj_str_inv","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_inv\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_obj_str_inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Additive.ofMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">Multiplicative.toAdd</span> <span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_counitIso_hom_app_apply","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_counitIso_hom_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_counitIso_hom_app_apply\"><span class=\"name\">commGroupAddCommGroupEquivalence_counitIso_hom_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat\">AddCommGroupCat.toCommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat\">CommGroupCat.toAddCommGroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.counitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_unitIso_inv_app_apply","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_unitIso_inv_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_unitIso_inv_app_apply\"><span class=\"name\">commGroupAddCommGroupEquivalence_unitIso_inv_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat\">CommGroupCat.toAddCommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat\">AddCommGroupCat.toCommGroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.unitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span></span>)</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">MonoidHom.toAdditive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span>\n          <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_map_apply","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_map_apply\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.functor</span>.map <span class=\"fn\">a✝</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Additive.ofMul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a✝</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Additive.toMul</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_obj_str_zero","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_zero\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_obj_str_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_obj_str_mul","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_mul\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_obj_str_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_obj_str_zpow","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_zpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_zpow\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_obj_str_zpow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvMonoid.zpow\">DivInvMonoid.zpow</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_obj_str_sub","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_sub\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_obj_str_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_obj_str_div","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_div\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_obj_str_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_counitIso_inv_app_apply","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_counitIso_inv_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_counitIso_inv_app_apply\"><span class=\"name\">commGroupAddCommGroupEquivalence_counitIso_inv_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.counitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span>.symm</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_obj_str_nsmul","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_nsmul\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_obj_str_nsmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a_1</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_map_apply","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_map_apply\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.inverse</span>.map <span class=\"fn\">a✝</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Multiplicative.ofAdd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a✝</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Multiplicative.toAdd</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_unitIso_hom_app_apply","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_unitIso_hom_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_unitIso_hom_app_apply\"><span class=\"name\">commGroupAddCommGroupEquivalence_unitIso_hom_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.unitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">MonoidHom.toAdditive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span></span>)</span></span>)</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_obj_str_one","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_one\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_obj_str_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_obj_str_add","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_add\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_obj_str_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_obj_str_zsmul","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_str_zsmul\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_obj_str_zsmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a_1</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_obj_str_npow","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_npow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_str_npow\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_obj_str_npow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid.npow\">Monoid.npow</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_inverse_obj_α","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_α","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_inverse_obj_α\"><span class=\"name\">commGroupAddCommGroupEquivalence_inverse_obj_α</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.inverse</span>.obj <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L97-L97","name":"commGroupAddCommGroupEquivalence_functor_obj_α","line":97,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_α","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence_functor_obj_α\"><span class=\"name\">commGroupAddCommGroupEquivalence_functor_obj_α</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#commGroupAddCommGroupEquivalence\">commGroupAddCommGroupEquivalence</a>.functor</span>.obj <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L83-L86","name":"groupAddGroupEquivalence","line":83,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence","doc":"The equivalence of categories between `Group` and `AddGroup`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\"><span class=\"name\">groupAddGroupEquivalence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_counitIso_inv_app_apply","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_counitIso_inv_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_counitIso_inv_app_apply\"><span class=\"name\">groupAddGroupEquivalence_counitIso_inv_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.counitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span>.toEquiv</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_obj_str_zero","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_zero\"><span class=\"name\">groupAddGroupEquivalence_functor_obj_str_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_obj_str_zsmul","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_zsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_zsmul\"><span class=\"name\">groupAddGroupEquivalence_functor_obj_str_zsmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a_1</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_obj_str_npow","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_npow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_npow\"><span class=\"name\">groupAddGroupEquivalence_inverse_obj_str_npow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid.npow\">Monoid.npow</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_obj_α","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_α","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_α\"><span class=\"name\">groupAddGroupEquivalence_inverse_obj_α</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.inverse</span>.obj <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_unitIso_inv_app_apply","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_unitIso_inv_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_unitIso_inv_app_apply\"><span class=\"name\">groupAddGroupEquivalence_unitIso_inv_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat\">GroupCat.toAddGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat\">AddGroupCat.toGroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.unitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">MonoidHom.toAdditive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_obj_str_neg","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_neg\"><span class=\"name\">groupAddGroupEquivalence_functor_obj_str_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Multiplicative.ofAdd</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Additive.toMul</span> <span class=\"fn\">x</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_unitIso_hom_app_apply","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_unitIso_hom_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_unitIso_hom_app_apply\"><span class=\"name\">groupAddGroupEquivalence_unitIso_hom_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.unitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.toAddMonoidHom\">AddEquiv.toAddMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">MonoidHom.toAdditive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.toMonoidHom\">MulEquiv.toMonoidHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#MulEquiv.multiplicativeAdditive\">MulEquiv.multiplicativeAdditive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>\n        <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_obj_str_nsmul","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_nsmul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_nsmul\"><span class=\"name\">groupAddGroupEquivalence_functor_obj_str_nsmul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a_1</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_obj_str_add","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_add\"><span class=\"name\">groupAddGroupEquivalence_functor_obj_str_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_obj_str_mul","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_mul\"><span class=\"name\">groupAddGroupEquivalence_inverse_obj_str_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_obj_str_sub","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_str_sub\"><span class=\"name\">groupAddGroupEquivalence_functor_obj_str_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_obj_str_one","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_one\"><span class=\"name\">groupAddGroupEquivalence_inverse_obj_str_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_map_apply","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_map_apply\"><span class=\"name\">groupAddGroupEquivalence_functor_map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.functor</span>.map <span class=\"fn\">a✝</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Additive.ofMul</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a✝</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Additive.toMul</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_functor_obj_α","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_α","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_functor_obj_α\"><span class=\"name\">groupAddGroupEquivalence_functor_obj_α</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.functor</span>.obj <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_obj_str_zpow","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_zpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_zpow\"><span class=\"name\">groupAddGroupEquivalence_inverse_obj_str_zpow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#DivInvMonoid.zpow\">DivInvMonoid.zpow</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_map_apply","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_map_apply\"><span class=\"name\">groupAddGroupEquivalence_inverse_map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.inverse</span>.map <span class=\"fn\">a✝</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Multiplicative.ofAdd</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a✝</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Multiplicative.toAdd</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_obj_str_div","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_div\"><span class=\"name\">groupAddGroupEquivalence_inverse_obj_str_div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_inverse_obj_str_inv","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_inverse_obj_str_inv\"><span class=\"name\">groupAddGroupEquivalence_inverse_obj_str_inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Additive.ofMul</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">Multiplicative.toAdd</span> <span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L82-L82","name":"groupAddGroupEquivalence_counitIso_hom_app_apply","line":82,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_counitIso_hom_app_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence_counitIso_hom_app_apply\"><span class=\"name\">groupAddGroupEquivalence_counitIso_hom_app_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat\">AddGroupCat.toGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat\">GroupCat.toAddGroupCat</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#groupAddGroupEquivalence\">groupAddGroupEquivalence</a>.counitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/TypeTags.html#AddEquiv.additiveMultiplicative\">AddEquiv.additiveMultiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span>.toEquiv</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L73-L75","name":"AddCommGroupCat.toCommGroupCat","line":73,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat","doc":"The functor `AddCommGroup ⥤ CommGroup` by sending `X ↦ multiplicative Y` and `f ↦ f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">toCommGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L72-L72","name":"AddCommGroupCat.toCommGroupCat_obj","line":72,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat_obj\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">toCommGroupCat_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat\">AddCommGroupCat.toCommGroupCat</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat.of\">CommGroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L72-L72","name":"AddCommGroupCat.toCommGroupCat_map","line":72,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat_map\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">toCommGroupCat_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddCommGroupCat.toCommGroupCat\">AddCommGroupCat.toCommGroupCat</a>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L61-L63","name":"AddGroupCat.toGroupCat","line":61,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat","doc":"The functor `AddGroup ⥤ Group` by sending `X ↦ multiplicative Y` and `f ↦ f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">toGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L60-L60","name":"AddGroupCat.toGroupCat_map","line":60,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat_map\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">toGroupCat_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat\">AddGroupCat.toGroupCat</a>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">AddMonoidHom.toMultiplicative</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L60-L60","name":"AddGroupCat.toGroupCat_obj","line":60,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat_obj\"><span class=\"name\">AddGroupCat</span>.<span class=\"name\">toGroupCat_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#AddGroupCat.toGroupCat\">AddGroupCat.toGroupCat</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat.of\">GroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Multiplicative\">Multiplicative</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L49-L51","name":"CommGroupCat.toAddCommGroupCat","line":49,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat","doc":"The functor `CommGroup ⥤ AddCommGroup` by sending `X ↦ additive X` and `f ↦ f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">toAddCommGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L48-L48","name":"CommGroupCat.toAddCommGroupCat_map","line":48,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat_map\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">toAddCommGroupCat_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat\">CommGroupCat.toAddCommGroupCat</a>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">MonoidHom.toAdditive</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L48-L48","name":"CommGroupCat.toAddCommGroupCat_obj","line":48,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat_obj\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">toAddCommGroupCat_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#CommGroupCat.toAddCommGroupCat\">CommGroupCat.toAddCommGroupCat</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L37-L39","name":"GroupCat.toAddGroupCat","line":37,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat","doc":"The functor `Group ⥤ AddGroup` by sending `X ↦ additive X` and `f ↦ f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat\"><span class=\"name\">GroupCat</span>.<span class=\"name\">toAddGroupCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat\">AddGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L36-L36","name":"GroupCat.toAddGroupCat_obj","line":36,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat_obj\"><span class=\"name\">GroupCat</span>.<span class=\"name\">toAddGroupCat_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat\">GroupCat.toAddGroupCat</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddGroupCat.of\">AddGroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/TypeTags.html#Additive\">Additive</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean#L36-L36","name":"GroupCat.toAddGroupCat_map","line":36,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat_map\"><span class=\"name\">GroupCat</span>.<span class=\"name\">toAddGroupCat_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#GroupCat\">GroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.html#GroupCat.toAddGroupCat\">GroupCat.toAddGroupCat</a>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">MonoidHom.toAdditive</span> <span class=\"fn\">a</span></span></span></div></div>"}]}