{"name":"Std.Lean.InfoTree","instances":[],"imports":["Init","Lean.Elab.InfoTree.Main"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/InfoTree.lean#L16-L23","name":"Lean.Elab.InfoTree.foldInfo'.go","line":16,"kind":"opaque","docLink":"./Std/Lean/InfoTree.html#Lean.Elab.InfoTree.foldInfo'.go","doc":"`foldInfo'.go` is like `foldInfo'` but with an additional outer context parameter `ctx?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/InfoTree.html#Lean.Elab.InfoTree.foldInfo'.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">foldInfo'</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/InfoTree.lean#L12-L23","name":"Lean.Elab.InfoTree.foldInfo'","line":12,"kind":"def","docLink":"./Std/Lean/InfoTree.html#Lean.Elab.InfoTree.foldInfo'","doc":"Like `InfoTree.foldInfo`, but also passes the whole node to `f` instead of just the head. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/InfoTree.html#Lean.Elab.InfoTree.foldInfo'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">foldInfo'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Lean.Elab.ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\">α</span></span></div></div>"}]}