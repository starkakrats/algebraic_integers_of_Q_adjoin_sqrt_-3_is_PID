{"name":"Mathlib.CategoryTheory.Category.ULift","instances":[{"typeNames":["CategoryTheory.ULiftHom"],"name":"CategoryTheory.instInhabitedULiftHom","className":"Inhabited"},{"typeNames":["CategoryTheory.ULiftHom"],"name":"CategoryTheory.ULiftHom.category","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.AsSmall"],"name":"CategoryTheory.instSmallCategoryAsSmall","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.AsSmall"],"name":"CategoryTheory.instInhabitedAsSmall","className":"Inhabited"}],"imports":["Init","Mathlib.CategoryTheory.Category.Basic","Mathlib.CategoryTheory.Equivalence","Mathlib.CategoryTheory.EqToHom","Mathlib.Data.ULift"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L206-L208","name":"CategoryTheory.ULiftHomULiftCategory.equiv","line":206,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHomULiftCategory.equiv","doc":"The equivalence between `C` and `ULiftHom (ULift C)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHomULiftCategory.equiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHomULiftCategory</span>.<span class=\"name\">equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u', u}</a>    <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L202-L203","name":"CategoryTheory.instInhabitedAsSmall","line":202,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.instInhabitedAsSmall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.instInhabitedAsSmall\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedAsSmall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L195-L199","name":"CategoryTheory.AsSmall.equiv","line":195,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv","doc":"The equivalence between `C` and `AsSmall C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L194-L194","name":"CategoryTheory.AsSmall.equiv_inverse","line":194,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">equiv_inverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.equiv</span>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">CategoryTheory.AsSmall.down</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L194-L194","name":"CategoryTheory.AsSmall.equiv_counitIso","line":194,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_counitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_counitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">equiv_counitIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.equiv</span>.counitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">CategoryTheory.NatIso.ofComponents</a> <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToIso\">CategoryTheory.eqToIso</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">CategoryTheory.AsSmall.down</span> <span class=\"fn\">CategoryTheory.AsSmall.up</span></span>)</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>)</span></span>)</span>.obj <span class=\"fn\">X</span></span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L194-L194","name":"CategoryTheory.AsSmall.equiv_functor","line":194,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">equiv_functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.equiv</span>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">CategoryTheory.AsSmall.up</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L194-L194","name":"CategoryTheory.AsSmall.equiv_unitIso","line":194,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_unitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.equiv_unitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">equiv_unitIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.equiv</span>.unitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">CategoryTheory.NatIso.ofComponents</a> <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\">C</span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToIso\">CategoryTheory.eqToIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">C</span></span>)</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">C</span></span>)</span>.obj <span class=\"fn\">X</span></span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L188-L190","name":"CategoryTheory.AsSmall.down","line":188,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.down","doc":"One half of the equivalence between `C` and `AsSmall C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L187-L187","name":"CategoryTheory.AsSmall.down_map","line":187,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.down_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.down_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">down_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.down</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.down</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L187-L187","name":"CategoryTheory.AsSmall.down_obj","line":187,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.down_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.down_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">down_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.down</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.down</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L181-L183","name":"CategoryTheory.AsSmall.up","line":181,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.up","doc":"One half of the equivalence between `C` and `AsSmall C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.up\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L180-L180","name":"CategoryTheory.AsSmall.up_obj_down","line":180,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.up_obj_down","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.up_obj_down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">up_obj_down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.up</span>.obj <span class=\"fn\">X</span></span>)</span>.down</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L180-L180","name":"CategoryTheory.AsSmall.up_map_down","line":180,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.up_map_down","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall.up_map_down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span>.<span class=\"name\">up_map_down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\">C</span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.AsSmall.up</span>.map <span class=\"fn\">f</span></span>)</span>.down</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L174-L177","name":"CategoryTheory.instSmallCategoryAsSmall","line":174,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.instSmallCategoryAsSmall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.instSmallCategoryAsSmall\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instSmallCategoryAsSmall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">CategoryTheory.AsSmall</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L171-L171","name":"CategoryTheory.AsSmall","line":171,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall","doc":"`AsSmall C` is a small category equivalent to `C`.\nMore specifically, if `C : Type u` is endowed with `Category.{v} C`, then\n`AsSmall.{w} C : Type (max w v u)` is endowed with an instance of a small category.\n\nThe objects and morphisms of `AsSmall C` are defined by applying `ULift` to the\nobjects and morphisms of `C`.\n\nNote: We require a category instance for this definition in order to have direct\naccess to the universe level `v`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">AsSmall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(D : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u w v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L149-L153","name":"CategoryTheory.ULiftHom.equiv","line":149,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.equiv","doc":"The equivalence between `C` and `ULiftHom C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.equiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L143-L145","name":"CategoryTheory.ULiftHom.down","line":143,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.down","doc":"One half of the quivalence between `C` and `ULiftHom C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L142-L142","name":"CategoryTheory.ULiftHom.down_map","line":142,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.down_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.down_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">down_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULiftHom.down</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.down</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L142-L142","name":"CategoryTheory.ULiftHom.down_obj","line":142,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.down_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.down_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">down_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULiftHom.down</span>.obj <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objDown\">CategoryTheory.ULiftHom.objDown</a> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L136-L138","name":"CategoryTheory.ULiftHom.up","line":136,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.up","doc":"One half of the quivalence between `C` and `ULiftHom C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.up\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L135-L135","name":"CategoryTheory.ULiftHom.up_obj","line":135,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.up_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.up_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">up_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULiftHom.up</span>.obj <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objUp\">CategoryTheory.ULiftHom.objUp</a> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L135-L135","name":"CategoryTheory.ULiftHom.up_map_down","line":135,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.up_map_down","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.up_map_down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">up_map_down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\">C</span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.ULiftHom.up</span>.map <span class=\"fn\">f</span></span>)</span>.down</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L129-L132","name":"CategoryTheory.ULiftHom.category","line":129,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.category","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{max v₂ v₁, u₁}</a>            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L125-L126","name":"CategoryTheory.objUp_objDown","line":125,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.objUp_objDown","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.objUp_objDown\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">objUp_objDown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objUp\">CategoryTheory.ULiftHom.objUp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objDown\">CategoryTheory.ULiftHom.objDown</a> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L120-L121","name":"CategoryTheory.objDown_objUp","line":120,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.objDown_objUp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.objDown_objUp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">objDown_objUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objDown\">CategoryTheory.ULiftHom.objDown</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objUp\">CategoryTheory.ULiftHom.objUp</a> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L115-L116","name":"CategoryTheory.ULiftHom.objUp","line":115,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objUp","doc":"The obvious function `C → ULiftHom C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objUp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">objUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L110-L111","name":"CategoryTheory.ULiftHom.objDown","line":110,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objDown","doc":"The obvious function `ULiftHom C → C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom.objDown\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span>.<span class=\"name\">objDown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L106-L107","name":"CategoryTheory.instInhabitedULiftHom","line":106,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.instInhabitedULiftHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.instInhabitedULiftHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedULiftHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\">CategoryTheory.ULiftHom</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L101-L103","name":"CategoryTheory.ULiftHom","line":101,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom","doc":"`ULiftHom.{w} C` is an alias for `C`, which is endowed with a category instance\nwhose morphisms are obtained by applying `ULift.{w}` to the morphisms from `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULiftHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULiftHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L65-L92","name":"CategoryTheory.ULift.equivalence","line":65,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence","doc":"The categorical equivalence between `C` and `ULift C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">equivalence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L64-L64","name":"CategoryTheory.ULift.equivalence_counitIso_inv_app","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_counitIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_counitIso_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">equivalence_counitIso_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.equivalence</span>.counitIso</span>.inv</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span>)</span></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L64-L64","name":"CategoryTheory.ULift.equivalence_counitIso_hom_app","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_counitIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_counitIso_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">equivalence_counitIso_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.equivalence</span>.counitIso</span>.hom</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">CategoryTheory.ULift.downFunctor</span> <span class=\"fn\">CategoryTheory.ULift.upFunctor</span></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L64-L64","name":"CategoryTheory.ULift.equivalence_unitIso_inv","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_unitIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_unitIso_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">equivalence_unitIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.equivalence</span>.unitIso</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">CategoryTheory.ULift.upFunctor</span> <span class=\"fn\">CategoryTheory.ULift.downFunctor</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L64-L64","name":"CategoryTheory.ULift.equivalence_inverse","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">equivalence_inverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.equivalence</span>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">CategoryTheory.ULift.downFunctor</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L64-L64","name":"CategoryTheory.ULift.equivalence_unitIso_hom","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_unitIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_unitIso_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">equivalence_unitIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.equivalence</span>.unitIso</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L64-L64","name":"CategoryTheory.ULift.equivalence_functor","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.equivalence_functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">equivalence_functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.equivalence</span>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">CategoryTheory.ULift.upFunctor</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L58-L60","name":"CategoryTheory.ULift.downFunctor","line":58,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.downFunctor","doc":"The functorial version of `ULift.down`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.downFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">downFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L57-L57","name":"CategoryTheory.ULift.downFunctor_obj","line":57,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.downFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.downFunctor_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">downFunctor_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.downFunctor</span>.obj <span class=\"fn\">self</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.down</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L57-L57","name":"CategoryTheory.ULift.downFunctor_map","line":57,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.downFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.downFunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">downFunctor_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.downFunctor</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L51-L53","name":"CategoryTheory.ULift.upFunctor","line":51,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.upFunctor","doc":"The functorial version of `ULift.up`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.upFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">upFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u₂, u₁}</a>     <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L50-L50","name":"CategoryTheory.ULift.upFunctor_obj_down","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.upFunctor_obj_down","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.upFunctor_obj_down\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">upFunctor_obj_down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(down : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.upFunctor</span>.obj <span class=\"fn\">down</span></span>)</span>.down</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">down</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/ULift.lean#L50-L50","name":"CategoryTheory.ULift.upFunctor_map","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.upFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.ULift.upFunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ULift</span>.<span class=\"name\">upFunctor_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\">C</span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.ULift.upFunctor</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"}]}