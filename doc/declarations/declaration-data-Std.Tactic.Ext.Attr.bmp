{"name":"Std.Tactic.Ext.Attr","instances":[{"typeNames":["Std.Tactic.Ext.ExtTheorem"],"name":"Std.Tactic.Ext.instInhabitedExtTheorem","className":"Inhabited"},{"typeNames":["Std.Tactic.Ext.ExtTheorem"],"name":"Std.Tactic.Ext.instReprExtTheorem","className":"Repr"},{"typeNames":["Std.Tactic.Ext.ExtTheorem"],"name":"Std.Tactic.Ext.instBEqExtTheorem","className":"BEq"},{"typeNames":["Std.Tactic.Ext.ExtTheorem"],"name":"Std.Tactic.Ext.instHashableExtTheorem","className":"Hashable"},{"typeNames":["Std.Tactic.Ext.ExtTheorems"],"name":"Std.Tactic.Ext.instInhabitedExtTheorems","className":"Inhabited"}],"imports":["Init","Std.Tactic.RCases","Std.Lean.Command","Std.Lean.Meta.DiscrTree"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L72-L83","name":"Std.Tactic.Ext.ext","line":72,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ext","doc":"Registers an extensionality lemma.\n\n* When `@[ext]` is applied to a structure, it generates `.ext` and `.ext_iff` theorems and registers\nthem for the `ext` tactic.\n\n* When `@[ext]` is applied to a theorem, the theorem is registered for the `ext` tactic.\n\n* You can use `@[ext 9000]` to specify a priority for the attribute.\n\n* You can use the flag `@[ext (flat := false)]` to prevent flattening all fields of parent\nstructures in the generated extensionality lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ext\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L66-L70","name":"Std.Tactic.Ext.ExtTheorems.erase","line":66,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.erase","doc":"Erase a name marked as a `ext` attribute.\nCheck that it does in fact have the `ext` attribute by making sure it names a `ExtTheorem`\nfound somewhere in the state's tree, and is not erased.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.erase\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">Lean.MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L58-L59","name":"Std.Tactic.Ext.ExtTheorems.eraseCore","line":58,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.eraseCore","doc":"Erases a name marked `ext` by adding it to the state's `erased` field and\nremoving it from the state's list of `Entry`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.eraseCore\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">eraseCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(d : <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L48-L54","name":"Std.Tactic.Ext.getExtLemmas","line":48,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.getExtLemmas","doc":"Get the list of `@[ext]` lemmas corresponding to the key `ty`,\nordered from high priority to low. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.getExtLemmas\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">getExtLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L37-L44","name":"Std.Tactic.Ext.extExtension","line":37,"kind":"opaque","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.extExtension","doc":"The environment extension to track `@[ext]` lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.extExtension\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">extExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L35-L35","name":"Std.Tactic.Ext.extExt.config","line":35,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.extExt.config","doc":"Discrimation tree settings for the `ext` extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.extExt.config\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">extExt</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L32-L32","name":"Std.Tactic.Ext.instInhabitedExtTheorems","line":32,"kind":"instance","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instInhabitedExtTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instInhabitedExtTheorems\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instInhabitedExtTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L31-L31","name":"Std.Tactic.Ext.ExtTheorems.erased","line":31,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.erased","doc":"Erased `ext`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.erased\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L29-L29","name":"Std.Tactic.Ext.ExtTheorems.tree","line":29,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.tree","doc":"The tree of `ext` extensions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.tree\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">tree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L27-L27","name":"Std.Tactic.Ext.ExtTheorems.mk","line":27,"kind":"ctor","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tree : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(erased : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\">Std.Tactic.Ext.ExtTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L27-L32","name":"Std.Tactic.Ext.ExtTheorems","line":27,"kind":"structure","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems","doc":"The state of the `ext` extension environment "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorems\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L24-L24","name":"Std.Tactic.Ext.instHashableExtTheorem","line":24,"kind":"instance","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instHashableExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instHashableExtTheorem\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instHashableExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L24-L24","name":"Std.Tactic.Ext.instBEqExtTheorem","line":24,"kind":"instance","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instBEqExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instBEqExtTheorem\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instBEqExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L24-L24","name":"Std.Tactic.Ext.instReprExtTheorem","line":24,"kind":"instance","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instReprExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instReprExtTheorem\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instReprExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L24-L24","name":"Std.Tactic.Ext.instInhabitedExtTheorem","line":24,"kind":"instance","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instInhabitedExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.instInhabitedExtTheorem\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instInhabitedExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L23-L23","name":"Std.Tactic.Ext.ExtTheorem.keys","line":23,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.keys","doc":"Key in the discrimination tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.keys\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L21-L21","name":"Std.Tactic.Ext.ExtTheorem.priority","line":21,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.priority","doc":"Priority of the extensionality theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.priority\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">priority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L19-L19","name":"Std.Tactic.Ext.ExtTheorem.declName","line":19,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.declName","doc":"Declaration name of the extensionality theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.declName\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L17-L17","name":"Std.Tactic.Ext.ExtTheorem.mk","line":17,"kind":"ctor","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(priority : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(keys : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\">Std.Tactic.Ext.ExtTheorem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L17-L24","name":"Std.Tactic.Ext.ExtTheorem","line":17,"kind":"structure","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem","doc":"Information about an extensionality theorem, stored in the environment extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.ExtTheorem\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Ext/Attr.lean#L13-L14","name":"Std.Tactic.Ext.Â«commandDeclare_ext_theorems_for(Flat:=_)___Â»","line":13,"kind":"def","docLink":"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.Â«commandDeclare_ext_theorems_for(Flat:=_)___Â»","doc":"`declare_ext_theorems_for A` declares the extensionality theorems for the structure `A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Ext/Attr.html#Std.Tactic.Ext.Â«commandDeclare_ext_theorems_for(Flat:=_)___Â»\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">Â«commandDeclare_ext_theorems_for(Flat:=_)___Â»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}