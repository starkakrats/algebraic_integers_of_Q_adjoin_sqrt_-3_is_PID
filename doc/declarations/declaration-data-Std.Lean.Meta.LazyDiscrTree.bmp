{"name":"Std.Lean.Meta.LazyDiscrTree","instances":[{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key"],"name":"Lean.Meta.LazyDiscrTree.MatchClone.instInhabitedKey","className":"Inhabited"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key"],"name":"Lean.Meta.LazyDiscrTree.MatchClone.instBEqKey","className":"BEq"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key"],"name":"Lean.Meta.LazyDiscrTree.MatchClone.instReprKey","className":"Repr"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key"],"name":"Lean.Meta.LazyDiscrTree.MatchClone.Key.instHashableKey","className":"Hashable"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedTrie","className":"Inhabited"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie"],"name":"Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","className":"EmptyCollection"},{"typeNames":["Lean.Meta.LazyDiscrTree"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedLazyDiscrTree","className":"Inhabited"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","className":"Inhabited"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree"],"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree","className":"Append"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults"],"name":"Lean.Meta.LazyDiscrTree.instInhabitedInitResults","className":"Inhabited"},{"typeNames":["_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults"],"name":"Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults","className":"Append"}],"imports":["Init","Lean.Meta.DiscrTree","Std.Data.Nat.Init.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L862-L875","name":"Lean.Meta.LazyDiscrTree.createImportedEnvironment.go","line":862,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedEnvironment.go","doc":"Allocate constants to tasks according to `constantsPerTask`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedEnvironment.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createImportedEnvironment</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constantsPerTask : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1000</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tasks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cnt : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L855-L881","name":"Lean.Meta.LazyDiscrTree.createImportedEnvironment","line":855,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedEnvironment","doc":"Create an imported environment for tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedEnvironment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createImportedEnvironment</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constantsPerTask : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1000</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L811-L812","name":"Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults","line":811,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.instAppendInitResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">instAppendInitResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L806-L809","name":"Lean.Meta.LazyDiscrTree.InitResults.append","line":806,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.append","doc":"Combine two initial results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L800-L801","name":"Lean.Meta.LazyDiscrTree.instInhabitedInitResults","line":800,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedInitResults","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedInitResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedInitResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.InitResults\">Lean.Meta.LazyDiscrTree.InitResults</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L751-L759","name":"Lean.Meta.LazyDiscrTree.isBlackListed","line":751,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.isBlackListed","doc":"An even wider class of \"internal\" names than reported by `Name.isInternalDetail`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.isBlackListed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">isBlackListed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L720-L724","name":"Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry","line":720,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry","doc":"Creates an entry for a subterm of an initial entry.\n\nThis is slightly more efficient than using `fromExpr` on subterms since it avoids a redundant call\nto `whnf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">mkSubEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L707-L712","name":"Lean.Meta.LazyDiscrTree.InitEntry.fromExpr","line":707,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.fromExpr","doc":"Constructs an initial entry from an expression and value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.fromExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">fromExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L700-L700","name":"Lean.Meta.LazyDiscrTree.InitEntry.entry","line":700,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.entry","doc":"Returns rest of entry for later insertion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.entry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">entry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.LazyEntry\">Lean.Meta.LazyDiscrTree.LazyEntry</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L698-L698","name":"Lean.Meta.LazyDiscrTree.InitEntry.key","line":698,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.key","doc":"Return root key for an entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">key</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L696-L696","name":"Lean.Meta.LazyDiscrTree.InitEntry.mk","line":696,"kind":"ctor","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(key : <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.LazyEntry\">Lean.Meta.LazyDiscrTree.LazyEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">Lean.Meta.LazyDiscrTree.InitEntry</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L696-L700","name":"Lean.Meta.LazyDiscrTree.InitEntry","line":696,"kind":"structure","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry","doc":"Initial entry in lazy discrimination tree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L689-L690","name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree","line":689,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppendPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">instAppendPreDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L680-L687","name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.append","line":680,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.append","doc":"Merge two discrimination trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L656-L656","name":"Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","line":656,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedPreDiscrTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.PreDiscrTree\">Lean.Meta.LazyDiscrTree.PreDiscrTree</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L644-L645","name":"Lean.Meta.LazyDiscrTree.getMatch","line":644,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatch","doc":"Find values that match `e` in `d`.\n\nThe results are ordered so that the longest matches in terms of number of\nnon-star keys are first with ties going to earlier operators first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L373-L374","name":"Lean.Meta.LazyDiscrTree.instInhabitedLazyDiscrTree","line":373,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedLazyDiscrTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedLazyDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedLazyDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L367-L367","name":"Lean.Meta.LazyDiscrTree.roots","line":367,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.roots","doc":"Map from discriminator trie roots to the index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.roots\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">roots</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.TrieIndex\">Lean.Meta.LazyDiscrTree.TrieIndex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L365-L365","name":"Lean.Meta.LazyDiscrTree.tries","line":365,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.tries","doc":"Backing array of trie entries.  Should be owned by this trie. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.tries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">tries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L363-L363","name":"Lean.Meta.LazyDiscrTree.config","line":363,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.config","doc":"Configuration for normalization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">config</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L361-L361","name":"Lean.Meta.LazyDiscrTree.mk","line":361,"kind":"ctor","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tries : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(roots : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.TrieIndex\">Lean.Meta.LazyDiscrTree.TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">Lean.Meta.LazyDiscrTree</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L361-L367","name":"Lean.Meta.LazyDiscrTree","line":361,"kind":"structure","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree","doc":"`LazyDiscrTree` is a variant of the discriminator tree datatype\n`DiscrTree` in Lean core that is designed to be efficiently\ninitializable with a large number of patterns.  This is useful\nin contexts such as searching an entire Lean environment for\nexpressions that match a pattern.\n\nLazy discriminator trees achieve good performance by minimizing\nthe amount of work that is done up front to build the discriminator\ntree.  When first adding patterns to the tree, only the root\ndiscriminator key is computed and processing the remaining\nterms is deferred until demanded by a match.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L340-L340","name":"Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","line":340,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instEmptyCollectionTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L338-L338","name":"Lean.Meta.LazyDiscrTree.instInhabitedTrie","line":338,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedTrie</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.Trie\">Lean.Meta.LazyDiscrTree.Trie</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L57-L57","name":"Lean.Meta.LazyDiscrTree.MatchClone.Key.instHashableKey","line":57,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.Key.instHashableKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.Key.instHashableKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">Key</span>.<span class=\"name\">instHashableKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L48-L55","name":"Lean.Meta.LazyDiscrTree.MatchClone.Key.hash","line":48,"kind":"def","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.Key.hash","doc":"Hash function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.Key.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">Key</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L43-L43","name":"Lean.Meta.LazyDiscrTree.MatchClone.instReprKey","line":43,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.instReprKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.instReprKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">instReprKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L43-L43","name":"Lean.Meta.LazyDiscrTree.MatchClone.instBEqKey","line":43,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.instBEqKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.instBEqKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">instBEqKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/LazyDiscrTree.lean#L43-L43","name":"Lean.Meta.LazyDiscrTree.MatchClone.instInhabitedKey","line":43,"kind":"instance","docLink":"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.instInhabitedKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.instInhabitedKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">instInhabitedKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Lean/Meta/LazyDiscrTree.html#_private.Std.Lean.Meta.LazyDiscrTree.0.Lean.Meta.LazyDiscrTree.MatchClone.Key\">Lean.Meta.LazyDiscrTree.MatchClone.Key</a></span></div></div>"}]}