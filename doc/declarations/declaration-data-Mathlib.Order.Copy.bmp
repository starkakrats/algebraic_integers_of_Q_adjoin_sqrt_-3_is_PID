{"name":"Mathlib.Order.Copy","instances":[],"imports":["Init","Mathlib.Order.ConditionallyCompleteLattice.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L158-L180","name":"ConditionallyCompleteLattice.copy","line":158,"kind":"def","docLink":"./Mathlib/Order/Copy.html#ConditionallyCompleteLattice.copy","doc":"A function to create a provable equal copy of a conditionally complete lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#ConditionallyCompleteLattice.copy\"><span class=\"name\">ConditionallyCompleteLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/ConditionallyCompleteLattice/Basic.html#ConditionallyCompleteLattice\">ConditionallyCompleteLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/ConditionallyCompleteLattice/Basic.html#ConditionallyCompleteLattice\">ConditionallyCompleteLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L139-L151","name":"CompleteDistribLattice.copy","line":139,"kind":"def","docLink":"./Mathlib/Order/Copy.html#CompleteDistribLattice.copy","doc":"A function to create a provable equal copy of a complete distributive lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#CompleteDistribLattice.copy\"><span class=\"name\">CompleteDistribLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompleteDistribLattice\">CompleteDistribLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompleteDistribLattice\">CompleteDistribLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L124-L134","name":"Coframe.copy","line":124,"kind":"def","docLink":"./Mathlib/Order/Copy.html#Coframe.copy","doc":"A function to create a provable equal copy of a coframe with possibly different definitional\nequalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#Coframe.copy\"><span class=\"name\">Coframe</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Coframe\">Order.Coframe</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Coframe\">Order.Coframe</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L107-L117","name":"Frame.copy","line":107,"kind":"def","docLink":"./Mathlib/Order/Copy.html#Frame.copy","doc":"A function to create a provable equal copy of a frame with possibly different definitional\nequalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#Frame.copy\"><span class=\"name\">Frame</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Frame\">Order.Frame</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#Order.Frame\">Order.Frame</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L84-L100","name":"CompleteLattice.copy","line":84,"kind":"def","docLink":"./Mathlib/Order/Copy.html#CompleteLattice.copy","doc":"A function to create a provable equal copy of a complete lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#CompleteLattice.copy\"><span class=\"name\">CompleteLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/CompleteLattice.html#CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sSup : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sSup : <span class=\"fn\"><span class=\"fn\">sSup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">SupSet.sSup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sInf : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sInf : <span class=\"fn\"><span class=\"fn\">sInf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">InfSet.sInf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteLattice.html#CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L62-L77","name":"DistribLattice.copy","line":62,"kind":"def","docLink":"./Mathlib/Order/Copy.html#DistribLattice.copy","doc":"A function to create a provable equal copy of a distributive lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#DistribLattice.copy\"><span class=\"name\">DistribLattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L41-L55","name":"Lattice.copy","line":41,"kind":"def","docLink":"./Mathlib/Order/Copy.html#Lattice.copy","doc":"A function to create a provable equal copy of a lattice\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#Lattice.copy\"><span class=\"name\">Lattice</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#Lattice\">Lattice</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_le : <span class=\"fn\"><span class=\"fn\">le</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">LE.le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sup : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_sup : <span class=\"fn\"><span class=\"fn\">sup</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Sup.sup</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(inf : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_inf : <span class=\"fn\"><span class=\"fn\">inf</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Inf.inf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#Lattice\">Lattice</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Copy.lean#L29-L34","name":"BoundedOrder.copy","line":29,"kind":"def","docLink":"./Mathlib/Order/Copy.html#BoundedOrder.copy","doc":"A function to create a provable equal copy of a bounded order\nwith possibly different definitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Copy.html#BoundedOrder.copy\"><span class=\"name\">BoundedOrder</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h' : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(top : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_top : <span class=\"fn\"><span class=\"fn\">top</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bot : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq_bot : <span class=\"fn\"><span class=\"fn\">bot</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le_eq : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">α</span></span></div></div>"}]}