{"name":"Mathlib.Testing.SlimCheck.Testable","instances":[{"typeNames":["SlimCheck.TestResult"],"name":"SlimCheck.instInhabitedTestResult","className":"Inhabited"},{"typeNames":["SlimCheck.Configuration"],"name":"SlimCheck.instInhabitedConfiguration","className":"Inhabited"},{"typeNames":["SlimCheck.Configuration"],"name":"SlimCheck.instToExprConfiguration","className":"Lean.ToExpr"},{"typeNames":[],"name":"SlimCheck.instPrintableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["SlimCheck.TestResult"],"name":"SlimCheck.TestResult.instToStringTestResult","className":"ToString"},{"typeNames":["And"],"name":"SlimCheck.Testable.andTestable","className":"SlimCheck.Testable"},{"typeNames":["Or"],"name":"SlimCheck.Testable.orTestable","className":"SlimCheck.Testable"},{"typeNames":["Iff"],"name":"SlimCheck.Testable.iffTestable","className":"SlimCheck.Testable"},{"typeNames":["SlimCheck.NamedBinder"],"name":"SlimCheck.Testable.decGuardTestable","className":"SlimCheck.Testable"},{"typeNames":["SlimCheck.NamedBinder"],"name":"SlimCheck.Testable.forallTypesTestable","className":"SlimCheck.Testable"},{"typeNames":["OptionT"],"name":"SlimCheck.Testable.instInhabitedOptionT","className":"Inhabited"},{"typeNames":["SlimCheck.NamedBinder"],"name":"SlimCheck.Testable.varTestable","className":"SlimCheck.Testable"},{"typeNames":["SlimCheck.NamedBinder"],"name":"SlimCheck.Testable.propVarTestable","className":"SlimCheck.Testable"},{"typeNames":["SlimCheck.NamedBinder"],"name":"SlimCheck.Testable.unusedVarTestable","className":"SlimCheck.Testable"},{"typeNames":["SlimCheck.NamedBinder"],"name":"SlimCheck.Testable.subtypeVarTestable","className":"SlimCheck.Testable"},{"typeNames":[],"name":"SlimCheck.Testable.decidableTestable","className":"SlimCheck.Testable"},{"typeNames":["Eq"],"name":"SlimCheck.Eq.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["Ne"],"name":"SlimCheck.Ne.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["LE.le"],"name":"SlimCheck.LE.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["LT.lt"],"name":"SlimCheck.LT.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["And"],"name":"SlimCheck.And.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["Or"],"name":"SlimCheck.Or.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["Iff"],"name":"SlimCheck.Iff.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":[],"name":"SlimCheck.Imp.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["Not"],"name":"SlimCheck.Not.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["True"],"name":"SlimCheck.True.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["False"],"name":"SlimCheck.False.printableProp","className":"SlimCheck.PrintableProp"},{"typeNames":["Eq"],"name":"SlimCheck.Bool.printableProp","className":"SlimCheck.PrintableProp"}],"imports":["Init","Mathlib.Testing.SlimCheck.Sampleable","Lean"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L566-L566","name":"SlimCheck.«command#test_»","line":566,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.«command#test_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.«command#test_»\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">«command#test_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L552-L557","name":"SlimCheck.Testable.check","line":552,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.check","doc":"Run a test suite for `p` and throw an exception if `p` does not hold. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.check\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>\n  <span class=\"fn\">{ <span class=\"fn\">numInst</span> := <span class=\"fn\">100</span>, <span class=\"fn\">maxSize</span> := <span class=\"fn\">100</span>, <span class=\"fn\">numRetries</span> := <span class=\"fn\">10</span>, <span class=\"fn\">traceDiscarded</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">traceSuccesses</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">traceShrink</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">traceShrinkCandidates</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">randomSeed</span> := <span class=\"fn\">none</span>, <span class=\"fn\">quiet</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> }</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p' : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Decorations.DecorationsOf\">SlimCheck.Decorations.DecorationsOf</a> <span class=\"fn\">p</span></span>)</span> <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#_auto._@.Mathlib.Testing.SlimCheck.Testable._hyg.5460\">_auto✝</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L532-L546","name":"SlimCheck.Decorations.tacticMk_decorations","line":532,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Decorations.tacticMk_decorations","doc":"In a goal of the shape `⊢ DecorationsOf p`, `mk_decoration` examines\nthe syntax of `p` and adds `NamedBinder` around universal quantifications\nto improve error messages. This tool can be used in the declaration of a\nfunction as follows:\n```lean\ndef foo (p : Prop) (p' : Decorations.DecorationsOf p := by mk_decorations) [Testable p'] : ...\n```\n`p` is the parameter given by the user, `p'` is a definitionally equivalent\nproposition where the quantifiers are annotated with `NamedBinder`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Decorations.tacticMk_decorations\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">tacticMk_decorations</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L527-L527","name":"SlimCheck.Decorations.DecorationsOf","line":527,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Decorations.DecorationsOf","doc":"`DecorationsOf p` is used as a hint to `mk_decorations` to specify\nthat the goal should be satisfied with a proposition equivalent to `p`\nwith added annotations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Decorations.DecorationsOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">DecorationsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(_p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L510-L521","name":"SlimCheck.Decorations.addDecorations","line":510,"kind":"opaque","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Decorations.addDecorations","doc":"Traverse the syntax of a proposition to find universal quantifiers\nquantifiers and add `NamedBinder` annotations next to them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Decorations.addDecorations\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">addDecorations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L496-L500","name":"SlimCheck.Testable.checkIO","line":496,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.checkIO","doc":"Run a test suite for `p` in `BaseIO` using the global RNG in `stdGenRef`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.checkIO\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">checkIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>\n  <span class=\"fn\">{ <span class=\"fn\">numInst</span> := <span class=\"fn\">100</span>, <span class=\"fn\">maxSize</span> := <span class=\"fn\">100</span>, <span class=\"fn\">numRetries</span> := <span class=\"fn\">10</span>, <span class=\"fn\">traceDiscarded</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">traceSuccesses</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">traceShrink</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">traceShrinkCandidates</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">randomSeed</span> := <span class=\"fn\">none</span>, <span class=\"fn\">quiet</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L492-L493","name":"SlimCheck.Testable.runSuite","line":492,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.runSuite","doc":"Try to find a counter-example of `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.runSuite\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runSuite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>\n  <span class=\"fn\">{ <span class=\"fn\">numInst</span> := <span class=\"fn\">100</span>, <span class=\"fn\">maxSize</span> := <span class=\"fn\">100</span>, <span class=\"fn\">numRetries</span> := <span class=\"fn\">10</span>, <span class=\"fn\">traceDiscarded</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">traceSuccesses</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">traceShrink</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">traceShrinkCandidates</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">randomSeed</span> := <span class=\"fn\">none</span>, <span class=\"fn\">quiet</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#Rand\">Rand</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L477-L489","name":"SlimCheck.Testable.runSuiteAux","line":477,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.runSuiteAux","doc":"Try `n` times to find a counter-example for `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.runSuiteAux\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runSuiteAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#Rand\">Rand</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L470-L474","name":"SlimCheck.giveUp","line":470,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.giveUp","doc":"Count the number of times the test procedure gave up. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.giveUp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">giveUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L460-L467","name":"SlimCheck.retry","line":460,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.retry","doc":"Execute `cmd` and repeat every time the result is `gave_up` (at most `n` times). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.retry\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">retry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmd : <span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#Rand\">Rand</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#Rand\">Rand</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L451-L452","name":"SlimCheck.Bool.printableProp","line":451,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Bool.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Bool.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Bool</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L448-L449","name":"SlimCheck.False.printableProp","line":448,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.False.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.False.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">False</span>.<span class=\"name\">printableProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L445-L446","name":"SlimCheck.True.printableProp","line":445,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.True.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.True.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">True</span>.<span class=\"name\">printableProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L442-L443","name":"SlimCheck.Not.printableProp","line":442,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Not.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Not.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Not</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L439-L440","name":"SlimCheck.Imp.printableProp","line":439,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Imp.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Imp.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Imp</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> → <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L436-L437","name":"SlimCheck.Iff.printableProp","line":436,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Iff.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Iff.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Iff</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L433-L434","name":"SlimCheck.Or.printableProp","line":433,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Or.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Or.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Or</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L430-L431","name":"SlimCheck.And.printableProp","line":430,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.And.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.And.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">And</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L427-L428","name":"SlimCheck.LT.printableProp","line":427,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.LT.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.LT.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">LT</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L424-L425","name":"SlimCheck.LE.printableProp","line":424,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.LE.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.LE.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">LE</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L421-L422","name":"SlimCheck.Ne.printableProp","line":421,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Ne.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Ne.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Ne</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L418-L419","name":"SlimCheck.Eq.printableProp","line":418,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Eq.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Eq.printableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Eq</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L405-L412","name":"SlimCheck.Testable.decidableTestable","line":405,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.decidableTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.decidableTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">decidableTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L391-L403","name":"SlimCheck.Testable.subtypeVarTestable","line":391,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.subtypeVarTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.subtypeVarTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">subtypeVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var' : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">var'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span>)</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L381-L389","name":"SlimCheck.Testable.unusedVarTestable","line":381,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.unusedVarTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.unusedVarTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">unusedVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L375-L379","name":"SlimCheck.Testable.propVarTestable","line":375,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.propVarTestable","doc":"Test a universal property about propositions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.propVarTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">propVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./foundational_types.html\">Prop</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">p</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L355-L372","name":"SlimCheck.Testable.varTestable","line":355,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.varTestable","doc":"Test a universal property by creating a sample of the right type and instantiating the\nbound variable with it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.varTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">varTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L344-L351","name":"SlimCheck.Testable.minimize","line":344,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.minimize","doc":"Once a property fails to hold on an example, look for smaller counter-examples\nto show the user. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.minimize\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">minimize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interp\">SlimCheck.SampleableExt.interp</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span>) × <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interp\">SlimCheck.SampleableExt.interp</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L322-L340","name":"SlimCheck.Testable.minimizeAux","line":322,"kind":"opaque","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.minimizeAux","doc":"Shrink a counter-example `x` by using `Shrinkable.shrink x`, picking the first\ncandidate that falsifies a property and recursively shrinking that one.\nThe process is guaranteed to terminate because `shrink x` produces\na proof that all the values it produces are smaller (according to `SizeOf`)\nthan `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.minimizeAux\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">minimizeAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt\">SlimCheck.SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a>\n  <span class=\"fn\">(<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.proxy\">SlimCheck.SampleableExt.proxy</a> <span class=\"fn\">α</span></span>) × <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Sampleable.html#SlimCheck.SampleableExt.interp\">SlimCheck.SampleableExt.interp</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L315-L315","name":"SlimCheck.Testable.instInhabitedOptionT","line":315,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.instInhabitedOptionT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.instInhabitedOptionT\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">instInhabitedOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L311-L313","name":"SlimCheck.Testable.addShrinks","line":311,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.addShrinks","doc":"Increase the number of shrinking steps in a test result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.addShrinks\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">addShrinks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L297-L306","name":"SlimCheck.Testable.formatFailure","line":297,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.formatFailure","doc":"Format the counter-examples found in a test failure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.formatFailure\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">formatFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L288-L292","name":"SlimCheck.Testable.forallTypesTestable","line":288,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.forallTypesTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.forallTypesTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">forallTypesTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L274-L286","name":"SlimCheck.Testable.decGuardTestable","line":274,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.decGuardTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.decGuardTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">decGuardTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{var : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span>) → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">h</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\">SlimCheck.NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">h</span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L267-L270","name":"SlimCheck.Testable.iffTestable","line":267,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.iffTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.iffTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">iffTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">q</span></span></span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L255-L265","name":"SlimCheck.Testable.orTestable","line":255,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.orTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.orTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">orTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L249-L253","name":"SlimCheck.Testable.andTestable","line":249,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.andTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.andTestable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">andTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L247-L247","name":"SlimCheck.Testable.slimTrace","line":247,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.slimTrace","doc":"A `dbgTrace` with special formatting "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.slimTrace\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">slimTrace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L244-L244","name":"SlimCheck.Testable.runProp","line":244,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.runProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.runProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L232-L236","name":"SlimCheck.Configuration.verbose","line":232,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.verbose","doc":"A configuration with all the trace options enabled, useful for debugging. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.verbose\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">verbose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L223-L225","name":"SlimCheck.TestResult.isFailure","line":223,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.isFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.isFailure\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">isFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L219-L221","name":"SlimCheck.TestResult.addVarInfo","line":219,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.addVarInfo","doc":"Add some formatting to the information recorded by `addInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.addVarInfo\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">addVarInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(var : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p✝</span> → <span class=\"fn\">q</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L211-L216","name":"SlimCheck.TestResult.addInfo","line":211,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.addInfo","doc":"When we assign a value to a universally quantified variable,\nwe record that value using this function so that our counter-examples\ncan be informative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.addInfo\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">addInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p✝</span> → <span class=\"fn\">q</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L205-L206","name":"SlimCheck.TestResult.iff","line":205,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.iff","doc":"Test `q` by testing `p` and proving the equivalence between the two. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.iff\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L197-L202","name":"SlimCheck.TestResult.imp","line":197,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.imp","doc":"If `q → p`, then `¬ p → ¬ q` which means that testing `p` can allow us\nto find counter-examples to `q`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.imp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p✝</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p✝</span> → <span class=\"fn\">q</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L182-L193","name":"SlimCheck.TestResult.or","line":182,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.or","doc":"Combine the test result for properties `p` and `q` to create a test for their disjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.or\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L173-L179","name":"SlimCheck.TestResult.and","line":173,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.and","doc":"Combine the test result for properties `p` and `q` to create a test for their conjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.and\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L168-L170","name":"SlimCheck.TestResult.combine","line":168,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.combine","doc":"Applicative combinator proof carrying test results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.combine\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">q</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L165-L165","name":"SlimCheck.TestResult.instToStringTestResult","line":165,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.instToStringTestResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.instToStringTestResult\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">instToStringTestResult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L159-L163","name":"SlimCheck.TestResult.toString","line":159,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.toString\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L155-L155","name":"SlimCheck.NamedBinder","line":155,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.NamedBinder\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">NamedBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(_n : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L152-L152","name":"SlimCheck.Testable.run","line":152,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.run\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(minimize : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L151-L151","name":"SlimCheck.Testable.mk","line":151,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable.mk\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(run : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\">SlimCheck.Testable</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L151-L152","name":"SlimCheck.Testable","line":151,"kind":"class","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable","doc":"`Testable p` uses random examples to try to disprove `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Testable\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Testable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L147-L148","name":"SlimCheck.instPrintableProp","line":147,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instPrintableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instPrintableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">instPrintableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L143-L143","name":"SlimCheck.PrintableProp.printProp","line":143,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp.printProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp.printProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">PrintableProp</span>.<span class=\"name\">printProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L142-L142","name":"SlimCheck.PrintableProp.mk","line":142,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp.mk\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">PrintableProp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(printProp : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\">SlimCheck.PrintableProp</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L142-L143","name":"SlimCheck.PrintableProp","line":142,"kind":"class","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp","doc":"`PrintableProp p` allows one to print a proposition so that\n`SlimCheck` can indicate how values relate to each other.\nIt's basically a poor man's delaborator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.PrintableProp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">PrintableProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L132-L135","name":"SlimCheck.elabConfig","line":132,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.elabConfig","doc":"Allow elaboration of `Configuration` arguments to tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.elabConfig\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L125-L130","name":"SlimCheck.instToExprConfiguration","line":125,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instToExprConfiguration","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instToExprConfiguration\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">instToExprConfiguration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L122-L122","name":"SlimCheck.instInhabitedConfiguration","line":122,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instInhabitedConfiguration","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instInhabitedConfiguration\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">instInhabitedConfiguration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L121-L121","name":"SlimCheck.Configuration.quiet","line":121,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.quiet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.quiet\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">quiet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L120-L120","name":"SlimCheck.Configuration.randomSeed","line":120,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.randomSeed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.randomSeed\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">randomSeed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L119-L119","name":"SlimCheck.Configuration.traceShrinkCandidates","line":119,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceShrinkCandidates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceShrinkCandidates\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceShrinkCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L118-L118","name":"SlimCheck.Configuration.traceShrink","line":118,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceShrink","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceShrink\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceShrink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L117-L117","name":"SlimCheck.Configuration.traceSuccesses","line":117,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceSuccesses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceSuccesses\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceSuccesses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L116-L116","name":"SlimCheck.Configuration.traceDiscarded","line":116,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceDiscarded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.traceDiscarded\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceDiscarded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L115-L115","name":"SlimCheck.Configuration.numRetries","line":115,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.numRetries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.numRetries\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">numRetries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L114-L114","name":"SlimCheck.Configuration.maxSize","line":114,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.maxSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.maxSize\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">maxSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L113-L113","name":"SlimCheck.Configuration.numInst","line":113,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.numInst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.numInst\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">numInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L112-L112","name":"SlimCheck.Configuration.mk","line":112,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration.mk\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(numInst : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxSize : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(numRetries : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(traceDiscarded : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(traceSuccesses : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(traceShrink : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(traceShrinkCandidates : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(randomSeed : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(quiet : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\">SlimCheck.Configuration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L112-L122","name":"SlimCheck.Configuration","line":112,"kind":"structure","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration","doc":"Configuration for testing a property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.Configuration\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Configuration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L109-L109","name":"SlimCheck.instInhabitedTestResult","line":109,"kind":"instance","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instInhabitedTestResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.instInhabitedTestResult\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">instInhabitedTestResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Prop</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L108-L108","name":"SlimCheck.TestResult.failure","line":108,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.failure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.failure\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L107-L107","name":"SlimCheck.TestResult.gaveUp","line":107,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.gaveUp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.gaveUp\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">gaveUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L106-L106","name":"SlimCheck.TestResult.success","line":106,"kind":"ctor","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.success","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult.success\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">success</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\">SlimCheck.TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Testable.lean#L105-L109","name":"SlimCheck.TestResult","line":105,"kind":"inductive","docLink":"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult","doc":"Result of trying to disprove `p`\nThe constructors are:\n* `success : (PSum Unit p) → TestResult p`\n  succeed when we find another example satisfying `p`\n  In `success h`, `h` is an optional proof of the proposition.\n  Without the proof, all we know is that we found one example\n  where `p` holds. With a proof, the one test was sufficient to\n  prove that `p` holds and we do not need to keep finding examples.\n* `gaveUp : ℕ → TestResult p`\n  give up when a well-formed example cannot be generated.\n  `gaveUp n` tells us that `n` invalid examples were tried.\n  Above 100, we give up on the proposition and report that we\n  did not find a way to properly test it.\n* `failure : ¬ p → (List String) → ℕ → TestResult p`\n  a counter-example to `p`; the strings specify values for the relevant variables.\n  `failure h vs n` also carries a proof that `p` does not hold. This way, we can\n  guarantee that there will be no false positive. The last component, `n`,\n  is the number of times that the counter-example was shrunk.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Testable.html#SlimCheck.TestResult\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">TestResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}