{"name":"Mathlib.Testing.SlimCheck.Gen","instances":[],"imports":["Init","Mathlib.Control.Random"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L116-L118","name":"SlimCheck.Gen.run","line":116,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.run","doc":"Execute a `Gen` inside the `IO` monad using `size` as the example size"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.run\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(size : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L108-L111","name":"SlimCheck.Gen.prodOf","line":108,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.prodOf","doc":"Given two generators produces a tuple consisting out of the result of both "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.prodOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">prodOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L100-L105","name":"SlimCheck.Gen.permutationOf","line":100,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.permutationOf","doc":"Generate a random permutation of a given list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.permutationOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">permutationOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">{ <span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> // <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Perm\">List.Perm</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L94-L96","name":"SlimCheck.Gen.elements","line":94,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.elements","doc":"Given a list of examples, choose one to create an example. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.elements\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">elements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">xs</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L89-L91","name":"SlimCheck.Gen.oneOf","line":89,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.oneOf","doc":"Given a list of example generators, choose one to create an example. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.oneOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">oneOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\">xs</span></span></span>)</span> <a href=\"./Mathlib/Testing/SlimCheck/Gen.html#_auto._@.Mathlib.Testing.SlimCheck.Gen._hyg.513\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L85-L86","name":"SlimCheck.Gen.listOf","line":85,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.listOf","doc":"Create a `List` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.listOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">listOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L76-L81","name":"SlimCheck.Gen.arrayOf","line":76,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.arrayOf","doc":"Create an `Array` of examples using `x`. The size is controlled\nby the size parameter of `Gen`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.arrayOf\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">arrayOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L69-L70","name":"SlimCheck.Gen.resize","line":69,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.resize","doc":"Apply a function to the size parameter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.resize\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">resize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L65-L66","name":"SlimCheck.Gen.getSize","line":65,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.getSize","doc":"Get access to the size parameter of the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.getSize\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">getSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L61-L62","name":"SlimCheck.Gen.chooseNatLt","line":61,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt","doc":"Generate a `Nat` example between `x` and `y` (exclusively). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNatLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L52-L58","name":"SlimCheck.Gen.chooseNatLt_aux","line":52,"kind":"theorem","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseNatLt_aux\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseNatLt_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lo : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hi : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.pred\">Nat.pred</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.pred\">Nat.pred</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L48-L50","name":"SlimCheck.Gen.choose","line":48,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.choose","doc":"Lift `BoundedRandom.randomR` to the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.choose\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">choose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#BoundedRandom\">BoundedRandom</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lo : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">{ <span class=\"fn\">a</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L44-L45","name":"SlimCheck.Gen.chooseAny","line":44,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseAny","doc":"Lift `Random.random` to the `Gen` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen.chooseAny\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span>.<span class=\"name\">chooseAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Random.html#Random\">Random</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\">SlimCheck.Gen</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Testing/SlimCheck/Gen.lean#L39-L39","name":"SlimCheck.Gen","line":39,"kind":"def","docLink":"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen","doc":"Monad to generate random examples to test properties with.\nIt has a `Nat` parameter so that the caller can decide on the\nsize of the examples. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Testing/SlimCheck/Gen.html#SlimCheck.Gen\"><span class=\"name\">SlimCheck</span>.<span class=\"name\">Gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}