{"name":"Std.Tactic.Omega.IntList","instances":[{"typeNames":["IntList"],"name":"IntList.instAddIntList","className":"Add"},{"typeNames":["IntList"],"name":"IntList.instMulIntList","className":"Mul"},{"typeNames":["IntList"],"name":"IntList.instNegIntList","className":"Neg"},{"typeNames":["IntList"],"name":"IntList.instSubIntList","className":"Sub"},{"typeNames":["Int","IntList","IntList"],"name":"IntList.instHMulIntIntList","className":"HMul"}],"imports":["Init","Std.Data.List.Lemmas","Std.Data.Nat.Gcd","Std.Data.Int.DivMod","Std.Tactic.Replace"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L543-L561","name":"IntList.dvd_bmod_dot_sub_dot_bmod","line":543,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dvd_bmod_dot_sub_dot_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dvd_bmod_dot_sub_dot_bmod\"><span class=\"name\">IntList</span>.<span class=\"name\">dvd_bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod_dot_sub_dot_bmod\">IntList.bmod_dot_sub_dot_bmod</a> <span class=\"fn\">m</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L540-L541","name":"IntList.bmod_dot_sub_dot_bmod","line":540,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.bmod_dot_sub_dot_bmod","doc":"The difference between the balanced mod of a dot product,\nand the dot product with balanced mod applied to each entry of the left factor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod_dot_sub_dot_bmod\"><span class=\"name\">IntList</span>.<span class=\"name\">bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L533-L534","name":"IntList.bmod_length","line":533,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.bmod_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod_length\"><span class=\"name\">IntList</span>.<span class=\"name\">bmod_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod\">IntList.bmod</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L531-L531","name":"IntList.bmod","line":531,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.bmod","doc":"Apply \"balanced mod\" to each entry in an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.bmod\"><span class=\"name\">IntList</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L520-L528","name":"IntList.trim_neg","line":520,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim_neg\"><span class=\"name\">IntList</span>.<span class=\"name\">trim_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\">IntList.trim</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\">IntList.trim</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L517-L518","name":"IntList.trim_append_zero","line":517,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim_append_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim_append_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">trim_append_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\">IntList.trim</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">0</span>]</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\">IntList.trim</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L515-L515","name":"IntList.trim_nil","line":515,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">trim_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\">IntList.trim</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L507-L513","name":"IntList.trim_spec","line":507,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim_spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim_spec\"><span class=\"name\">IntList</span>.<span class=\"name\">trim_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\">IntList.trim</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">0</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">xs</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L505-L505","name":"IntList.trim?_eq_some","line":505,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim?_eq_some\"><span class=\"name\">IntList</span>.<span class=\"name\">trim?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim?\">IntList.trim?</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\">IntList.trim</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L503-L503","name":"IntList.trim","line":503,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim","doc":"Trailing trailing zeroes from a `List Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim\"><span class=\"name\">IntList</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L491-L500","name":"IntList.trim?_isSome","line":491,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim?_isSome","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim?_isSome\"><span class=\"name\">IntList</span>.<span class=\"name\">trim?_isSome</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.isSome\">Option.isSome</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.trim?\">IntList.trim?</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.getLast?\">List.getLast?</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">0</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L485-L489","name":"IntList.trim?","line":485,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.trim?","doc":"Trim trailing zeroes from a `List Int`, returning `none` if none were removed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.trim?\"><span class=\"name\">IntList</span>.<span class=\"name\">trim?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L469-L476","name":"IntList.leadingSign_neg","line":469,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_neg\"><span class=\"name\">IntList</span>.<span class=\"name\">leadingSign_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\">IntList.leadingSign</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\">IntList.leadingSign</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L461-L467","name":"IntList.leadingSign_cons","line":461,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">leadingSign_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\">IntList.leadingSign</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\">IntList.leadingSign</a> <span class=\"fn\">xs</span></span> else <span class=\"fn\"><a href=\"./Std/Data/Int/Basic.html#Int.sign\">Int.sign</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L460-L460","name":"IntList.leadingSign_cons_zero","line":460,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_cons_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">leadingSign_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\">IntList.leadingSign</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\">IntList.leadingSign</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L459-L459","name":"IntList.leadingSign_nil","line":459,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">leadingSign_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\">IntList.leadingSign</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L453-L457","name":"IntList.leadingSign","line":453,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.leadingSign","doc":"The leading sign in an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.leadingSign\"><span class=\"name\">IntList</span>.<span class=\"name\">leadingSign</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L448-L450","name":"IntList.dot_sdiv_gcd_left","line":448,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_sdiv_gcd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_sdiv_gcd_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_sdiv_gcd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L435-L446","name":"IntList.dot_sdiv_left","line":435,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_sdiv_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_sdiv_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_sdiv_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{d : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">d</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L431-L433","name":"IntList.dot_eq_zero_of_gcd_left_eq_zero","line":431,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_eq_zero_of_gcd_left_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_eq_zero_of_gcd_left_eq_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_eq_zero_of_gcd_left_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L421-L429","name":"IntList.dot_eq_zero_of_left_eq_zero","line":421,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_eq_zero_of_left_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_eq_zero_of_left_eq_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_eq_zero_of_left_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L417-L418","name":"IntList.gcd_dvd_dot_left","line":417,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd_dot_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd_dot_left\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd_dot_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L405-L415","name":"IntList.dot_mod_gcd_left","line":405,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_mod_gcd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_mod_gcd_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_mod_gcd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L402-L403","name":"IntList.gcd_eq_zero","line":402,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L386-L398","name":"IntList.gcd_eq_iff","line":386,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_eq_iff\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">g</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L371-L384","name":"IntList.dvd_gcd","line":371,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dvd_gcd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dvd_gcd\"><span class=\"name\">IntList</span>.<span class=\"name\">dvd_gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L361-L369","name":"IntList.gcd_dvd","line":361,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_dvd\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L357-L359","name":"IntList.gcd_cons_div_right'","line":357,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right'\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L353-L355","name":"IntList.gcd_cons_div_right","line":353,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_right\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L349-L351","name":"IntList.gcd_cons_div_left","line":349,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons_div_left\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span>)</span></span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L347-L347","name":"IntList.gcd_cons","line":347,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">xs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L346-L346","name":"IntList.gcd_nil","line":346,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\">IntList.gcd</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L344-L344","name":"IntList.gcd","line":344,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.gcd","doc":"The gcd of the absolute values of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.gcd\"><span class=\"name\">IntList</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L340-L341","name":"IntList.mem_sdiv","line":340,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mem_sdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mem_sdiv\"><span class=\"name\">IntList</span>.<span class=\"name\">mem_sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L336-L338","name":"IntList.sdiv_get","line":336,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sdiv_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv_get\"><span class=\"name\">IntList</span>.<span class=\"name\">sdiv_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L334-L334","name":"IntList.sdiv_cons","line":334,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sdiv_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">sdiv_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L333-L333","name":"IntList.sdiv_nil","line":333,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sdiv_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">sdiv_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\">IntList.sdiv</a> <span class=\"fn\">[]</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L331-L331","name":"IntList.sdiv","line":331,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sdiv","doc":"Division of an `IntList` by a integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sdiv\"><span class=\"name\">IntList</span>.<span class=\"name\">sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L311-L328","name":"IntList.dvd_dot_of_dvd_left","line":311,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dvd_dot_of_dvd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dvd_dot_of_dvd_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dvd_dot_of_dvd_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Std/Classes/Dvd.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L298-L309","name":"IntList.dot_of_left_zero","line":298,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_of_left_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_of_left_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_of_left_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L295-L296","name":"IntList.dot_sub_left","line":295,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_sub_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_sub_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_sub_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">ys</span> <span class=\"fn\">zs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L292-L293","name":"IntList.dot_smul_left","line":292,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_smul_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_smul_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L289-L290","name":"IntList.dot_neg_left","line":289,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_neg_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L286-L287","name":"IntList.dot_distrib_left","line":286,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_distrib_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">ys</span> <span class=\"fn\">zs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L282-L284","name":"IntList.dot_set_right","line":282,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_set_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_set_right\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_set_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L262-L280","name":"IntList.dot_set_left","line":262,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_set_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_set_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_set_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">z</span></span>)</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L259-L260","name":"IntList.dot_comm","line":259,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_comm\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">ys</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L257-L257","name":"IntList.dot_cons₂","line":257,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_cons₂\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L256-L256","name":"IntList.dot_nil_right","line":256,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_right\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L255-L255","name":"IntList.dot_nil_left","line":255,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot_nil_left\"><span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\">IntList.dot</a> <span class=\"fn\">[]</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L250-L250","name":"IntList.dot","line":250,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.dot","doc":"The dot product of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.dot\"><span class=\"name\">IntList</span>.<span class=\"name\">dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L244-L247","name":"IntList.sum_smul","line":244,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_smul\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L238-L241","name":"IntList.sum_neg","line":238,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_neg\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L229-L235","name":"IntList.sum_add","line":229,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_add\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L226-L226","name":"IntList.sum_cons","line":226,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L225-L225","name":"IntList.sum_nil","line":225,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">sum_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\">IntList.sum</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L223-L223","name":"IntList.sum","line":223,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sum","doc":"The sum of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sum\"><span class=\"name\">IntList</span>.<span class=\"name\">sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L214-L220","name":"IntList.mul_smul_left","line":214,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_smul_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L211-L212","name":"IntList.sub_get","line":211,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sub_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sub_get\"><span class=\"name\">IntList</span>.<span class=\"name\">sub_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L203-L209","name":"IntList.sub_eq_add_neg","line":203,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sub_eq_add_neg\"><span class=\"name\">IntList</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L194-L200","name":"IntList.mul_neg_left","line":194,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_neg_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L177-L192","name":"IntList.mul_distrib_left","line":177,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_distrib_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L173-L174","name":"IntList.neg_neg","line":173,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_neg\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L168-L171","name":"IntList.mul_comm","line":168,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_comm\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L158-L166","name":"IntList.combo_eq_smul_add_smul","line":158,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.combo_eq_smul_add_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.combo_eq_smul_add_smul\"><span class=\"name\">IntList</span>.<span class=\"name\">combo_eq_smul_add_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.combo\">IntList.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">b</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L153-L156","name":"IntList.combo_get","line":153,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.combo_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.combo_get\"><span class=\"name\">IntList</span>.<span class=\"name\">combo_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.combo\">IntList.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">b</span> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L149-L151","name":"IntList.combo_def","line":149,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.combo_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.combo_def\"><span class=\"name\">IntList</span>.<span class=\"name\">combo_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.combo\">IntList.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">b</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">x</span> <span class=\"fn\">0</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span></span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L146-L147","name":"IntList.combo","line":146,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.combo","doc":"A linear combination of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.combo\"><span class=\"name\">IntList</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L143-L143","name":"IntList.smul_cons","line":143,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L142-L142","name":"IntList.smul_nil","line":142,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L138-L140","name":"IntList.smul_get","line":138,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_get\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L136-L136","name":"IntList.smul_def","line":136,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul_def\"><span class=\"name\">IntList</span>.<span class=\"name\">smul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L133-L134","name":"IntList.instHMulIntIntList","line":133,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instHMulIntIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instHMulIntIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instHMulIntIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMul\">HMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L130-L131","name":"IntList.smul","line":130,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.smul","doc":"Implementation of scalar multiplication by an integer on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.smul\"><span class=\"name\">IntList</span>.<span class=\"name\">smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L125-L127","name":"IntList.sub_def","line":125,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sub_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sub_def\"><span class=\"name\">IntList</span>.<span class=\"name\">sub_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L123-L123","name":"IntList.instSubIntList","line":123,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instSubIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instSubIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instSubIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L120-L121","name":"IntList.sub","line":120,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.sub","doc":"Implementation of subtraction on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.sub\"><span class=\"name\">IntList</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L117-L117","name":"IntList.neg_cons","line":117,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L116-L116","name":"IntList.neg_nil","line":116,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L112-L114","name":"IntList.neg_get","line":112,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_get\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L110-L110","name":"IntList.neg_def","line":110,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg_def\"><span class=\"name\">IntList</span>.<span class=\"name\">neg_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L108-L108","name":"IntList.instNegIntList","line":108,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instNegIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instNegIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instNegIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L106-L106","name":"IntList.neg","line":106,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.neg","doc":"Implementation of negation on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.neg\"><span class=\"name\">IntList</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L103-L103","name":"IntList.mul_cons₂","line":103,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_cons₂\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L102-L102","name":"IntList.mul_nil_right","line":102,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_right\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L101-L101","name":"IntList.mul_nil_left","line":101,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_nil_left\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L97-L99","name":"IntList.mul_get","line":97,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_get\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L94-L95","name":"IntList.mul_def","line":94,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul_def\"><span class=\"name\">IntList</span>.<span class=\"name\">mul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L92-L92","name":"IntList.instMulIntList","line":92,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instMulIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instMulIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instMulIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L90-L90","name":"IntList.mul","line":90,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.mul","doc":"Implementation of `*` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.mul\"><span class=\"name\">IntList</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L86-L87","name":"IntList.cons_add_cons","line":86,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.cons_add_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.cons_add_cons\"><span class=\"name\">IntList</span>.<span class=\"name\">cons_add_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L85-L85","name":"IntList.nil_add","line":85,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.nil_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.nil_add\"><span class=\"name\">IntList</span>.<span class=\"name\">nil_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L84-L84","name":"IntList.add_nil","line":84,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">add_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L80-L82","name":"IntList.add_get","line":80,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add_get\"><span class=\"name\">IntList</span>.<span class=\"name\">add_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">ys</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L76-L78","name":"IntList.add_def","line":76,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add_def\"><span class=\"name\">IntList</span>.<span class=\"name\">add_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">x</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span></span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L74-L74","name":"IntList.instAddIntList","line":74,"kind":"instance","docLink":"./Std/Tactic/Omega/IntList.html#IntList.instAddIntList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.instAddIntList\"><span class=\"name\">IntList</span>.<span class=\"name\">instAddIntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L71-L72","name":"IntList.add","line":71,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.add","doc":"Implementation of `+` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.add\"><span class=\"name\">IntList</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L68-L68","name":"IntList.leading","line":68,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.leading","doc":"Returns the leading coefficient, i.e. the first non-zero entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.leading\"><span class=\"name\">IntList</span>.<span class=\"name\">leading</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L65-L65","name":"IntList.set_get_of_ne","line":65,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_get_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_get_of_ne\"><span class=\"name\">IntList</span>.<span class=\"name\">set_get_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L64-L64","name":"IntList.set_get_self","line":64,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_get_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_get_self\"><span class=\"name\">IntList</span>.<span class=\"name\">set_get_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L53-L62","name":"IntList.set_get_eq","line":53,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_get_eq\"><span class=\"name\">IntList</span>.<span class=\"name\">set_get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span> then <span class=\"fn\">y</span> else <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L51-L51","name":"IntList.set_cons_succ","line":51,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_cons_succ\"><span class=\"name\">IntList</span>.<span class=\"name\">set_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L50-L50","name":"IntList.set_cons_zero","line":50,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_cons_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">set_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L49-L49","name":"IntList.set_nil_succ","line":49,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_nil_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_nil_succ\"><span class=\"name\">IntList</span>.<span class=\"name\">set_nil_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">[]</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L48-L48","name":"IntList.set_nil_zero","line":48,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set_nil_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set_nil_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">set_nil_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.set\">IntList.set</a> <span class=\"fn\">[]</span> <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">y</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L41-L46","name":"IntList.set","line":41,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.set","doc":"Like `List.set`, but right-pad with zeroes as necessary first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.set\"><span class=\"name\">IntList</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L36-L38","name":"IntList.lt_length_of_get_nonzero","line":36,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.lt_length_of_get_nonzero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.lt_length_of_get_nonzero\"><span class=\"name\">IntList</span>.<span class=\"name\">lt_length_of_get_nonzero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L32-L34","name":"IntList.get_of_length_le","line":32,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_of_length_le\"><span class=\"name\">IntList</span>.<span class=\"name\">get_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L28-L30","name":"IntList.get_map","line":28,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_map\"><span class=\"name\">IntList</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L26-L26","name":"IntList.get_cons_succ","line":26,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_cons_succ\"><span class=\"name\">IntList</span>.<span class=\"name\">get_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L25-L25","name":"IntList.get_cons_zero","line":25,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_cons_zero\"><span class=\"name\">IntList</span>.<span class=\"name\">get_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L24-L24","name":"IntList.get_nil","line":24,"kind":"theorem","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get_nil\"><span class=\"name\">IntList</span>.<span class=\"name\">get_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/IntList.html#IntList.get\">IntList.get</a> <span class=\"fn\">[]</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L22-L22","name":"IntList.get","line":22,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList.get","doc":"Get the `i`-th element (interpreted as `0` if the list is not long enough). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList.get\"><span class=\"name\">IntList</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <a href=\"./Std/Tactic/Omega/IntList.html#IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/IntList.lean#L17-L17","name":"IntList","line":17,"kind":"def","docLink":"./Std/Tactic/Omega/IntList.html#IntList","doc":"A type synonym for `List Int`, used by `omega` for dense representation of coefficients.\n\nWe define algebraic operations,\ninterpreting `List Int` as a finitely supported function `Nat → Int`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/IntList.html#IntList\"><span class=\"name\">IntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}