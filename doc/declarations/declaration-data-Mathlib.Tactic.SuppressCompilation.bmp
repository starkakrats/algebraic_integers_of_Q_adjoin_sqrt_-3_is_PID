{"name":"Mathlib.Tactic.SuppressCompilation","instances":[],"imports":["Init","Lean.Elab.Declaration","Lean.Elab.Notation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/SuppressCompilation.lean#L72-L80","name":"commandSuppress_compilation","line":72,"kind":"def","docLink":"./Mathlib/Tactic/SuppressCompilation.html#commandSuppress_compilation","doc":"Replacing `def` and `instance` by `noncomputable def` and `noncomputable instance`, designed\nto disable the compiler in a given file or a given section.\nThis is a hack to work around mathlib4#7103.\nNote that it does not work with `notation3`. You need to prefix such a notation declaration with\n`unsuppress_compilation` if `suppress_compilation` is active. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SuppressCompilation.html#commandSuppress_compilation\"><span class=\"name\">commandSuppress_compilation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/SuppressCompilation.lean#L59-L65","name":"expandSuppressCompilationNotation","line":59,"kind":"def","docLink":"./Mathlib/Tactic/SuppressCompilation.html#expandSuppressCompilationNotation","doc":"Make sure that notations are compiled, even if `suppress_compilation` is active, by prepending\nthem with `unsuppress_compilation`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SuppressCompilation.html#expandSuppressCompilationNotation\"><span class=\"name\">expandSuppressCompilationNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Lean.Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/SuppressCompilation.lean#L53-L55","name":"commandUnsuppress_compilationIn_","line":53,"kind":"def","docLink":"./Mathlib/Tactic/SuppressCompilation.html#commandUnsuppress_compilationIn_","doc":"The command `unsuppress_compilation in def foo : ...` makes sure that the definition is\ncompiled to executable code, even if `suppress_compilation` is active. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SuppressCompilation.html#commandUnsuppress_compilationIn_\"><span class=\"name\">commandUnsuppress_compilationIn_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/SuppressCompilation.lean#L30-L51","name":"elabSuppressCompilationDecl","line":30,"kind":"def","docLink":"./Mathlib/Tactic/SuppressCompilation.html#elabSuppressCompilationDecl","doc":"Replacing `def` and `instance` by `noncomputable def` and `noncomputable instance`, designed\nto disable the compiler in a given file or a given section.\nThis is a hack to work around mathlib4#7103. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SuppressCompilation.html#elabSuppressCompilationDecl\"><span class=\"name\">elabSuppressCompilationDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"}]}