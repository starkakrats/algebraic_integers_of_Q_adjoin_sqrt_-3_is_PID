{"name":"Mathlib.ModelTheory.Encoding","instances":[{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.instEncodableTerm","className":"Encodable"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.instCountableTerm","className":"Countable"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.small","className":"Small"}],"imports":["Init","Mathlib.Computability.Encoding","Mathlib.Logic.Small.List","Mathlib.ModelTheory.Syntax","Mathlib.SetTheory.Cardinal.Ordinal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L311-L320","name":"FirstOrder.Language.BoundedFormula.card_le","line":311,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.card_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.card_le\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">card_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.lift\">Cardinal.lift.{max u v, u'}</a>          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.lift\">Cardinal.lift.{u', max u v}</a>          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.card\">FirstOrder.Language.card</a> <span class=\"fn\">L</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L306-L308","name":"FirstOrder.Language.BoundedFormula.listEncode_sigma_injective","line":306,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode_sigma_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode_sigma_injective\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listEncode_sigma_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">φ</span> : <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">FirstOrder.Language.BoundedFormula.listEncode</a> <span class=\"fn\"><span class=\"fn\">φ</span>.snd</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L294-L303","name":"FirstOrder.Language.BoundedFormula.encoding","line":294,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding","doc":"An encoding of bounded formulas as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L293-L293","name":"FirstOrder.Language.BoundedFormula.encoding_decode","line":293,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_decode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">FirstOrder.Language.Relations</a> <span class=\"fn\">L</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\">Computability.Encoding.decode</a> <span class=\"fn\">FirstOrder.Language.BoundedFormula.encoding</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\">FirstOrder.Language.BoundedFormula.listDecode</a> <span class=\"fn\">l</span></span>)</span>.1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L293-L293","name":"FirstOrder.Language.BoundedFormula.encoding_Γ","line":293,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_Γ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_Γ\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.BoundedFormula.encoding</span>.Γ</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">FirstOrder.Language.Relations</a> <span class=\"fn\">L</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L293-L293","name":"FirstOrder.Language.BoundedFormula.encoding_encode","line":293,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_encode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\">Computability.Encoding.encode</a> <span class=\"fn\">FirstOrder.Language.BoundedFormula.encoding</span> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">FirstOrder.Language.BoundedFormula.listEncode</a> <span class=\"fn\"><span class=\"fn\">φ</span>.snd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L237-L289","name":"FirstOrder.Language.BoundedFormula.listDecode_encode_list","line":237,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode_encode_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode_encode_list\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listDecode_encode_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\">FirstOrder.Language.BoundedFormula.listDecode</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.bind\">List.bind</a> <span class=\"fn\">l</span> <span class=\"fn\">fun (<span class=\"fn\">φ</span> : <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">FirstOrder.Language.BoundedFormula.listEncode</a> <span class=\"fn\"><span class=\"fn\">φ</span>.snd</span></span></span></span>)</span></span>)</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Init/Data/List/Basic.html#List.headI\">List.headI</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L201-L233","name":"FirstOrder.Language.BoundedFormula.listDecode","line":201,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode","doc":"Decodes a list of symbols as a list of formulas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listDecode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">FirstOrder.Language.Relations</a> <span class=\"fn\">L</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a>   <span class=\"fn\">{ <span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">FirstOrder.Language.Relations</a> <span class=\"fn\">L</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span> //\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">l</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L195-L196","name":"FirstOrder.Language.BoundedFormula.sigmaImp","line":195,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp","doc":"Applies `imp` to two elements of `(Σ n, L.BoundedFormula α n)`,\nor returns `default` if not possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> →\n  <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L188-L190","name":"FirstOrder.Language.BoundedFormula.sigmaAll","line":188,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll","doc":"Applies the `forall` quantifier to an element of `(Σ n, L.BoundedFormula α n)`,\nor returns `default` if not possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L176-L183","name":"FirstOrder.Language.BoundedFormula.listEncode","line":176,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode","doc":"Encodes a bounded formula as a list of symbols. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listEncode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">FirstOrder.Language.BoundedFormula</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span></span>)</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">FirstOrder.Language.Relations</a> <span class=\"fn\">L</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L167-L168","name":"FirstOrder.Language.Term.small","line":167,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.small","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.small\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u'}</a>     <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, max u u'}</a>           <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L162-L165","name":"FirstOrder.Language.Term.instCountableTerm","line":162,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instCountableTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instCountableTerm\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">instCountableTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h1 : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h2 : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\">(l : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">l</span></span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L156-L160","name":"FirstOrder.Language.Term.instEncodableTerm","line":156,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instEncodableTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instEncodableTerm\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">instEncodableTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">(<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L124-L153","name":"FirstOrder.Language.Term.card_sigma","line":124,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_sigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_sigma\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">card_sigma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span>)</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L120-L121","name":"FirstOrder.Language.Term.card_le","line":120,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_le\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">card_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L115-L117","name":"FirstOrder.Language.Term.listEncode_injective","line":115,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode_injective\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listEncode_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FirstOrder.Language.Term.listEncode</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L105-L112","name":"FirstOrder.Language.Term.encoding","line":105,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding","doc":"An encoding of terms as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L104-L104","name":"FirstOrder.Language.Term.encoding_encode","line":104,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_encode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\">Computability.Encoding.encode</a> <span class=\"fn\">FirstOrder.Language.Term.encoding</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\">FirstOrder.Language.Term.listEncode</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L104-L104","name":"FirstOrder.Language.Term.encoding_decode","line":104,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_decode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\">Computability.Encoding.decode</a> <span class=\"fn\">FirstOrder.Language.Term.encoding</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/Option/Basic.html#Option.join\">Option.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head?\">List.head?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\">FirstOrder.Language.Term.listDecode</a> <span class=\"fn\">l</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L104-L104","name":"FirstOrder.Language.Term.encoding_Γ","line":104,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_Γ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_Γ\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FirstOrder.Language.Term.encoding</span>.Γ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L69-L100","name":"FirstOrder.Language.Term.listDecode_encode_list","line":69,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode_encode_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode_encode_list\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listDecode_encode_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\">FirstOrder.Language.Term.listDecode</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.bind\">List.bind</a> <span class=\"fn\">l</span> <span class=\"fn\">FirstOrder.Language.Term.listEncode</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">some</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L60-L66","name":"FirstOrder.Language.Term.listDecode","line":60,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode","doc":"Decodes a list of variables and function symbols as a list of terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listDecode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/ModelTheory/Encoding.lean#L53-L56","name":"FirstOrder.Language.Term.listEncode","line":53,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode","doc":"Encodes a term as a list of variables and function symbols. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listEncode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">FirstOrder.Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">FirstOrder.Language.Term</a> <span class=\"fn\">L</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">FirstOrder.Language.Functions</a> <span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span></span></div></div>"}]}