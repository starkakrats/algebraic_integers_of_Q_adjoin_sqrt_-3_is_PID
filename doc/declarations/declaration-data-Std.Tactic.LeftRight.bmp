{"name":"Std.Tactic.LeftRight","instances":[],"imports":["Init","Lean.Elab.Tactic.Basic","Lean.Meta.Tactic.Apply"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LeftRight.lean#L45-L54","name":"Std.Tactic.tacticRight","line":45,"kind":"def","docLink":"./Std/Tactic/LeftRight.html#Std.Tactic.tacticRight","doc":"Apply the second constructor,\nin the case that the goal is an inductive type with exactly two constructors.\n```\nexample {p q : Prop} (h : q) : p ∨ q := by\n  right\n  exact h\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LeftRight.html#Std.Tactic.tacticRight\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LeftRight.lean#L34-L43","name":"Std.Tactic.tacticLeft","line":34,"kind":"def","docLink":"./Std/Tactic/LeftRight.html#Std.Tactic.tacticLeft","doc":"Apply the first constructor,\nin the case that the goal is an inductive type with exactly two constructors.\n```\nexample : True ∨ False := by\n  left\n  trivial\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LeftRight.html#Std.Tactic.tacticLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LeftRight.lean#L18-L28","name":"Std.Tactic.NthConstructor.nthConstructor","line":18,"kind":"def","docLink":"./Std/Tactic/LeftRight.html#Std.Tactic.NthConstructor.nthConstructor","doc":"Apply the `n`-th constructor of the target type,\nchecking that it is an inductive type,\nand that there are the expected number of constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LeftRight.html#Std.Tactic.NthConstructor.nthConstructor\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NthConstructor</span>.<span class=\"name\">nthConstructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(idx : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(max : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"}]}