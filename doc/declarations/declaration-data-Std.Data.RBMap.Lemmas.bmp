{"name":"Std.Data.RBMap.Lemmas","instances":[{"typeNames":["Std.RBNode.Ordered"],"name":"Std.RBNode.instDecidableOrdered","className":"Decidable"},{"typeNames":[],"name":"Std.RBNode.instIsStrictCut","className":"Std.RBNode.IsStrictCut"},{"typeNames":["Membership.mem"],"name":"Std.RBSet.instDecidableMemRBSetInstMembershipRBSet","className":"Decidable"}],"imports":["Init","Std.Data.RBMap.Alter","Std.Data.Nat.Lemmas","Std.Data.List.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L736-L738","name":"Std.RBSet.find?_insert","line":736,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v' : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v'</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> else <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">v'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L728-L734","name":"Std.RBSet.find?_insert_of_ne","line":728,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert_of_ne\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_insert_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v'</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">v'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L724-L726","name":"Std.RBSet.find?_insert_of_eq","line":724,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_insert_of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_insert_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v'</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L721-L722","name":"Std.RBSet.find?_congr","line":721,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_congr\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v₁</span> <span class=\"fn\">v₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">v₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">v₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L713-L719","name":"Std.RBSet.mem_insert","line":713,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L708-L711","name":"Std.RBSet.mem_toList_insert","line":708,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v'</span></span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L704-L706","name":"Std.RBSet.mem_insert_of_mem","line":704,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L698-L702","name":"Std.RBSet.mem_insert_of_mem_toList","line":698,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_of_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L693-L696","name":"Std.RBSet.mem_toList_insert_of_mem","line":693,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L690-L691","name":"Std.RBSet.mem_insert_of_eq","line":690,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L687-L688","name":"Std.RBSet.mem_insert_self","line":687,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L684-L685","name":"Std.RBSet.mem_toList_insert_self","line":684,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.insert\">Std.RBSet.insert</a> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L682-L682","name":"Std.RBSet.size_eq","line":682,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.size_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.size\">Std.RBSet.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L680-L680","name":"Std.RBSet.instDecidableMemRBSetInstMembershipRBSet","line":680,"kind":"instance","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.instDecidableMemRBSetInstMembershipRBSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.instDecidableMemRBSetInstMembershipRBSet\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instDecidableMemRBSetInstMembershipRBSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L677-L678","name":"Std.RBSet.contains_iff","line":677,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.contains_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.contains_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">contains_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.contains\">Std.RBSet.contains</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L674-L675","name":"Std.RBSet.mem_iff_find?","line":674,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_iff_find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_iff_find?\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_iff_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L670-L672","name":"Std.RBSet.find?_some","line":670,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L666-L668","name":"Std.RBSet.mem_toList_unique","line":666,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList_unique\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L663-L664","name":"Std.RBSet.find?_some_mem","line":663,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L660-L661","name":"Std.RBSet.find?_some_mem_toList","line":660,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L657-L658","name":"Std.RBSet.find?_some_eq_eq","line":657,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.find?_some_eq_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.find?\">Std.RBSet.find?</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L654-L655","name":"Std.RBSet.toList_sorted","line":654,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toList_sorted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toList_sorted\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toList_sorted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L651-L652","name":"Std.RBSet.toStream_toList","line":651,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toStream_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toStream_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toStream_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream.toStream\">toStream</a> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L649-L649","name":"Std.RBSet.toStream_eq","line":649,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toStream_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.toStream_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toStream_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#ToStream.toStream\">toStream</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toStream\">Std.RBNode.toStream</a> <span class=\"fn\"><span class=\"fn\">t</span>.val</span> <span class=\"fn\">Std.RBNode.Stream.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L646-L647","name":"Std.RBSet.forIn_eq_forIn_toList","line":646,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.forIn_eq_forIn_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.forIn_eq_forIn_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α_1</span></span>)</span></span></span></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]\n  {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L643-L644","name":"Std.RBSet.foldlM_eq_foldlM_toList","line":643,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldlM_eq_foldlM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldlM_eq_foldlM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldlM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">a</span></span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">a</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>] {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.foldlM\">Std.RBSet.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L640-L641","name":"Std.RBSet.foldr_eq_foldr_toList","line":640,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldr_eq_foldr_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldr_eq_foldr_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.foldr\">Std.RBSet.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L637-L638","name":"Std.RBSet.foldl_eq_foldl_toList","line":637,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldl_eq_foldl_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.foldl_eq_foldl_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.foldl\">Std.RBSet.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L634-L635","name":"Std.RBSet.mem_of_mem_toList","line":634,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_of_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_of_mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_of_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L631-L632","name":"Std.RBSet.mem_iff_mem_toList","line":631,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_iff_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_iff_mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_iff_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L628-L629","name":"Std.RBSet.mem_congr","line":628,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_congr\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L626-L626","name":"Std.RBSet.mem_toList","line":626,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L624-L624","name":"Std.RBSet.single_toList","line":624,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.single_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.single_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">single_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.single\">Std.RBSet.single</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">a</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L623-L623","name":"Std.RBSet.empty_toList","line":623,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.empty_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.empty_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">empty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L622-L622","name":"Std.RBSet.default_eq","line":622,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.default_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.default_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">default_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L621-L621","name":"Std.RBSet.empty_eq","line":621,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.empty_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.empty_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">empty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Std.RBSet.empty</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L620-L620","name":"Std.RBSet.mkRBSet_eq","line":620,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mkRBSet_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.mkRBSet_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mkRBSet_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.mkRBSet\">Std.mkRBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L618-L618","name":"Std.RBSet.val_toList","line":618,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBSet.val_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBSet.val_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">val_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.toList\">Std.RBSet.toList</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L592-L612","name":"Std.RBNode.mem_insert","line":592,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v'</span></span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L587-L590","name":"Std.RBNode.find?_insert_self","line":587,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut\">Std.RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L582-L585","name":"Std.RBNode.exists_find?_insert_self","line":582,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_find?_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_find?_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">exists_find?_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L569-L580","name":"Std.RBNode.mem_insert_of_mem","line":569,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L563-L567","name":"Std.RBNode.mem_insert_self","line":563,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L557-L561","name":"Std.RBNode.exists_insert_toList_zoom_node","line":557,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_insert_toList_zoom_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_insert_toList_zoom_node\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">exists_insert_toList_zoom_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c' : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <span class=\"fn\">c'</span> <span class=\"fn\">l</span> <span class=\"fn\">v'</span> <span class=\"fn\">r</span></span>, <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\">∃ (<span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">R</span></span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">R</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L553-L555","name":"Std.RBNode.insert_toList_zoom_node","line":553,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom_node\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_toList_zoom_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c' : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v' : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <span class=\"fn\">c'</span> <span class=\"fn\">l</span> <span class=\"fn\">v'</span> <span class=\"fn\">r</span></span>, <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <span class=\"fn\">c</span> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L548-L551","name":"Std.RBNode.exists_insert_toList_zoom_nil","line":548,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_insert_toList_zoom_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.exists_insert_toList_zoom_nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">exists_insert_toList_zoom_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">Std.RBNode.nil</span>, <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\">∃ (<span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">R</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">R</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L544-L546","name":"Std.RBNode.insert_toList_zoom_nil","line":544,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom_nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_toList_zoom_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">Std.RBNode.nil</span>, <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p</span> <span class=\"fn\">[<span class=\"fn\">v</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L539-L542","name":"Std.RBNode.insert_toList_zoom","line":539,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.insert_toList_zoom\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_toList_zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.setRoot\">Std.RBNode.setRoot</a> <span class=\"fn\">v</span> <span class=\"fn\">t'</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L533-L535","name":"Std.RBNode.Path.insert_toList","line":533,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.insert_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.insert_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insert_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insert\">Std.RBNode.Path.insert</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.setRoot\">Std.RBNode.setRoot</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L530-L531","name":"Std.RBNode.Path.insertNew_toList","line":530,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.insertNew_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.insertNew_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insertNew_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insertNew\">Std.RBNode.Path.insertNew</a> <span class=\"fn\">p</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p</span> <span class=\"fn\">[<span class=\"fn\">v</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L525-L528","name":"Std.RBNode.Path.ins_toList","line":525,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.ins_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.ins_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ins_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins\">Std.RBNode.Path.ins</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L522-L523","name":"Std.RBNode.zoom_toList","line":522,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.zoom_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.zoom_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">zoom_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">p'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L519-L520","name":"Std.RBNode.Path.fill_toList","line":519,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.fill_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.fill_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">fill_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\">Std.RBNode.Path.fill</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\">Std.RBNode.Path.withList</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L498-L517","name":"Std.RBNode.Path.ordered_iff","line":498,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.ordered_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.ordered_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ordered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listL\">Std.RBNode.Path.listL</a> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listR\">Std.RBNode.Path.listR</a> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listL\">Std.RBNode.Path.listL</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listR\">Std.RBNode.Path.listR</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L491-L496","name":"Std.RBNode.Path.rootOrdered_iff","line":491,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.rootOrdered_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.rootOrdered_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">rootOrdered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listL\">Std.RBNode.Path.listL</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">v</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listR\">Std.RBNode.Path.listR</a> <span class=\"fn\">p</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">a</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L489-L489","name":"Std.RBNode.Path.withList","line":489,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList","doc":"Wraps a list of elements with the left and right elements of the path. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.withList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">withList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L483-L486","name":"Std.RBNode.Path.listR","line":483,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listR","doc":"The list of elements to the right of the hole.\n(This function is intended for specification purposes only.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listR\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">listR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L476-L479","name":"Std.RBNode.Path.listL","line":476,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listL","doc":"The list of elements to the left of the hole.\n(This function is intended for specification purposes only.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Path.listL\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">listL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L467-L468","name":"Std.RBNode.size_eq","line":467,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.size_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.size\">Std.RBNode.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L463-L465","name":"Std.RBNode.balRight_toList","line":463,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balRight_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balRight_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balRight_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balRight\">Std.RBNode.balRight</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">r</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L459-L461","name":"Std.RBNode.balLeft_toList","line":459,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balLeft_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balLeft_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balLeft_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balLeft\">Std.RBNode.balLeft</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">r</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L455-L457","name":"Std.RBNode.balance2_toList","line":455,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balance2_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balance2_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance2\">Std.RBNode.balance2</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">r</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L451-L453","name":"Std.RBNode.balance1_toList","line":451,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balance1_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.balance1_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance1\">Std.RBNode.balance1</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">r</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L448-L449","name":"Std.RBNode.setRed_toList","line":448,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.setRed_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.setRed_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setRed_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setRed\">Std.RBNode.setRed</a> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L445-L446","name":"Std.RBNode.setBlack_toList","line":445,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.setBlack_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.setBlack_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setBlack_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L442-L443","name":"Std.RBNode.Ordered.toList_sorted","line":442,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.toList_sorted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.toList_sorted\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">toList_sorted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L433-L440","name":"Std.RBNode.ordered_iff","line":433,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.ordered_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.ordered_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">ordered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L429-L431","name":"Std.RBNode.Stream.next?_toList","line":429,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.next?_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.next?_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a>\n    <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> =&gt; <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">b</span></span>)</span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.next?\">Std.RBNode.Stream.next?</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.next?\">List.next?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L426-L427","name":"Std.RBNode.toStream_toList","line":426,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toStream_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toStream_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toStream_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toStream\">Std.RBNode.toStream</a> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Stream.nil</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L423-L424","name":"Std.RBNode.toStream_toList'","line":423,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toStream_toList'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toStream_toList'\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toStream_toList'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toStream\">Std.RBNode.toStream</a> <span class=\"fn\">t</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L416-L419","name":"Std.RBNode.Stream.forIn_eq_forIn_toList","line":416,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.forIn_eq_forIn_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.forIn_eq_forIn_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α_1</span></span>)</span></span></span></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]\n  {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L413-L414","name":"Std.RBNode.Stream.foldl_eq_foldl_toList","line":413,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldl_eq_foldl_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldl_eq_foldl_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.foldl\">Std.RBNode.Stream.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L410-L411","name":"Std.RBNode.Stream.foldr_eq_foldr_toList","line":410,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldr_eq_foldr_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldr_eq_foldr_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.foldr\">Std.RBNode.Stream.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L406-L408","name":"Std.RBNode.Stream.toList_cons","line":406,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.toList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.toList_cons\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">toList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.cons\">Std.RBNode.Stream.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">r</span></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L404-L404","name":"Std.RBNode.Stream.toList_nil","line":404,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.toList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.toList_nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">toList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">Std.RBNode.Stream.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L401-L402","name":"Std.RBNode.Stream.foldr_cons","line":401,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldr_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Stream.foldr_cons\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldr_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream\">Std.RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.foldr\">Std.RBNode.Stream.foldr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Stream.toList\">Std.RBNode.Stream.toList</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L390-L393","name":"Std.RBNode.forIn_eq_forIn_toList","line":390,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forIn_eq_forIn_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forIn_eq_forIn_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α_1</span></span>)</span></span></span></span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]\n  {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L386-L388","name":"Std.RBNode.forIn_visit_eq_bindList","line":386,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forIn_visit_eq_bindList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forIn_visit_eq_bindList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn_visit_eq_bindList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α_1</span></span>)</span></span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]\n  {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.forIn.visit\">Std.RBNode.forIn.visit</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Control/ForInStep/Basic.html#ForInStep.bindList\">ForInStep.bindList</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">init</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L382-L384","name":"Std.RBNode.foldlM_eq_foldlM_toList","line":382,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldlM_eq_foldlM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldlM_eq_foldlM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldlM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">a</span></span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">a</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>] {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.foldlM\">Std.RBNode.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L379-L380","name":"Std.RBNode.forM_eq_forM_toList","line":379,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forM_eq_forM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.forM_eq_forM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.forM\">Std.RBNode.forM</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.forM\">List.forM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L376-L377","name":"Std.RBNode.foldl_eq_foldl_toList","line":376,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldl_eq_foldl_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldl_eq_foldl_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.foldl\">Std.RBNode.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L373-L374","name":"Std.RBNode.foldr_eq_foldr_toList","line":373,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldr_eq_foldr_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldr_eq_foldr_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">init</span> : <span class=\"fn\">α_1</span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.foldr\">Std.RBNode.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L370-L371","name":"Std.RBNode.mem_toList","line":370,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L367-L368","name":"Std.RBNode.toList_node","line":367,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toList_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toList_node\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toList_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <span class=\"fn\">c</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L365-L365","name":"Std.RBNode.toList_nil","line":365,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.toList_nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">Std.RBNode.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L359-L363","name":"Std.RBNode.foldr_cons","line":359,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldr_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.foldr_cons\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldr_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.foldr\">Std.RBNode.foldr</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.toList\">Std.RBNode.toList</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L346-L353","name":"Std.RBNode.Ordered.lowerBound?_lt","line":346,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_lt","doc":"A stronger version of `lowerBound?_least` that holds when the cut is strict. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_lt\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut\">Std.RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L333-L343","name":"Std.RBNode.Ordered.memP_iff_lowerBound?","line":333,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.memP_iff_lowerBound?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.memP_iff_lowerBound?\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">memP_iff_lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.MemP\">Std.RBNode.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L328-L331","name":"Std.RBNode.Ordered.lowerBound?_least","line":328,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_least","doc":"A statement of the least-ness of the result of `lowerBound?`. If `x` is the return value of\n`lowerBound?` and it is strictly less than the cut, then any other `y > x` in the tree is in fact\nstrictly greater than the cut (so there is no exact match, and nothing closer to the cut).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_least\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_least</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xy : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L301-L321","name":"Std.RBNode.Ordered.lowerBound?_least_lb","line":301,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_least_lb","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_least_lb\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_least_lb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lb : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hlb : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lb</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L286-L299","name":"Std.RBNode.Ordered.lowerBound?_exists","line":286,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.lowerBound?_exists\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L283-L284","name":"Std.RBNode.lowerBound?_of_some","line":283,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_of_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_of_some\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_of_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L280-L281","name":"Std.RBNode.lowerBound?_mem","line":280,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L276-L278","name":"Std.RBNode.lowerBound?_mem_lb","line":276,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_mem_lb","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_mem_lb\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_mem_lb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lb : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">lb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L273-L274","name":"Std.RBNode.All.lowerBound?","line":273,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All.lowerBound?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All.lowerBound?\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L263-L271","name":"Std.RBNode.All.lowerBound?_lb","line":263,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All.lowerBound?_lb","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All.lowerBound?_lb\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">lowerBound?_lb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lb : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">lb</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L260-L261","name":"Std.RBNode.lowerBound?_le","line":260,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_le","doc":"The value `x` returned by `lowerBound?` is less or equal to the `cut`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_le\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L249-L257","name":"Std.RBNode.lowerBound?_le'","line":249,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_le'","doc":"The value `x` returned by `lowerBound?` is less or equal to the `cut`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.lowerBound?_le'\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lb : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">lb</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.lowerBound?\">Std.RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L238-L242","name":"Std.RBNode.Ordered.find?_some","line":238,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.find?_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.find?_some\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">find?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut\">Std.RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L220-L236","name":"Std.RBNode.Ordered.unique","line":220,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.unique\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L196-L218","name":"Std.RBNode.Ordered.memP_iff_find?","line":196,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.memP_iff_find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Ordered.memP_iff_find?\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">memP_iff_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.MemP\">Std.RBNode.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L193-L194","name":"Std.RBNode.find?_some_memP","line":193,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_memP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_memP\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_some_memP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.MemP\">Std.RBNode.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L190-L191","name":"Std.RBNode.find?_some_mem","line":190,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_mem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_some_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L186-L188","name":"Std.RBNode.find?_some_eq_eq","line":186,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.find?_some_eq_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_some_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L179-L182","name":"Std.RBNode.instIsStrictCut","line":179,"kind":"instance","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.instIsStrictCut","doc":"A \"representable cut\" is one generated by `cmp a` for some `a`. This is always a valid cut. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.instIsStrictCut\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instIsStrictCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut\">Std.RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L176-L176","name":"Std.RBNode.IsStrictCut.exact","line":176,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut.exact","doc":"If `cut = x`, then `cut` and `x` have compare the same with respect to other elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut.exact\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsStrictCut</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut\">Std.RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L174-L174","name":"Std.RBNode.IsStrictCut.mk","line":174,"kind":"ctor","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut.mk\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsStrictCut</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toIsCut : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(exact : <span class=\"fn\">∀ {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut\">Std.RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L174-L176","name":"Std.RBNode.IsStrictCut","line":174,"kind":"class","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut","doc":"`IsStrictCut` upgrades the `IsCut` property to ensure that at most one element of the tree\ncan match the cut, and hence `find?` will return the unique such element if one exists.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsStrictCut\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsStrictCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L160-L168","name":"Std.RBNode.IsCut.congr","line":160,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.congr\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">congr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]\n  [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L156-L158","name":"Std.RBNode.IsCut.gt_trans","line":156,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.gt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.gt_trans\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">gt_trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]\n  [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L152-L154","name":"Std.RBNode.IsCut.lt_trans","line":152,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.lt_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.lt_trans\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]\n  [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L150-L150","name":"Std.RBNode.IsCut.le_gt_trans","line":150,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.le_gt_trans","doc":"The set `{x | cut x = .gt}` is upward-closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.le_gt_trans\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">le_gt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L148-L148","name":"Std.RBNode.IsCut.le_lt_trans","line":148,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.le_lt_trans","doc":"The set `{x | cut x = .lt}` is downward-closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.le_lt_trans\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">le_lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L146-L146","name":"Std.RBNode.IsCut.mk","line":146,"kind":"ctor","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut.mk\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le_lt_trans : <span class=\"fn\">∀ {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le_gt_trans : <span class=\"fn\">∀ {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\">Std.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L146-L150","name":"Std.RBNode.IsCut","line":146,"kind":"class","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut","doc":"A cut is like a homomorphism of orderings: it is a monotonic predicate with respect to `cmp`,\nbut it can make things that are distinguished by `cmp` equal.\nThis is sufficient for `find?` to locate an element on which `cut` returns `.eq`,\nbut there may be other elements, not returned by `find?`, on which `cut` also returns `.eq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.IsCut\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L138-L138","name":"Std.RBNode.instDecidableOrdered","line":138,"kind":"instance","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.instDecidableOrdered","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.instDecidableOrdered\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L135-L136","name":"Std.RBNode.isOrdered_iff","line":135,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.isOrdered_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.isOrdered_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isOrdered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.isOrdered\">Std.RBNode.isOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">none</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L113-L133","name":"Std.RBNode.isOrdered_iff'","line":113,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.isOrdered_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.isOrdered_iff'\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isOrdered_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.isOrdered\">Std.RBNode.isOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">L</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">t</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">R</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span></span>)</span> <span class=\"fn\">t</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">L</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">R</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L110-L111","name":"Std.RBNode.mem_congr","line":110,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_congr\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Mem\">Std.RBNode.Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Mem\">Std.RBNode.Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L108-L108","name":"Std.RBNode.mem_def","line":108,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_def\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_def</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Mem\">Std.RBNode.Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L106-L106","name":"Std.RBNode.memP_def","line":106,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.memP_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.memP_def\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">memP_def</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.MemP\">Std.RBNode.MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L103-L104","name":"Std.RBNode.Any_def","line":103,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Any_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Any_def\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Any_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Any\">Std.RBNode.Any</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L100-L101","name":"Std.RBNode.All_def","line":100,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.All_def\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L97-L98","name":"Std.RBNode.mem_node","line":97,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_node\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <span class=\"fn\">c</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L96-L96","name":"Std.RBNode.mem_nil","line":96,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.mem_nil\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">Std.RBNode.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L91-L92","name":"Std.RBNode.WF.depth_bound","line":91,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.WF.depth_bound","doc":"A well formed tree has `t.depth ∈ O(log t.size)`, that is, it is well balanced.\nThis justifies the `O(log n)` bounds on most searching operations of `RBSet`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.WF.depth_bound\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">depth_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depth\">Std.RBNode.depth</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Log2.html#Nat.log2\">Nat.log2</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.size\">Std.RBNode.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L83-L85","name":"Std.RBNode.Balanced.depth_bound","line":83,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.depth_bound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.depth_bound\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">depth_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depth\">Std.RBNode.depth</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Log2.html#Nat.log2\">Nat.log2</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.size\">Std.RBNode.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L73-L81","name":"Std.RBNode.Balanced.le_size","line":73,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.le_size\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB\">Std.RBNode.depthLB</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.size\">Std.RBNode.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L67-L71","name":"Std.RBNode.Balanced.depth_le","line":67,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.depth_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.Balanced.depth_le\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">depth_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depth\">Std.RBNode.depth</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB\">Std.RBNode.depthUB</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L63-L65","name":"Std.RBNode.depthUB_le_two_depthLB","line":63,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB_le_two_depthLB","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB_le_two_depthLB\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">depthUB_le_two_depthLB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB\">Std.RBNode.depthUB</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB\">Std.RBNode.depthLB</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L59-L61","name":"Std.RBNode.depthUB_le","line":59,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB_le\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">depthUB_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB\">Std.RBNode.depthUB</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L55-L57","name":"Std.RBNode.depthUB","line":55,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB","doc":"`depthUB c n` is the best upper bound on the depth of any balanced red-black tree\nwith root colored `c` and black-height `n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthUB\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">depthUB</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L47-L49","name":"Std.RBNode.depthLB_le","line":47,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB_le\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">depthLB_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB\">Std.RBNode.depthLB</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L43-L45","name":"Std.RBNode.depthLB","line":43,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB","doc":"`depthLB c n` is the best upper bound on the depth of any balanced red-black tree\nwith root colored `c` and black-height `n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depthLB\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">depthLB</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L30-L37","name":"Std.RBNode.size_lt_depth","line":30,"kind":"theorem","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.size_lt_depth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.size_lt_depth\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">size_lt_depth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.size\">Std.RBNode.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depth\">Std.RBNode.depth</a> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Lemmas.lean#L26-L28","name":"Std.RBNode.depth","line":26,"kind":"def","docLink":"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depth","doc":"`O(n)`. `depth t` is the maximum number of nodes on any path to a leaf.\nIt is an upper bound on most tree operations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Lemmas.html#Std.RBNode.depth\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">depth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"}]}