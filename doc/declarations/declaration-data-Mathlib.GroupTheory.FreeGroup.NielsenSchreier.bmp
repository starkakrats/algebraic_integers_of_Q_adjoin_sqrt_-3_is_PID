{"name":"Mathlib.GroupTheory.FreeGroup.NielsenSchreier","instances":[{"typeNames":["CategoryTheory.ActionCategory"],"name":"IsFreeGroupoid.actionGroupoidIsFree","className":"IsFreeGroupoid"},{"typeNames":["_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.symgen"],"name":"IsFreeGroupoid.generators_connected","className":"Quiver.RootedConnected"},{"typeNames":["CategoryTheory.End"],"name":"IsFreeGroupoid.endIsFreeOfConnectedFree","className":"IsFreeGroup"},{"typeNames":["Subtype"],"name":"subgroupIsFreeOfIsFree","className":"IsFreeGroup"}],"imports":["Init","Mathlib.CategoryTheory.Action","Mathlib.Combinatorics.Quiver.Arborescence","Mathlib.Combinatorics.Quiver.ConnectedComponent","Mathlib.GroupTheory.FreeGroup.IsFreeGroup"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L307-L309","name":"subgroupIsFreeOfIsFree","line":307,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#subgroupIsFreeOfIsFree","doc":"The Nielsen-Schreier theorem: a subgroup of a free group is free. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#subgroupIsFreeOfIsFree\"><span class=\"name\">subgroupIsFreeOfIsFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/IsFreeGroup.html#IsFreeGroup\">IsFreeGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#Subgroup\">Subgroup</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/IsFreeGroup.html#IsFreeGroup\">IsFreeGroup</a> <span class=\"fn\">↥<span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L299-L301","name":"IsFreeGroupoid.endIsFreeOfConnectedFree","line":299,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.endIsFreeOfConnectedFree","doc":"A vertex group in a free connected groupoid is free. With some work one could drop the\nconnectedness assumption, by looking at connected components. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.endIsFreeOfConnectedFree\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">endIsFreeOfConnectedFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected\">CategoryTheory.IsConnected</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/IsFreeGroup.html#IsFreeGroup\">IsFreeGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.End\">CategoryTheory.End</a> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L292-L294","name":"IsFreeGroupoid.generators_connected","line":292,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.generators_connected","doc":"Given a connected free groupoid, its generating quiver is rooted-connected. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.generators_connected\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">generators_connected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected\">CategoryTheory.IsConnected</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.RootedConnected\">Quiver.RootedConnected</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.symgen\">IsFreeGroupoid.symgen</a> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L275-L288","name":"IsFreeGroupoid.path_nonempty_of_hom","line":275,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.path_nonempty_of_hom","doc":"If there exists a morphism `a → b` in a free groupoid, then there also exists a zigzag\nfrom `a` to `b` in the generating quiver. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.path_nonempty_of_hom\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">path_nonempty_of_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.symgen\">IsFreeGroupoid.symgen</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.symgen\">IsFreeGroupoid.symgen</a> <span class=\"fn\">b</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L225-L262","name":"IsFreeGroupoid.SpanningTree.endIsFree","line":225,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.endIsFree","doc":"Given a free groupoid and an arborescence of its generating quiver, the vertex\ngroup at the root is freely generated by loops coming from generating arrows\nin the complement of the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.endIsFree\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">endIsFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/IsFreeGroup.html#IsFreeGroup\">IsFreeGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.End\">CategoryTheory.End</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L208-L219","name":"IsFreeGroupoid.SpanningTree.functorOfMonoidHom","line":208,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom","doc":"Since a hom gives a loop, any homomorphism from the vertex group at the root\nextends to a functor on the whole groupoid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">functorOfMonoidHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.End\">CategoryTheory.End</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/SingleObj.html#CategoryTheory.SingleObj\">CategoryTheory.SingleObj</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L207-L207","name":"IsFreeGroupoid.SpanningTree.functorOfMonoidHom_obj","line":207,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom_obj\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">functorOfMonoidHom_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.End\">CategoryTheory.End</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom\">IsFreeGroupoid.SpanningTree.functorOfMonoidHom</a> <span class=\"fn\">T</span> <span class=\"fn\">f</span></span>)</span>.obj <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L207-L207","name":"IsFreeGroupoid.SpanningTree.functorOfMonoidHom_map","line":207,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom_map\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">functorOfMonoidHom_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.End\">CategoryTheory.End</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X_1 </span>Y : <span class=\"fn\">G</span>} (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">X_1</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.functorOfMonoidHom\">IsFreeGroupoid.SpanningTree.functorOfMonoidHom</a> <span class=\"fn\">T</span> <span class=\"fn\">f</span></span>)</span>.map <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom\">IsFreeGroupoid.SpanningTree.loopOfHom</a> <span class=\"fn\">T</span> <span class=\"fn\">p</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L195-L202","name":"IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","line":195,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom_eq_id","doc":"Turning an edge in the spanning tree into a loop gives the identity loop. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom_eq_id\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">loopOfHom_eq_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ConnectedComponent.html#Quiver.wideSubquiverSymmetrify\">Quiver.wideSubquiverSymmetrify</a> <span class=\"fn\">T</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom\">IsFreeGroupoid.SpanningTree.loopOfHom</a> <span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.of\">IsFreeGroupoid.of</a> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L190-L191","name":"IsFreeGroupoid.SpanningTree.loopOfHom","line":190,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom","doc":"Any hom in `G` can be made into a loop, by conjugating with `treeHom`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.loopOfHom\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">loopOfHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.End\">CategoryTheory.End</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L183-L186","name":"IsFreeGroupoid.SpanningTree.treeHom_root","line":183,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom_root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom_root\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">treeHom_root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom\">IsFreeGroupoid.SpanningTree.treeHom</a> <span class=\"fn\">T</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L178-L179","name":"IsFreeGroupoid.SpanningTree.treeHom_eq","line":178,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom_eq","doc":"Any path to `a` gives `treeHom T a`, since paths in the tree are unique. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom_eq\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">treeHom_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.root\">Quiver.root</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom\">IsFreeGroupoid.SpanningTree.treeHom</a> <span class=\"fn\">T</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.homOfPath\">IsFreeGroupoid.SpanningTree.homOfPath</a> <span class=\"fn\">T</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L173-L174","name":"IsFreeGroupoid.SpanningTree.treeHom","line":173,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom","doc":"For every vertex `a`, there is a canonical hom from the root, given by the path in the tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.treeHom\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">treeHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L167-L169","name":"IsFreeGroupoid.SpanningTree.homOfPath","line":167,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.homOfPath","doc":"A path in the tree gives a hom, by composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.SpanningTree.homOfPath\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">SpanningTree</span>.<span class=\"name\">homOfPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver\">WideSubquiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.Arborescence\">Quiver.Arborescence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Arborescence.html#Quiver.root\">Quiver.root</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#WideSubquiver.toType\">WideSubquiver.toType</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.Symmetrify\">Quiver.Symmetrify</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span> <span class=\"fn\">T</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> →\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#_private.Mathlib.GroupTheory.FreeGroup.NielsenSchreier.0.IsFreeGroupoid.SpanningTree.root'\">IsFreeGroupoid.SpanningTree.root'</a> <span class=\"fn\">T</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L110-L146","name":"IsFreeGroupoid.actionGroupoidIsFree","line":110,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.actionGroupoidIsFree","doc":"An action groupoid over a free group is free. More generally, one could show that the groupoid\nof elements over a free groupoid is free, but this version is easier to prove and suffices for our\npurposes.\n\nAnalogous to the fact that a covering space of a graph is a graph. (A free groupoid is like a graph,\nand a groupoid of elements is like a covering space.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.actionGroupoidIsFree\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">actionGroupoidIsFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/IsFreeGroup.html#IsFreeGroup\">IsFreeGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/GroupAction/Defs.html#MulAction\">MulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Action.html#CategoryTheory.ActionCategory\">CategoryTheory.ActionCategory</a> <span class=\"fn\">G</span> <span class=\"fn\">A</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L97-L101","name":"IsFreeGroupoid.ext_functor","line":97,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.ext_functor","doc":"Two functors from a free groupoid to a group are equal when they agree on the generating\nquiver. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.ext_functor\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">ext_functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/SingleObj.html#CategoryTheory.SingleObj\">CategoryTheory.SingleObj</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/SingleObj.html#CategoryTheory.SingleObj\">CategoryTheory.SingleObj</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>) (<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.map <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.of\">IsFreeGroupoid.of</a> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span>.map <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.of\">IsFreeGroupoid.of</a> <span class=\"fn\">e</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L83-L83","name":"IsFreeGroupoid.unique_lift","line":83,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.unique_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.unique_lift\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">unique_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#Quiver.Labelling\">Quiver.Labelling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/SingleObj.html#CategoryTheory.SingleObj\">CategoryTheory.SingleObj</a> <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.of\">IsFreeGroupoid.of</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L82-L82","name":"IsFreeGroupoid.of","line":82,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.of\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span> →\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">let_fun this := <span class=\"fn\">a</span>;\n    <span class=\"fn\">this</span></span>)</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>     <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L81-L81","name":"IsFreeGroupoid.quiverGenerators","line":81,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.quiverGenerators","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.quiverGenerators\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">quiverGenerators</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L80-L80","name":"IsFreeGroupoid.mk","line":80,"kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.mk\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(quiverGenerators : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(of : <span class=\"fn\">{<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>} →\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>)</span> →\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">let_fun this := <span class=\"fn\">a</span>;\n      <span class=\"fn\">this</span></span>)</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>       <span class=\"fn\">b</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unique_lift : <span class=\"fn\">∀ {<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> v} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">X</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Subquiver.html#Quiver.Labelling\">Quiver.Labelling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>)</span> <span class=\"fn\">X</span></span>),\n  <span class=\"fn\">∃! (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/SingleObj.html#CategoryTheory.SingleObj\">CategoryTheory.SingleObj</a> <span class=\"fn\">X</span></span>)</span></span>),\n    <span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\">IsFreeGroupoid.Generators</a> <span class=\"fn\">G</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.map <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">of</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">g</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\">IsFreeGroupoid</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L80-L85","name":"IsFreeGroupoid","line":80,"kind":"class","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid","doc":"A groupoid `G` is free when we have the following data:\n- a quiver on `IsFreeGroupoid.Generators G` (a type synonym for `G`)\n- a function `of` taking a generating arrow to a morphism in `G`\n- such that a functor from `G` to any group `X` is uniquely determined\n  by assigning labels in `X` to the generating arrows.\n\n  This definition is nonstandard. Normally one would require that functors `G ⥤ X`\n  to any _groupoid_ `X` are given by graph homomorphisms from `generators`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid\"><span class=\"name\">IsFreeGroupoid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 (v + 1))</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/NielsenSchreier.lean#L68-L69","name":"IsFreeGroupoid.Generators","line":68,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators","doc":"`IsFreeGroupoid.Generators G` is a type synonym for `G`. We think of this as\nthe vertices of the generating quiver of `G` when `G` is free. We can't use `G` directly,\nsince `G` already has a quiver instance from being a groupoid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/NielsenSchreier.html#IsFreeGroupoid.Generators\"><span class=\"name\">IsFreeGroupoid</span>.<span class=\"name\">Generators</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(G : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Groupoid.html#CategoryTheory.Groupoid\">CategoryTheory.Groupoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}