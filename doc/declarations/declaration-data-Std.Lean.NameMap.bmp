{"name":"Std.Lean.NameMap","instances":[{"typeNames":["Lean.NameMap","Prod"],"name":"Lean.NameMap.instForInNameMapProdName_1","className":"ForIn"}],"imports":["Init","Lean.Data.NameMap"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/NameMap.lean#L40-L43","name":"Lean.NameMap.filterMap.process","line":40,"kind":"def","docLink":"./Std/Lean/NameMap.html#Lean.NameMap.filterMap.process","doc":"see `Lean.NameMap.filterMap` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/NameMap.html#Lean.NameMap.filterMap.process\"><span class=\"name\">Lean</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">filterMap</span>.<span class=\"name\">process</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/NameMap.lean#L36-L43","name":"Lean.NameMap.filterMap","line":36,"kind":"def","docLink":"./Std/Lean/NameMap.html#Lean.NameMap.filterMap","doc":"`filterMap f m` allows to filter a `NameMap` and simultaneously modify the filtered values.\n\nIt takes a function `f : Name → α → Option β` and applies `f name` to the value with key `name`.\nThe resulting entries with non-`none` value are collected to form the output `NameMap`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/NameMap.html#Lean.NameMap.filterMap\"><span class=\"name\">Lean</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/NameMap.lean#L27-L28","name":"Lean.NameMap.filter.process","line":27,"kind":"def","docLink":"./Std/Lean/NameMap.html#Lean.NameMap.filter.process","doc":"see `Lean.NameMap.filter` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/NameMap.html#Lean.NameMap.filter.process\"><span class=\"name\">Lean</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">filter</span>.<span class=\"name\">process</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/RBMap.html#Lean.RBMap\">Lean.RBMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/NameMap.lean#L23-L28","name":"Lean.NameMap.filter","line":23,"kind":"def","docLink":"./Std/Lean/NameMap.html#Lean.NameMap.filter","doc":"`filter f m` returns the `NameMap` consisting of all\n\"`key`/`val`\"-pairs in `m` where `f key val` returns `true`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/NameMap.html#Lean.NameMap.filter\"><span class=\"name\">Lean</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/NameMap.lean#L16-L17","name":"Lean.NameMap.instForInNameMapProdName_1","line":16,"kind":"instance","docLink":"./Std/Lean/NameMap.html#Lean.NameMap.instForInNameMapProdName_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/NameMap.html#Lean.NameMap.instForInNameMapProdName_1\"><span class=\"name\">Lean</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">instForInNameMapProdName_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"}]}