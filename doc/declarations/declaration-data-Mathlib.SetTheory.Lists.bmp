{"name":"Mathlib.SetTheory.Lists","instances":[{"typeNames":["Eq"],"name":"instDecidableEqLists'","className":"Decidable"},{"typeNames":["Lists'"],"name":"Lists'.instForAllBoolInhabitedLists'","className":"Inhabited"},{"typeNames":["Lists'"],"name":"Lists'.instHasSubsetLists'True","className":"HasSubset"},{"typeNames":["Lists","Lists'"],"name":"Lists'.instMembershipListsLists'","className":"Membership"},{"typeNames":["Lists"],"name":"Lists.instInhabitedLists","className":"Inhabited"},{"typeNames":["Eq"],"name":"Lists.instDecidableEqLists","className":"Decidable"},{"typeNames":["Lists"],"name":"Lists.instSizeOfLists","className":"SizeOf"},{"typeNames":["Lists","Lists"],"name":"Lists.instMembershipLists","className":"Membership"},{"typeNames":["Lists"],"name":"Lists.instSetoidLists","className":"Setoid"},{"typeNames":["Lists.Equiv"],"name":"Lists.Equiv.decidable","className":"Decidable"},{"typeNames":["HasSubset.Subset"],"name":"Lists.Subset.decidable","className":"Decidable"},{"typeNames":["Membership.mem"],"name":"Lists.mem.decidable","className":"Decidable"},{"typeNames":["Finsets"],"name":"Finsets.instEmptyCollectionFinsets","className":"EmptyCollection"},{"typeNames":["Finsets"],"name":"Finsets.instInhabitedFinsets","className":"Inhabited"},{"typeNames":["Eq"],"name":"Finsets.instDecidableEqFinsets","className":"Decidable"}],"imports":["Init","Mathlib.Data.Sigma.Basic","Mathlib.Data.Nat.Order.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L478-L481","name":"Finsets.instDecidableEqFinsets","line":478,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Finsets.instDecidableEqFinsets","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Finsets.instDecidableEqFinsets\"><span class=\"name\">Finsets</span>.<span class=\"name\">instDecidableEqFinsets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Finsets\">Finsets</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L475-L476","name":"Finsets.instInhabitedFinsets","line":475,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Finsets.instInhabitedFinsets","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Finsets.instInhabitedFinsets\"><span class=\"name\">Finsets</span>.<span class=\"name\">instInhabitedFinsets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Finsets\">Finsets</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L472-L473","name":"Finsets.instEmptyCollectionFinsets","line":472,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Finsets.instEmptyCollectionFinsets","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Finsets.instEmptyCollectionFinsets\"><span class=\"name\">Finsets</span>.<span class=\"name\">instEmptyCollectionFinsets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Finsets\">Finsets</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L466-L467","name":"Finsets","line":466,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Finsets","doc":"`Finsets` are defined via equivalence classes of `Lists` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Finsets\"><span class=\"name\">Finsets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L459-L460","name":"Lists'.Subset.trans","line":459,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset.trans\"><span class=\"name\">Lists'</span>.<span class=\"name\">Subset</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₃ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L455-L456","name":"Lists'.mem_of_subset","line":455,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.mem_of_subset\"><span class=\"name\">Lists'</span>.<span class=\"name\">mem_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L450-L452","name":"Lists'.mem_equiv_left","line":450,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_equiv_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.mem_equiv_left\"><span class=\"name\">Lists'</span>.<span class=\"name\">mem_equiv_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L418-L431","name":"Lists.mem.decidable","line":418,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.mem.decidable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.mem.decidable\"><span class=\"name\">Lists</span>.<span class=\"name\">mem</span>.<span class=\"name\">decidable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L406-L417","name":"Lists.Subset.decidable","line":406,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Subset.decidable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Subset.decidable\"><span class=\"name\">Lists</span>.<span class=\"name\">Subset</span>.<span class=\"name\">decidable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L385-L405","name":"Lists.Equiv.decidable","line":385,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.decidable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv.decidable\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">decidable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L376-L379","name":"Lists.lt_sizeof_cons'","line":376,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.lt_sizeof_cons'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.lt_sizeof_cons'\"><span class=\"name\">Lists</span>.<span class=\"name\">lt_sizeof_cons'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">b</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">a</span> }</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons'\">Lists'.cons'</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L371-L373","name":"Lists.sizeof_pos","line":371,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.sizeof_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.sizeof_pos\"><span class=\"name\">Lists</span>.<span class=\"name\">sizeof_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L362-L368","name":"Lists.Equiv.decidableMeas","line":362,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.decidableMeas","doc":"Auxiliary function to prove termination of decidability checking "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv.decidableMeas\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">decidableMeas</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span></span> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\"><span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>) ×' <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>) ×' <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L355-L356","name":"Lists.instSetoidLists","line":355,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instSetoidLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.instSetoidLists\"><span class=\"name\">Lists</span>.<span class=\"name\">instSetoidLists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L316-L352","name":"Lists.Equiv.trans","line":316,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv.trans\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₃ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">l₂</span> <span class=\"fn\">l₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L312-L313","name":"Lists.Equiv.symm","line":312,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv.symm\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">l₂</span> <span class=\"fn\">l₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L307-L308","name":"Lists.equiv_atom","line":307,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.equiv_atom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.equiv_atom\"><span class=\"name\">Lists</span>.<span class=\"name\">equiv_atom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.atom\">Lists.atom</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.atom\">Lists.atom</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L298-L302","name":"Lists.Equiv.antisymm_iff","line":298,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.antisymm_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv.antisymm_iff\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">antisymm_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.of'\">Lists.of'</a> <span class=\"fn\">l₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.of'\">Lists.of'</a> <span class=\"fn\">l₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L293-L295","name":"Lists.isList_of_mem","line":293,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.isList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.isList_of_mem\"><span class=\"name\">Lists</span>.<span class=\"name\">isList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.IsList\">Lists.IsList</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L290-L291","name":"Lists.instMembershipLists","line":290,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instMembershipLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.instMembershipLists\"><span class=\"name\">Lists</span>.<span class=\"name\">instMembershipLists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L285-L287","name":"Lists.mem","line":285,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.mem","doc":"Membership of ZFA list. A ZFA list belongs to a proper ZFA list if it belongs to the latter as a\nproper ZFA prelist. An atom has no members. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.mem\"><span class=\"name\">Lists</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L264-L280","name":"Lists.inductionMut","line":264,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.inductionMut","doc":"A recursion principle for pairs of ZFA lists and proper ZFA prelists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.inductionMut\"><span class=\"name\">Lists</span>.<span class=\"name\">inductionMut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(D : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C0 : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.atom\">Lists.atom</a> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C1 : <span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.of'\">Lists.of'</a> <span class=\"fn\">l</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(D0 : <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">Lists'.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(D1 : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons\">Lists'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#PProd\">PProd</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">l</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>) → <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">l</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L261-L261","name":"Lists.instSizeOfLists","line":261,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instSizeOfLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.instSizeOfLists\"><span class=\"name\">Lists</span>.<span class=\"name\">instSizeOfLists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L259-L259","name":"Lists.instDecidableEqLists","line":259,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instDecidableEqLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.instDecidableEqLists\"><span class=\"name\">Lists</span>.<span class=\"name\">instDecidableEqLists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L256-L257","name":"Lists.instInhabitedLists","line":256,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists.instInhabitedLists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.instInhabitedLists\"><span class=\"name\">Lists</span>.<span class=\"name\">instInhabitedLists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L252-L253","name":"Lists.of_toList","line":252,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.of_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.of_toList\"><span class=\"name\">Lists</span>.<span class=\"name\">of_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.IsList\">Lists.IsList</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.ofList\">Lists.ofList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.toList\">Lists.toList</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L249-L249","name":"Lists.to_ofList","line":249,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.to_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.to_ofList\"><span class=\"name\">Lists</span>.<span class=\"name\">to_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.toList\">Lists.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.ofList\">Lists.ofList</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L245-L246","name":"Lists.isList_toList","line":245,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists.isList_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.isList_toList\"><span class=\"name\">Lists</span>.<span class=\"name\">isList_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.IsList\">Lists.IsList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.ofList\">Lists.ofList</a> <span class=\"fn\">l</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L241-L242","name":"Lists.ofList","line":241,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.ofList","doc":"Converts a `List` of ZFA lists to a ZFA list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.ofList\"><span class=\"name\">Lists</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L236-L237","name":"Lists.IsList","line":236,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.IsList","doc":"Predicate stating that a ZFA list is proper. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.IsList\"><span class=\"name\">Lists</span>.<span class=\"name\">IsList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L231-L232","name":"Lists.toList","line":231,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.toList","doc":"Converts a ZFA list to a `List` of ZFA lists. Atoms are sent to `[]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.toList\"><span class=\"name\">Lists</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L225-L226","name":"Lists.of'","line":225,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.of'","doc":"Converts a proper ZFA prelist to a ZFA list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.of'\"><span class=\"name\">Lists</span>.<span class=\"name\">of'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L219-L220","name":"Lists.atom","line":219,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists.atom","doc":"Sends `a : α` to the corresponding atom in `Lists α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.atom\"><span class=\"name\">Lists</span>.<span class=\"name\">atom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L204-L210","name":"Lists'.subset_def","line":204,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.subset_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.subset_def\"><span class=\"name\">Lists'</span>.<span class=\"name\">subset_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">l₁</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L194-L201","name":"Lists'.mem_of_subset'","line":194,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_of_subset'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.mem_of_subset'\"><span class=\"name\">Lists'</span>.<span class=\"name\">mem_of_subset'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">l₁</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L187-L191","name":"Lists'.subset_nil","line":187,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.subset_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.subset_nil\"><span class=\"name\">Lists'</span>.<span class=\"name\">subset_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">Lists'.nil</span></span> → <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Lists'.nil</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L183-L184","name":"Lists'.Subset.refl","line":183,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset.refl\"><span class=\"name\">Lists'</span>.<span class=\"name\">Subset</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L175-L179","name":"Lists'.ofList_subset","line":175,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.ofList_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.ofList_subset\"><span class=\"name\">Lists'</span>.<span class=\"name\">ofList_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.ofList\">Lists'.ofList</a> <span class=\"fn\">l₁</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.ofList\">Lists'.ofList</a> <span class=\"fn\">l₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L166-L172","name":"Lists'.cons_subset","line":166,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.cons_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons_subset\"><span class=\"name\">Lists'</span>.<span class=\"name\">cons_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons\">Lists'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">l₁</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">l₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L162-L163","name":"Lists'.mem_cons","line":162,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.mem_cons\"><span class=\"name\">Lists'</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons\">Lists'.cons</a> <span class=\"fn\">y</span> <span class=\"fn\">l</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L157-L158","name":"Lists'.mem_def","line":157,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.mem_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.mem_def\"><span class=\"name\">Lists'</span>.<span class=\"name\">mem_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a'</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">l</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L154-L155","name":"Lists'.instMembershipListsLists'","line":154,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.instMembershipListsLists'","doc":"ZFA prelist membership. A ZFA list is in a ZFA prelist if some element of this ZFA prelist is\nequivalent as a ZFA list to this ZFA list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.instMembershipListsLists'\"><span class=\"name\">Lists'</span>.<span class=\"name\">instMembershipListsLists'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L149-L150","name":"Lists'.instHasSubsetLists'True","line":149,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.instHasSubsetLists'True","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.instHasSubsetLists'True\"><span class=\"name\">Lists'</span>.<span class=\"name\">instHasSubsetLists'True</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#HasSubset\">HasSubset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L132-L134","name":"Lists'.Subset.cons","line":132,"kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset.cons\"><span class=\"name\">Lists'</span>.<span class=\"name\">Subset</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a' : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l' : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">l'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset\">Lists'.Subset</a> <span class=\"fn\">l</span> <span class=\"fn\">l'</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset\">Lists'.Subset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons\">Lists'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">l'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L131-L131","name":"Lists'.Subset.nil","line":131,"kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset.nil\"><span class=\"name\">Lists'</span>.<span class=\"name\">Subset</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset\">Lists'.Subset</a> <span class=\"fn\">Lists'.nil</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L130-L134","name":"Lists'.Subset","line":130,"kind":"inductive","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.Subset","doc":"Subset relation for ZFA lists. Defined inductively. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset\"><span class=\"name\">Lists'</span>.<span class=\"name\">Subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L128-L129","name":"Lists.Equiv.antisymm","line":128,"kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv.antisymm\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset\">Lists'.Subset</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.Subset\">Lists'.Subset</a> <span class=\"fn\">l₂</span> <span class=\"fn\">l₁</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">snd</span> := <span class=\"fn\">l₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">snd</span> := <span class=\"fn\">l₂</span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L127-L127","name":"Lists.Equiv.refl","line":127,"kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv.refl\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\">Lists.Equiv</a> <span class=\"fn\">l</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L126-L129","name":"Lists.Equiv","line":126,"kind":"inductive","docLink":"./Mathlib/SetTheory/Lists.html#Lists.Equiv","doc":"Equivalence of ZFA lists. Defined inductively. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists.Equiv\"><span class=\"name\">Lists</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L103-L120","name":"Lists'.of_toList","line":103,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.of_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.of_toList\"><span class=\"name\">Lists'</span>.<span class=\"name\">of_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.ofList\">Lists'.ofList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L99-L99","name":"Lists'.to_ofList","line":99,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.to_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.to_ofList\"><span class=\"name\">Lists'</span>.<span class=\"name\">to_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.ofList\">Lists'.ofList</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L93-L95","name":"Lists'.ofList","line":93,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.ofList","doc":"Converts a `List` of ZFA lists to a proper ZFA prelist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.ofList\"><span class=\"name\">Lists'</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L88-L88","name":"Lists'.toList_cons","line":88,"kind":"theorem","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.toList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList_cons\"><span class=\"name\">Lists'</span>.<span class=\"name\">toList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons\">Lists'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\">Lists'.toList</a> <span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L80-L83","name":"Lists'.toList","line":80,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.toList","doc":"Converts a ZFA prelist to a `List` of ZFA lists. Atoms are sent to `[]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.toList\"><span class=\"name\">Lists'</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L74-L75","name":"Lists'.cons","line":74,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.cons","doc":"Appending a ZFA list to a proper ZFA prelist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons\"><span class=\"name\">Lists'</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists\">Lists</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L69-L71","name":"Lists'.instForAllBoolInhabitedLists'","line":69,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.instForAllBoolInhabitedLists'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.instForAllBoolInhabitedLists'\"><span class=\"name\">Lists'</span>.<span class=\"name\">instForAllBoolInhabitedLists'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L63-L64","name":"Lists","line":63,"kind":"def","docLink":"./Mathlib/SetTheory/Lists.html#Lists","doc":"Hereditarily finite list, aka ZFA list. A ZFA list is either an \"atom\" (`b = false`),\ncorresponding to an element of `α`, or a \"proper\" ZFA list, inductively defined from the empty ZFA\nlist and from appending a ZFA list to a proper ZFA list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists\"><span class=\"name\">Lists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L56-L56","name":"instDecidableEqLists'","line":56,"kind":"instance","docLink":"./Mathlib/SetTheory/Lists.html#instDecidableEqLists'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#instDecidableEqLists'\"><span class=\"name\">instDecidableEqLists'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2} → <span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L55-L55","name":"Lists'.cons'","line":55,"kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.cons'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.cons'\"><span class=\"name\">Lists'</span>.<span class=\"name\">cons'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L54-L54","name":"Lists'.nil","line":54,"kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.nil\"><span class=\"name\">Lists'</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L53-L53","name":"Lists'.atom","line":53,"kind":"ctor","docLink":"./Mathlib/SetTheory/Lists.html#Lists'.atom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'.atom\"><span class=\"name\">Lists'</span>.<span class=\"name\">atom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Lists.html#Lists'\">Lists'</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/Lists.lean#L52-L56","name":"Lists'","line":52,"kind":"inductive","docLink":"./Mathlib/SetTheory/Lists.html#Lists'","doc":"Prelists, helper type to define `Lists`. `Lists' α false` are the \"atoms\", a copy of `α`.\n`Lists' α true` are the \"proper\" ZFA prelists, inductively defined from the empty ZFA prelist and\nfrom appending a ZFA prelist to a proper ZFA prelist. It is made so that you can't append anything\nto an atom while having only one appending function for appending both atoms and proper ZFC prelists\nto a proper ZFA prelist. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Lists.html#Lists'\"><span class=\"name\">Lists'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"}]}