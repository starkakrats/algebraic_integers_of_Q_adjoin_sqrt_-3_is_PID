{"name":"Mathlib.Logic.Lemmas","instances":[],"imports":["Init","Mathlib.Logic.Basic","Mathlib.Tactic.Convert","Mathlib.Tactic.SplitIfs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L72-L74","name":"Prop.exists","line":72,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#Prop.exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#Prop.exists\"><span class=\"name\">Prop</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./foundational_types.html\">Prop</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">p</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#True\">True</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#False\">False</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L68-L69","name":"Prop.forall","line":68,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#Prop.forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#Prop.forall\"><span class=\"name\">Prop</span>.<span class=\"name\">forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./foundational_types.html\">Prop</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">p</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#True\">True</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#False\">False</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L64-L65","name":"ite_ite_distrib_right","line":64,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#ite_ite_distrib_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#ite_ite_distrib_right\"><span class=\"name\">ite_ite_distrib_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span> else <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L60-L61","name":"ite_ite_distrib_left","line":60,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#ite_ite_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#ite_ite_distrib_left\"><span class=\"name\">ite_ite_distrib_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">a</span> else <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L55-L57","name":"dite_ite_distrib_right","line":55,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#dite_ite_distrib_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#dite_ite_distrib_right\"><span class=\"name\">dite_ite_distrib_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\">p</span>) =&gt; <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">hp</span></span> else <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hp</span></span></span></span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L50-L52","name":"dite_ite_distrib_left","line":50,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#dite_ite_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#dite_ite_distrib_left\"><span class=\"name\">dite_ite_distrib_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span>) =&gt; <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hp</span></span> else <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">hp</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L45-L47","name":"ite_dite_distrib_right","line":45,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#ite_dite_distrib_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#ite_dite_distrib_right\"><span class=\"name\">ite_dite_distrib_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">q</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">q</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if hq : <span class=\"fn\">q</span> then <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">hq</span></span> else <span class=\"fn\">c</span></span> else <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hq</span></span> else <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L40-L42","name":"ite_dite_distrib_left","line":40,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#ite_dite_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#ite_dite_distrib_left\"><span class=\"name\">ite_dite_distrib_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">q</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">a</span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">q</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if hq : <span class=\"fn\">q</span> then <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">a</span> else <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hq</span></span></span> else <span class=\"fn\">if <span class=\"fn\">p</span> then <span class=\"fn\">a</span> else <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">hq</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L34-L37","name":"dite_dite_distrib_right","line":34,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#dite_dite_distrib_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#dite_dite_distrib_right\"><span class=\"name\">dite_dite_distrib_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">q</span></span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\">p</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">hp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hp</span></span>)</span></span></span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if hq : <span class=\"fn\">q</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\">p</span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">hp</span> <span class=\"fn\">hq</span></span></span>)</span> <span class=\"fn\">c</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\">p</span>) =&gt; <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hp</span> <span class=\"fn\">hq</span></span></span>)</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L28-L31","name":"dite_dite_distrib_left","line":28,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#dite_dite_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#dite_dite_distrib_left\"><span class=\"name\">dite_dite_distrib_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">q</span></span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">hp</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if hq : <span class=\"fn\">q</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">b</span> <span class=\"fn\">hp</span> <span class=\"fn\">hq</span></span></span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">fun (<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">hp</span> <span class=\"fn\">hq</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L22-L22","name":"Eq.heq","line":22,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#Eq.heq","doc":"**Alias** of the reverse direction of `heq_iff_eq`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#Eq.heq\"><span class=\"name\">Eq</span>.<span class=\"name\">heq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">a </span>b : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Logic/Lemmas.lean#L22-L22","name":"HEq.eq","line":22,"kind":"theorem","docLink":"./Mathlib/Logic/Lemmas.html#HEq.eq","doc":"**Alias** of the forward direction of `heq_iff_eq`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Lemmas.html#HEq.eq\"><span class=\"name\">HEq</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">a </span>b : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></div></div>"}]}