{"name":"Mathlib.Tactic.Explode.Datatypes","instances":[{"typeNames":["Mathlib.Explode.Status"],"name":"Mathlib.Explode.instInhabitedStatus","className":"Inhabited"},{"typeNames":["Mathlib.Explode.Entries"],"name":"Mathlib.Explode.instInhabitedEntries","className":"Inhabited"}],"imports":["Init","Lean.Util.Trace"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L85-L86","name":"Mathlib.Explode.Entries.addSynonym","line":85,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.addSynonym","doc":"Add a pre-existing entry to the `ExprMap` for an additional expression.\nThis is used by `let` bindings where `expr` is an fvar. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.addSynonym\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">addSynonym</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(entries : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L76-L81","name":"Mathlib.Explode.Entries.add","line":76,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.add","doc":"Add the entry unless it already exists. Sets the `line` field to the next\navailable value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.add\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(entries : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L71-L72","name":"Mathlib.Explode.Entries.size","line":71,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.size","doc":"Length of our entries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.size\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(es : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L67-L68","name":"Mathlib.Explode.Entries.find?","line":67,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.find?","doc":"Find a row where `Entry.expr` == `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.find?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(es : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L64-L64","name":"Mathlib.Explode.instInhabitedEntries","line":64,"kind":"instance","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedEntries\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">instInhabitedEntries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L63-L63","name":"Mathlib.Explode.Entries.l","line":63,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.l","doc":"Simple list of `Expr`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.l\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">l</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L61-L61","name":"Mathlib.Explode.Entries.s","line":61,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.s","doc":"Allows us to compare `Expr`s fast. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.s\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L59-L59","name":"Mathlib.Explode.Entries.mk","line":59,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Mathlib.Explode.Entries</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L59-L64","name":"Mathlib.Explode.Entries","line":59,"kind":"structure","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries","doc":"Instead of simply keeping a list of entries (`List Entry`), we create a datatype `Entries`\nthat allows us to compare expressions faster. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L55-L55","name":"Mathlib.Explode.Entry.line!","line":55,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line!","doc":"Get the `line` for an `Entry` that has been added to the `Entries` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line!\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">line!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(entry : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L52-L52","name":"Mathlib.Explode.Entry.useAsDep","line":52,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.useAsDep","doc":"Whether or not to use this in future deps lists. Generally controlled by the `select` function\npassed to `explodeCore`. Exception: `âˆ€I` may ignore this for introduced hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.useAsDep\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">useAsDep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L49-L49","name":"Mathlib.Explode.Entry.deps","line":49,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.deps","doc":"Which other lines (aka rows) this row depends on.\n`none` means that the dependency has been filtered out of the table. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.deps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">deps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L46-L46","name":"Mathlib.Explode.Entry.thm","line":46,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.thm","doc":"What to display in the \"theorem applied\" column.\nMake sure to use `addMessageContext` if needed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.thm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">thm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L43-L43","name":"Mathlib.Explode.Entry.status","line":43,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.status","doc":"What `Status` this entry has - this only affects how `â”‚`s are displayed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.status\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">status</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L41-L41","name":"Mathlib.Explode.Entry.depth","line":41,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.depth","doc":"How many `if`s (aka lambda-abstractions) this row is nested under. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.depth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">depth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L39-L39","name":"Mathlib.Explode.Entry.line","line":39,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line","doc":"The row number, starting from `0`. This is set by `Entries.add`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">line</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L37-L37","name":"Mathlib.Explode.Entry.type","line":37,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.type","doc":"A type of this expression as a `MessageData`. Make sure to use `addMessageContext`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.type\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L35-L35","name":"Mathlib.Explode.Entry.mk","line":35,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(line : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(status : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(thm : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(deps : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useAsDep : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Mathlib.Explode.Entry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L35-L52","name":"Mathlib.Explode.Entry","line":35,"kind":"structure","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry","doc":"The row in the Fitch table. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L32-L32","name":"Mathlib.Explode.instInhabitedStatus","line":32,"kind":"instance","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedStatus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedStatus\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">instInhabitedStatus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L30-L31","name":"Mathlib.Explode.Status.reg","line":30,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.reg","doc":"`Entry.depth` * `â”‚` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.reg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">reg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L28-L29","name":"Mathlib.Explode.Status.lam","line":28,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.lam","doc":"`Entry.depth` * `â”‚` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.lam\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L26-L27","name":"Mathlib.Explode.Status.cintro","line":26,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.cintro","doc":"`Entry.depth` * `â”‚` + `â”œ` Continuation intro "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.cintro\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">cintro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L24-L25","name":"Mathlib.Explode.Status.intro","line":24,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.intro","doc":"`Entry.depth` * `â”‚` + `â”Œ` Normal intro "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.intro\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">intro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L22-L23","name":"Mathlib.Explode.Status.sintro","line":22,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.sintro","doc":"`â”œ` Start intro (top-level) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.sintro\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">sintro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Mathlib.Explode.Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Explode/Datatypes.lean#L21-L32","name":"Mathlib.Explode.Status","line":21,"kind":"inductive","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status","doc":"How to display pipes (`â”‚`) for this entry in the Fitch table . "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}