{"name":"Mathlib.SetTheory.ZFC.Basic","instances":[{"typeNames":["PSet"],"name":"PSet.setoid","className":"Setoid"},{"typeNames":["PSet"],"name":"PSet.instHasSubsetPSet","className":"HasSubset"},{"typeNames":["PSet"],"name":"PSet.instIsReflPSetSubsetInstHasSubsetPSet","className":"IsRefl"},{"typeNames":["PSet"],"name":"PSet.instIsTransPSetSubsetInstHasSubsetPSet","className":"IsTrans"},{"typeNames":["PSet","PSet"],"name":"PSet.instMembershipPSetPSet","className":"Membership"},{"typeNames":["PSet"],"name":"PSet.instWellFoundedRelationPSet","className":"WellFoundedRelation"},{"typeNames":["PSet"],"name":"PSet.instIsAsymmPSetMemInstMembershipPSetPSet","className":"IsAsymm"},{"typeNames":["PSet"],"name":"PSet.instIsIrreflPSetMemInstMembershipPSetPSet","className":"IsIrrefl"},{"typeNames":["PSet","Set"],"name":"PSet.instCoePSetSetPSet","className":"Coe"},{"typeNames":["PSet"],"name":"PSet.instEmptyCollectionPSet","className":"EmptyCollection"},{"typeNames":["PSet"],"name":"PSet.instInhabitedPSet","className":"Inhabited"},{"typeNames":["PSet.Type"],"name":"PSet.instIsEmptyTypeEmptyCollectionPSetInstEmptyCollectionPSet","className":"IsEmpty"},{"typeNames":["PSet","PSet"],"name":"PSet.instInsertPSetPSet","className":"Insert"},{"typeNames":["PSet","PSet"],"name":"PSet.instSingletonPSetPSet","className":"Singleton"},{"typeNames":["PSet","PSet"],"name":"PSet.instIsLawfulSingletonPSetInstEmptyCollectionPSetInstInsertPSetPSetInstSingletonPSetPSet","className":"IsLawfulSingleton"},{"typeNames":["PSet.Type"],"name":"PSet.instInhabitedTypeInsertPSetInstInsertPSetPSet","className":"Inhabited"},{"typeNames":["PSet","PSet"],"name":"PSet.instSepPSetPSet","className":"Sep"},{"typeNames":["PSet.Resp"],"name":"PSet.Resp.inhabited","className":"Inhabited"},{"typeNames":["PSet.Resp"],"name":"PSet.Resp.setoid","className":"Setoid"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instMembershipZFSetZFSet","className":"Membership"},{"typeNames":["Set.Elem"],"name":"ZFSet.small_toSet","className":"Small"},{"typeNames":["ZFSet"],"name":"ZFSet.hasSubset","className":"HasSubset"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsReflZFSetSubsetHasSubset","className":"IsRefl"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsTransZFSetSubsetHasSubset","className":"IsTrans"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsAntisymmZFSetSubsetHasSubset","className":"IsAntisymm"},{"typeNames":["ZFSet"],"name":"ZFSet.instEmptyCollectionZFSet","className":"EmptyCollection"},{"typeNames":["ZFSet"],"name":"ZFSet.instInhabitedZFSet","className":"Inhabited"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instInsertZFSetZFSet","className":"Insert"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instSingletonZFSetZFSet","className":"Singleton"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instIsLawfulSingletonZFSetInstEmptyCollectionZFSetInstInsertZFSetZFSetInstSingletonZFSetZFSet","className":"IsLawfulSingleton"},{"typeNames":["ZFSet","ZFSet"],"name":"ZFSet.instSepZFSetZFSet","className":"Sep"},{"typeNames":["ZFSet"],"name":"ZFSet.instUnionZFSet","className":"Union"},{"typeNames":["ZFSet"],"name":"ZFSet.instInterZFSet","className":"Inter"},{"typeNames":["ZFSet"],"name":"ZFSet.instSDiffZFSet","className":"SDiff"},{"typeNames":["ZFSet"],"name":"ZFSet.instWellFoundedRelationZFSet","className":"WellFoundedRelation"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsAsymmZFSetMemInstMembershipZFSetZFSet","className":"IsAsymm"},{"typeNames":["ZFSet"],"name":"ZFSet.instIsIrreflZFSetMemInstMembershipZFSetZFSet","className":"IsIrrefl"},{"typeNames":["OfNat.ofNat"],"name":"ZFSet.mapDefinableAux","className":"PSet.Definable"},{"typeNames":["ZFSet","Class"],"name":"instInsertZFSetClass","className":"Insert"},{"typeNames":["ZFSet","Class"],"name":"Class.instCoeZFSetClass","className":"Coe"},{"typeNames":["Class","Class"],"name":"Class.instMembershipClassClass","className":"Membership"},{"typeNames":["Class"],"name":"Class.instWellFoundedRelationClass","className":"WellFoundedRelation"},{"typeNames":["Class"],"name":"Class.instIsAsymmClassMemInstMembershipClassClass","className":"IsAsymm"},{"typeNames":["Class"],"name":"Class.instIsIrreflClassMemInstMembershipClassClass","className":"IsIrrefl"}],"imports":["Init","Mathlib.Data.Set.Lattice","Mathlib.Logic.Small.Basic","Mathlib.Logic.Function.OfArity","Mathlib.Order.WellFounded"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1798-L1803","name":"ZFSet.toSet_equiv","line":1798,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv","doc":"`ZFSet.toSet` as an equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span> // <span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1797-L1797","name":"ZFSet.toSet_equiv_apply_coe","line":1797,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv_apply_coe\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_equiv_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_equiv\">ZFSet.toSet_equiv</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1780-L1783","name":"ZFSet.choice_mem","line":1780,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(yx : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice\">ZFSet.choice</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\">′</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1775-L1777","name":"ZFSet.choice_isFunc","line":1775,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_isFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_isFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_isFunc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\">ZFSet.IsFunc</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice\">ZFSet.choice</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1768-L1771","name":"ZFSet.choice_mem_aux","line":1768,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice_mem_aux\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice_mem_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> ∉ <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(yx : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Classical.html#Classical.epsilon\">Classical.epsilon</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1764-L1765","name":"ZFSet.choice","line":1764,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice","doc":"A choice function on the class of nonempty ZFC sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.choice\"><span class=\"name\">ZFSet</span>.<span class=\"name\">choice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1749-L1758","name":"ZFSet.map_fval","line":1749,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_fval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_fval\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_fval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\">′</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1740-L1741","name":"Class.fval_ex","line":1740,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval_ex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval_ex\"><span class=\"name\">Class</span>.<span class=\"name\">fval_ex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\">′</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1737-L1738","name":"Class.«term_′_»","line":1737,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term_′_»","doc":"Function value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term_′_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term_′_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1733-L1734","name":"Class.fval","line":1733,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval","doc":"Function value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.fval\"><span class=\"name\">Class</span>.<span class=\"name\">fval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1725-L1729","name":"Class.iota_ex","line":1725,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_ex","doc":"Unlike the other set constructors, the `iota` definite descriptor\nis a set for any set input, but not constructively so, so there is no\nassociated `Class → Set` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_ex\"><span class=\"name\">Class</span>.<span class=\"name\">iota_ex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota\">Class.iota</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1716-L1719","name":"Class.iota_val","line":1716,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota_val\"><span class=\"name\">Class</span>.<span class=\"name\">iota_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota\">Class.iota</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1712-L1713","name":"Class.iota","line":1712,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota","doc":"The definite description operator, which is `{x}` if `{y | A y} = {x}` and `∅` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.iota\"><span class=\"name\">Class</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1699-L1707","name":"Class.eq_univ_of_powerset_subset","line":1699,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_powerset_subset","doc":"An induction principle for sets. If every subset of a class is a member, then the class is\nuniversal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_powerset_subset\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_of_powerset_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hA : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset\">Class.powerset</a> <span class=\"fn\">A</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1693-L1694","name":"Class.sInter_empty","line":1693,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_empty\"><span class=\"name\">Class</span>.<span class=\"name\">sInter_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1687-L1689","name":"Class.sUnion_empty","line":1687,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_empty\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1677-L1683","name":"Class.mem_sInter","line":1677,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1672-L1674","name":"Class.mem_of_mem_sInter","line":1672,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_of_mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_of_mem_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">mem_of_mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1668-L1669","name":"Class.coe_sInter","line":1668,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sInter\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1661-L1664","name":"Class.sInter_apply","line":1661,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter_apply\"><span class=\"name\">Class</span>.<span class=\"name\">sInter_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\">⋂₀</a> <span class=\"fn\">x</span></a>)</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1653-L1658","name":"Class.mem_sUnion","line":1653,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ z ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1647-L1649","name":"Class.coe_sUnion","line":1647,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1639-L1643","name":"Class.sUnion_apply","line":1639,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion_apply\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\">⋃₀</a> <span class=\"fn\">x</span></a>)</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1634-L1635","name":"Class.powerset_apply","line":1634,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset_apply\"><span class=\"name\">Class</span>.<span class=\"name\">powerset_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset\">Class.powerset</a> <span class=\"fn\">A</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1629-L1630","name":"Class.coe_powerset","line":1629,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_powerset\"><span class=\"name\">Class</span>.<span class=\"name\">coe_powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\">ZFSet.powerset</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset\">Class.powerset</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1624-L1625","name":"Class.coe_diff","line":1624,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_diff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_diff\"><span class=\"name\">Class</span>.<span class=\"name\">coe_diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1619-L1620","name":"Class.coe_inter","line":1619,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_inter\"><span class=\"name\">Class</span>.<span class=\"name\">coe_inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1614-L1615","name":"Class.coe_union","line":1614,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_union\"><span class=\"name\">Class</span>.<span class=\"name\">coe_union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1609-L1610","name":"Class.coe_insert","line":1609,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_insert\"><span class=\"name\">Class</span>.<span class=\"name\">coe_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1604-L1605","name":"Class.coe_empty","line":1604,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_empty\"><span class=\"name\">Class</span>.<span class=\"name\">coe_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1598-L1600","name":"Class.coe_sep","line":1598,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_sep\"><span class=\"name\">Class</span>.<span class=\"name\">coe_sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1593-L1594","name":"Class.coe_subset","line":1593,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_subset\"><span class=\"name\">Class</span>.<span class=\"name\">coe_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1588-L1589","name":"Class.coe_apply","line":1588,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_apply\"><span class=\"name\">Class</span>.<span class=\"name\">coe_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1583-L1584","name":"Class.coe_mem","line":1583,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.coe_mem\"><span class=\"name\">Class</span>.<span class=\"name\">coe_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1578-L1579","name":"Class.toSet_of_ZFSet","line":1578,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.toSet_of_ZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.toSet_of_ZFSet\"><span class=\"name\">Class</span>.<span class=\"name\">toSet_of_ZFSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ToSet\">Class.ToSet</a> <span class=\"fn\">A</span> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1571-L1574","name":"Class.ofSet.inj","line":1571,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet.inj\"><span class=\"name\">Class</span>.<span class=\"name\">ofSet</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1568-L1569","name":"Class.«term⋂₀_»","line":1568,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋂₀_»","doc":"The intersection of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋂₀_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term⋂₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1565-L1566","name":"Class.sInter","line":1565,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter","doc":"The intersection of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sInter\"><span class=\"name\">Class</span>.<span class=\"name\">sInter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1561-L1562","name":"Class.«term⋃₀_»","line":1561,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋃₀_»","doc":"The union of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.«term⋃₀_»\"><span class=\"name\">Class</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1557-L1558","name":"Class.sUnion","line":1557,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion","doc":"The union of a class is the class of all members of ZFC sets in the class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sUnion\"><span class=\"name\">Class</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1552-L1553","name":"Class.powerset","line":1552,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset","doc":"The power class of a class is the class of all subclasses that are ZFC sets "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.powerset\"><span class=\"name\">Class</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1546-L1548","name":"Class.classToCong_empty","line":1546,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong_empty\"><span class=\"name\">Class</span>.<span class=\"name\">classToCong_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong\">Class.classToCong</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1541-L1542","name":"Class.classToCong","line":1541,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong","doc":"Convert a class into a conglomerate (a collection of classes) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.classToCong\"><span class=\"name\">Class</span>.<span class=\"name\">classToCong</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1534-L1537","name":"Class.congToClass_empty","line":1534,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass_empty\"><span class=\"name\">Class</span>.<span class=\"name\">congToClass_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass\">Class.congToClass</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1529-L1530","name":"Class.congToClass","line":1529,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass","doc":"Convert a conglomerate (a collection of classes) into a class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.congToClass\"><span class=\"name\">Class</span>.<span class=\"name\">congToClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1524-L1525","name":"Class.univ_not_mem_univ","line":1524,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ_not_mem_univ","doc":"**There is no universal set.**\nThis is stated as `univ ∉ univ`, meaning that `univ` (the class of all sets) is proper (does not\nbelong to the class of all sets). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ_not_mem_univ\"><span class=\"name\">Class</span>.<span class=\"name\">univ_not_mem_univ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a> ∉ <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1517-L1518","name":"Class.mem_irrefl","line":1517,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_irrefl\"><span class=\"name\">Class</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1513-L1514","name":"Class.mem_asymm","line":1513,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_asymm\"><span class=\"name\">Class</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1510-L1511","name":"Class.instIsIrreflClassMemInstMembershipClassClass","line":1510,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsIrreflClassMemInstMembershipClassClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsIrreflClassMemInstMembershipClassClass\"><span class=\"name\">Class</span>.<span class=\"name\">instIsIrreflClassMemInstMembershipClassClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1506-L1507","name":"Class.instIsAsymmClassMemInstMembershipClassClass","line":1506,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsAsymmClassMemInstMembershipClassClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instIsAsymmClassMemInstMembershipClassClass\"><span class=\"name\">Class</span>.<span class=\"name\">instIsAsymmClassMemInstMembershipClassClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAsymm\">IsAsymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1503-L1504","name":"Class.instWellFoundedRelationClass","line":1503,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instWellFoundedRelationClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instWellFoundedRelationClass\"><span class=\"name\">Class</span>.<span class=\"name\">instWellFoundedRelationClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1492-L1500","name":"Class.mem_wf","line":1492,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_wf\"><span class=\"name\">Class</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1488-L1489","name":"Class.eq_univ_of_forall","line":1488,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_of_forall\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_of_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1484-L1485","name":"Class.eq_univ_iff_forall","line":1484,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_iff_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.eq_univ_iff_forall\"><span class=\"name\">Class</span>.<span class=\"name\">eq_univ_iff_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1480-L1481","name":"Class.mem_univ_hom","line":1480,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ_hom\"><span class=\"name\">Class</span>.<span class=\"name\">mem_univ_hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1475-L1476","name":"Class.mem_univ","line":1475,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_univ\"><span class=\"name\">Class</span>.<span class=\"name\">mem_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\">Class.univ</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1470-L1471","name":"Class.not_empty_hom","line":1470,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_empty_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_empty_hom\"><span class=\"name\">Class</span>.<span class=\"name\">not_empty_hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1466-L1466","name":"Class.not_mem_empty","line":1466,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.not_mem_empty\"><span class=\"name\">Class</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1461-L1462","name":"Class.mem_def","line":1461,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.mem_def\"><span class=\"name\">Class</span>.<span class=\"name\">mem_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1458-L1459","name":"Class.instMembershipClassClass","line":1458,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instMembershipClassClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instMembershipClassClass\"><span class=\"name\">Class</span>.<span class=\"name\">instMembershipClassClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1454-L1455","name":"Class.Mem","line":1454,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.Mem","doc":"`A ∈ B` if `A` is a ZFC set which satisfies `B` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.Mem\"><span class=\"name\">Class</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1449-L1450","name":"Class.ToSet","line":1449,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ToSet","doc":"Assert that `A` is a ZFC set satisfying `B` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ToSet\"><span class=\"name\">Class</span>.<span class=\"name\">ToSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1444-L1445","name":"Class.univ","line":1444,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ","doc":"The universal class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.univ\"><span class=\"name\">Class</span>.<span class=\"name\">univ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1440-L1441","name":"Class.instCoeZFSetClass","line":1440,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.instCoeZFSetClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.instCoeZFSetClass\"><span class=\"name\">Class</span>.<span class=\"name\">instCoeZFSetClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1436-L1437","name":"Class.ofSet","line":1436,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet","doc":"Coerce a ZFC set into a class "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ofSet\"><span class=\"name\">Class</span>.<span class=\"name\">ofSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1430-L1431","name":"Class.ext_iff","line":1430,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext_iff\"><span class=\"name\">Class</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1426-L1427","name":"Class.ext","line":1426,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.ext\"><span class=\"name\">Class</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1422-L1423","name":"Class.sep","line":1422,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class.sep","doc":"`{x ∈ A | p x}` is the class of elements in `A` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class.sep\"><span class=\"name\">Class</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1415-L1416","name":"instInsertZFSetClass","line":1415,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#instInsertZFSetClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#instInsertZFSetClass\"><span class=\"name\">instInsertZFSetClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\">Class</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1411-L1412","name":"Class","line":1411,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Class","doc":"The collection of all classes.\nWe define `Class` as `Set ZFSet`, as this allows us to get many instances automatically. However, in\npractice, we treat it as (the definitionally equal) `ZFSet → Prop`. This means, the preferred way to\nstate that `x : ZFSet` belongs to `A : Class` is to write `A x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Class\"><span class=\"name\">Class</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1395-L1400","name":"ZFSet.Hereditarily.empty","line":1395,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1391-L1392","name":"ZFSet.Hereditarily.mem","line":1391,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1387-L1388","name":"ZFSet.Hereditarily.self","line":1387,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.self\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1384-L1384","name":"ZFSet.Hereditarily.def","line":1384,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.def","doc":"**Alias** of the forward direction of `ZFSet.hereditarily_iff`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily.def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span>.<span class=\"name\">def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1380-L1381","name":"ZFSet.hereditarily_iff","line":1380,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hereditarily_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hereditarily_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">hereditarily_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\">ZFSet.Hereditarily</a> <span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1371-L1373","name":"ZFSet.Hereditarily","line":1371,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily","doc":"Given a predicate `p` on ZFC sets. `Hereditarily p x` means that `x` has property `p` and the\nmembers of `x` are all `Hereditarily p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Hereditarily\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Hereditarily</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1357-L1366","name":"ZFSet.map_isFunc","line":1357,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_isFunc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_isFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_isFunc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\">ZFSet.IsFunc</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1348-L1353","name":"ZFSet.map_unique","line":1348,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map_unique\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zx : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃! (<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">z</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1343-L1345","name":"ZFSet.mem_map","line":1343,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_map\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\">ZFSet.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ z ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">z</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1338-L1339","name":"ZFSet.map","line":1338,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map","doc":"Graph of a function: `map f x` is the ZFC function which maps `a ∈ x` to `f a` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.map\"><span class=\"name\">ZFSet</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1332-L1334","name":"ZFSet.mapDefinableAux","line":1332,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mapDefinableAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mapDefinableAux\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mapDefinableAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1325-L1325","name":"ZFSet.mem_funs","line":1325,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_funs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_funs\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_funs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs\">ZFSet.funs</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\">ZFSet.IsFunc</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1320-L1321","name":"ZFSet.funs","line":1320,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs","doc":"`funs x y` is `y ^ x`, the set of all set functions `x → y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.funs\"><span class=\"name\">ZFSet</span>.<span class=\"name\">funs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1315-L1316","name":"ZFSet.IsFunc","line":1315,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc","doc":"`isFunc x y f` is the assertion that `f` is a subset of `x × y` which relates to each element\nof `x` a unique element of `y`, so that we can consider `f` as a ZFC function `x → y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.IsFunc\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsFunc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1309-L1310","name":"ZFSet.pair_mem_prod","line":1309,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_mem_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_mem_prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_mem_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod\">ZFSet.prod</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1305-L1306","name":"ZFSet.mem_prod","line":1305,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod\">ZFSet.prod</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ a ∈ <span class=\"fn\">x</span>, <span class=\"fn\">∃ b ∈ <span class=\"fn\">y</span>, <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1300-L1301","name":"ZFSet.prod","line":1300,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod","doc":"The cartesian product, `{(a, b) | a ∈ x, b ∈ y}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.prod\"><span class=\"name\">ZFSet</span>.<span class=\"name\">prod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1295-L1296","name":"ZFSet.pair_inj","line":1295,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x' : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y' : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">x'</span> <span class=\"fn\">y'</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1272-L1291","name":"ZFSet.pair_injective","line":1272,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1261-L1269","name":"ZFSet.mem_pairSep","line":1261,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pairSep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pairSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_pairSep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep\">ZFSet.pairSep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ a ∈ <span class=\"fn\">x</span>, <span class=\"fn\">∃ b ∈ <span class=\"fn\">y</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1256-L1257","name":"ZFSet.pairSep","line":1256,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep","doc":"A subset of pairs `{(a, b) ∈ x × y | p a b}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pairSep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pairSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1252-L1252","name":"ZFSet.toSet_pair","line":1252,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_pair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\">ZFSet.pair</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">{<span class=\"fn\">x</span>}</span>, <span class=\"fn\">{<span class=\"fn\">x</span>, <span class=\"fn\">y</span>}</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1247-L1248","name":"ZFSet.pair","line":1247,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair","doc":"Kuratowski ordered pair "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">pair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1240-L1243","name":"ZFSet.toSet_range","line":1240,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\">ZFSet.range</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1228-L1236","name":"ZFSet.mem_range","line":1228,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\">ZFSet.range</a> <span class=\"fn\">f</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1223-L1224","name":"ZFSet.range","line":1223,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range","doc":"The range of an indexed family of sets. The universes allow for a more general index type\nwithout manual use of `ULift`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.range\"><span class=\"name\">ZFSet</span>.<span class=\"name\">range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1215-L1218","name":"ZFSet.toSet_image","line":1215,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">ZFSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1205-L1211","name":"ZFSet.mem_image","line":1205,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">ZFSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ z ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1199-L1201","name":"ZFSet.image.mk","line":1199,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">image</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\">ZFSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1187-L1196","name":"ZFSet.image","line":1187,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image","doc":"The image of a (definable) ZFC set function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.image\"><span class=\"name\">ZFSet</span>.<span class=\"name\">image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">1</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1177-L1183","name":"ZFSet.regularity","line":1177,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.regularity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.regularity\"><span class=\"name\">ZFSet</span>.<span class=\"name\">regularity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ y ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1173-L1174","name":"ZFSet.mem_irrefl","line":1173,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_irrefl\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1169-L1170","name":"ZFSet.mem_asymm","line":1169,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_asymm\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1166-L1167","name":"ZFSet.instIsIrreflZFSetMemInstMembershipZFSetZFSet","line":1166,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsIrreflZFSetMemInstMembershipZFSetZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsIrreflZFSetMemInstMembershipZFSetZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsIrreflZFSetMemInstMembershipZFSetZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1162-L1163","name":"ZFSet.instIsAsymmZFSetMemInstMembershipZFSetZFSet","line":1162,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAsymmZFSetMemInstMembershipZFSetZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAsymmZFSetMemInstMembershipZFSetZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsAsymmZFSetMemInstMembershipZFSetZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAsymm\">IsAsymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1159-L1160","name":"ZFSet.instWellFoundedRelationZFSet","line":1159,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instWellFoundedRelationZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instWellFoundedRelationZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instWellFoundedRelationZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1155-L1156","name":"ZFSet.inductionOn","line":1155,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inductionOn","doc":"Induction on the `∈` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inductionOn\"><span class=\"name\">ZFSet</span>.<span class=\"name\">inductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1148-L1150","name":"ZFSet.mem_wf","line":1148,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_wf\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1144-L1145","name":"ZFSet.sUnion_pair","line":1144,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">{<span class=\"fn\">x</span>, <span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1139-L1140","name":"ZFSet.mem_diff","line":1139,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_diff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_diff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_diff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">z</span> ∉ <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1134-L1135","name":"ZFSet.mem_inter","line":1134,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1128-L1130","name":"ZFSet.mem_union","line":1128,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1121-L1124","name":"ZFSet.toSet_sdiff","line":1121,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sdiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sdiff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sdiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1114-L1117","name":"ZFSet.toSet_inter","line":1114,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1108-L1110","name":"ZFSet.toSet_union","line":1108,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1104-L1105","name":"ZFSet.instSDiffZFSet","line":1104,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSDiffZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSDiffZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSDiffZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#SDiff\">SDiff</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1101-L1102","name":"ZFSet.instInterZFSet","line":1101,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInterZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInterZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInterZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Inter\">Inter</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1098-L1099","name":"ZFSet.instUnionZFSet","line":1098,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instUnionZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instUnionZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instUnionZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Union\">Union</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1094-L1095","name":"ZFSet.diff","line":1094,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.diff","doc":"The set difference operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.diff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1089-L1090","name":"ZFSet.inter","line":1089,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inter","doc":"The binary intersection operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">inter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1084-L1085","name":"ZFSet.union","line":1084,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.union","doc":"The binary union operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1079-L1080","name":"ZFSet.singleton_inj","line":1079,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span>}</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1073-L1075","name":"ZFSet.singleton_injective","line":1073,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">singleton</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1068-L1070","name":"ZFSet.toSet_sInter","line":1068,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Lattice.html#Set.sInter\">⋂₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1063-L1065","name":"ZFSet.toSet_sUnion","line":1063,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Lattice.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1058-L1059","name":"ZFSet.sInter_singleton","line":1058,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1053-L1054","name":"ZFSet.sUnion_singleton","line":1053,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1048-L1049","name":"ZFSet.not_mem_sInter_of_not_mem","line":1048,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_sInter_of_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_sInter_of_not_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_mem_sInter_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1044-L1045","name":"ZFSet.mem_sUnion_of_mem","line":1044,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sUnion_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1038-L1041","name":"ZFSet.mem_of_mem_sInter","line":1038,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_of_mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_of_mem_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_of_mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hy : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hz : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1035-L1035","name":"ZFSet.sInter_empty","line":1035,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1029-L1031","name":"ZFSet.sUnion_empty","line":1029,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1022-L1025","name":"ZFSet.mem_sInter","line":1022,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\">⋂₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">z</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1016-L1019","name":"ZFSet.mem_sUnion","line":1016,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ z ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1012-L1013","name":"ZFSet.«term⋂₀_»","line":1012,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋂₀_»","doc":"The intersection operator, the collection of elements in all of the elements of a ZFC set. We\nspecial-case `⋂₀ ∅ = ∅`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋂₀_»\"><span class=\"name\">ZFSet</span>.<span class=\"name\">«term⋂₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1008-L1009","name":"ZFSet.sInter","line":1008,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter","doc":"The intersection operator, the collection of elements in all of the elements of a ZFC set. We\nspecial-case `⋂₀ ∅ = ∅`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sInter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sInter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L1003-L1004","name":"ZFSet.«term⋃₀_»","line":1003,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋃₀_»","doc":"The union operator, the collection of elements of elements of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.«term⋃₀_»\"><span class=\"name\">ZFSet</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L994-L1000","name":"ZFSet.sUnion","line":994,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion","doc":"The union operator, the collection of elements of elements of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L977-L990","name":"ZFSet.sUnion_lem","line":977,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion_lem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sUnion_lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(B : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(αβ : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∃ (b : <span class=\"fn\">β</span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">B</span> <span class=\"fn\">b</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">β</span> <span class=\"fn\">B</span></span></span>)</span></span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">β</span> <span class=\"fn\">B</span></span></span>)</span> <span class=\"fn\">b</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L972-L974","name":"ZFSet.mem_powerset","line":972,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\">ZFSet.powerset</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L957-L968","name":"ZFSet.powerset","line":957,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset","doc":"The powerset operation, the collection of subsets of a ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L950-L953","name":"ZFSet.toSet_sep","line":950,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> | <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L939-L946","name":"ZFSet.mem_sep","line":939,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_sep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\">ZFSet.sep</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L935-L936","name":"ZFSet.instSepZFSetZFSet","line":935,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSepZFSetZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSepZFSetZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSepZFSetZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Sep\">Sep</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L923-L931","name":"ZFSet.sep","line":923,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep","doc":"`{x ∈ a | p x}` is the set of elements in `a` satisfying `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sep\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L913-L919","name":"ZFSet.omega_succ","line":913,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_succ\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">ZFSet.omega</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">ZFSet.omega</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L908-L909","name":"ZFSet.omega_zero","line":908,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega_zero\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\">ZFSet.omega</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L903-L904","name":"ZFSet.omega","line":903,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega","doc":"`omega` is the first infinite von Neumann ordinal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.omega\"><span class=\"name\">ZFSet</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L898-L899","name":"ZFSet.mem_pair","line":898,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_pair\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_pair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">{<span class=\"fn\">y</span>, <span class=\"fn\">z</span>}</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L894-L895","name":"ZFSet.singleton_nonempty","line":894,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.singleton_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">singleton_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">{<span class=\"fn\">u</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L890-L891","name":"ZFSet.insert_nonempty","line":890,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.insert_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.insert_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">insert_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L885-L887","name":"ZFSet.toSet_singleton","line":885,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">x</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L879-L881","name":"ZFSet.mem_singleton","line":879,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_singleton\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">{<span class=\"fn\">y</span>}</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L873-L875","name":"ZFSet.toSet_insert","line":873,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L868-L869","name":"ZFSet.mem_insert_of_mem","line":868,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L864-L865","name":"ZFSet.mem_insert","line":864,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L851-L861","name":"ZFSet.mem_insert_iff","line":851,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_insert_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_insert_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L847-L848","name":"ZFSet.instIsLawfulSingletonZFSetInstEmptyCollectionZFSetInstInsertZFSetZFSetInstSingletonZFSetZFSet","line":847,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsLawfulSingletonZFSetInstEmptyCollectionZFSetInstInsertZFSetZFSetInstSingletonZFSetZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsLawfulSingletonZFSetInstEmptyCollectionZFSetInstInsertZFSetZFSetInstSingletonZFSetZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsLawfulSingletonZFSetInstEmptyCollectionZFSetInstInsertZFSetZFSetInstSingletonZFSetZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#IsLawfulSingleton\">IsLawfulSingleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L844-L845","name":"ZFSet.instSingletonZFSetZFSet","line":844,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSingletonZFSetZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instSingletonZFSetZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instSingletonZFSetZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Singleton\">Singleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L841-L842","name":"ZFSet.instInsertZFSetZFSet","line":841,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInsertZFSetZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInsertZFSetZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInsertZFSetZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L824-L838","name":"ZFSet.Insert","line":824,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Insert","doc":"`Insert x y` is the set `{x} ∪ y` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Insert\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Insert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L818-L820","name":"ZFSet.eq_empty_or_nonempty","line":818,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty_or_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty_or_nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq_empty_or_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L813-L815","name":"ZFSet.eq_empty","line":813,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L806-L810","name":"ZFSet.nonempty_mk_iff","line":806,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_mk_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_mk_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_mk_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\">PSet.Nonempty</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L802-L802","name":"ZFSet.not_nonempty_empty","line":802,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_nonempty_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_nonempty_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_nonempty_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L797-L798","name":"ZFSet.empty_subset","line":797,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">empty_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L793-L793","name":"ZFSet.toSet_empty","line":793,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L788-L789","name":"ZFSet.not_mem_empty","line":788,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.not_mem_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L784-L785","name":"ZFSet.instInhabitedZFSet","line":784,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInhabitedZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instInhabitedZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instInhabitedZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L781-L782","name":"ZFSet.instEmptyCollectionZFSet","line":781,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instEmptyCollectionZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instEmptyCollectionZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instEmptyCollectionZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L777-L778","name":"ZFSet.empty","line":777,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty","doc":"The empty ZFC set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L773-L774","name":"ZFSet.instIsAntisymmZFSetSubsetHasSubset","line":773,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAntisymmZFSetSubsetHasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsAntisymmZFSetSubsetHasSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsAntisymmZFSetSubsetHasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAntisymm\">IsAntisymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L769-L770","name":"ZFSet.toSet_inj","line":769,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_inj\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L765-L765","name":"ZFSet.toSet_injective","line":765,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_injective\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L761-L762","name":"ZFSet.ext_iff","line":761,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L757-L758","name":"ZFSet.ext","line":757,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.ext\"><span class=\"name\">ZFSet</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L752-L753","name":"ZFSet.toSet_subset_iff","line":752,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet_subset_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet_subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L743-L748","name":"ZFSet.subset_iff","line":743,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L739-L740","name":"ZFSet.instIsTransZFSetSubsetHasSubset","line":739,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsTransZFSetSubsetHasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsTransZFSetSubsetHasSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsTransZFSetSubsetHasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsTrans\">IsTrans</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L736-L737","name":"ZFSet.instIsReflZFSetSubsetHasSubset","line":736,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsReflZFSetSubsetHasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instIsReflZFSetSubsetHasSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instIsReflZFSetSubsetHasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsRefl\">IsRefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L732-L733","name":"ZFSet.subset_def","line":732,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.subset_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">subset_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L728-L729","name":"ZFSet.hasSubset","line":728,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hasSubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.hasSubset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">hasSubset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#HasSubset\">HasSubset</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L724-L725","name":"ZFSet.Subset","line":724,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Subset","doc":"`x ⊆ y` as ZFC sets means that all members of `x` are members of `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L719-L720","name":"ZFSet.nonempty_toSet_iff","line":719,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_toSet_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_toSet_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_toSet_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">u</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L714-L715","name":"ZFSet.nonempty_of_mem","line":714,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L710-L711","name":"ZFSet.nonempty_def","line":710,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.nonempty_def\"><span class=\"name\">ZFSet</span>.<span class=\"name\">nonempty_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\">ZFSet.Nonempty</a> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L706-L707","name":"ZFSet.Nonempty","line":706,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty","doc":"A nonempty set is one that contains some element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Nonempty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L695-L702","name":"ZFSet.small_toSet","line":695,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.small_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.small_toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">small_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a>        <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L691-L692","name":"ZFSet.mem_toSet","line":691,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mem_toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mem_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\">ZFSet.toSet</a> <span class=\"fn\">u</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L686-L687","name":"ZFSet.toSet","line":686,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet","doc":"Convert a ZFC set into a `set` of ZFC sets "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.toSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L681-L682","name":"ZFSet.mk_mem_iff","line":681,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_mem_iff\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L677-L678","name":"ZFSet.instMembershipZFSetZFSet","line":677,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instMembershipZFSetZFSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.instMembershipZFSetZFSet\"><span class=\"name\">ZFSet</span>.<span class=\"name\">instMembershipZFSetZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L672-L674","name":"ZFSet.Mem","line":672,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Mem","doc":"The membership relation for ZFC sets is inherited from the membership relation for pre-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.Mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L666-L668","name":"ZFSet.eval_mk","line":666,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eval_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eval_mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eval_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.f\">PSet.Resp.f</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L661-L662","name":"ZFSet.exact","line":661,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.exact\"><span class=\"name\">ZFSet</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L657-L658","name":"ZFSet.sound","line":657,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sound\"><span class=\"name\">ZFSet</span>.<span class=\"name\">sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L653-L654","name":"ZFSet.eq","line":653,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.eq\"><span class=\"name\">ZFSet</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L649-L650","name":"ZFSet.mk_out","line":649,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_out\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_out</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quotient.out\">Quotient.out</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L644-L645","name":"ZFSet.mk_eq","line":644,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk_eq\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\">ZFSet.mk</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L639-L640","name":"ZFSet.mk","line":639,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk","doc":"Turns a pre-set into a ZFC set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L616-L629","name":"Classical.allDefinable","line":616,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#Classical.allDefinable","doc":"All functions are classically definable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#Classical.allDefinable\"><span class=\"name\">Classical</span>.<span class=\"name\">allDefinable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L604-L606","name":"PSet.Definable.eq","line":604,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.eq\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[H : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.Resp\">PSet.Definable.Resp</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L600-L601","name":"PSet.Definable.Resp","line":600,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.Resp","doc":"Turns a definable function into a function that respects equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.Resp\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">Resp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L594-L596","name":"PSet.Definable.EqMk","line":594,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.EqMk","doc":"The evaluation of a function respecting equivalence is definable, by that same function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.EqMk\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">EqMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L588-L588","name":"PSet.Definable.mk","line":588,"kind":"ctor","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable.mk\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\">PSet.Definable</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L587-L588","name":"PSet.Definable","line":587,"kind":"class","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable","doc":"A set function is \"definable\" if it is the image of some n-ary pre-set\nfunction. This isn't exactly definability, but is useful as a sufficient\ncondition for functions that have a computable image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Definable\"><span class=\"name\">PSet</span>.<span class=\"name\">Definable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> (u + 1)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L577-L579","name":"PSet.Resp.eval_val","line":577,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval_val\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">eval_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">⟦<span class=\"fn\">x</span>⟧</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\">PSet.Resp.eval</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.f\">PSet.Resp.f</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L573-L574","name":"PSet.Resp.eval","line":573,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval","doc":"An equivalence-respecting function yields an n-ary ZFC set function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.eval\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L558-L569","name":"PSet.Resp.evalAux","line":558,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.evalAux","doc":"Helper function for `PSet.eval`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.evalAux\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">evalAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet</a> <span class=\"fn\">n</span></span></span> // <span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span></span></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L549-L550","name":"ZFSet","line":549,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet","doc":"The ZFC universe of sets consists of the type of pre-sets,\nquotiented by extensional equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\"><span class=\"name\">ZFSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L541-L542","name":"PSet.Resp.setoid","line":541,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.setoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.setoid\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">setoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L536-L538","name":"PSet.Resp.Equiv.trans","line":536,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.trans\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L531-L532","name":"PSet.Resp.Equiv.symm","line":531,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.symm\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L523-L527","name":"PSet.Resp.Equiv.euc","line":523,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.euc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.euc\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">euc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">c</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L519-L520","name":"PSet.Resp.Equiv.refl","line":519,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv.refl\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\">PSet.Resp.Equiv</a> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L514-L515","name":"PSet.Resp.Equiv","line":514,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv","doc":"Function equivalence for functions respecting equivalence. See `PSet.Arity.Equiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.Equiv\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L509-L510","name":"PSet.Resp.f","line":509,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.f","doc":"The `n`-ary image of a `(n + 1)`-ary function respecting equivalence as a function respecting\nequivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.f\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L503-L504","name":"PSet.Resp.inhabited","line":503,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp.inhabited\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\">PSet.Resp</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L499-L500","name":"PSet.Resp","line":499,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp","doc":"`resp n` is the collection of n-ary functions on `PSet` that respect\nequivalence, i.e. when the inputs are equivalent the output is as well. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Resp\"><span class=\"name\">PSet</span>.<span class=\"name\">Resp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L491-L494","name":"PSet.Arity.equiv_const","line":491,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.equiv_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.equiv_const\"><span class=\"name\">PSet</span>.<span class=\"name\">Arity</span>.<span class=\"name\">equiv_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.Equiv\">PSet.Arity.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity.const\">Function.OfArity.const</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L486-L488","name":"PSet.Arity.Equiv","line":486,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.Equiv","doc":"Function equivalence is defined so that `f ~ g` iff `∀ x y, x ~ y → f x ~ g y`. This extends to\nequivalence of `n`-ary functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Arity.Equiv\"><span class=\"name\">PSet</span>.<span class=\"name\">Arity</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/OfArity.html#Function.OfArity\">Function.OfArity</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L480-L481","name":"PSet.lift_mem_embed","line":480,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.lift_mem_embed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.lift_mem_embed\"><span class=\"name\">PSet</span>.<span class=\"name\">lift_mem_embed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Lift\">PSet.Lift</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.embed\">PSet.embed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L476-L477","name":"PSet.embed","line":476,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.embed","doc":"Embedding of one universe in another "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.embed\"><span class=\"name\">PSet</span>.<span class=\"name\">embed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L469-L470","name":"PSet.Lift","line":469,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Lift","doc":"Universe lift operation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Lift\"><span class=\"name\">PSet</span>.<span class=\"name\">Lift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L462-L465","name":"PSet.mem_image","line":462,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_image\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.image\">PSet.image</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ z ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">z</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L457-L458","name":"PSet.image","line":457,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.image","doc":"The image of a function from pre-sets to pre-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.image\"><span class=\"name\">PSet</span>.<span class=\"name\">image</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L451-L453","name":"PSet.toSet_sUnion","line":451,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_sUnion\"><span class=\"name\">PSet</span>.<span class=\"name\">toSet_sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Lattice.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <span class=\"fn\">x</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L437-L447","name":"PSet.mem_sUnion","line":437,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_sUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_sUnion\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ z ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L433-L434","name":"PSet.«term⋃₀_»","line":433,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.«term⋃₀_»","doc":"The pre-set union operator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.«term⋃₀_»\"><span class=\"name\">PSet</span>.<span class=\"name\">«term⋃₀_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L429-L430","name":"PSet.sUnion","line":429,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion","doc":"The pre-set union operator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sUnion\"><span class=\"name\">PSet</span>.<span class=\"name\">sUnion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L419-L425","name":"PSet.mem_powerset","line":419,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_powerset\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.powerset\">PSet.powerset</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L414-L415","name":"PSet.powerset","line":414,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.powerset","doc":"The pre-set powerset operator "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.powerset\"><span class=\"name\">PSet</span>.<span class=\"name\">powerset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L410-L411","name":"PSet.instSepPSetPSet","line":410,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSepPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSepPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instSepPSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Sep\">Sep</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L406-L407","name":"PSet.sep","line":406,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sep","doc":"The pre-set separation operation `{x ∈ a | p x}` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.sep\"><span class=\"name\">PSet</span>.<span class=\"name\">sep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L401-L402","name":"PSet.omega","line":401,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.omega","doc":"The von Neumann ordinal ω "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.omega\"><span class=\"name\">PSet</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L395-L397","name":"PSet.ofNat","line":395,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.ofNat","doc":"The n-th von Neumann ordinal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.ofNat\"><span class=\"name\">PSet</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L391-L392","name":"PSet.instInhabitedTypeInsertPSetInstInsertPSetPSet","line":391,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabitedTypeInsertPSetInstInsertPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabitedTypeInsertPSetInstInsertPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instInhabitedTypeInsertPSetInstInsertPSetPSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L388-L389","name":"PSet.instIsLawfulSingletonPSetInstEmptyCollectionPSetInstInsertPSetPSetInstSingletonPSetPSet","line":388,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsLawfulSingletonPSetInstEmptyCollectionPSetInstInsertPSetPSetInstSingletonPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsLawfulSingletonPSetInstEmptyCollectionPSetInstInsertPSetPSetInstSingletonPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsLawfulSingletonPSetInstEmptyCollectionPSetInstInsertPSetPSetInstSingletonPSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#IsLawfulSingleton\">IsLawfulSingleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L385-L386","name":"PSet.instSingletonPSetPSet","line":385,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSingletonPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instSingletonPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instSingletonPSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Singleton\">Singleton</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L382-L383","name":"PSet.instInsertPSetPSet","line":382,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInsertPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInsertPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instInsertPSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#Insert\">Insert</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L378-L379","name":"PSet.insert","line":378,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.insert","doc":"Insert an element into a pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.insert\"><span class=\"name\">PSet</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L373-L374","name":"PSet.equiv_empty","line":373,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L370-L370","name":"PSet.not_nonempty_empty","line":370,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_nonempty_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_nonempty_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">not_nonempty_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\">PSet.Nonempty</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L366-L366","name":"PSet.empty_subset","line":366,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty_subset\"><span class=\"name\">PSet</span>.<span class=\"name\">empty_subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L362-L362","name":"PSet.toSet_empty","line":362,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">toSet_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L357-L358","name":"PSet.not_mem_empty","line":357,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.not_mem_empty\"><span class=\"name\">PSet</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L353-L354","name":"PSet.instIsEmptyTypeEmptyCollectionPSetInstEmptyCollectionPSet","line":353,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsEmptyTypeEmptyCollectionPSetInstEmptyCollectionPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsEmptyTypeEmptyCollectionPSetInstEmptyCollectionPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsEmptyTypeEmptyCollectionPSetInstEmptyCollectionPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L350-L351","name":"PSet.instInhabitedPSet","line":350,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabitedPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instInhabitedPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instInhabitedPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L347-L348","name":"PSet.instEmptyCollectionPSet","line":347,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instEmptyCollectionPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instEmptyCollectionPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instEmptyCollectionPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L343-L344","name":"PSet.empty","line":343,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty","doc":"The empty pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.empty\"><span class=\"name\">PSet</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L339-L340","name":"PSet.instCoePSetSetPSet","line":339,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instCoePSetSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instCoePSetSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instCoePSetSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L335-L336","name":"PSet.Equiv.eq","line":335,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.eq","doc":"Two pre-sets are equivalent iff they have the same members. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.eq\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L330-L331","name":"PSet.nonempty_of_nonempty_type","line":330,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_nonempty_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_nonempty_type\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_of_nonempty_type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\">PSet.Nonempty</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L326-L327","name":"PSet.nonempty_type_iff_nonempty","line":326,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_type_iff_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_type_iff_nonempty\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_type_iff_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\">PSet.Nonempty</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L322-L323","name":"PSet.nonempty_toSet_iff","line":322,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_toSet_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_toSet_iff\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_toSet_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <span class=\"fn\">u</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\">PSet.Nonempty</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L317-L318","name":"PSet.nonempty_of_mem","line":317,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_of_mem\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\">PSet.Nonempty</a> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L313-L314","name":"PSet.nonempty_def","line":313,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.nonempty_def\"><span class=\"name\">PSet</span>.<span class=\"name\">nonempty_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\">PSet.Nonempty</a> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L309-L310","name":"PSet.Nonempty","line":309,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty","doc":"A nonempty set is one that contains some element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Nonempty\"><span class=\"name\">PSet</span>.<span class=\"name\">Nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L304-L305","name":"PSet.mem_toSet","line":304,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_toSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_toSet\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\">PSet.toSet</a> <span class=\"fn\">u</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L299-L300","name":"PSet.toSet","line":299,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet","doc":"Convert a pre-set to a `set` of pre-sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.toSet\"><span class=\"name\">PSet</span>.<span class=\"name\">toSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(u : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L294-L295","name":"PSet.mem_irrefl","line":294,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_irrefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_irrefl\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_irrefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L290-L291","name":"PSet.mem_asymm","line":290,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_asymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_asymm\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_asymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> ∉ <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L287-L288","name":"PSet.instIsIrreflPSetMemInstMembershipPSetPSet","line":287,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsIrreflPSetMemInstMembershipPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsIrreflPSetMemInstMembershipPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsIrreflPSetMemInstMembershipPSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsIrrefl\">IsIrrefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L284-L285","name":"PSet.instIsAsymmPSetMemInstMembershipPSetPSet","line":284,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsAsymmPSetMemInstMembershipPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsAsymmPSetMemInstMembershipPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsAsymmPSetMemInstMembershipPSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsAsymm\">IsAsymm</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L281-L282","name":"PSet.instWellFoundedRelationPSet","line":281,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instWellFoundedRelationPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instWellFoundedRelationPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instWellFoundedRelationPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L277-L278","name":"PSet.mem_wf","line":277,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mem_wf\"><span class=\"name\">PSet</span>.<span class=\"name\">mem_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L264-L265","name":"PSet.Mem.congr_left","line":264,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_left\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">∀ {<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L255-L261","name":"PSet.equiv_iff_mem","line":255,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff_mem\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L245-L252","name":"PSet.Mem.congr_right","line":245,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.congr_right\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">∀ {<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L238-L242","name":"PSet.Mem.ext","line":238,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.ext\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L233-L235","name":"PSet.func_mem","line":233,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.func_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.func_mem\"><span class=\"name\">PSet</span>.<span class=\"name\">func_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L229-L230","name":"PSet.Mem.mk","line":229,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem.mk\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">A</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L226-L227","name":"PSet.instMembershipPSetPSet","line":226,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instMembershipPSetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instMembershipPSetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instMembershipPSetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L222-L223","name":"PSet.Mem","line":222,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem","doc":"`x ∈ y` as pre-sets if `x` is extensionally equivalent to a member of the family `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Mem\"><span class=\"name\">PSet</span>.<span class=\"name\">Mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L209-L218","name":"PSet.Subset.congr_right","line":209,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_right\"><span class=\"name\">PSet</span>.<span class=\"name\">Subset</span>.<span class=\"name\">congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L197-L206","name":"PSet.Subset.congr_left","line":197,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset.congr_left\"><span class=\"name\">PSet</span>.<span class=\"name\">Subset</span>.<span class=\"name\">congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">z</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L185-L194","name":"PSet.Equiv.ext","line":185,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.ext\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L179-L183","name":"PSet.instIsTransPSetSubsetInstHasSubsetPSet","line":179,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsTransPSetSubsetInstHasSubsetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsTransPSetSubsetInstHasSubsetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsTransPSetSubsetInstHasSubsetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsTrans\">IsTrans</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L176-L177","name":"PSet.instIsReflPSetSubsetInstHasSubsetPSet","line":176,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsReflPSetSubsetInstHasSubsetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instIsReflPSetSubsetInstHasSubsetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instIsReflPSetSubsetInstHasSubsetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Algebra/Classes.html#IsRefl\">IsRefl</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L173-L174","name":"PSet.instHasSubsetPSet","line":173,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instHasSubsetPSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.instHasSubsetPSet\"><span class=\"name\">PSet</span>.<span class=\"name\">instHasSubsetPSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/SetNotation.html#HasSubset\">HasSubset</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L169-L170","name":"PSet.Subset","line":169,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset","doc":"A pre-set is a subset of another pre-set if every element of the first family is extensionally\nequivalent to some element of the second family."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Subset\"><span class=\"name\">PSet</span>.<span class=\"name\">Subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L163-L164","name":"PSet.setoid","line":163,"kind":"instance","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.setoid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.setoid\"><span class=\"name\">PSet</span>.<span class=\"name\">setoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L159-L160","name":"PSet.equiv_of_isEmpty","line":159,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_of_isEmpty\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_of_isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">y</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L155-L156","name":"PSet.Equiv.trans","line":155,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.trans\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h1 : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h2 : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L150-L151","name":"PSet.Equiv.comm","line":150,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.comm\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L146-L147","name":"PSet.Equiv.symm","line":146,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.symm\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L133-L142","name":"PSet.Equiv.euc","line":133,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.euc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.euc\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">euc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{z : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">z</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L129-L130","name":"PSet.Equiv.rfl","line":129,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.rfl\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L125-L126","name":"PSet.Equiv.refl","line":125,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.refl\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L120-L121","name":"PSet.Equiv.exists_right","line":120,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_right\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">exists_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">y</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L116-L117","name":"PSet.Equiv.exists_left","line":116,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv.exists_left\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">exists_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (j : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">y</span> <span class=\"fn\">j</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L110-L113","name":"PSet.equiv_iff","line":110,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.equiv_iff\"><span class=\"name\">PSet</span>.<span class=\"name\">equiv_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>), <span class=\"fn\">∃ (j : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">y</span> <span class=\"fn\">j</span></span>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">∀ (<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">y</span></span>), <span class=\"fn\">∃ (i : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>), <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\">PSet.Equiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">y</span> <span class=\"fn\">j</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L106-L107","name":"PSet.Equiv","line":106,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv","doc":"Two pre-sets are extensionally equivalent if every element of the first family is extensionally\nequivalent to some element of the second family and vice-versa. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Equiv\"><span class=\"name\">PSet</span>.<span class=\"name\">Equiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L100-L101","name":"PSet.eta","line":100,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.eta\"><span class=\"name\">PSet</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L95-L96","name":"PSet.mk_func","line":95,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_func","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_func\"><span class=\"name\">PSet</span>.<span class=\"name\">mk_func</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\">PSet.Func</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L90-L91","name":"PSet.mk_type","line":90,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk_type\"><span class=\"name\">PSet</span>.<span class=\"name\">mk_type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\">PSet.mk</a> <span class=\"fn\">α</span> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L85-L86","name":"PSet.Func","line":85,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func","doc":"The underlying pre-set family of a pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Func\"><span class=\"name\">PSet</span>.<span class=\"name\">Func</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\">PSet.Type</a> <span class=\"fn\">x</span></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L80-L81","name":"PSet.Type","line":80,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type","doc":"The underlying type of a pre-set "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.Type\"><span class=\"name\">PSet</span>.<span class=\"name\">Type</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L74-L74","name":"PSet.mk","line":74,"kind":"ctor","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet.mk\"><span class=\"name\">PSet</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\">PSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/SetTheory/ZFC/Basic.lean#L73-L74","name":"PSet","line":73,"kind":"inductive","docLink":"./Mathlib/SetTheory/ZFC/Basic.html#PSet","doc":"The type of pre-sets in universe `u`. A pre-set\nis a family of pre-sets indexed by a type in `Type u`.\nThe ZFC universe is defined as a quotient of this\nto ensure extensionality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Basic.html#PSet\"><span class=\"name\">PSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}