{"name":"Mathlib.Computability.RegularExpressions","instances":[{"typeNames":["RegularExpression"],"name":"RegularExpression.instInhabitedRegularExpression","className":"Inhabited"},{"typeNames":["RegularExpression"],"name":"RegularExpression.instAddRegularExpression","className":"Add"},{"typeNames":["RegularExpression"],"name":"RegularExpression.instMulRegularExpression","className":"Mul"},{"typeNames":["RegularExpression"],"name":"RegularExpression.instOneRegularExpression","className":"One"},{"typeNames":["RegularExpression"],"name":"RegularExpression.instZeroRegularExpression","className":"Zero"},{"typeNames":["RegularExpression","Nat"],"name":"RegularExpression.instPowRegularExpressionNat","className":"Pow"},{"typeNames":[],"name":"RegularExpression.instDecidablePredListMemLanguageInstMembershipListLanguageMatches'","className":"Decidable"}],"imports":["Init","Mathlib.Computability.Language"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L415-L429","name":"RegularExpression.matches'_map","line":415,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_map","doc":"The language of the map is the map of the language. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_map\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\">RegularExpression.map</a> <span class=\"fn\">f</span> <span class=\"fn\">P</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Language.map\">Language.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">P</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L404-L410","name":"RegularExpression.map_map","line":404,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map_map\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\">RegularExpression.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\">RegularExpression.map</a> <span class=\"fn\">f</span> <span class=\"fn\">P</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\">RegularExpression.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L394-L400","name":"RegularExpression.map_id","line":394,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map_id\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\">RegularExpression.map</a> <span class=\"fn\">id</span> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L387-L390","name":"RegularExpression.map_pow","line":387,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map_pow\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">map_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\">RegularExpression.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\">RegularExpression.map</a> <span class=\"fn\">f</span> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L377-L383","name":"RegularExpression.map","line":377,"kind":"def","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map","doc":"Map the alphabet of a regular expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.map\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L372-L373","name":"RegularExpression.instDecidablePredListMemLanguageInstMembershipListLanguageMatches'","line":372,"kind":"instance","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instDecidablePredListMemLanguageInstMembershipListLanguageMatches'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instDecidablePredListMemLanguageInstMembershipListLanguageMatches'\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">instDecidablePredListMemLanguageInstMembershipListLanguageMatches'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">P</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L350-L369","name":"RegularExpression.rmatch_iff_matches'","line":350,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch_iff_matches'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch_iff_matches'\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">rmatch_iff_matches'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">P</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L293-L346","name":"RegularExpression.star_rmatch_iff","line":293,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star_rmatch_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star_rmatch_iff\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">star_rmatch_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star\">RegularExpression.star</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (S : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.join\">List.join</a> <span class=\"fn\">S</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L247-L290","name":"RegularExpression.mul_rmatch_iff","line":247,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.mul_rmatch_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.mul_rmatch_iff\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">mul_rmatch_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">Q</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (u : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">u</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">Q</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L238-L244","name":"RegularExpression.add_rmatch_iff","line":238,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.add_rmatch_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.add_rmatch_iff\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">add_rmatch_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Q</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L224-L235","name":"RegularExpression.char_rmatch_iff","line":224,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char_rmatch_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char_rmatch_iff\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">char_rmatch_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char\">RegularExpression.char</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">a</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L220-L221","name":"RegularExpression.one_rmatch_iff","line":220,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.one_rmatch_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.one_rmatch_iff\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">one_rmatch_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L216-L217","name":"RegularExpression.zero_rmatch","line":216,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.zero_rmatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.zero_rmatch\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">zero_rmatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\">RegularExpression.rmatch</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L210-L212","name":"RegularExpression.rmatch","line":210,"kind":"def","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch","doc":"`P.rmatch x` is true if and only if `P` matches `x`. This is a computable definition equivalent\nto `matches'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.rmatch\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">rmatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L204-L205","name":"RegularExpression.deriv_star","line":204,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_star\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">deriv_star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star\">RegularExpression.star</a> <span class=\"fn\">P</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star\">RegularExpression.star</a> <span class=\"fn\">P</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L199-L200","name":"RegularExpression.deriv_add","line":199,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_add\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">deriv_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Q</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">P</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">Q</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L194-L195","name":"RegularExpression.deriv_char_of_ne","line":194,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_char_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_char_of_ne\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">deriv_char_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char\">RegularExpression.char</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L189-L190","name":"RegularExpression.deriv_char_self","line":189,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_char_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_char_self\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">deriv_char_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char\">RegularExpression.char</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L184-L185","name":"RegularExpression.deriv_one","line":184,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_one\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">deriv_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L179-L180","name":"RegularExpression.deriv_zero","line":179,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv_zero\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">deriv_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\">RegularExpression.deriv</a> <span class=\"fn\">0</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L169-L175","name":"RegularExpression.deriv","line":169,"kind":"def","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv","doc":"`P.deriv a` matches `x` if `P` matches `a :: x`, the Brzozowski derivative of `P` with respect\nto `a` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.deriv\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">deriv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[dec : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L157-L163","name":"RegularExpression.matchEpsilon","line":157,"kind":"def","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matchEpsilon","doc":"`matchEpsilon P` is true if and only if `P` matches the empty string "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matchEpsilon\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matchEpsilon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L152-L153","name":"RegularExpression.matches'_star","line":152,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_star\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star\">RegularExpression.star</a> <span class=\"fn\">P</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Kleene.html#KStar.kstar\">KStar.kstar</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">P</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L145-L148","name":"RegularExpression.matches'_pow","line":145,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_pow\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L140-L141","name":"RegularExpression.matches'_mul","line":140,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_mul\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">Q</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">Q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L135-L136","name":"RegularExpression.matches'_add","line":135,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_add\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Q</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">Q</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L130-L131","name":"RegularExpression.matches'_char","line":130,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_char","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_char\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_char</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char\">RegularExpression.char</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">[<span class=\"fn\">a</span>]</span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L125-L126","name":"RegularExpression.matches'_epsilon","line":125,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_epsilon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_epsilon\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_epsilon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L120-L121","name":"RegularExpression.matches'_zero","line":120,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'_zero\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\">RegularExpression.matches'</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L110-L116","name":"RegularExpression.matches'","line":110,"kind":"def","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'","doc":"`matches' P` provides a language which contains all strings that `P` matches "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.matches'\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">matches'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/Language.html#Language\">Language</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L102-L103","name":"RegularExpression.comp_def","line":102,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.comp_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.comp_def\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">comp_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.comp\">RegularExpression.comp</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">Q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L97-L98","name":"RegularExpression.plus_def","line":97,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.plus_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.plus_def\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">plus_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.plus\">RegularExpression.plus</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">Q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L92-L93","name":"RegularExpression.one_def","line":92,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.one_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.one_def\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">one_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">RegularExpression.epsilon</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L87-L88","name":"RegularExpression.zero_def","line":87,"kind":"theorem","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.zero_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.zero_def\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">zero_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">RegularExpression.zero</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L80-L81","name":"RegularExpression.instPowRegularExpressionNat","line":80,"kind":"instance","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instPowRegularExpressionNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instPowRegularExpressionNat\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">instPowRegularExpressionNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L77-L78","name":"RegularExpression.instZeroRegularExpression","line":77,"kind":"instance","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instZeroRegularExpression","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instZeroRegularExpression\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">instZeroRegularExpression</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L74-L75","name":"RegularExpression.instOneRegularExpression","line":74,"kind":"instance","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instOneRegularExpression","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instOneRegularExpression\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">instOneRegularExpression</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L71-L72","name":"RegularExpression.instMulRegularExpression","line":71,"kind":"instance","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instMulRegularExpression","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instMulRegularExpression\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">instMulRegularExpression</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L68-L69","name":"RegularExpression.instAddRegularExpression","line":68,"kind":"instance","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instAddRegularExpression","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instAddRegularExpression\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">instAddRegularExpression</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L65-L66","name":"RegularExpression.instInhabitedRegularExpression","line":65,"kind":"instance","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instInhabitedRegularExpression","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.instInhabitedRegularExpression\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">instInhabitedRegularExpression</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L49-L49","name":"RegularExpression.star","line":49,"kind":"ctor","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.star\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L48-L48","name":"RegularExpression.comp","line":48,"kind":"ctor","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.comp\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L47-L47","name":"RegularExpression.plus","line":47,"kind":"ctor","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.plus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.plus\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">plus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L46-L46","name":"RegularExpression.char","line":46,"kind":"ctor","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.char\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">char</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L45-L45","name":"RegularExpression.epsilon","line":45,"kind":"ctor","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.epsilon","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.epsilon\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">epsilon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L44-L44","name":"RegularExpression.zero","line":44,"kind":"ctor","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression.zero\"><span class=\"name\">RegularExpression</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\">RegularExpression</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/RegularExpressions.lean#L43-L49","name":"RegularExpression","line":43,"kind":"inductive","docLink":"./Mathlib/Computability/RegularExpressions.html#RegularExpression","doc":"This is the definition of regular expressions. The names used here is to mirror the definition\nof a Kleene algebra (https://en.wikipedia.org/wiki/Kleene_algebra).\n* `0` (`zero`) matches nothing\n* `1` (`epsilon`) matches only the empty string\n* `char a` matches only the string 'a'\n* `star P` matches any finite concatenation of strings which match `P`\n* `P + Q` (`plus P Q`) matches anything which match `P` or `Q`\n* `P * Q` (`comp P Q`) matches `x ++ y` if `x` matches `P` and `y` matches `Q`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/RegularExpressions.html#RegularExpression\"><span class=\"name\">RegularExpression</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}