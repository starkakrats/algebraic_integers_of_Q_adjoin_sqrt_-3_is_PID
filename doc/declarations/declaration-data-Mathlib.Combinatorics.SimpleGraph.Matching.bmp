{"name":"Mathlib.Combinatorics.SimpleGraph.Matching","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.DegreeSum","Mathlib.Combinatorics.SimpleGraph.Subgraph"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L127-L130","name":"SimpleGraph.Subgraph.IsPerfectMatching.even_card","line":127,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.even_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.even_card\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">even_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">SimpleGraph.Subgraph.IsPerfectMatching</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Parity.html#Even\">Even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">V</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L122-L124","name":"SimpleGraph.Subgraph.isPerfectMatching_iff_forall_degree","line":122,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff_forall_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff_forall_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isPerfectMatching_iff_forall_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">SimpleGraph.Subgraph.neighborSet</a> <span class=\"fn\">M</span> <span class=\"fn\">v</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">SimpleGraph.Subgraph.IsPerfectMatching</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">SimpleGraph.Subgraph.degree</a> <span class=\"fn\">M</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L114-L119","name":"SimpleGraph.Subgraph.isPerfectMatching_iff","line":114,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isPerfectMatching_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">SimpleGraph.Subgraph.IsPerfectMatching</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">V</span>), <span class=\"fn\">∃! (<span class=\"fn\">w</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">SimpleGraph.Subgraph.Adj</a> <span class=\"fn\">M</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L101-L111","name":"SimpleGraph.Subgraph.IsMatching.even_card","line":101,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.even_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.even_card\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">even_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">M</span>.verts</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">SimpleGraph.Subgraph.IsMatching</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Parity.html#Even\">Even</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Set.toFinset\">Set.toFinset</a> <span class=\"fn\"><span class=\"fn\">M</span>.verts</span></span>)</span>.card</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L96-L98","name":"SimpleGraph.Subgraph.isMatching_iff_forall_degree","line":96,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isMatching_iff_forall_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isMatching_iff_forall_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isMatching_iff_forall_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">SimpleGraph.Subgraph.neighborSet</a> <span class=\"fn\">M</span> <span class=\"fn\">v</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">SimpleGraph.Subgraph.IsMatching</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">v</span> ∈ <span class=\"fn\"><span class=\"fn\">M</span>.verts</span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">SimpleGraph.Subgraph.degree</a> <span class=\"fn\">M</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L90-L93","name":"SimpleGraph.Subgraph.IsMatching.support_eq_verts","line":90,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.support_eq_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.support_eq_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">support_eq_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">SimpleGraph.Subgraph.IsMatching</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">SimpleGraph.Subgraph.support</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span>.verts</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L87-L87","name":"SimpleGraph.Subgraph.IsPerfectMatching","line":87,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching","doc":"The subgraph `M` of `G` is a perfect matching on `G` if it's a matching and every vertex `G` is\nmatched.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L77-L80","name":"SimpleGraph.Subgraph.IsMatching.toEdge_eq_toEdge_of_adj","line":77,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_toEdge_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_toEdge_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge_eq_toEdge_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">SimpleGraph.Subgraph.IsMatching</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">M</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">M</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">SimpleGraph.Subgraph.Adj</a> <span class=\"fn\">M</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">SimpleGraph.Subgraph.IsMatching.toEdge</a> <span class=\"fn\">h</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">v</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hv</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">SimpleGraph.Subgraph.IsMatching.toEdge</a> <span class=\"fn\">h</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">w</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hw</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L70-L74","name":"SimpleGraph.Subgraph.IsMatching.toEdge.surjective","line":70,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge.surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge.surjective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge</span>.<span class=\"name\">surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">SimpleGraph.Subgraph.IsMatching</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">SimpleGraph.Subgraph.IsMatching.toEdge</a> <span class=\"fn\">h</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L63-L67","name":"SimpleGraph.Subgraph.IsMatching.toEdge_eq_of_adj","line":63,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge_eq_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">SimpleGraph.Subgraph.IsMatching</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">M</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hvw : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">SimpleGraph.Subgraph.Adj</a> <span class=\"fn\">M</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">SimpleGraph.Subgraph.IsMatching.toEdge</a> <span class=\"fn\">h</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">v</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hv</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">s(<span class=\"fn\">v</span>, <span class=\"fn\">w</span>)</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hvw</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L59-L60","name":"SimpleGraph.Subgraph.IsMatching.toEdge","line":59,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge","doc":"Given a vertex, returns the unique edge of the matching it is incident to. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">SimpleGraph.Subgraph.IsMatching</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">M</span>.verts</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">SimpleGraph.Subgraph.edgeSet</a> <span class=\"fn\">M</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L55-L55","name":"SimpleGraph.Subgraph.IsMatching","line":55,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching","doc":"The subgraph `M` of `G` is a matching if every vertex of `M` is incident to exactly one edge in `M`.\nWe say that the vertices in `M.support` are *matched* or *saturated*.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(M : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}