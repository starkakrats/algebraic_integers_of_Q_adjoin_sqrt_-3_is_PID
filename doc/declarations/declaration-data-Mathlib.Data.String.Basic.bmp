{"name":"Mathlib.Data.String.Basic","instances":[{"typeNames":["String"],"name":"String.LT'","className":"LT"},{"typeNames":[],"name":"String.decidableLT","className":"Decidable"},{"typeNames":["String"],"name":"String.LE","className":"LE"},{"typeNames":[],"name":"String.decidableLE","className":"Decidable"},{"typeNames":["String"],"name":"String.instLinearOrderString","className":"LinearOrder"}],"imports":["Init","Mathlib.Data.List.Lex","Mathlib.Data.Char"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L195-L196","name":"List.asString_eq","line":195,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.asString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.asString_eq\"><span class=\"name\">List</span>.<span class=\"name\">asString_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#List.asString\">List.asString</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L191-L192","name":"String.length_data","line":191,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.length_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.length_data\"><span class=\"name\">String</span>.<span class=\"name\">length_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L185-L187","name":"List.asString_inj","line":185,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.asString_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.asString_inj\"><span class=\"name\">List</span>.<span class=\"name\">asString_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#List.asString\">List.asString</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#List.asString\">List.asString</a> <span class=\"fn\">l'</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L180-L181","name":"List.length_asString","line":180,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.length_asString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.length_asString\"><span class=\"name\">List</span>.<span class=\"name\">length_asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#List.asString\">List.asString</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L175-L176","name":"List.toList_inv_asString","line":175,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.toList_inv_asString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.toList_inv_asString\"><span class=\"name\">List</span>.<span class=\"name\">toList_inv_asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#List.asString\">List.asString</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L150-L169","name":"String.instLinearOrderString","line":150,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.instLinearOrderString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.instLinearOrderString\"><span class=\"name\">String</span>.<span class=\"name\">instLinearOrderString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L144-L145","name":"String.head_empty","line":144,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.head_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.head_empty\"><span class=\"name\">String</span>.<span class=\"name\">head_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.data</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">default</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L134-L140","name":"String.toList_nonempty","line":134,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.toList_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.toList_nonempty\"><span class=\"name\">String</span>.<span class=\"name\">toList_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">&quot;&quot;</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.head\">String.head</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.drop\">String.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">1</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L128-L129","name":"String.asString_inv_toList","line":128,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.asString_inv_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.asString_inv_toList\"><span class=\"name\">String</span>.<span class=\"name\">asString_inv_toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#List.asString\">List.asString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L124-L125","name":"String.toList_empty","line":124,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.toList_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.toList_empty\"><span class=\"name\">String</span>.<span class=\"name\">toList_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L119-L120","name":"String.nil_asString_eq_empty","line":119,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.nil_asString_eq_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.nil_asString_eq_empty\"><span class=\"name\">String</span>.<span class=\"name\">nil_asString_eq_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#List.asString\">List.asString</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L115-L116","name":"String.toList_inj","line":115,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.toList_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.toList_inj\"><span class=\"name\">String</span>.<span class=\"name\">toList_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L111-L112","name":"String.le_iff_toList_le","line":111,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.le_iff_toList_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.le_iff_toList_le\"><span class=\"name\">String</span>.<span class=\"name\">le_iff_toList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L105-L107","name":"String.decidableLE","line":105,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.decidableLE\"><span class=\"name\">String</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L101-L102","name":"String.LE","line":101,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.LE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.LE\"><span class=\"name\">String</span>.<span class=\"name\">LE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L75-L98","name":"String.lt_iff_toList_lt","line":75,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.lt_iff_toList_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.lt_iff_toList_lt\"><span class=\"name\">String</span>.<span class=\"name\">lt_iff_toList_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.toList\">String.toList</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L58-L72","name":"String.ltb_cons_addChar","line":58,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.ltb_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.ltb_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">ltb_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/String/Basic.html#String.ltb\">String.ltb</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs₁</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs₂</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\"><span class=\"fn\">i₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/String/Basic.html#String.ltb\">String.ltb</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs₁</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs₂</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L40-L56","name":"String.ltb.inductionOn","line":40,"kind":"def","docLink":"./Mathlib/Data/String/Basic.html#String.ltb.inductionOn","doc":"Induction on `String.ltb`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.ltb.inductionOn\"><span class=\"name\">String</span>.<span class=\"name\">ltb</span>.<span class=\"name\">inductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(it₁ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(it₂ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ind : <span class=\"fn\">(<span class=\"fn\">s₁ </span>s₂ : <a href=\"./Init/Prelude.html#String\">String</a>) →\n  <span class=\"fn\">(<span class=\"fn\">i₁ </span>i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">i₂</span></span></span> →\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span>)</span></span> →\n            <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\">(<span class=\"fn\">s₁ </span>s₂ : <a href=\"./Init/Prelude.html#String\">String</a>) →\n  <span class=\"fn\">(<span class=\"fn\">i₁ </span>i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n        <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">i₂</span></span></span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(base₁ : <span class=\"fn\">(<span class=\"fn\">s₁ </span>s₂ : <a href=\"./Init/Prelude.html#String\">String</a>) →\n  <span class=\"fn\">(<span class=\"fn\">i₁ </span>i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(base₂ : <span class=\"fn\">(<span class=\"fn\">s₁ </span>s₂ : <a href=\"./Init/Prelude.html#String\">String</a>) →\n  <span class=\"fn\">(<span class=\"fn\">i₁ </span>i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">it₁</span> <span class=\"fn\">it₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L34-L36","name":"String.decidableLT","line":34,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.decidableLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.decidableLT\"><span class=\"name\">String</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L30-L31","name":"String.LT'","line":30,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.LT'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.LT'\"><span class=\"name\">String</span>.<span class=\"name\">LT'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Basic.lean#L20-L27","name":"String.ltb","line":20,"kind":"def","docLink":"./Mathlib/Data/String/Basic.html#String.ltb","doc":"`<` on string iterators. This coincides with `<` on strings as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.ltb\"><span class=\"name\">String</span>.<span class=\"name\">ltb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}