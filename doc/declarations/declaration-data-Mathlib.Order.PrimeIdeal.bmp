{"name":"Mathlib.Order.PrimeIdeal","instances":[{"typeNames":[],"name":"Order.Ideal.IsMaximal.isPrime","className":"Order.Ideal.IsPrime"},{"typeNames":[],"name":"Order.Ideal.IsPrime.isMaximal","className":"Order.Ideal.IsMaximal"}],"imports":["Init","Mathlib.Order.Ideal","Mathlib.Order.PFilter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L230-L234","name":"Order.Ideal.PrimePair.F_isPrime","line":230,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_isPrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_isPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">F_isPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">Order.PFilter.IsPrime</a> <span class=\"fn\"><span class=\"fn\">IF</span>.F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L224-L227","name":"Order.PFilter.IsPrime.toPrimePair","line":224,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.toPrimePair","doc":"Create an element of type `Order.Ideal.PrimePair` from a filter satisfying the predicate\n`Order.PFilter.IsPrime`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.toPrimePair\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">toPrimePair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">Order.PFilter</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">Order.PFilter.IsPrime</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L219-L219","name":"Order.PFilter.IsPrime.compl_ideal","line":219,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.compl_ideal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.compl_ideal\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">compl_ideal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">Order.PFilter</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">Order.PFilter.IsPrime</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.IsIdeal\">Order.IsIdeal</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">F</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L218-L218","name":"Order.PFilter.IsPrime.mk","line":218,"kind":"ctor","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.mk\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">Order.PFilter</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(compl_ideal : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.IsIdeal\">Order.IsIdeal</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">F</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">Order.PFilter.IsPrime</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L218-L219","name":"Order.PFilter.IsPrime","line":218,"kind":"class","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime","doc":"A filter `F` is prime if its complement is an ideal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">Order.PFilter</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L217-L217","name":"Order.PFilter.isPrime_iff","line":217,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.isPrime_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.isPrime_iff\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">isPrime_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">Order.PFilter</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">Order.PFilter.IsPrime</a> <span class=\"fn\">F</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.IsIdeal\">Order.IsIdeal</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">F</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L197-L204","name":"Order.Ideal.IsPrime.isMaximal","line":197,"kind":"instance","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.isMaximal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.isMaximal\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">isMaximal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsMaximal\">Order.Ideal.IsMaximal</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L193-L194","name":"Order.Ideal.isPrime_iff_mem_or_compl_mem","line":193,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_compl_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_compl_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_iff_mem_or_compl_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">Order.Ideal.IsProper</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">P</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L185-L190","name":"Order.Ideal.isPrime_of_mem_or_compl_mem","line":185,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_of_mem_or_compl_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_of_mem_or_compl_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_of_mem_or_compl_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">Order.Ideal.IsProper</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">P</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L181-L182","name":"Order.Ideal.IsPrime.mem_compl_of_not_mem","line":181,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_compl_of_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_compl_of_not_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mem_compl_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hxnI : <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L175-L178","name":"Order.Ideal.IsPrime.mem_or_compl_mem","line":175,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_compl_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_compl_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mem_or_compl_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L151-L166","name":"Order.Ideal.IsMaximal.isPrime","line":151,"kind":"instance","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsMaximal.isPrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsMaximal.isPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsMaximal</span>.<span class=\"name\">isPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsMaximal\">Order.Ideal.IsMaximal</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L141-L142","name":"Order.Ideal.isPrime_iff_mem_or_mem","line":141,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_iff_mem_or_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeInf\">SemilatticeInf</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">Order.Ideal.IsProper</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">x </span>y : <span class=\"fn\">P</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L130-L138","name":"Order.Ideal.IsPrime.of_mem_or_mem","line":130,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.of_mem_or_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.of_mem_or_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">of_mem_or_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeInf\">SemilatticeInf</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">Order.Ideal.IsProper</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\">∀ {<span class=\"fn\">x </span>y : <span class=\"fn\">P</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L123-L127","name":"Order.Ideal.IsPrime.mem_or_mem","line":123,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mem_or_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeInf\">SemilatticeInf</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hI : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L109-L113","name":"Order.Ideal.PrimePair.I_isPrime","line":109,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isPrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I_isPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\"><span class=\"fn\">IF</span>.I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L103-L106","name":"Order.Ideal.IsPrime.toPrimePair","line":103,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.toPrimePair","doc":"Create an element of type `Order.Ideal.PrimePair` from an ideal satisfying the predicate\n`Order.Ideal.IsPrime`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.toPrimePair\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">toPrimePair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L94-L94","name":"Order.Ideal.IsPrime.compl_filter","line":94,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.compl_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.compl_filter\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">compl_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.IsPFilter\">Order.IsPFilter</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">I</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L93-L93","name":"Order.Ideal.IsPrime.mk","line":93,"kind":"ctor","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mk\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[toIsProper : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">Order.Ideal.IsProper</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(compl_filter : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.IsPFilter\">Order.IsPFilter</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">I</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L93-L94","name":"Order.Ideal.IsPrime","line":93,"kind":"class","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime","doc":"An ideal `I` is prime if its complement is a filter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsProper</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L92-L92","name":"Order.Ideal.isPrime_iff","line":92,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">Order.Ideal.IsPrime</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">Order.Ideal.IsProper</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.IsPFilter\">Order.IsPFilter</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">I</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L83-L84","name":"Order.Ideal.PrimePair.F_union_I","line":83,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_union_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_union_I\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">F_union_I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.F</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.I</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L78-L79","name":"Order.Ideal.PrimePair.I_union_F","line":78,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_union_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_union_F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I_union_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.I</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.F</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L74-L75","name":"Order.Ideal.PrimePair.disjoint","line":74,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.disjoint\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.I</span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L67-L70","name":"Order.Ideal.PrimePair.I_isProper","line":67,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isProper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isProper\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I_isProper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">Order.Ideal.IsProper</a> <span class=\"fn\"><span class=\"fn\">IF</span>.I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L62-L63","name":"Order.Ideal.PrimePair.compl_F_eq_I","line":62,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_F_eq_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_F_eq_I\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">compl_F_eq_I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.F</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L57-L58","name":"Order.Ideal.PrimePair.compl_I_eq_F","line":57,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_I_eq_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_I_eq_F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">compl_I_eq_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(IF : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.I</span></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L50-L50","name":"Order.Ideal.PrimePair.isCompl_I_F","line":50,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.isCompl_I_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.isCompl_I_F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">isCompl_I_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#IsCompl\">IsCompl</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.I</span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L49-L49","name":"Order.Ideal.PrimePair.F","line":49,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">Order.PFilter</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L48-L48","name":"Order.Ideal.PrimePair.I","line":48,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L47-L47","name":"Order.Ideal.PrimePair.mk","line":47,"kind":"ctor","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.mk\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{P : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(I : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Order.Ideal</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">Order.PFilter</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isCompl_I_F : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#IsCompl\">IsCompl</a> <span class=\"fn\">↑<span class=\"fn\">I</span></span> <span class=\"fn\">↑<span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Order.Ideal.PrimePair</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/PrimeIdeal.lean#L47-L50","name":"Order.Ideal.PrimePair","line":47,"kind":"structure","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair","doc":"A pair of an `Order.Ideal` and an `Order.PFilter` which form a partition of `P`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"}]}