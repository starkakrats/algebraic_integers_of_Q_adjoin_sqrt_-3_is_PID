{"name":"Mathlib.CategoryTheory.Sites.Types","instances":[],"imports":["Init","Mathlib.CategoryTheory.Sites.Canonical"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L182-L193","name":"CategoryTheory.typesGrothendieckTopology_eq_canonical","line":182,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology_eq_canonical","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology_eq_canonical\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typesGrothendieckTopology_eq_canonical</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Canonical.html#CategoryTheory.Sheaf.canonicalTopology\">CategoryTheory.Sheaf.canonicalTopology</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L178-L179","name":"CategoryTheory.subcanonical_typesGrothendieckTopology","line":178,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.subcanonical_typesGrothendieckTopology","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.subcanonical_typesGrothendieckTopology\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">subcanonical_typesGrothendieckTopology</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Canonical.html#CategoryTheory.Sheaf.Subcanonical\">CategoryTheory.Sheaf.Subcanonical</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L162-L175","name":"CategoryTheory.typeEquiv","line":162,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv","doc":"`yoneda'` induces an equivalence of category between `Type u` and\n`SheafOfTypes typesGrothendieckTopology`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_counitIso_hom_app_val_app","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_counitIso_hom_app_val_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_counitIso_hom_app_val_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_counitIso_hom_app_val_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X✝</span>.val</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span>)</span></span>)</span>.obj <span class=\"fn\">X</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.counitIso</span>.hom</span>.app <span class=\"fn\">X✝</span></span>)</span>.val</span>.app <span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\"><span class=\"fn\">X✝</span>.val</span>\n          <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\"><span class=\"fn\">X✝</span>.val</span></span>)</span> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span>.symm</span>\n      <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_unitIso_inv_app","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_unitIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_unitIso_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_unitIso_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀\n  (<span class=\"fn\">a</span> :\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\">CategoryTheory.yoneda'</a>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.sheafOfTypesToPresheaf\">CategoryTheory.sheafOfTypesToPresheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Products/Basic.html#CategoryTheory.evaluation\">CategoryTheory.evaluation</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span>)</span></span>)</span></span>)</span>.obj\n      <span class=\"fn\">X</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.unitIso</span>.inv</span>.app <span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">X</span></span>)</span>\n          <span class=\"fn\">(_ :\n            <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\">CategoryTheory.yoneda'</a>.obj <span class=\"fn\">X</span></span>)</span>.val</span></span>)</span>\n          <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span>.symm</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>) (<span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     ) =&gt; <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_functor_map_val_app","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_functor_map_val_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_functor_map_val_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_functor_map_val_app</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">Y_1</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)\n  (<span class=\"fn\">g</span> :\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u) =&gt;\n            <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n              <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.unop</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>,\n                <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X_1 </span>Y : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X_1</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.unop</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">X_1</span></span>) =&gt;\n                  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">f</span>.unop</span> <span class=\"fn\">g</span></span></span> }</span></span></span>)</span>\n          <span class=\"fn\">X</span></span>)</span>.obj\n      <span class=\"fn\">Y_1</span></span>)\n  (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">Y_1</span>.unop</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.functor</span>.map <span class=\"fn\">f</span></span>)</span>.val</span>.app <span class=\"fn\">Y_1</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_inverse_map","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_inverse_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_inverse_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_inverse_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)\n  (<span class=\"fn\">a</span> :\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Products/Basic.html#CategoryTheory.evaluation\">CategoryTheory.evaluation</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span>)</span>.obj\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.sheafOfTypesToPresheaf\">CategoryTheory.sheafOfTypesToPresheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.inverse</span>.map <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.app <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_unitIso_hom_app","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_unitIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_unitIso_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_unitIso_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span>.obj <span class=\"fn\">X</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.unitIso</span>.hom</span>.app <span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">X</span></span>)</span>\n          <span class=\"fn\">(_ :\n            <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\">CategoryTheory.yoneda'</a>.obj <span class=\"fn\">X</span></span>)</span>.val</span></span>)</span>\n          <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span>\n        <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     ) =&gt; <span class=\"fn\">a</span></span></span>)</span>\n      <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>      <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_inverse_obj","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_inverse_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_inverse_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_inverse_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.inverse</span>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.val</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_functor_obj_val_map","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_functor_obj_val_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_functor_obj_val_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_functor_obj_val_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.unop</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.functor</span>.obj <span class=\"fn\">α</span></span>)</span>.val</span>.map <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.unop <span class=\"fn\">a</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_functor_obj_val_obj","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_functor_obj_val_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_functor_obj_val_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_functor_obj_val_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.functor</span>.obj <span class=\"fn\">α</span></span>)</span>.val</span>.obj <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.unop</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L161-L161","name":"CategoryTheory.typeEquiv_counitIso_inv_app_val_app","line":161,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_counitIso_inv_app_val_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv_counitIso_inv_app_val_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typeEquiv_counitIso_inv_app_val_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X✝</span>.val</span>.obj <span class=\"fn\">X</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typeEquiv\">CategoryTheory.typeEquiv</a>.counitIso</span>.inv</span>.app <span class=\"fn\">X✝</span></span>)</span>.val</span>.app <span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\"><span class=\"fn\">X✝</span>.val</span>\n        <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\"><span class=\"fn\">X✝</span>.val</span></span>)</span> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span>\n      <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L153-L156","name":"CategoryTheory.eval_app","line":153,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">eval_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S₁</span>.val</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\">CategoryTheory.eval</a> <span class=\"fn\"><span class=\"fn\">S₂</span>.val</span> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.app <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.val</span>.app <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\">CategoryTheory.eval</a> <span class=\"fn\"><span class=\"fn\">S₁</span>.val</span> <span class=\"fn\">α</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L145-L150","name":"CategoryTheory.equivYoneda'","line":145,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'","doc":"Given a sheaf `S`, construct an isomorphism `S ≅ [-, S(*)]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">equivYoneda'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\">CategoryTheory.yoneda'</a>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.val</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u_1 + 1}</a>     </span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L144-L144","name":"CategoryTheory.equivYoneda'_inv_val","line":144,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'_inv_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'_inv_val\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">equivYoneda'_inv_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'\">CategoryTheory.equivYoneda'</a> <span class=\"fn\">S</span></span>)</span>.inv</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda\">CategoryTheory.equivYoneda</a> <span class=\"fn\"><span class=\"fn\">S</span>.val</span>\n      <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\"><span class=\"fn\">S</span>.val</span></span>)</span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L144-L144","name":"CategoryTheory.equivYoneda'_hom_val","line":144,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'_hom_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'_hom_val\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">equivYoneda'_hom_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda'\">CategoryTheory.equivYoneda'</a> <span class=\"fn\">S</span></span>)</span>.hom</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda\">CategoryTheory.equivYoneda</a> <span class=\"fn\"><span class=\"fn\">S</span>.val</span>\n      <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\"><span class=\"fn\">S</span>.val</span></span>)</span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L137-L140","name":"CategoryTheory.equivYoneda","line":137,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda","doc":"Given a sheaf `S`, construct an isomorphism `S ≅ [-, S(*)]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">equivYoneda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L136-L136","name":"CategoryTheory.equivYoneda_hom_app","line":136,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">equivYoneda_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda\">CategoryTheory.equivYoneda</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L136-L136","name":"CategoryTheory.equivYoneda_inv_app","line":136,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">equivYoneda_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span>)</span></span>)</span>.obj <span class=\"fn\">X</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.equivYoneda\">CategoryTheory.equivYoneda</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span>.symm</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L130-L132","name":"CategoryTheory.eval_map","line":130,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">eval_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\">CategoryTheory.eval</a> <span class=\"fn\">S</span> <span class=\"fn\">β</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">S</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.op</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\">CategoryTheory.eval</a> <span class=\"fn\">S</span> <span class=\"fn\">α</span> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L122-L127","name":"CategoryTheory.evalEquiv","line":122,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv","doc":"Given a sheaf `S`, construct an equivalence `S(α) ≃ (α → S(*))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">evalEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L121-L121","name":"CategoryTheory.evalEquiv_symm_apply","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">evalEquiv_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span> <span class=\"fn\">α</span></span>)</span>.symm</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGlue\">CategoryTheory.typesGlue</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span> <span class=\"fn\">α</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L121-L121","name":"CategoryTheory.evalEquiv_apply","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">evalEquiv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.evalEquiv\">CategoryTheory.evalEquiv</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\">CategoryTheory.eval</a> <span class=\"fn\">S</span> <span class=\"fn\">α</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L108-L117","name":"CategoryTheory.typesGlue_eval","line":108,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGlue_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGlue_eval\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typesGlue_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGlue\">CategoryTheory.typesGlue</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\">CategoryTheory.eval</a> <span class=\"fn\">S</span> <span class=\"fn\">α</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L102-L105","name":"CategoryTheory.eval_typesGlue","line":102,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval_typesGlue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval_typesGlue\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">eval_typesGlue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\">CategoryTheory.eval</a> <span class=\"fn\">S</span> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGlue\">CategoryTheory.typesGlue</a> <span class=\"fn\">S</span> <span class=\"fn\">hs</span> <span class=\"fn\">α</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L89-L99","name":"CategoryTheory.typesGlue","line":89,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGlue","doc":"Given a sheaf `S` on the category of types, construct a map\n`(α → S(*)) → S(α)` that is inverse to `eval`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGlue\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typesGlue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L83-L84","name":"CategoryTheory.eval","line":83,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval","doc":"Given a presheaf `P` on the category of types, construct\na map `P(α) → (α → P(*))` for all type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.eval\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(P : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u<a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><span class=\"fn\">P</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L75-L76","name":"CategoryTheory.yoneda'_comp","line":75,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">yoneda'_comp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\">CategoryTheory.yoneda'</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.sheafOfTypesToPresheaf\">CategoryTheory.sheafOfTypesToPresheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">CategoryTheory.yoneda</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L69-L71","name":"CategoryTheory.yoneda'","line":69,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'","doc":"The yoneda functor that sends a type to a sheaf over the category of types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">yoneda'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.SheafOfTypes\">CategoryTheory.SheafOfTypes</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L68-L68","name":"CategoryTheory.yoneda'_obj_val","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'_obj_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'_obj_val\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">yoneda'_obj_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\">CategoryTheory.yoneda'</a>.obj <span class=\"fn\">α</span></span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L68-L68","name":"CategoryTheory.yoneda'_map_val","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'_map_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'_map_val\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">yoneda'_map_val</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.yoneda'\">CategoryTheory.yoneda'</a>.map <span class=\"fn\">f</span></span>)</span>.val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.map <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L59-L64","name":"CategoryTheory.isSheaf_yoneda'","line":59,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.isSheaf_yoneda'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.isSheaf_yoneda'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">isSheaf_yoneda'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/SheafOfTypes.html#CategoryTheory.Presieve.IsSheaf\">CategoryTheory.Presieve.IsSheaf</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">CategoryTheory.yoneda</span>.obj <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L52-L54","name":"CategoryTheory.generate_discretePresieve_mem","line":52,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.generate_discretePresieve_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.generate_discretePresieve_mem\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">generate_discretePresieve_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sieves.html#CategoryTheory.Sieve.generate\">CategoryTheory.Sieve.generate</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discretePresieve\">CategoryTheory.discretePresieve</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Grothendieck.html#CategoryTheory.GrothendieckTopology.sieves\">CategoryTheory.GrothendieckTopology.sieves</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L48-L49","name":"CategoryTheory.discretePresieve","line":48,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discretePresieve","doc":"The discrete presieve on a type, which only includes arrows whose domain is a singleton. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discretePresieve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">discretePresieve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sieves.html#CategoryTheory.Presieve\">CategoryTheory.Presieve</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L43-L44","name":"CategoryTheory.discreteSieve_mem","line":43,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve_mem\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">discreteSieve_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve\">CategoryTheory.discreteSieve</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Grothendieck.html#CategoryTheory.GrothendieckTopology.sieves\">CategoryTheory.GrothendieckTopology.sieves</a> <a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\">CategoryTheory.typesGrothendieckTopology</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L38-L40","name":"CategoryTheory.discreteSieve","line":38,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve","doc":"The discrete sieve on a type, which only includes arrows whose image is a subsingleton. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">discreteSieve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sieves.html#CategoryTheory.Sieve\">CategoryTheory.Sieve</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L37-L37","name":"CategoryTheory.discreteSieve_apply","line":37,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">discreteSieve_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a> u) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.discreteSieve\">CategoryTheory.discreteSieve</a> <span class=\"fn\">α</span></span>)</span>.arrows <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∃ (x_1 : <span class=\"fn\">α</span>), <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">x</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Sites/Types.lean#L29-L33","name":"CategoryTheory.typesGrothendieckTopology","line":29,"kind":"def","docLink":"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology","doc":"A Grothendieck topology associated to the category of all types.\nA sieve is a covering iff it is jointly surjective. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Sites/Types.html#CategoryTheory.typesGrothendieckTopology\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">typesGrothendieckTopology</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Grothendieck.html#CategoryTheory.GrothendieckTopology\">CategoryTheory.GrothendieckTopology</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u)</a></span></div></div>"}]}