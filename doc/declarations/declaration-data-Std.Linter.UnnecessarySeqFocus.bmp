{"name":"Std.Linter.UnnecessarySeqFocus","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Linter.Util","Std.Lean.AttributeExtra","Std.Lean.Command"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L152-L171","name":"Std.Linter.UnnecessarySeqFocus.unnecessarySeqFocusLinter","line":152,"kind":"def","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.unnecessarySeqFocusLinter","doc":"The main entry point to the unused tactic linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.unnecessarySeqFocusLinter\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">unnecessarySeqFocusLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L120-L147","name":"Std.Linter.UnnecessarySeqFocus.markUsedTactics","line":120,"kind":"opaque","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.markUsedTactics","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.markUsedTactics\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">markUsedTactics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><a href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.M\">Std.Linter.UnnecessarySeqFocus.M</a> <span class=\"fn\">ω</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L116-L117","name":"Std.Linter.UnnecessarySeqFocus.markUsedTacticsList","line":116,"kind":"opaque","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.markUsedTacticsList","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.markUsedTacticsList\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">markUsedTacticsList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(trees : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.M\">Std.Linter.UnnecessarySeqFocus.M</a> <span class=\"fn\">ω</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L106-L111","name":"Std.Linter.UnnecessarySeqFocus.getPath","line":106,"kind":"def","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.getPath","doc":"Traverse the info tree down a given path.\nEach `(n, i)` means that the array must have length `n` and we will descend into the `i`'th child.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.getPath\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">getPath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) × <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L94-L100","name":"Std.Linter.UnnecessarySeqFocus.getTactics","line":94,"kind":"opaque","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.getTactics","doc":"Accumulates the set of tactic syntaxes that should be evaluated at least once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.getTactics\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">getTactics</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ω : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.M\">Std.Linter.UnnecessarySeqFocus.M</a> <span class=\"fn\">ω</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L90-L91","name":"Std.Linter.UnnecessarySeqFocus.isSeqFocus","line":90,"kind":"def","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.isSeqFocus","doc":"True if this is a `<;>` node in either `tactic` or `conv` classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.isSeqFocus\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">isSeqFocus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L87-L87","name":"Std.Linter.UnnecessarySeqFocus.M","line":87,"kind":"def","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.M","doc":"The monad for collecting used tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.M\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ω : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L84-L84","name":"Std.Linter.UnnecessarySeqFocus.Entry.used","line":84,"kind":"def","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry.used","doc":"* `true`: this `<;>` has been used unnecessarily at least once\n* `false`: it has never been executed\n* If it has been used properly at least once, the entry is removed from the table.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry.used\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry\">Std.Linter.UnnecessarySeqFocus.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L78-L78","name":"Std.Linter.UnnecessarySeqFocus.Entry.stx","line":78,"kind":"def","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry.stx","doc":"The `<;>` node itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry.stx\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry\">Std.Linter.UnnecessarySeqFocus.Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L76-L76","name":"Std.Linter.UnnecessarySeqFocus.Entry.mk","line":76,"kind":"ctor","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(used : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry\">Std.Linter.UnnecessarySeqFocus.Entry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L76-L84","name":"Std.Linter.UnnecessarySeqFocus.Entry","line":76,"kind":"structure","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry","doc":"The information we record for each `<;>` node appearing in the syntax. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.Entry\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L51-L73","name":"Std.Linter.UnnecessarySeqFocus.multigoalAttr","line":51,"kind":"opaque","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.multigoalAttr","doc":"The `multigoal` attribute keeps track of tactics that operate on multiple goals,\nmeaning that `tac` acts differently from `focus tac`. This is used by the\n'unnecessary `<;>`' linter to prevent false positives where `tac <;> tac'` cannot\nbe replaced by `(tac; tac')` because the latter would expose `tac` to a different set of goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.multigoalAttr\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">multigoalAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Lean/AttributeExtra.html#Lean.TagAttributeExtra\">Lean.TagAttributeExtra</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L48-L49","name":"Std.Linter.UnnecessarySeqFocus.getLinterUnnecessarySeqFocus","line":48,"kind":"def","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.getLinterUnnecessarySeqFocus","doc":"Gets the value of the `linter.unnecessarySeqFocus` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.UnnecessarySeqFocus.getLinterUnnecessarySeqFocus\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">getLinterUnnecessarySeqFocus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnnecessarySeqFocus.lean#L14-L40","name":"Std.Linter.linter.unnecessarySeqFocus","line":14,"kind":"opaque","docLink":"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.linter.unnecessarySeqFocus","doc":"Enables the 'unnecessary `<;>`' linter. This will warn whenever the `<;>` tactic combinator\nis used when `;` would work.\n\n```\nexample : True := by apply id <;> trivial\n```\nThe `<;>` is unnecessary here because `apply id` only makes one subgoal.\nPrefer `apply id; trivial` instead.\n\nIn some cases, the `<;>` is syntactically necessary because a single tactic is expected:\n```\nexample : True := by\n  cases () with apply id <;> apply id\n  | unit => trivial\n```\nIn this case, you should use parentheses, as in `(apply id; apply id)`:\n```\nexample : True := by\n  cases () with (apply id; apply id)\n  | unit => trivial\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnnecessarySeqFocus.html#Std.Linter.linter.unnecessarySeqFocus\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unnecessarySeqFocus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}