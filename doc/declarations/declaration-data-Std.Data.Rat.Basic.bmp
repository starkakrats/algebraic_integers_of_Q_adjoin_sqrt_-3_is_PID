{"name":"Std.Data.Rat.Basic","instances":[{"typeNames":["Eq"],"name":"instDecidableEqRat","className":"Decidable"},{"typeNames":["Rat"],"name":"instInhabitedRat","className":"Inhabited"},{"typeNames":["Rat"],"name":"instToStringRat","className":"ToString"},{"typeNames":["Rat"],"name":"instReprRat","className":"Repr"},{"typeNames":["Rat"],"name":"Rat.instIntCastRat","className":"IntCast"},{"typeNames":["Rat"],"name":"Rat.instOfNatRat","className":"OfNat"},{"typeNames":["Rat"],"name":"Rat.instOfScientificRat","className":"OfScientific"},{"typeNames":["Rat"],"name":"Rat.instLTRat","className":"LT"},{"typeNames":["LT.lt"],"name":"Rat.instDecidableLtRatInstLTRat","className":"Decidable"},{"typeNames":["Rat"],"name":"Rat.instLERat","className":"LE"},{"typeNames":["LE.le"],"name":"Rat.instDecidableLeRatInstLERat","className":"Decidable"},{"typeNames":["Rat"],"name":"Rat.instMulRat","className":"Mul"},{"typeNames":["Rat"],"name":"Rat.instDivRat","className":"Div"},{"typeNames":["Rat"],"name":"Rat.instAddRat","className":"Add"},{"typeNames":["Rat"],"name":"Rat.instNegRat","className":"Neg"},{"typeNames":["Rat"],"name":"Rat.instSubRat","className":"Sub"}],"imports":["Init","Std.Data.Nat.Gcd","Std.Data.Int.DivMod","Std.Tactic.Ext"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L272-L276","name":"Rat.ceil","line":272,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.ceil","doc":"The ceiling of a rational number `a` is the smallest integer greater than or equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.ceil\"><span class=\"name\">Rat</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L265-L269","name":"Rat.floor","line":265,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.floor","doc":"The floor of a rational number `a` is the largest integer less than or equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.floor\"><span class=\"name\">Rat</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L262-L262","name":"Rat.instSubRat","line":262,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instSubRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instSubRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instSubRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L247-L260","name":"Rat.sub","line":247,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.sub","doc":"Subtraction of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.sub_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.sub\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L236-L242","name":"Rat.sub.aux","line":236,"kind":"theorem","docLink":"./Std/Data/Rat/Basic.html#Rat.sub.aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.sub.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ad : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bd : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\"><span class=\"fn\">a</span>.den</span> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(had : <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbd : <span class=\"fn\"><span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let den := <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span>;\n<span class=\"fn\">let num := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span></span></span>;\n<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">num</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">num</span></span>)</span> <span class=\"fn\">den</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L234-L234","name":"Rat.instNegRat","line":234,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instNegRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instNegRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instNegRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L231-L232","name":"Rat.neg","line":231,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.neg","doc":"Negation of rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.neg\"><span class=\"name\">Rat</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L228-L228","name":"Rat.instAddRat","line":228,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instAddRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instAddRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instAddRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L213-L226","name":"Rat.add","line":213,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.add","doc":"Addition of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.add_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.add\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L181-L207","name":"Rat.add.aux","line":181,"kind":"theorem","docLink":"./Std/Data/Rat/Basic.html#Rat.add.aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.add.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ad : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{bd : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\"><span class=\"fn\">a</span>.den</span> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(had : <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbd : <span class=\"fn\"><span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let den := <span class=\"fn\"><span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.den</span></span>;\n<span class=\"fn\">let num := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.num</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span></span></span>;\n<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">num</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">num</span></span>)</span> <span class=\"fn\">den</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L179-L179","name":"Rat.instDivRat","line":179,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instDivRat","doc":"Division of rational numbers. Note: `div a 0 = 0`.  Written with a separate function `Rat.div`\nas a wrapper so that the definition is not unfolded at `.instance` transparency. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instDivRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instDivRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L175-L175","name":"Rat.div","line":175,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.div","doc":"Division of rational numbers. Note: `div a 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.div\"><span class=\"name\">Rat</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L162-L172","name":"Rat.inv","line":162,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.inv","doc":"The inverse of a rational number. Note: `inv 0 = 0`. (This definition is `@[irreducible]`\nbecause you don't want to unfold it. Use `Rat.inv_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.inv\"><span class=\"name\">Rat</span>.<span class=\"name\">inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L156-L156","name":"Rat.instMulRat","line":156,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instMulRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instMulRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instMulRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L139-L154","name":"Rat.mul","line":139,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.mul","doc":"Multiplication of rational numbers. (This definition is `@[irreducible]` because you don't\nwant to unfold it. Use `Rat.mul_def` instead.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.mul\"><span class=\"name\">Rat</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L134-L135","name":"Rat.instDecidableLeRatInstLERat","line":134,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instDecidableLeRatInstLERat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instDecidableLeRatInstLERat\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLeRatInstLERat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L132-L132","name":"Rat.instLERat","line":132,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instLERat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instLERat\"><span class=\"name\">Rat</span>.<span class=\"name\">instLERat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L129-L130","name":"Rat.instDecidableLtRatInstLTRat","line":129,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instDecidableLtRatInstLTRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instDecidableLtRatInstLTRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLtRatInstLTRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L127-L127","name":"Rat.instLTRat","line":127,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instLTRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instLTRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instLTRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L116-L125","name":"Rat.blt","line":116,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.blt","doc":"Rational number strictly less than relation, as a `Bool`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.blt\"><span class=\"name\">Rat</span>.<span class=\"name\">blt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L113-L113","name":"Rat.instOfScientificRat","line":113,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instOfScientificRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instOfScientificRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfScientificRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L107-L111","name":"Rat.ofScientific","line":107,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.ofScientific","doc":"Implements \"scientific notation\" `123.4e-5` for rational numbers. (This definition is\n`@[irreducible]` because you don't want to unfold it. Use `Rat.ofScientific_def`,\n`Rat.ofScientific_true_def`, or `Rat.ofScientific_false_def` instead.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.ofScientific\"><span class=\"name\">Rat</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L102-L102","name":"Rat.«term_/._»","line":102,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.«term_/._»","doc":"Form the quotient `n / d` where `n d : Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.«term_/._»\"><span class=\"name\">Rat</span>.<span class=\"name\">«term_/</span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L98-L100","name":"Rat.divInt","line":98,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.divInt","doc":"Form the quotient `n / d` where `n d : Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.divInt\"><span class=\"name\">Rat</span>.<span class=\"name\">divInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L95-L95","name":"Rat.isInt","line":95,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.isInt","doc":"Is this rational number integral? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.isInt\"><span class=\"name\">Rat</span>.<span class=\"name\">isInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L92-L92","name":"Rat.instOfNatRat","line":92,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instOfNatRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instOfNatRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfNatRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L90-L90","name":"Rat.instIntCastRat","line":90,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#Rat.instIntCastRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.instIntCastRat\"><span class=\"name\">Rat</span>.<span class=\"name\">instIntCastRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Cast.html#IntCast\">IntCast</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L88-L88","name":"Rat.ofInt","line":88,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.ofInt","doc":"Embedding of `Int` in the rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.ofInt\"><span class=\"name\">Rat</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L82-L83","name":"mkRat","line":82,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#mkRat","doc":"Construct a rational number from a numerator and denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized, and returns\nzero if `den` is zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#mkRat\"><span class=\"name\">mkRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L72-L74","name":"Rat.normalize","line":72,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.normalize","doc":"Construct a normalized `Rat` from a numerator and nonzero denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.normalize\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <a href=\"./Std/Data/Rat/Basic.html#_auto._@.Std.Data.Rat.Basic._hyg.729\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L59-L65","name":"Rat.normalize.reduced","line":59,"kind":"theorem","docLink":"./Std/Data/Rat/Basic.html#Rat.normalize.reduced","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.normalize.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">reduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">num</span></span>)</span> <span class=\"fn\">den</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.div\">Int.div</a> <span class=\"fn\">num</span> <span class=\"fn\">↑<span class=\"fn\">g</span></span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L55-L57","name":"Rat.normalize.den_nz","line":55,"kind":"theorem","docLink":"./Std/Data/Rat/Basic.html#Rat.normalize.den_nz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.normalize.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">den_nz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">Nat.gcd</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">num</span></span>)</span> <span class=\"fn\">den</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L47-L53","name":"Rat.maybeNormalize","line":47,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.maybeNormalize","doc":"Auxiliary definition for `Rat.normalize`. Constructs `num / den` as a rational number,\ndividing both `num` and `den` by `g` (which is the gcd of the two) if it is not 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.maybeNormalize\"><span class=\"name\">Rat</span>.<span class=\"name\">maybeNormalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(reduced : <span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.div\">Int.div</a> <span class=\"fn\">num</span> <span class=\"fn\">↑<span class=\"fn\">g</span></span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L38-L38","name":"Rat.den_pos","line":38,"kind":"theorem","docLink":"./Std/Data/Rat/Basic.html#Rat.den_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.den_pos\"><span class=\"name\">Rat</span>.<span class=\"name\">den_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">self</span>.den</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L35-L36","name":"instReprRat","line":35,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#instReprRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#instReprRat\"><span class=\"name\">instReprRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L32-L33","name":"instToStringRat","line":32,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#instToStringRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#instToStringRat\"><span class=\"name\">instToStringRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L30-L30","name":"instInhabitedRat","line":30,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#instInhabitedRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#instInhabitedRat\"><span class=\"name\">instInhabitedRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L28-L28","name":"instDecidableEqRat","line":28,"kind":"instance","docLink":"./Std/Data/Rat/Basic.html#instDecidableEqRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#instDecidableEqRat\"><span class=\"name\">instDecidableEqRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L27-L27","name":"Rat.reduced","line":27,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.reduced","doc":"The numerator and denominator are coprime: it is in \"reduced form\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">reduced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\"><span class=\"fn\">self</span>.num</span></span>)</span> <span class=\"fn\"><span class=\"fn\">self</span>.den</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L25-L25","name":"Rat.den_nz","line":25,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.den_nz","doc":"The denominator is nonzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">den_nz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L23-L23","name":"Rat.den","line":23,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.den","doc":"The denominator of the rational number is a natural number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.den\"><span class=\"name\">Rat</span>.<span class=\"name\">den</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L21-L21","name":"Rat.num","line":21,"kind":"def","docLink":"./Std/Data/Rat/Basic.html#Rat.num","doc":"The numerator of the rational number is an integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.num\"><span class=\"name\">Rat</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L19-L19","name":"Rat.mk'","line":19,"kind":"ctor","docLink":"./Std/Data/Rat/Basic.html#Rat.mk'","doc":"Constructs a rational number from components.\nWe rename the constructor to `mk'` to avoid a clash with the smart constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.mk'\"><span class=\"name\">Rat</span>.<span class=\"name\">mk'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(num : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den_nz : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span> <a href=\"./Std/Data/Rat/Basic.html#_auto._@.Std.Data.Rat.Basic._hyg.4\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(reduced : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Nat/Gcd.html#Nat.Coprime\">Nat.Coprime</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">Int.natAbs</a> <span class=\"fn\">num</span></span>)</span> <span class=\"fn\">den</span></span>)</span> <a href=\"./Std/Data/Rat/Basic.html#_auto._@.Std.Data.Rat.Basic._hyg.27\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L16-L28","name":"Rat","line":16,"kind":"structure","docLink":"./Std/Data/Rat/Basic.html#Rat","doc":"Rational numbers, implemented as a pair of integers `num / den` such that the\ndenominator is positive and the numerator and denominator are coprime.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat\"><span class=\"name\">Rat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L16-L16","name":"Rat.ext","line":16,"kind":"theorem","docLink":"./Std/Data/Rat/Basic.html#Rat.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.ext\"><span class=\"name\">Rat</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(num : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.num</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.num</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(den : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.den</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Rat/Basic.lean#L16-L16","name":"Rat.ext_iff","line":16,"kind":"theorem","docLink":"./Std/Data/Rat/Basic.html#Rat.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Rat/Basic.html#Rat.ext_iff\"><span class=\"name\">Rat</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.num</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.num</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.den</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.den</span></span></span></span></div></div>"}]}