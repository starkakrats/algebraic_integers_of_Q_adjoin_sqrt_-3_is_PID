{"name":"Mathlib.Analysis.Normed.Group.SemiNormedGroupCat.Kernels","instances":[{"typeNames":["SemiNormedGroupCat₁"],"name":"SemiNormedGroupCat₁.instHasCokernelsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁InstHasZeroMorphismsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁","className":"CategoryTheory.Limits.HasCokernels"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGroupCat.instSubHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","className":"Sub"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGroupCat.instNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","className":"Norm"},{"typeNames":["Quiver.Hom"],"name":"SemiNormedGroupCat.instNNNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","className":"NNNorm"},{"typeNames":["CategoryTheory.Limits.parallelPair"],"name":"SemiNormedGroupCat.hasLimit_parallelPair","className":"CategoryTheory.Limits.HasLimit"},{"typeNames":["SemiNormedGroupCat"],"name":"SemiNormedGroupCat.instHasEqualizersSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory","className":"CategoryTheory.Limits.HasLimitsOfShape"},{"typeNames":["SemiNormedGroupCat"],"name":"SemiNormedGroupCat.instHasCokernelsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategoryInstHasZeroMorphismsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory","className":"CategoryTheory.Limits.HasCokernels"},{"typeNames":["SemiNormedGroupCat.explicitCokernelπ"],"name":"SemiNormedGroupCat.explicitCokernelπ.epi","className":"CategoryTheory.Epi"}],"imports":["Init","Mathlib.Analysis.Normed.Group.SemiNormedGroupCat","Mathlib.Analysis.Normed.Group.Quotient","Mathlib.CategoryTheory.Limits.Shapes.Kernels"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L412-L418","name":"SemiNormedGroupCat.ExplicitCoker.map_desc","line":412,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.ExplicitCoker.map_desc","doc":"A special case of `CategoryTheory.Limits.cokernel.map_desc` adapted to `explicitCokernel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.ExplicitCoker.map_desc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">ExplicitCoker</span>.<span class=\"name\">map_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D' : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fab : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fbd : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fac : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fcd : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fac</span> <span class=\"fn\">fcd</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fbb' : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fdd' : <span class=\"fn\"><span class=\"fn\">D</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{condb : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbb'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{condd : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fcd</span> <span class=\"fn\">fdd'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">B'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fbb'</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fbd</span> <span class=\"fn\">fdd'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">condb</span></span>)</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel.map\">SemiNormedGroupCat.explicitCokernel.map</a> <span class=\"fn\">h</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">condd</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L404-L407","name":"SemiNormedGroupCat.explicitCokernel.map","line":404,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel.map","doc":"A special case of `CategoryTheory.Limits.cokernel.map` adapted to `explicitCokernel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel.map\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernel</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fab : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fbd : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fac : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{fcd : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">D</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fab</span> <span class=\"fn\">fbd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">fac</span> <span class=\"fn\">fcd</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">fab</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">fcd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L394-L399","name":"SemiNormedGroupCat.explicitCokernelIso_hom_desc","line":394,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso_hom_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso_hom_desc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelIso_hom_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso\">SemiNormedGroupCat.explicitCokernelIso</a> <span class=\"fn\">f</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.desc\">CategoryTheory.Limits.cokernel.desc</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">w</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L387-L389","name":"SemiNormedGroupCat.explicitCokernelIso_inv_π","line":387,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso_inv_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso_inv_π\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelIso_inv_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso\">SemiNormedGroupCat.explicitCokernelIso</a> <span class=\"fn\">f</span></span>)</span>.inv</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L380-L382","name":"SemiNormedGroupCat.explicitCokernelIso_hom_π","line":380,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso_hom_π","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso_hom_π\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelIso_hom_π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso\">SemiNormedGroupCat.explicitCokernelIso</a> <span class=\"fn\">f</span></span>)</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel.π\">CategoryTheory.Limits.cokernel.π</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L373-L375","name":"SemiNormedGroupCat.explicitCokernelIso","line":373,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso","doc":"The explicit cokernel is isomorphic to the usual cokernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelIso\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.cokernel\">CategoryTheory.Limits.cokernel</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L365-L367","name":"SemiNormedGroupCat.explicitCokernelDesc_norm_le","line":365,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_norm_le\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">w</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">g</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L358-L361","name":"SemiNormedGroupCat.explicitCokernelDesc_comp_eq_zero","line":358,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_comp_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_comp_eq_zero\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc_comp_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cond : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cond2 : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">cond</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L348-L354","name":"SemiNormedGroupCat.explicitCokernelDesc_normNoninc","line":348,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_normNoninc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_normNoninc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc_normNoninc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cond : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormedAddGroupHom.NormNoninc</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormedAddGroupHom.NormNoninc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">cond</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L342-L344","name":"SemiNormedGroupCat.explicitCokernelDesc_norm_le_of_norm_le","line":342,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_norm_le_of_norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_norm_le_of_norm_le\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc_norm_le_of_norm_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">g</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">w</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L334-L336","name":"SemiNormedGroupCat.normNoninc_explicitCokernelπ","line":334,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.normNoninc_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.normNoninc_explicitCokernelπ\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">normNoninc_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.NormNoninc\">NormedAddGroupHom.NormNoninc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L328-L330","name":"SemiNormedGroupCat.isQuotient_explicitCokernelπ","line":328,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.isQuotient_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.isQuotient_explicitCokernelπ\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">isQuotient_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Quotient.html#NormedAddGroupHom.IsQuotient\">NormedAddGroupHom.IsQuotient</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L316-L324","name":"SemiNormedGroupCat.explicitCokernelπ.epi","line":316,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ.epi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ.epi\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelπ</span>.<span class=\"name\">epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L304-L312","name":"SemiNormedGroupCat.explicitCokernel_hom_ext","line":304,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel_hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel_hom_ext\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernel_hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">e₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">e₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L297-L299","name":"SemiNormedGroupCat.explicitCokernelDesc_zero","line":297,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_zero\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L284-L292","name":"SemiNormedGroupCat.explicitCokernelDesc_comp_eq_desc","line":284,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_comp_eq_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_comp_eq_desc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc_comp_eq_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{h : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cond' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">cond'</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a>\n    <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L273-L280","name":"SemiNormedGroupCat.explicitCokernelDesc_unique","line":273,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc_unique\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(he : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L267-L269","name":"SemiNormedGroupCat.explicitCokernelπ_desc_apply","line":267,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_desc_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_desc_apply\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelπ_desc_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cond : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">cond</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L260-L262","name":"SemiNormedGroupCat.explicitCokernelπ_desc","line":260,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_desc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_desc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelπ_desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">w</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L259-L259","name":"SemiNormedGroupCat.explicitCokernelπ_desc_assoc","line":259,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_desc_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_desc_assoc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelπ_desc_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Z✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\">SemiNormedGroupCat.explicitCokernelDesc</a> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L253-L255","name":"SemiNormedGroupCat.explicitCokernelπ_apply_dom_eq_zero","line":253,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_apply_dom_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_apply_dom_eq_zero\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelπ_apply_dom_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L242-L245","name":"SemiNormedGroupCat.comp_explicitCokernelπ","line":242,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.comp_explicitCokernelπ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.comp_explicitCokernelπ\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">comp_explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L241-L241","name":"SemiNormedGroupCat.comp_explicitCokernelπ_assoc","line":241,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.comp_explicitCokernelπ_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.comp_explicitCokernelπ_assoc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">comp_explicitCokernelπ_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L235-L237","name":"SemiNormedGroupCat.explicitCokernelπ_surjective","line":235,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ_surjective\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelπ_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\">SemiNormedGroupCat.explicitCokernelπ</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L230-L231","name":"SemiNormedGroupCat.explicitCokernelπ","line":230,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ","doc":"The projection from `Y` to the explicit cokernel of `X ⟶ Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelπ\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelπ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L222-L224","name":"SemiNormedGroupCat.explicitCokernelDesc","line":222,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc","doc":"Descend to the explicit cokernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernelDesc\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernelDesc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\">SemiNormedGroupCat.explicitCokernel</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L215-L216","name":"SemiNormedGroupCat.explicitCokernel","line":215,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel","doc":"An explicit choice of cokernel, which has good properties with respect to the norm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.explicitCokernel\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">explicitCokernel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L202-L206","name":"SemiNormedGroupCat.instHasCokernelsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategoryInstHasZeroMorphismsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory","line":202,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instHasCokernelsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategoryInstHasZeroMorphismsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instHasCokernelsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategoryInstHasZeroMorphismsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">instHasCokernelsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategoryInstHasZeroMorphismsSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.HasCokernels\">CategoryTheory.Limits.HasCokernels</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L187-L198","name":"SemiNormedGroupCat.isColimitCokernelCocone","line":187,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.isColimitCokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGroupCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.isColimitCokernelCocone\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">isColimitCokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.cokernelCocone\">SemiNormedGroupCat.cokernelCocone</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L173-L181","name":"SemiNormedGroupCat.cokernelLift","line":173,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.cokernelLift","doc":"Auxiliary definition for `HasCokernels SemiNormedGroupCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.cokernelLift\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">cokernelLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.CokernelCofork\">CategoryTheory.Limits.CokernelCofork</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.cokernelCocone\">SemiNormedGroupCat.cokernelCocone</a> <span class=\"fn\">f</span></span>)</span>.pt</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.pt</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L152-L167","name":"SemiNormedGroupCat.cokernelCocone","line":152,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.cokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGroupCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.cokernelCocone\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">cokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L140-L142","name":"SemiNormedGroupCat.instHasEqualizersSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory","line":140,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instHasEqualizersSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instHasEqualizersSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">instHasEqualizersSemiNormedGroupCatInstSemiNormedGroupCatLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.HasEqualizers\">CategoryTheory.Limits.HasEqualizers</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L123-L136","name":"SemiNormedGroupCat.hasLimit_parallelPair","line":123,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.hasLimit_parallelPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.hasLimit_parallelPair\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">hasLimit_parallelPair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimit\">CategoryTheory.Limits.HasLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.parallelPair\">CategoryTheory.Limits.parallelPair</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L110-L119","name":"SemiNormedGroupCat.fork","line":110,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.fork","doc":"The equalizer cone for a parallel pair of morphisms of seminormed groups. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.fork\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">fork</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Fork\">CategoryTheory.Limits.Fork</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L107-L108","name":"SemiNormedGroupCat.instNNNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","line":107,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instNNNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instNNNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">instNNNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm\">NNNorm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L105-L106","name":"SemiNormedGroupCat.instNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","line":105,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">instNormHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm\">Norm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L103-L104","name":"SemiNormedGroupCat.instSubHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","line":103,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instSubHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat.instSubHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory\"><span class=\"name\">SemiNormedGroupCat</span>.<span class=\"name\">instSubHomSemiNormedGroupCatToQuiverToCategoryStructInstSemiNormedGroupCatLargeCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{W : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat\">SemiNormedGroupCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">W</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L73-L89","name":"SemiNormedGroupCat₁.instHasCokernelsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁InstHasZeroMorphismsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁","line":73,"kind":"instance","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat₁.instHasCokernelsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁InstHasZeroMorphismsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat₁.instHasCokernelsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁InstHasZeroMorphismsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁\"><span class=\"name\">SemiNormedGroupCat₁</span>.<span class=\"name\">instHasCokernelsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁InstHasZeroMorphismsSemiNormedGroupCat₁InstLargeCategorySemiNormedGroupCat₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.HasCokernels\">CategoryTheory.Limits.HasCokernels</a> <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat₁\">SemiNormedGroupCat₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L58-L69","name":"SemiNormedGroupCat₁.cokernelLift","line":58,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat₁.cokernelLift","doc":"Auxiliary definition for `HasCokernels SemiNormedGroupCat₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat₁.cokernelLift\"><span class=\"name\">SemiNormedGroupCat₁</span>.<span class=\"name\">cokernelLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat₁\">SemiNormedGroupCat₁</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat₁\">SemiNormedGroupCat₁</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Kernels.html#CategoryTheory.Limits.CokernelCofork\">CategoryTheory.Limits.CokernelCofork</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat₁.cokernelCocone\">SemiNormedGroupCat₁.cokernelCocone</a> <span class=\"fn\">f</span></span>)</span>.pt</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.pt</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.lean#L38-L53","name":"SemiNormedGroupCat₁.cokernelCocone","line":38,"kind":"def","docLink":"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat₁.cokernelCocone","doc":"Auxiliary definition for `HasCokernels SemiNormedGroupCat₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat/Kernels.html#SemiNormedGroupCat₁.cokernelCocone\"><span class=\"name\">SemiNormedGroupCat₁</span>.<span class=\"name\">cokernelCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat₁\">SemiNormedGroupCat₁</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.html#SemiNormedGroupCat₁\">SemiNormedGroupCat₁</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Equalizers.html#CategoryTheory.Limits.Cofork\">CategoryTheory.Limits.Cofork</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span></div></div>"}]}