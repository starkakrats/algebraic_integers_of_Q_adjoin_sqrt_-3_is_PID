{"name":"Mathlib.Init.Data.Int.Bitwise","instances":[{"typeNames":["Int"],"name":"Int.instShiftLeftInt","className":"ShiftLeft"},{"typeNames":["Int"],"name":"Int.instShiftRightInt","className":"ShiftRight"}],"imports":["Init","Mathlib.Init.Data.Int.Basic","Mathlib.Init.Data.Nat.Bitwise","Mathlib.Init.ZeroOne"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L117-L118","name":"Int.instShiftRightInt","line":117,"kind":"instance","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.instShiftRightInt","doc":"`m >>> n` produces an integer whose binary representation\nis obtained by right-shifting the binary representation of `m` by `n` places "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.instShiftRightInt\"><span class=\"name\">Int</span>.<span class=\"name\">instShiftRightInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L107-L112","name":"Int.instShiftLeftInt","line":107,"kind":"instance","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.instShiftLeftInt","doc":"`m <<< n` produces an integer whose binary representation\nis obtained by left-shifting the binary representation of `m` by `n` places "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.instShiftLeftInt\"><span class=\"name\">Int</span>.<span class=\"name\">instShiftLeftInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L98-L102","name":"Int.xor","line":98,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.xor","doc":"`xor` computes the bitwise `xor` of two natural numbers"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.xor\"><span class=\"name\">Int</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L89-L93","name":"Int.ldiff","line":89,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.ldiff","doc":"`ldiff a b` performs bitwise set difference. For each corresponding\npair of bits taken as booleans, say `aᵢ` and `bᵢ`, it applies the\nboolean operation `aᵢ ∧ bᵢ` to obtain the `iᵗʰ` bit of the result."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.ldiff\"><span class=\"name\">Int</span>.<span class=\"name\">ldiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L78-L82","name":"Int.land","line":78,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.land","doc":"`land` takes two integers and returns their bitwise `and`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.land\"><span class=\"name\">Int</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L70-L74","name":"Int.lor","line":70,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.lor","doc":"`lor` takes two integers and returns their bitwise `or`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.lor\"><span class=\"name\">Int</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L64-L66","name":"Int.lnot","line":64,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.lnot","doc":"`lnot` flips all the bits in the binary representation of its input "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.lnot\"><span class=\"name\">Int</span>.<span class=\"name\">lnot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L56-L60","name":"Int.bitwise","line":56,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.bitwise","doc":"`Int.bitwise` applies the function `f` to pairs of bits in the same position in\nthe binary representations of its inputs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.bitwise\"><span class=\"name\">Int</span>.<span class=\"name\">bitwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L50-L51","name":"Int.natBitwise","line":50,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.natBitwise","doc":"`Int.natBitwise` is an auxiliary definition for `Int.bitwise`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.natBitwise\"><span class=\"name\">Int</span>.<span class=\"name\">natBitwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L44-L46","name":"Int.testBit","line":44,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.testBit","doc":"`testBit m n` returns whether the `(n+1)ˢᵗ` least significant bit is `1` or `0`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.testBit\"><span class=\"name\">Int</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L39-L40","name":"Int.bit","line":39,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.bit","doc":"`bit b` appends the digit `b` to the binary representation of\nits integer input. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.bit\"><span class=\"name\">Int</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L30-L32","name":"Int.bodd","line":30,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.bodd","doc":"`bodd n` returns `true` if `n` is odd"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.bodd\"><span class=\"name\">Int</span>.<span class=\"name\">bodd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Init/Data/Int/Bitwise.lean#L24-L26","name":"Int.div2","line":24,"kind":"def","docLink":"./Mathlib/Init/Data/Int/Bitwise.html#Int.div2","doc":"`div2 n = n/2`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Init/Data/Int/Bitwise.html#Int.div2\"><span class=\"name\">Int</span>.<span class=\"name\">div2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"}]}