{"name":"Mathlib.Tactic.Clean","instances":[],"imports":["Init","Lean.Elab.SyntheticMVars"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Clean.lean#L68-L68","name":"Mathlib.Tactic.tacticClean_","line":68,"kind":"def","docLink":"./Mathlib/Tactic/Clean.html#Mathlib.Tactic.tacticClean_","doc":"(Deprecated) `clean t` is a macro for `exact clean% t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Clean.html#Mathlib.Tactic.tacticClean_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticClean_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Clean.lean#L60-L65","name":"Mathlib.Tactic.elabClean","line":60,"kind":"def","docLink":"./Mathlib/Tactic/Clean.html#Mathlib.Tactic.elabClean","doc":"`clean% t` fully elaborates `t` and then eliminates all identity functions from it.\n\nIdentity functions are normally generated with terms like `show t from p`,\nwhich translate to some variant on `@id t p` in order to retain the type.\nThese are also generated by tactics such as `dsimp` to insert type hints.\n\nExample:\n```lean\ndef x : Id Nat := by dsimp [Id]; exact 1\n#print x\n-- def x : Id Nat := id 1\n\ndef x' : Id Nat := clean% by dsimp [Id]; exact 1\n#print x'\n-- def x' : Id Nat := 1\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Clean.html#Mathlib.Tactic.elabClean\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabClean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Clean.lean#L39-L57","name":"Mathlib.Tactic.cleanStx","line":39,"kind":"def","docLink":"./Mathlib/Tactic/Clean.html#Mathlib.Tactic.cleanStx","doc":"`clean% t` fully elaborates `t` and then eliminates all identity functions from it.\n\nIdentity functions are normally generated with terms like `show t from p`,\nwhich translate to some variant on `@id t p` in order to retain the type.\nThese are also generated by tactics such as `dsimp` to insert type hints.\n\nExample:\n```lean\ndef x : Id Nat := by dsimp [Id]; exact 1\n#print x\n-- def x : Id Nat := id 1\n\ndef x' : Id Nat := clean% by dsimp [Id]; exact 1\n#print x'\n-- def x' : Id Nat := 1\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Clean.html#Mathlib.Tactic.cleanStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">cleanStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Clean.lean#L26-L33","name":"Lean.Expr.clean","line":26,"kind":"def","docLink":"./Mathlib/Tactic/Clean.html#Lean.Expr.clean","doc":"Clean an expression by eliminating identify functions listed in `cleanConsts`.\nAlso eliminates `fun x => x` applications and tautological `let_fun` bindings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Clean.html#Lean.Expr.clean\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">clean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Clean.lean#L21-L22","name":"Lean.Expr.cleanConsts","line":21,"kind":"def","docLink":"./Mathlib/Tactic/Clean.html#Lean.Expr.cleanConsts","doc":"List of names removed by the `clean` tactic.\nAll of these names must resolve to functions defeq `id`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Clean.html#Lean.Expr.cleanConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">cleanConsts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"}]}