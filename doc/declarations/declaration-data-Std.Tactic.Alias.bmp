{"name":"Std.Tactic.Alias","instances":[{"typeNames":["Std.Tactic.Alias.AliasInfo"],"name":"Std.Tactic.Alias.instInhabitedAliasInfo","className":"Inhabited"}],"imports":["Init","Lean.Elab.Command","Lean.Elab.DeclarationRange","Lean.Compiler.NoncomputableAttr","Std.CodeAction.Deprecated"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L163-L186","name":"Std.Tactic.Alias.aliasLR","line":163,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.aliasLR","doc":"The command `alias name := target` creates a synonym of `target` with the given name.\n\nThe command `alias ⟨fwd, rev⟩ := target` creates synonyms for the forward and reverse directions\nof an iff theorem. Use `_` if only one direction is required.\n\nThese commands accept all modifiers and attributes that `def` and `theorem` do.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.aliasLR\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">aliasLR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L132-L137","name":"Std.Tactic.Alias.mkIffMpApp","line":132,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.mkIffMpApp","doc":"Given a possibly forall-quantified iff expression `prf`, produce a value for one\nof the implication directions (determined by `mp`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.mkIffMpApp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">mkIffMpApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mp : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(prf : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L72-L126","name":"Std.Tactic.Alias.alias","line":72,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.alias","doc":"The command `alias name := target` creates a synonym of `target` with the given name.\n\nThe command `alias ⟨fwd, rev⟩ := target` creates synonyms for the forward and reverse directions\nof an iff theorem. Use `_` if only one direction is required.\n\nThese commands accept all modifiers and attributes that `def` and `theorem` do.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.alias\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">alias</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L62-L70","name":"Std.Tactic.Alias.setDeprecatedTarget","line":62,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.setDeprecatedTarget","doc":"Updates the `deprecated` declaration to point to `target` if no target is provided. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.setDeprecatedTarget\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">setDeprecatedTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arr : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Lean.Elab.Attribute</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Lean.Elab.Attribute</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L58-L59","name":"Std.Tactic.Alias.setAliasInfo","line":58,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.setAliasInfo","doc":"Set the alias info for a new declaration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.setAliasInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">setAliasInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L54-L55","name":"Std.Tactic.Alias.getAliasInfo","line":54,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.getAliasInfo","doc":"Get the alias information for a name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.getAliasInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">getAliasInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L46-L51","name":"Std.Tactic.Alias.aliasExt","line":46,"kind":"opaque","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.aliasExt","doc":"Environment extension for registering aliases "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.aliasExt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">aliasExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">Lean.SimpleScopedEnvExtension</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L40-L43","name":"Std.Tactic.Alias.AliasInfo.toString","line":40,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.toString","doc":"The docstring for an alias. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.toString\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">AliasInfo</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L34-L37","name":"Std.Tactic.Alias.AliasInfo.name","line":34,"kind":"def","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.name","doc":"The name underlying an alias target "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.name\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">AliasInfo</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L31-L31","name":"Std.Tactic.Alias.instInhabitedAliasInfo","line":31,"kind":"instance","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.instInhabitedAliasInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.instInhabitedAliasInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">instInhabitedAliasInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L29-L30","name":"Std.Tactic.Alias.AliasInfo.reverse","line":29,"kind":"ctor","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.reverse","doc":"Reverse direction of an iff alias "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.reverse\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">AliasInfo</span>.<span class=\"name\">reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L27-L28","name":"Std.Tactic.Alias.AliasInfo.forward","line":27,"kind":"ctor","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.forward","doc":"Forward direction of an iff alias "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.forward\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">AliasInfo</span>.<span class=\"name\">forward</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L25-L26","name":"Std.Tactic.Alias.AliasInfo.plain","line":25,"kind":"ctor","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.plain","doc":"Plain alias "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo.plain\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">AliasInfo</span>.<span class=\"name\">plain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\">Std.Tactic.Alias.AliasInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Alias.lean#L24-L31","name":"Std.Tactic.Alias.AliasInfo","line":24,"kind":"inductive","docLink":"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo","doc":"An alias can be in one of three forms "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Alias.html#Std.Tactic.Alias.AliasInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Alias</span>.<span class=\"name\">AliasInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}