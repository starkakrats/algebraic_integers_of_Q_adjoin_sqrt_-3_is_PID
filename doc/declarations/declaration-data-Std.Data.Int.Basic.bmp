{"name":"Std.Data.Int.Basic","instances":[{"typeNames":["Int"],"name":"Int.instDivInt_1","className":"Div"},{"typeNames":["Int"],"name":"Int.instModInt_1","className":"Mod"},{"typeNames":["Int"],"name":"Int.instDvdInt","className":"Dvd"},{"typeNames":["Int"],"name":"Int.instComplementInt","className":"Complement"},{"typeNames":["Int","Nat","Int"],"name":"Int.instHShiftRightIntNat","className":"HShiftRight"},{"typeNames":["Int"],"name":"Int.instToExprInt","className":"Lean.ToExpr"}],"imports":["Init","Std.Classes.Dvd","Lean.ToExpr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L170-L174","name":"Int.instToExprInt","line":170,"kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instToExprInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.instToExprInt\"><span class=\"name\">Int</span>.<span class=\"name\">instToExprInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L167-L167","name":"Int.instHShiftRightIntNat","line":167,"kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instHShiftRightIntNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.instHShiftRightIntNat\"><span class=\"name\">Int</span>.<span class=\"name\">instHShiftRightIntNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L163-L165","name":"Int.shiftRight","line":163,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.shiftRight","doc":"Bitwise shift right.\n\nConceptually, this treats the integer as an infinite sequence of bits in two's\ncomplement and shifts the value to the right.\n\n```lean\n( 0b0111:Int) >>> 1 =  0b0011\n( 0b1000:Int) >>> 1 =  0b0100\n(-0b1000:Int) >>> 1 = -0b0100\n(-0b0111:Int) >>> 1 = -0b0100\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.shiftRight\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L148-L148","name":"Int.instComplementInt","line":148,"kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instComplementInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.instComplementInt\"><span class=\"name\">Int</span>.<span class=\"name\">instComplementInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L144-L146","name":"Int.not","line":144,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.not","doc":"Bitwise not\n\nInterprets the integer as an infinite sequence of bits in two's complement\nand complements each bit.\n```\n~~~(0:Int) = -1\n~~~(1:Int) = -2\n~~~(-1:Int) = 0\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.not\"><span class=\"name\">Int</span>.<span class=\"name\">not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L129-L129","name":"Int.instDvdInt","line":129,"kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instDvdInt","doc":"Divisibility of integers. `a ∣ b` (typed as `\\|`) says that\nthere is some `c` such that `b = a * c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.instDvdInt\"><span class=\"name\">Int</span>.<span class=\"name\">instDvdInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Dvd.html#Dvd\">Dvd</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L121-L121","name":"Int.gcd","line":121,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.gcd","doc":"Computes the greatest common divisor of two integers, as a `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.gcd\"><span class=\"name\">Int</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L116-L116","name":"Int.instModInt_1","line":116,"kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instModInt_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.instModInt_1\"><span class=\"name\">Int</span>.<span class=\"name\">instModInt_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L115-L115","name":"Int.instDivInt_1","line":115,"kind":"instance","docLink":"./Std/Data/Int/Basic.html#Int.instDivInt_1","doc":"Core Lean provides instances using T-rounding division, i.e. `Int.div` and `Int.mod`.\nWe override these here.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.instDivInt_1\"><span class=\"name\">Int</span>.<span class=\"name\">instDivInt_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L98-L103","name":"Int.fmod","line":98,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.fmod","doc":"Integer modulus. This version of `Int.mod` uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.fmod\"><span class=\"name\">Int</span>.<span class=\"name\">fmod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L85-L91","name":"Int.fdiv","line":85,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.fdiv","doc":"Integer division. This version of `Int.div` uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.fdiv\"><span class=\"name\">Int</span>.<span class=\"name\">fdiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L70-L72","name":"Int.emod","line":70,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.emod","doc":"Integer modulus. This version of `Int.mod` uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ emod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.emod\"><span class=\"name\">Int</span>.<span class=\"name\">emod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L58-L63","name":"Int.ediv","line":58,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.ediv","doc":"Integer division. This version of `Int.div` uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ mod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.ediv\"><span class=\"name\">Int</span>.<span class=\"name\">ediv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L36-L38","name":"Int.toNat'","line":36,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.toNat'","doc":"* If `n : Nat`, then `int.toNat' n = some n`\n* If `n : Int` is negative, then `int.toNat' n = none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.toNat'\"><span class=\"name\">Int</span>.<span class=\"name\">toNat'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L25-L28","name":"Int.sign","line":25,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.sign","doc":"Returns the \"sign\" of the integer as another integer: `1` for positive numbers,\n`-1` for negative numbers, and `0` for `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.sign\"><span class=\"name\">Int</span>.<span class=\"name\">sign</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/Int/Basic.lean#L13-L17","name":"Int.«term-[_+1]»","line":13,"kind":"def","docLink":"./Std/Data/Int/Basic.html#Int.«term-[_+1]»","doc":"`-[n+1]` is suggestive notation for `negSucc n`, which is the second constructor of\n`Int` for making strictly negative numbers by mapping `n : Nat` to `-(n + 1)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Int/Basic.html#Int.«term-[_+1]»\"><span class=\"name\">Int</span>.<span class=\"name\">«term-[_+1]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}