{"name":"Mathlib.Order.Category.PartOrd","instances":[{"typeNames":["PartialOrder.toPreorder"],"name":"PartOrd.instParentProjectionTypePreorderPartialOrderToPreorder","className":"CategoryTheory.BundledHom.ParentProjection"},{"typeNames":["PartOrd"],"name":"PartOrd.instConcreteCategoryPartOrdInstPartOrdLargeCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["PartOrd","_builtin_typeu"],"name":"PartOrd.instCoeSortPartOrdType","className":"CoeSort"},{"typeNames":["PartOrd"],"name":"PartOrd.instInhabitedPartOrd","className":"Inhabited"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"PartOrd.instPartialOrderα","className":"PartialOrder"},{"typeNames":["PartOrd","Preord"],"name":"PartOrd.hasForgetToPreord","className":"CategoryTheory.HasForget₂"}],"imports":["Init","Mathlib.Order.Antisymmetrization","Mathlib.Order.Category.Preord"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L143-L146","name":"preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd","line":143,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd","doc":"`PreordToPartOrd` and `OrderDual` commute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd\"><span class=\"name\">preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrd\">preordToPartOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord.dual\">Preord.dual</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrd\">preordToPartOrd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L142-L142","name":"preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_hom_app_coe","line":142,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_hom_app_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_hom_app_coe\"><span class=\"name\">preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_hom_app_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrd\">preordToPartOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd\">preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd</a>.hom</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Antisymmetrization.html#OrderIso.dualAntisymmetrization\">OrderIso.dualAntisymmetrization</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L142-L142","name":"preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_inv_app_coe","line":142,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_inv_app_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_inv_app_coe\"><span class=\"name\">preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd_inv_app_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord.dual\">Preord.dual</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrd\">preordToPartOrd</a></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd\">preordToPartOrdCompToDualIsoToDualCompPreordToPartOrd</a>.inv</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">OrderIso.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Antisymmetrization.html#OrderIso.dualAntisymmetrization\">OrderIso.dualAntisymmetrization</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span></span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L121-L135","name":"preordToPartOrdForgetAdjunction","line":121,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdForgetAdjunction","doc":"`Preord_to_PartOrd` is left adjoint to the forgetful functor, meaning it is the free\nfunctor from `Preord` to `PartOrd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrdForgetAdjunction\"><span class=\"name\">preordToPartOrdForgetAdjunction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrd\">preordToPartOrd</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L107-L115","name":"preordToPartOrd","line":107,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#preordToPartOrd","doc":"`antisymmetrization` as a functor. It is the free functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#preordToPartOrd\"><span class=\"name\">preordToPartOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L99-L102","name":"partOrd_dual_comp_forget_to_preord","line":99,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#partOrd_dual_comp_forget_to_preord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#partOrd_dual_comp_forget_to_preord\"><span class=\"name\">partOrd_dual_comp_forget_to_preord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a></span>)</span> <a href=\"./Mathlib/Order/Category/Preord.html#Preord.dual\">Preord.dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L89-L93","name":"PartOrd.dualEquiv","line":89,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv","doc":"The equivalence between `PartOrd` and itself induced by `OrderDual` both ways. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv\"><span class=\"name\">PartOrd</span>.<span class=\"name\">dualEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L88-L88","name":"PartOrd.dualEquiv_functor","line":88,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv_functor\"><span class=\"name\">PartOrd</span>.<span class=\"name\">dualEquiv_functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv\">PartOrd.dualEquiv</a>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L88-L88","name":"PartOrd.dualEquiv_inverse","line":88,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv_inverse\"><span class=\"name\">PartOrd</span>.<span class=\"name\">dualEquiv_inverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dualEquiv\">PartOrd.dualEquiv</a>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L81-L83","name":"PartOrd.dual","line":81,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual","doc":"`OrderDual` as a functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\"><span class=\"name\">PartOrd</span>.<span class=\"name\">dual</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L80-L80","name":"PartOrd.dual_obj","line":80,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual_obj\"><span class=\"name\">PartOrd</span>.<span class=\"name\">dual_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.of\">PartOrd.of</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">X</span></span>)</span><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L80-L80","name":"PartOrd.dual_map","line":80,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual_map\"><span class=\"name\">PartOrd</span>.<span class=\"name\">dual_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>} (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">OrderHom.dual</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L67-L75","name":"PartOrd.Iso.mk","line":67,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk","doc":"Constructs an equivalence between partial orders from an order isomorphism between them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk\"><span class=\"name\">PartOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L66-L66","name":"PartOrd.Iso.mk_hom","line":66,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk_hom\"><span class=\"name\">PartOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk\">PartOrd.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L66-L66","name":"PartOrd.Iso.mk_inv","line":66,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk_inv\"><span class=\"name\">PartOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.Iso.mk\">PartOrd.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">OrderIso.symm</a> <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L60-L61","name":"PartOrd.hasForgetToPreord","line":60,"kind":"instance","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.hasForgetToPreord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.hasForgetToPreord\"><span class=\"name\">PartOrd</span>.<span class=\"name\">hasForgetToPreord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./Mathlib/Order/Category/Preord.html#Preord\">Preord</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L57-L58","name":"PartOrd.instPartialOrderα","line":57,"kind":"instance","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.instPartialOrderα","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.instPartialOrderα\"><span class=\"name\">PartOrd</span>.<span class=\"name\">instPartialOrderα</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">↑<span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L54-L55","name":"PartOrd.instInhabitedPartOrd","line":54,"kind":"instance","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.instInhabitedPartOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.instInhabitedPartOrd\"><span class=\"name\">PartOrd</span>.<span class=\"name\">instInhabitedPartOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L49-L50","name":"PartOrd.coe_of","line":49,"kind":"theorem","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.coe_of\"><span class=\"name\">PartOrd</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.of\">PartOrd.of</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L43-L44","name":"PartOrd.of","line":43,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.of","doc":"Construct a bundled PartOrd from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.of\"><span class=\"name\">PartOrd</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L39-L40","name":"PartOrd.instCoeSortPartOrdType","line":39,"kind":"instance","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.instCoeSortPartOrdType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.instCoeSortPartOrdType\"><span class=\"name\">PartOrd</span>.<span class=\"name\">instCoeSortPartOrdType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L36-L37","name":"PartOrd.instConcreteCategoryPartOrdInstPartOrdLargeCategory","line":36,"kind":"instance","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.instConcreteCategoryPartOrdInstPartOrdLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.instConcreteCategoryPartOrdInstPartOrdLargeCategory\"><span class=\"name\">PartOrd</span>.<span class=\"name\">instConcreteCategoryPartOrdInstPartOrdLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L30-L31","name":"PartOrd.instParentProjectionTypePreorderPartialOrderToPreorder","line":30,"kind":"instance","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd.instParentProjectionTypePreorderPartialOrderToPreorder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.instParentProjectionTypePreorderPartialOrderToPreorder\"><span class=\"name\">PartOrd</span>.<span class=\"name\">instParentProjectionTypePreorderPartialOrderToPreorder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/BundledHom.html#CategoryTheory.BundledHom.ParentProjection\">CategoryTheory.BundledHom.ParentProjection</a> <a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder.toPreorder\">@<a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder.toPreorder\">PartialOrder.toPreorder</a></a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/PartOrd.lean#L23-L24","name":"PartOrd","line":23,"kind":"def","docLink":"./Mathlib/Order/Category/PartOrd.html#PartOrd","doc":"The category of partially ordered types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\"><span class=\"name\">PartOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}