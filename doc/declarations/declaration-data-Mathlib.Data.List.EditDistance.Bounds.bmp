{"name":"Mathlib.Data.List.EditDistance.Bounds","instances":[],"imports":["Init","Mathlib.Data.List.Infix","Mathlib.Data.List.MinMax","Mathlib.Data.List.EditDistance.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/EditDistance/Bounds.lean#L94-L97","name":"le_levenshtein_append","line":94,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Bounds.html#le_levenshtein_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Bounds.html#le_levenshtein_append\"><span class=\"name\">le_levenshtein_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">xs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs'</span> <a href=\"./Std/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs'</span> <span class=\"fn\">ys₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ys₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">ys₂</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/EditDistance/Bounds.lean#L89-L92","name":"le_levenshtein_cons","line":89,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Bounds.html#le_levenshtein_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Bounds.html#le_levenshtein_cons\"><span class=\"name\">le_levenshtein_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">xs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs'</span> <a href=\"./Std/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs'</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/EditDistance/Bounds.lean#L81-L87","name":"suffixLevenshtein_minimum_le_levenshtein_append","line":81,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Bounds.html#suffixLevenshtein_minimum_le_levenshtein_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Bounds.html#suffixLevenshtein_minimum_le_levenshtein_append\"><span class=\"name\">suffixLevenshtein_minimum_le_levenshtein_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum\">List.minimum</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys₂</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ys₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">ys₂</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/EditDistance/Bounds.lean#L75-L79","name":"le_suffixLevenshtein_append_minimum","line":75,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Bounds.html#le_suffixLevenshtein_append_minimum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Bounds.html#le_suffixLevenshtein_append_minimum\"><span class=\"name\">le_suffixLevenshtein_append_minimum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum\">List.minimum</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys₂</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum\">List.minimum</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ys₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">ys₂</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/EditDistance/Bounds.lean#L57-L73","name":"le_suffixLevenshtein_cons_minimum","line":57,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Bounds.html#le_suffixLevenshtein_cons_minimum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Bounds.html#le_suffixLevenshtein_cons_minimum\"><span class=\"name\">le_suffixLevenshtein_cons_minimum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum\">List.minimum</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum\">List.minimum</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/List/EditDistance/Bounds.lean#L25-L55","name":"suffixLevenshtein_minimum_le_levenshtein_cons","line":25,"kind":"theorem","docLink":"./Mathlib/Data/List/EditDistance/Bounds.html#suffixLevenshtein_minimum_le_levenshtein_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/EditDistance/Bounds.html#suffixLevenshtein_minimum_le_levenshtein_cons\"><span class=\"name\">suffixLevenshtein_minimum_le_levenshtein_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Canonical/Defs.html#CanonicallyLinearOrderedAddCommMonoid\">CanonicallyLinearOrderedAddCommMonoid</a> <span class=\"fn\">δ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/MinMax.html#List.minimum\">List.minimum</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#suffixLevenshtein\">suffixLevenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#levenshtein\">levenshtein</a> <span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span></span>)</span></span>)</span></span></span></div></div>"}]}