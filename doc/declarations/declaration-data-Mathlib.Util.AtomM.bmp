{"name":"Mathlib.Util.AtomM","instances":[{"typeNames":["Mathlib.Tactic.AtomM.Context"],"name":"Mathlib.Tactic.AtomM.instInhabitedContext","className":"Inhabited"}],"imports":["Init","Lean.Meta.Tactic.Simp.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L45-L51","name":"Mathlib.Tactic.AtomM.addAtom","line":45,"kind":"def","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.addAtom","doc":"Get the index corresponding to an atomic expression, if it has already been encountered, or\nput it in the list of atoms and return the new index, otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.addAtom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">addAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">Mathlib.Tactic.AtomM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L38-L41","name":"Mathlib.Tactic.AtomM.run","line":38,"kind":"def","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.run","doc":"Run a computation in the `AtomM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(red : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">Mathlib.Tactic.AtomM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(evalAtom : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">{ <span class=\"fn\">expr</span> := <span class=\"fn\">e</span>, <span class=\"fn\">proof?</span> := <span class=\"fn\">none</span>, <span class=\"fn\">dischargeDepth</span> := <span class=\"fn\">0</span> }</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L35-L35","name":"Mathlib.Tactic.AtomM","line":35,"kind":"def","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM","doc":"The monad that `ring` works in. This is only used for collecting atoms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L32-L32","name":"Mathlib.Tactic.AtomM.State.atoms","line":32,"kind":"def","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State.atoms","doc":"The list of atoms-up-to-defeq encountered thus far, used for atom sorting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State.atoms\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">State</span>.<span class=\"name\">atoms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State\">Mathlib.Tactic.AtomM.State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L30-L30","name":"Mathlib.Tactic.AtomM.State.mk","line":30,"kind":"ctor","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(atoms : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State\">Mathlib.Tactic.AtomM.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L30-L32","name":"Mathlib.Tactic.AtomM.State","line":30,"kind":"structure","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State","doc":"The mutable state of the `AtomM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.State\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L27-L27","name":"Mathlib.Tactic.AtomM.instInhabitedContext","line":27,"kind":"instance","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.instInhabitedContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.instInhabitedContext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">instInhabitedContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context\">Mathlib.Tactic.AtomM.Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L26-L26","name":"Mathlib.Tactic.AtomM.Context.evalAtom","line":26,"kind":"def","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context.evalAtom","doc":"A simplification to apply to atomic expressions when they are encountered,\nbefore interning them in the atom list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context.evalAtom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context\">Mathlib.Tactic.AtomM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L23-L23","name":"Mathlib.Tactic.AtomM.Context.red","line":23,"kind":"def","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context.red","doc":"The reducibility setting for definitional equality of atoms "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context.red\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Context</span>.<span class=\"name\">red</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context\">Mathlib.Tactic.AtomM.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L21-L21","name":"Mathlib.Tactic.AtomM.Context.mk","line":21,"kind":"ctor","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(red : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(evalAtom : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Lean.Meta.Simp.Result</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context\">Mathlib.Tactic.AtomM.Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/AtomM.lean#L21-L27","name":"Mathlib.Tactic.AtomM.Context","line":21,"kind":"structure","docLink":"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context","doc":"The context (read-only state) of the `AtomM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM.Context\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">AtomM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}