{"name":"Qq.Macro","instances":[{"typeNames":["Qq.Impl.QuoteM","Qq.Impl.UnquoteM"],"name":"Qq.Impl.instMonadLiftQuoteMUnquoteM","className":"MonadLift"}],"imports":["Init","Lean","Qq.ForLean.ReduceEval","Qq.ForLean.ToExpr","Qq.Typ"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L601-L605","name":"Qq.Impl.floatExprAntiquot","line":601,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.floatExprAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatExprAntiquot\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatExprAntiquot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span>)</span></span>)</span> <span class=\"fn\">m</span> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L578-L598","name":"Qq.Impl.floatExprAntiquot'","line":578,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.floatExprAntiquot'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatExprAntiquot'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatExprAntiquot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>)</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L566-L575","name":"Qq.Impl.floatLevelAntiquot'","line":566,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.floatLevelAntiquot'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatLevelAntiquot'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatLevelAntiquot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>)</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L554-L555","name":"Qq.«term_=Q_»","line":554,"kind":"def","docLink":"./Qq/Macro.html#Qq.«term_=Q_»","doc":"`a =Q b` says that `a` and `b` are definitionally equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«term_=Q_»\"><span class=\"name\">Qq</span>.<span class=\"name\">«term_=Q_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L542-L543","name":"Qq.«termQ(__)_1»","line":542,"kind":"def","docLink":"./Qq/Macro.html#Qq.«termQ(__)_1»","doc":"`Q(α)` is the type of Lean expressions having type `α`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQ(__)_1»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQ(__)_1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L523-L524","name":"Qq.«termQ(__)»","line":523,"kind":"def","docLink":"./Qq/Macro.html#Qq.«termQ(__)»","doc":"`q(t)` quotes the Lean expression `t` into a `Q(α)` (if `t : α`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQ(__)»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQ(__)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L484-L521","name":"Qq.Impl.macro","line":484,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.macro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.macro\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">macro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L480-L481","name":"Qq.«term_=QL_»","line":480,"kind":"def","docLink":"./Qq/Macro.html#Qq.«term_=QL_»","doc":"`a =QL b` says that the levels `a` and `b` are definitionally equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«term_=QL_»\"><span class=\"name\">Qq</span>.<span class=\"name\">«term_=QL_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L471-L478","name":"Qq.«termQl(_)»","line":471,"kind":"def","docLink":"./Qq/Macro.html#Qq.«termQl(_)»","doc":"`ql(u)` quotes the universe level `u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQl(_)»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQl(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L453-L469","name":"Qq.Impl.UnquoteState.withLevelNames","line":453,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.withLevelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.withLevelNames\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">withLevelNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L446-L451","name":"Qq.withProcessPostponed","line":446,"kind":"def","docLink":"./Qq/Macro.html#Qq.withProcessPostponed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.withProcessPostponed\"><span class=\"name\">Qq</span>.<span class=\"name\">withProcessPostponed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L438-L439","name":"Qq.Impl.lctxHasMVar","line":438,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.lctxHasMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.lctxHasMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">lctxHasMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L433-L436","name":"Qq.Impl.MVarSynth.synth","line":433,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.synth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.synth\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">synth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">Qq.Impl.MVarSynth</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">Qq.Impl.QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L428-L431","name":"Qq.Impl.MVarSynth.isAssigned","line":428,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.isAssigned","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.isAssigned\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">isAssigned</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">Qq.Impl.MVarSynth</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L424-L426","name":"Qq.Impl.unquoteMVar","line":424,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L408-L422","name":"Qq.Impl.unquoteMVarCore","line":408,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteMVarCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteMVarCore\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteMVarCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L375-L406","name":"Qq.Impl.quoteExpr","line":375,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.quoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">Qq.Impl.QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L369-L373","name":"Qq.Impl.quoteLevelList","line":369,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.quoteLevelList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteLevelList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteLevelList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">Qq.Impl.QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L351-L367","name":"Qq.Impl.quoteLevel","line":351,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.quoteLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">Qq.Impl.QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L342-L349","name":"Qq.Impl.isLevelFVar","line":342,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.isLevelFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isLevelFVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isLevelFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L301-L340","name":"Qq.Impl.unquoteLCtx","line":301,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLCtx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L284-L299","name":"Qq.Impl.unquoteLevelLCtx","line":284,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelLCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(addDefEqs : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L278-L282","name":"Qq.Impl.substLevel","line":278,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.substLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.substLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">substLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L226-L274","name":"Qq.Impl.unquoteExpr","line":226,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L213-L224","name":"Qq.Impl.unquoteExprMVar","line":213,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExprMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExprMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExprMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L204-L211","name":"Qq.Impl.unquoteExprList","line":204,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExprList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExprList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExprList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L197-L200","name":"Qq.Impl.makeDefEq","line":197,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.makeDefEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.makeDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L186-L195","name":"Qq.Impl.makeZetaReduce","line":186,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.makeZetaReduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.makeZetaReduce\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeZetaReduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L183-L184","name":"Qq.Impl.betaRev'","line":183,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.betaRev'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.betaRev'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">betaRev'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(revArgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L170-L181","name":"Qq.Impl.mkAbstractedName","line":170,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.mkAbstractedName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.mkAbstractedName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkAbstractedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L161-L168","name":"Qq.Impl.unquoteLevelList","line":161,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L150-L157","name":"Qq.Impl.unquoteLevelMVar","line":150,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L127-L148","name":"Qq.Impl.unquoteLevel","line":127,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L122-L123","name":"Qq.Impl.whnfR","line":122,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.whnfR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.whnfR\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">whnfR</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L115-L120","name":"Qq.Impl.whnf","line":115,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.whnf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.whnf\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">whnf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e0 : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <span class=\"fn\">e</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L109-L112","name":"Qq.Impl.isBad","line":109,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.isBad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isBad\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isBad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L102-L107","name":"Qq.Impl.isAssignablePattern","line":102,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.isAssignablePattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isAssignablePattern\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isAssignablePattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L99-L100","name":"Qq.Impl.mkAbstractedLevelName","line":99,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.mkAbstractedLevelName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.mkAbstractedLevelName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkAbstractedLevelName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L94-L97","name":"Qq.Impl.addSyntaxDollar","line":94,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.addSyntaxDollar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.addSyntaxDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">addSyntaxDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L85-L92","name":"Qq.Impl.stripDollars","line":85,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.stripDollars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.stripDollars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">stripDollars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L76-L82","name":"Qq.Impl.removeDollar","line":76,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.removeDollar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.removeDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">removeDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L69-L73","name":"Qq.Impl.addDollar","line":69,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.addDollar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.addDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">addDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L64-L66","name":"Qq.Impl.withUnquotedLCtx","line":64,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.withUnquotedLCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.withUnquotedLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">withUnquotedLCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">Qq.Impl.QuoteM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L56-L62","name":"Qq.Impl.determineLocalInstances","line":56,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.determineLocalInstances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.determineLocalInstances\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">determineLocalInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L53-L54","name":"Qq.Impl.instMonadLiftQuoteMUnquoteM","line":53,"kind":"instance","docLink":"./Qq/Macro.html#Qq.Impl.instMonadLiftQuoteMUnquoteM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.instMonadLiftQuoteMUnquoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">instMonadLiftQuoteMUnquoteM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">Qq.Impl.QuoteM</a> <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L51-L51","name":"Qq.Impl.QuoteM","line":51,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.QuoteM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.QuoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">QuoteM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L49-L49","name":"Qq.Impl.UnquoteM","line":49,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L47-L47","name":"Qq.Impl.UnquoteState.mayPostpone","line":47,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mayPostpone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mayPostpone\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mayPostpone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L45-L45","name":"Qq.Impl.UnquoteState.levelNames","line":45,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelNames\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L43-L43","name":"Qq.Impl.UnquoteState.abstractedFVars","line":43,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.abstractedFVars","doc":"New free variables in the new context that were newly introduced for irreducible expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.abstractedFVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">abstractedFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L40-L40","name":"Qq.Impl.UnquoteState.levelBackSubst","line":40,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelBackSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelBackSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelBackSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L37-L37","name":"Qq.Impl.UnquoteState.exprBackSubst","line":37,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.exprBackSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.exprBackSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">exprBackSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">Qq.Impl.ExprBackSubstResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L34-L34","name":"Qq.Impl.UnquoteState.unquoted","line":34,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.unquoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.unquoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">unquoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L31-L31","name":"Qq.Impl.UnquoteState.exprSubst","line":31,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.exprSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.exprSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">exprSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L28-L28","name":"Qq.Impl.UnquoteState.levelSubst","line":28,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L25-L25","name":"Qq.Impl.UnquoteState.mvars","line":25,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mvars","doc":"Quoted mvars in the outside lctx (of type `Level`, `Quoted _`, or `Type`).\nThe outside mvars can also be of the form `?m x y z`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mvars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">Qq.Impl.MVarSynth</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L20-L20","name":"Qq.Impl.UnquoteState.mk","line":20,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mk\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvars : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">Qq.Impl.MVarSynth</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelSubst : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exprSubst : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unquoted : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exprBackSubst : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">Qq.Impl.ExprBackSubstResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelBackSubst : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abstractedFVars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mayPostpone : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">Qq.Impl.UnquoteState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L20-L47","name":"Qq.Impl.UnquoteState","line":20,"kind":"structure","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L18-L18","name":"Qq.Impl.MVarSynth.level","line":18,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.level","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.level\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">level</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(unquotedMVar : <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">Qq.Impl.MVarSynth</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L17-L17","name":"Qq.Impl.MVarSynth.type","line":17,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.type\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(unquotedMVar : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">Qq.Impl.MVarSynth</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L16-L16","name":"Qq.Impl.MVarSynth.term","line":16,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.term\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(quotedType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(unquotedMVar : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">Qq.Impl.MVarSynth</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L15-L18","name":"Qq.Impl.MVarSynth","line":15,"kind":"inductive","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L13-L13","name":"Qq.Impl.ExprBackSubstResult.unquoted","line":13,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.unquoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.unquoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span>.<span class=\"name\">unquoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">Qq.Impl.ExprBackSubstResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L12-L12","name":"Qq.Impl.ExprBackSubstResult.quoted","line":12,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.quoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.quoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span>.<span class=\"name\">quoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">Qq.Impl.ExprBackSubstResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Macro.lean#L11-L13","name":"Qq.Impl.ExprBackSubstResult","line":11,"kind":"inductive","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}