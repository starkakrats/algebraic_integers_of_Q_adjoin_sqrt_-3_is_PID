{"name":"Mathlib.CategoryTheory.Triangulated.Opposite","instances":[{"typeNames":["CategoryTheory.shiftFunctor"],"name":"CategoryTheory.Pretriangulated.Opposite.instAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt","className":"CategoryTheory.Functor.Additive"}],"imports":["Init","Mathlib.CategoryTheory.Shift.Opposite","Mathlib.CategoryTheory.Shift.Pullback","Mathlib.CategoryTheory.Triangulated.Pretriangulated","Mathlib.Tactic.Linarith"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L417-L418","name":"CategoryTheory.Pretriangulated.unop_distinguished","line":417,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.unop_distinguished","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.unop_distinguished\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">unop_distinguished</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hT : <span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.inverse</span>.obj <span class=\"fn\">T</span></span>)</span>.unop</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L412-L415","name":"CategoryTheory.Pretriangulated.op_distinguished","line":412,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.op_distinguished","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.op_distinguished\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">op_distinguished</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hT : <span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.functor</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">T</span></span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L407-L410","name":"CategoryTheory.Pretriangulated.mem_distTriang_op_iff'","line":407,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.mem_distTriang_op_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.mem_distTriang_op_iff'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">mem_distTriang_op_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (T' : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>) (_ : <span class=\"fn\"><span class=\"fn\">T'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span>),\n    <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.functor</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">T'</span></span>)</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L403-L405","name":"CategoryTheory.Pretriangulated.mem_distTriang_op_iff","line":403,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.mem_distTriang_op_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.mem_distTriang_op_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">mem_distTriang_op_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.inverse</span>.obj <span class=\"fn\">T</span></span>)</span>.unop</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>     <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L391-L397","name":"CategoryTheory.Pretriangulated.Opposite.instPretriangulatedOppositeOppositeHasZeroObject_opInstHasShiftOppositeIntOppositeInstAddMonoidIntInstPreadditiveOppositeOppositeIntInstAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt","line":391,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.instPretriangulatedOppositeOppositeHasZeroObject_opInstHasShiftOppositeIntOppositeInstAddMonoidIntInstPreadditiveOppositeOppositeIntInstAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt","doc":"The pretriangulated structure on the opposite category of\na pretriangulated category. It is a scoped instance, so that we need to\n`open CategoryTheory.Pretriangulated.Opposite` in order to be able\nto use it: the reason is that it relies on the definition of the shift\non the opposite category `Cᵒᵖ`, for which it is unclear whether it should\nbe a global instance or not. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.instPretriangulatedOppositeOppositeHasZeroObject_opInstHasShiftOppositeIntOppositeInstAddMonoidIntInstPreadditiveOppositeOppositeIntInstAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">instPretriangulatedOppositeOppositeHasZeroObject_opInstHasShiftOppositeIntOppositeInstAddMonoidIntInstPreadditiveOppositeOppositeIntInstAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L365-L383","name":"CategoryTheory.Pretriangulated.Opposite.complete_distinguished_triangle_morphism","line":365,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.complete_distinguished_triangle_morphism","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.complete_distinguished_triangle_morphism\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">complete_distinguished_triangle_morphism</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(T₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hT₁ : <span class=\"fn\"><span class=\"fn\">T₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hT₂ : <span class=\"fn\"><span class=\"fn\">T₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T₁</span>.obj₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">T₂</span>.obj₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T₁</span>.obj₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">T₂</span>.obj₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(comm : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">T₁</span>.mor₁</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">T₂</span>.mor₁</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (c : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T₁</span>.obj₃</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">T₂</span>.obj₃</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">T₁</span>.mor₂</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">T₂</span>.mor₂</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">T₁</span>.mor₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">1</span></span>)</span>.map <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">c</span> <span class=\"fn\"><span class=\"fn\">T₂</span>.mor₃</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L354-L363","name":"CategoryTheory.Pretriangulated.Opposite.distinguished_cocone_triangle","line":354,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguished_cocone_triangle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguished_cocone_triangle\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">distinguished_cocone_triangle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (Z : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>) (g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>) (h : <span class=\"fn\"><span class=\"fn\">Z</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">1</span></span>)</span>.obj <span class=\"fn\">X</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle.mk\">CategoryTheory.Pretriangulated.Triangle.mk</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L348-L352","name":"CategoryTheory.Pretriangulated.Opposite.rotate_distinguished_triangle","line":348,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.rotate_distinguished_triangle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.rotate_distinguished_triangle\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">rotate_distinguished_triangle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Rotate.html#CategoryTheory.Pretriangulated.Triangle.rotate\">CategoryTheory.Pretriangulated.Triangle.rotate</a> <span class=\"fn\">T</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L341-L346","name":"CategoryTheory.Pretriangulated.Opposite.rotateTriangleOpEquivalenceInverseObjRotateUnopIso","line":341,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.rotateTriangleOpEquivalenceInverseObjRotateUnopIso","doc":"Isomorphism expressing a compatibility of the equivalence `triangleOpEquivalence C`\nwith the rotation of triangles. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.rotateTriangleOpEquivalenceInverseObjRotateUnopIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">rotateTriangleOpEquivalenceInverseObjRotateUnopIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Rotate.html#CategoryTheory.Pretriangulated.Triangle.rotate\">CategoryTheory.Pretriangulated.Triangle.rotate</a>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.inverse</span>.obj\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Rotate.html#CategoryTheory.Pretriangulated.Triangle.rotate\">CategoryTheory.Pretriangulated.Triangle.rotate</a> <span class=\"fn\">T</span></span>)</span></span>)</span>.unop</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.inverse</span>.obj <span class=\"fn\">T</span></span>)</span>.unop</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L333-L337","name":"CategoryTheory.Pretriangulated.Opposite.contractible_distinguished","line":333,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractible_distinguished","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractible_distinguished\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractible_distinguished</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.contractibleTriangle\">CategoryTheory.Pretriangulated.contractibleTriangle</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L322-L331","name":"CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso","line":322,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso","doc":"Up to rotation, the contractible triangle `X ⟶ X ⟶ 0 ⟶ X⟦1⟧` for `X : Cᵒᵖ` corresponds\nto the contractible triangle for `X.unop` in `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractibleTriangleIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.contractibleTriangle\">CategoryTheory.Pretriangulated.contractibleTriangle</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.functor</span>.obj\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Rotate.html#CategoryTheory.Pretriangulated.Triangle.invRotate\">CategoryTheory.Pretriangulated.Triangle.invRotate</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.contractibleTriangle\">CategoryTheory.Pretriangulated.contractibleTriangle</a> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L321-L321","name":"CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₂","line":321,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractibleTriangleIso_inv_hom₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso\">CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso</a> <span class=\"fn\">X</span></span>)</span>.inv</span>.hom₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L321-L321","name":"CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₁","line":321,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractibleTriangleIso_hom_hom₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso\">CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso</a> <span class=\"fn\">X</span></span>)</span>.hom</span>.hom₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L321-L321","name":"CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₁","line":321,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractibleTriangleIso_inv_hom₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso\">CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso</a> <span class=\"fn\">X</span></span>)</span>.inv</span>.hom₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L321-L321","name":"CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₃","line":321,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractibleTriangleIso_hom_hom₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso\">CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso</a> <span class=\"fn\">X</span></span>)</span>.hom</span>.hom₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.IsZero.iso\">CategoryTheory.Limits.IsZero.iso</a> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.IsZero\">CategoryTheory.Limits.IsZero</a> <span class=\"fn\">0</span></span>)</span>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.IsZero\">CategoryTheory.Limits.IsZero</a>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.functor</span>.obj\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a>\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Rotate.html#CategoryTheory.Pretriangulated.Triangle.invRotate\">CategoryTheory.Pretriangulated.Triangle.invRotate</a>\n                  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.contractibleTriangle\">CategoryTheory.Pretriangulated.contractibleTriangle</a> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span></span>)</span></span>)</span></span>)</span>.obj₃</span></span>)</span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L321-L321","name":"CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₂","line":321,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_hom_hom₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractibleTriangleIso_hom_hom₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso\">CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso</a> <span class=\"fn\">X</span></span>)</span>.hom</span>.hom₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L321-L321","name":"CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₃","line":321,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso_inv_hom₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">contractibleTriangleIso_inv_hom₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso\">CategoryTheory.Pretriangulated.Opposite.contractibleTriangleIso</a> <span class=\"fn\">X</span></span>)</span>.inv</span>.hom₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.IsZero.iso\">CategoryTheory.Limits.IsZero.iso</a> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.IsZero\">CategoryTheory.Limits.IsZero</a> <span class=\"fn\">0</span></span>)</span>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.IsZero\">CategoryTheory.Limits.IsZero</a>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.functor</span>.obj\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a>\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Rotate.html#CategoryTheory.Pretriangulated.Triangle.invRotate\">CategoryTheory.Pretriangulated.Triangle.invRotate</a>\n                  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.contractibleTriangle\">CategoryTheory.Pretriangulated.contractibleTriangle</a> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span></span>)</span></span>)</span></span>)</span>.obj₃</span></span>)</span></span>)</span>.inv</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L312-L317","name":"CategoryTheory.Pretriangulated.Opposite.isomorphic_distinguished","line":312,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.isomorphic_distinguished","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.isomorphic_distinguished\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">isomorphic_distinguished</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hT₁ : <span class=\"fn\"><span class=\"fn\">T₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(T₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">T₂</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">T₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L299-L310","name":"CategoryTheory.Pretriangulated.Opposite.mem_distinguishedTriangles_iff'","line":299,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.mem_distinguishedTriangles_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.mem_distinguishedTriangles_iff'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">mem_distinguishedTriangles_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (T' : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>) (_ : <span class=\"fn\"><span class=\"fn\">T'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span>),\n    <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.functor</span>.obj <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">T'</span></span>)</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L294-L297","name":"CategoryTheory.Pretriangulated.Opposite.mem_distinguishedTriangles_iff","line":294,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.mem_distinguishedTriangles_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.mem_distinguishedTriangles_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">mem_distinguishedTriangles_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\">CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles</a> <span class=\"fn\">C</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.inverse</span>.obj <span class=\"fn\">T</span></span>)</span>.unop</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>     <span class=\"fn\">CategoryTheory.Pretriangulated.distinguishedTriangles</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L289-L290","name":"CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles","line":289,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles","doc":"A triangle in `Cᵒᵖ` shall be distinguished iff it corresponds to a distinguished\ntriangle in `C` via the equivalence `triangleOpEquivalence C : (Triangle C)ᵒᵖ ≌ Triangle Cᵒᵖ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.distinguishedTriangles\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">distinguishedTriangles</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroObjects.html#CategoryTheory.Limits.HasZeroObject\">CategoryTheory.Limits.HasZeroObject</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Pretriangulated.html#CategoryTheory.Pretriangulated\">CategoryTheory.Pretriangulated</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L275-L280","name":"CategoryTheory.Pretriangulated.triangleOpEquivalence","line":275,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence","doc":"An anti-equivalence between the categories of triangles in `C` and in `Cᵒᵖ`.\nA triangle in `Cᵒᵖ` shall be distinguished iff it correspond to a distinguished\ntriangle in `C` via this equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">triangleOpEquivalence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L274-L274","name":"CategoryTheory.Pretriangulated.triangleOpEquivalence_inverse","line":274,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">triangleOpEquivalence_inverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L274-L274","name":"CategoryTheory.Pretriangulated.triangleOpEquivalence_unitIso","line":274,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_unitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_unitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">triangleOpEquivalence_unitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.unitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L274-L274","name":"CategoryTheory.Pretriangulated.triangleOpEquivalence_functor","line":274,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">triangleOpEquivalence_functor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L274-L274","name":"CategoryTheory.Pretriangulated.triangleOpEquivalence_counitIso","line":274,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_counitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence_counitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">triangleOpEquivalence_counitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.triangleOpEquivalence\">CategoryTheory.Pretriangulated.triangleOpEquivalence</a> <span class=\"fn\">C</span></span>)</span>.counitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso</a> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L256-L267","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso","line":256,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso","doc":"The counit isomorphism of the\nequivalence `triangleOpEquivalence C : (Triangle C)ᵒᵖ ≌ Triangle Cᵒᵖ` ."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">counitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse</a> <span class=\"fn\">C</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L255-L255","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₃","line":255,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">counitIso_hom_app_hom₃</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso</a> <span class=\"fn\">C</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>.hom₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">X</span>.obj₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L255-L255","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₃","line":255,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">counitIso_inv_app_hom₃</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso</a> <span class=\"fn\">C</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>.hom₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">X</span>.obj₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L255-L255","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₂","line":255,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">counitIso_hom_app_hom₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso</a> <span class=\"fn\">C</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>.hom₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">X</span>.obj₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L255-L255","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₂","line":255,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">counitIso_inv_app_hom₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso</a> <span class=\"fn\">C</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>.hom₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">X</span>.obj₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L255-L255","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₁","line":255,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_hom_app_hom₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">counitIso_hom_app_hom₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso</a> <span class=\"fn\">C</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>.hom₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">X</span>.obj₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L255-L255","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₁","line":255,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso_inv_app_hom₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">counitIso_inv_app_hom₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.counitIso</a> <span class=\"fn\">C</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>.hom₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\">X</span>.obj₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L246-L251","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso","line":246,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso","doc":"The unit isomorphism of the\nequivalence `triangleOpEquivalence C : (Triangle C)ᵒᵖ ≌ Triangle Cᵒᵖ` ."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">unitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor</a> <span class=\"fn\">C</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L245-L245","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso_inv_app","line":245,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">unitIso_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso</a> <span class=\"fn\">C</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle.homMk\">CategoryTheory.Pretriangulated.Triangle.homMk</a> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle.mk\">CategoryTheory.Pretriangulated.Triangle.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.mor₁</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.mor₂</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.unitIso</span>.inv</span>.app\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₃</span></span>)</span></span>)</span>.unop</span>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.map\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">1</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.mor₃</span>.op</span></span>)</span>.unop</span>\n              <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.counitIso</span>.inv</span>.app\n                  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₁</span></span>)</span></span>)</span>.unop</span></span>)</span></span>)</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₂</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₃</span></span>)</span></span>)</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L245-L245","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso_hom_app","line":245,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">unitIso_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.unitIso</a> <span class=\"fn\">C</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle.homMk\">CategoryTheory.Pretriangulated.Triangle.homMk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle.mk\">CategoryTheory.Pretriangulated.Triangle.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.mor₁</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.mor₂</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.unitIso</span>.inv</span>.app\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₃</span></span>)</span></span>)</span>.unop</span>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.map\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">1</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.mor₃</span>.op</span></span>)</span>.unop</span>\n              <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.counitIso</span>.inv</span>.app\n                  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₁</span></span>)</span></span>)</span>.unop</span></span>)</span></span>)</span></span>)</span></span>)</span>\n      <span class=\"fn\"><span class=\"fn\">X</span>.unop</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₂</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.unop</span>.obj₃</span></span>)</span></span>)</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L228-L241","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse","line":228,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse","doc":"The functor which sends a triangle `X ⟶ Y ⟶ Z ⟶ X⟦1⟧` in `Cᵒᵖ` to the triangle\n`Z.unop ⟶ Y.unop ⟶ X.unop ⟶ Z.unop⟦1⟧` in `C` (without introducing signs). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">inverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L227-L227","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse_map","line":227,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">inverse_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">T₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">T₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse</a> <span class=\"fn\">C</span></span>)</span>.map <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.TriangleMorphism.mk\">CategoryTheory.Pretriangulated.TriangleMorphism.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.hom₃</span>.unop</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.hom₂</span>.unop</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.hom₁</span>.unop</span></span>)</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L227-L227","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse_obj","line":227,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">inverse_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.inverse</a> <span class=\"fn\">C</span></span>)</span>.obj <span class=\"fn\">T</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle.mk\">CategoryTheory.Pretriangulated.Triangle.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.mor₂</span>.unop</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.mor₁</span>.unop</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.unitIso</span>.inv</span>.app <span class=\"fn\"><span class=\"fn\">T</span>.obj₁</span></span>)</span>.unop</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.mor₃</span>.unop</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L209-L223","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor","line":209,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor","doc":"The functor which sends a triangle `X ⟶ Y ⟶ Z ⟶ X⟦1⟧` in `C` to the triangle\n`op Z ⟶ op Y ⟶ op X ⟶ (op Z)⟦1⟧` in `Cᵒᵖ` (without introducing signs). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">functor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L208-L208","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₁","line":208,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">functor_map_hom₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">T₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">T₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor</a> <span class=\"fn\">C</span></span>)</span>.map <span class=\"fn\">φ</span></span>)</span>.hom₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.unop</span>.hom₃</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L208-L208","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₃","line":208,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">functor_map_hom₃</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">T₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">T₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor</a> <span class=\"fn\">C</span></span>)</span>.map <span class=\"fn\">φ</span></span>)</span>.hom₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.unop</span>.hom₁</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L208-L208","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₂","line":208,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_map_hom₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">functor_map_hom₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₁ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T₂ : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">T₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">T₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor</a> <span class=\"fn\">C</span></span>)</span>.map <span class=\"fn\">φ</span></span>)</span>.hom₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.unop</span>.hom₂</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L208-L208","name":"CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_obj","line":208,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">TriangleOpEquivalence</span>.<span class=\"name\">functor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle\">CategoryTheory.Pretriangulated.Triangle</a> <span class=\"fn\">C</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor\">CategoryTheory.Pretriangulated.TriangleOpEquivalence.functor</a> <span class=\"fn\">C</span></span>)</span>.obj <span class=\"fn\">T</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Basic.html#CategoryTheory.Pretriangulated.Triangle.mk\">CategoryTheory.Pretriangulated.Triangle.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.unop</span>.mor₂</span>.op</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.unop</span>.mor₁</span>.op</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span>.counitIso</span>.inv</span>.app <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.unop</span>.obj₁</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">1</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.unop</span>.mor₃</span>.op</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L197-L200","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_app_shift","line":197,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_app_shift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_app_shift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_counitIso_hom_app_shift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.hom</span>.app\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L192-L195","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_app_shift","line":192,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_app_shift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_app_shift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_counitIso_inv_app_shift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.inv</span>.app\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.obj <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L187-L190","name":"CategoryTheory.Pretriangulated.shift_unop_opShiftFunctorEquivalence_counitIso_hom_app","line":187,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shift_unop_opShiftFunctorEquivalence_counitIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shift_unop_opShiftFunctorEquivalence_counitIso_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shift_unop_opShiftFunctorEquivalence_counitIso_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>.unop</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.inv</span>.app\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.obj <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span></span>)</span></span>)</span>.unop</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L182-L185","name":"CategoryTheory.Pretriangulated.shift_unop_opShiftFunctorEquivalence_counitIso_inv_app","line":182,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shift_unop_opShiftFunctorEquivalence_counitIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shift_unop_opShiftFunctorEquivalence_counitIso_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shift_unop_opShiftFunctorEquivalence_counitIso_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>.unop</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.hom</span>.app\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.obj <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span></span>)</span></span>)</span>.unop</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L175-L178","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_naturality","line":175,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_counitIso_inv_naturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.inv</span>.app <span class=\"fn\">Y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.unop</span></span>)</span>.op</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L174-L174","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_naturality_assoc","line":174,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_naturality_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_inv_naturality_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_counitIso_inv_naturality_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.functor</span>.obj\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.inverse</span>.obj <span class=\"fn\">Y</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.inv</span>.app <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.unop</span></span>)</span>.op</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L169-L172","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_naturality","line":169,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_counitIso_hom_naturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.unop</span></span>)</span>.op</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.hom</span>.app <span class=\"fn\">Y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L168-L168","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_naturality_assoc","line":168,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_naturality_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_counitIso_hom_naturality_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_counitIso_hom_naturality_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">f</span>.unop</span></span>)</span>.op</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.hom</span>.app <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.counitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L163-L166","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_inv_naturality","line":163,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_inv_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_inv_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_unitIso_inv_naturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\">f</span></span>)</span>.unop</span></span>)</span>.op</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.inv</span>.app <span class=\"fn\">Y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L162-L162","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_inv_naturality_assoc","line":162,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_inv_naturality_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_inv_naturality_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_unitIso_inv_naturality_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\">f</span></span>)</span>.unop</span></span>)</span>.op</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.inv</span>.app <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L157-L160","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_hom_naturality","line":157,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_hom_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_hom_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_unitIso_hom_naturality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.hom</span>.app <span class=\"fn\">Y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\">f</span></span>)</span>.unop</span></span>)</span>.op</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L156-L156","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_hom_naturality_assoc","line":156,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_hom_naturality_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_unitIso_hom_naturality_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_unitIso_hom_naturality_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.inverse</span>.obj\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.functor</span>.obj <span class=\"fn\">Y</span></span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.hom</span>.app <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.unitIso</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\">f</span></span>)</span>.unop</span></span>)</span>.op</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L139-L151","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence","line":139,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence","doc":"The autoequivalence `Cᵒᵖ ≌ Cᵒᵖ` whose functor is `shiftFunctor Cᵒᵖ n` and whose inverse\nfunctor is `(shiftFunctor C n).op`. Do not unfold the definitions of the unit and counit\nisomorphisms: the compatibilities they satisfy are stated as separate lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L138-L138","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_inverse","line":138,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_inverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L138-L138","name":"CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_functor","line":138,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence_functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">opShiftFunctorEquivalence_functor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.opShiftFunctorEquivalence\">CategoryTheory.Pretriangulated.opShiftFunctorEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L127-L131","name":"CategoryTheory.Pretriangulated.shiftFunctor_op_map","line":127,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctor_op_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctor_op_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shiftFunctor_op_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hnm : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">K</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span>.map <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span> <span class=\"fn\">hnm</span></span>)</span>.hom</span>.app <span class=\"fn\">K</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>)</span>.map <span class=\"fn\"><span class=\"fn\">φ</span>.unop</span></span>)</span>.op</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span> <span class=\"fn\">hnm</span></span>)</span>.inv</span>.app <span class=\"fn\">L</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L114-L125","name":"CategoryTheory.Pretriangulated.shiftFunctorAdd'_op_inv_app","line":114,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorAdd'_op_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorAdd'_op_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shiftFunctorAdd'_op_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₃ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₂ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₃ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₃ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₃</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorAdd'\">CategoryTheory.shiftFunctorAdd'</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span> <span class=\"fn\">a₃</span> <span class=\"fn\">h</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">a₂</span></span>)</span>.map <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span> <span class=\"fn\">h₁</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span> <span class=\"fn\">h₂</span></span>)</span>.hom</span>.app\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">b₁</span></span>)</span>.op</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorAdd'\">CategoryTheory.shiftFunctorAdd'</a> <span class=\"fn\">C</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span> <span class=\"fn\">b₃</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₃</span></span>)</span></span>)</span>.hom</span>.app <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span>.op</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">a₃</span> <span class=\"fn\">b₃</span> <span class=\"fn\">h₃</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L99-L112","name":"CategoryTheory.Pretriangulated.shiftFunctorAdd'_op_hom_app","line":99,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorAdd'_op_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorAdd'_op_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shiftFunctorAdd'_op_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₃ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₂ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₃ : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₃ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a₃</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorAdd'\">CategoryTheory.shiftFunctorAdd'</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span> <span class=\"fn\">a₃</span> <span class=\"fn\">h</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">a₃</span> <span class=\"fn\">b₃</span> <span class=\"fn\">h₃</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorAdd'\">CategoryTheory.shiftFunctorAdd'</a> <span class=\"fn\">C</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span> <span class=\"fn\">b₃</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₃</span></span>)</span></span>)</span>.inv</span>.app <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span>.op</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span> <span class=\"fn\">h₂</span></span>)</span>.inv</span>.app\n          <span class=\"fn\">{ <span class=\"fn\">unop</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">b₁</span></span>)</span>.toPrefunctor</span>.1</span> <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span> }</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">a₂</span></span>)</span>.map\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span> <span class=\"fn\">h₁</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L91-L97","name":"CategoryTheory.Pretriangulated.shiftFunctorZero_op_inv_app","line":91,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorZero_op_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorZero_op_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shiftFunctorZero_op_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorZero\">CategoryTheory.shiftFunctorZero</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorZero\">CategoryTheory.shiftFunctorZero</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span>.hom</span>.app <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span>.op</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>)</span>.inv</span>.app <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L85-L89","name":"CategoryTheory.Pretriangulated.shiftFunctorZero_op_hom_app","line":85,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorZero_op_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorZero_op_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shiftFunctorZero_op_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorZero\">CategoryTheory.shiftFunctorZero</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\">CategoryTheory.Pretriangulated.shiftFunctorOpIso</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>)</span>.hom</span>.app <span class=\"fn\">X</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctorZero\">CategoryTheory.shiftFunctorZero</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span>.inv</span>.app <span class=\"fn\"><span class=\"fn\">X</span>.unop</span></span>)</span>.op</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L78-L81","name":"CategoryTheory.Pretriangulated.shiftFunctorOpIso","line":78,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso","doc":"The shift functor on the opposite category identifies to the opposite functor\nof a shift functor on the original category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.shiftFunctorOpIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">shiftFunctorOpIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hnm : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>)</span>.op</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L68-L70","name":"CategoryTheory.Pretriangulated.Opposite.instAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt","line":68,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.instAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.instAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">instAdditiveOppositeOppositeInstPreadditiveOppositeOppositeShiftFunctorIntInstAddMonoidIntInstHasShiftOppositeIntOppositeInstAddMonoidInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Basic.html#CategoryTheory.Preadditive\">CategoryTheory.Preadditive</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/AdditiveFunctor.html#CategoryTheory.Functor.Additive\">CategoryTheory.Functor.Additive</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.shiftFunctor\">CategoryTheory.shiftFunctor</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Triangulated/Opposite.lean#L65-L66","name":"CategoryTheory.Pretriangulated.Opposite.instHasShiftOppositeIntOppositeInstAddMonoidInt","line":65,"kind":"def","docLink":"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.instHasShiftOppositeIntOppositeInstAddMonoidInt","doc":"The category `Cᵒᵖ` is equipped with the shift such that the shift by `n` on `Cᵒᵖ`\ncorresponds to the shift by `-n` on `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Triangulated/Opposite.html#CategoryTheory.Pretriangulated.Opposite.instHasShiftOppositeIntOppositeInstAddMonoidInt\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Pretriangulated</span>.<span class=\"name\">Opposite</span>.<span class=\"name\">instHasShiftOppositeIntOppositeInstAddMonoidInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(C : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Shift/Basic.html#CategoryTheory.HasShift\">CategoryTheory.HasShift</a> <span class=\"fn\"><span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"}]}