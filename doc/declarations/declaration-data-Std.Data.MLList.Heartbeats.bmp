{"name":"Std.Data.MLList.Heartbeats","instances":[],"imports":["Init","Std.Data.MLList.Basic","Std.Lean.CoreM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/MLList/Heartbeats.lean#L25-L32","name":"MLList.whileAtLeastHeartbeatsPercent","line":25,"kind":"def","docLink":"./Std/Data/MLList/Heartbeats.html#MLList.whileAtLeastHeartbeatsPercent","doc":"Take an initial segment of a monadic lazy list,\nstopping when there is less than `percent` of the remaining allowed heartbeats.\n\nIf `getMaxHeartbeats` returns `0`, then this passes through the original list unmodified.\n\nThe `initial` heartbeat counter is recorded when the first element of the list is requested.\nThen each time an element is requested from the wrapped list the heartbeat counter is checked, and\nif `current * 100 / initial < percent` then that element is returned,\nbut no further elements.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/MLList/Heartbeats.html#MLList.whileAtLeastHeartbeatsPercent\"><span class=\"name\">MLList</span>.<span class=\"name\">whileAtLeastHeartbeatsPercent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Std/Data/MLList/Basic.html#MLList\">MLList</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(percent : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">10</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/MLList/Basic.html#MLList\">MLList</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"}]}