{"name":"Std.Data.String.Lemmas","instances":[],"imports":["Init","Std.Data.Char","Std.Data.Nat.Lemmas","Std.Data.List.Lemmas","Std.Data.String.Basic","Std.Tactic.Ext.Attr","Std.Tactic.Simpa"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1126-L1127","name":"String.data_dropWhile","line":1126,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.dropWhile\">String.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1123-L1124","name":"String.dropWhile_eq","line":1123,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.dropWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.dropWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.dropWhile\">String.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1120-L1121","name":"String.data_takeWhile","line":1120,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.takeWhile\">String.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1117-L1118","name":"String.takeWhile_eq","line":1117,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.takeWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.takeWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.takeWhile\">String.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1115-L1115","name":"String.data_take","line":1115,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_take\"><span class=\"name\">String</span>.<span class=\"name\">data_take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.take\">String.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1112-L1113","name":"String.take_eq","line":1112,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.take_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.take_eq\"><span class=\"name\">String</span>.<span class=\"name\">take_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.take\">String.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1110-L1110","name":"String.drop_empty","line":1110,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.drop_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.drop_empty\"><span class=\"name\">String</span>.<span class=\"name\">drop_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.drop\">String.drop</a> <span class=\"fn\">&quot;&quot;</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1108-L1108","name":"String.data_drop","line":1108,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_drop\"><span class=\"name\">String</span>.<span class=\"name\">data_drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.drop\">String.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1105-L1106","name":"String.drop_eq","line":1105,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.drop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.drop_eq\"><span class=\"name\">String</span>.<span class=\"name\">drop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.drop\">String.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1094-L1096","name":"Substring.Valid.data_dropWhile","line":1094,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">Substring.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1091-L1092","name":"Substring.Valid.dropWhile","line":1091,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">Substring.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1087-L1089","name":"Substring.Valid.data_takeWhile","line":1087,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">Substring.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1084-L1085","name":"Substring.Valid.takeWhile","line":1084,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">Substring.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1081-L1082","name":"Substring.Valid.contains","line":1081,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.contains\">Substring.contains</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1078-L1079","name":"Substring.Valid.all","line":1078,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.all\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.all\">Substring.all</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.all\">List.all</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1075-L1076","name":"Substring.Valid.any","line":1075,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.any\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.any\">Substring.any</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1072-L1073","name":"Substring.Valid.foldr","line":1072,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1069-L1070","name":"Substring.Valid.foldl","line":1069,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1060-L1067","name":"Substring.Valid.toString_extract","line":1060,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.toString_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.toString_extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toString_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.extract\">Substring.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1052-L1058","name":"Substring.Valid.extract","line":1052,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.extract\">Substring.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1049-L1050","name":"Substring.Valid.atEnd","line":1049,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">Substring.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1044-L1045","name":"Substring.Valid.data_take","line":1044,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.take\">Substring.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1041-L1042","name":"Substring.Valid.take","line":1041,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.take\">Substring.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1038-L1039","name":"Substring.Valid.data_drop","line":1038,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.data_drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.drop\">Substring.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1035-L1036","name":"Substring.Valid.drop","line":1035,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.drop\">Substring.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1032-L1033","name":"Substring.Valid.front","line":1032,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.front\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.front\">Substring.front</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1026-L1030","name":"Substring.Valid.prevn","line":1026,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prevn\">Substring.prevn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span></span>)</span></span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1020-L1024","name":"Substring.Valid.nextn","line":1020,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span></span>)</span></span></span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1017-L1018","name":"Substring.Valid.nextn_stop","line":1017,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1011-L1015","name":"Substring.Valid.prev","line":1011,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prev\">Substring.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1008-L1009","name":"Substring.Valid.next_stop","line":1008,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L1002-L1006","name":"Substring.Valid.next","line":1002,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.next\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L997-L1000","name":"Substring.Valid.get","line":997,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.get\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.get\">Substring.get</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L994-L995","name":"Substring.Valid.isEmpty","line":994,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">Substring.isEmpty</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L991-L992","name":"Substring.Valid.bsize","line":991,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span>)</span>.data</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L988-L989","name":"String.valid_toSubstring","line":988,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.valid_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.valid_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">valid_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.toSubstring\">String.toSubstring</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L985-L986","name":"Substring.Valid.valid","line":985,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L973-L983","name":"Substring.Valid.validFor","line":973,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.validFor\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L960-L965","name":"Substring.ValidFor.dropWhile","line":960,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">Substring.dropWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L953-L958","name":"Substring.ValidFor.takeWhile","line":953,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">Substring.takeWhile</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L950-L951","name":"Substring.ValidFor.contains","line":950,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.contains\">Substring.contains</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L947-L948","name":"Substring.ValidFor.all","line":947,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.all\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.all\">Substring.all</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.all\">List.all</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L944-L945","name":"Substring.ValidFor.any","line":944,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.any\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.any\">Substring.any</a> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L941-L942","name":"Substring.ValidFor.foldr","line":941,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L938-L939","name":"Substring.ValidFor.foldl","line":938,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L923-L934","name":"Substring.ValidFor.extract","line":923,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ml : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mm : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{mr : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">ml</span> <span class=\"fn\">mm</span> <span class=\"fn\">mr</span> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <span class=\"fn\">∃ (<span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l'</span> <span class=\"fn\">mm</span> <span class=\"fn\">r'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.extract\">Substring.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L920-L921","name":"Substring.ValidFor.atEnd","line":920,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">Substring.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L908-L916","name":"Substring.ValidFor.take","line":908,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.take\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.take\">Substring.take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L898-L906","name":"Substring.ValidFor.drop","line":898,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.drop\">Substring.drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L895-L896","name":"Substring.ValidFor.front","line":895,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.front\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.front\">Substring.front</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L884-L893","name":"Substring.ValidFor.prevn","line":884,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prevn\">Substring.prevn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span></span>)</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L872-L882","name":"Substring.ValidFor.nextn","line":872,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span></span>)</span></span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L868-L870","name":"Substring.ValidFor.nextn_stop","line":868,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.nextn\">Substring.nextn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L859-L866","name":"Substring.ValidFor.prev","line":859,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prev\">Substring.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L856-L857","name":"Substring.ValidFor.next_stop","line":856,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L845-L854","name":"Substring.ValidFor.next","line":845,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.next\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.next\">Substring.next</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L842-L843","name":"Substring.ValidFor.get","line":842,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.get\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span></span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.get\">Substring.get</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L837-L840","name":"Substring.ValidFor.toIterator","line":837,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.toIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toIterator\">Substring.toIterator</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L834-L835","name":"Substring.ValidFor.toString","line":834,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L831-L832","name":"Substring.ValidFor.isEmpty","line":831,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">Substring.isEmpty</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L828-L829","name":"Substring.ValidFor.bsize","line":828,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring.bsize\">Substring.bsize</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L825-L826","name":"Substring.ValidFor.stopPos","line":825,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.stopPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.stopPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">stopPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L822-L823","name":"Substring.ValidFor.startPos","line":822,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.startPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.startPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">startPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L819-L820","name":"Substring.ValidFor.str","line":819,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.str\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.str</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L816-L817","name":"String.validFor_toSubstring","line":816,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.validFor_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.validFor_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">validFor_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.toSubstring\">String.toSubstring</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L809-L814","name":"Substring.ValidFor.of_eq","line":809,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.of_eq\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.str</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L806-L807","name":"Substring.ValidFor.valid","line":806,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L801-L802","name":"Substring.ValidFor.mk","line":801,"kind":"ctor","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor.mk","doc":"The constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span>\n  <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>,\n    <span class=\"fn\">stopPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L800-L802","name":"Substring.ValidFor","line":800,"kind":"inductive","docLink":"./Std/Data/String/Lemmas.html#Substring.ValidFor","doc":"A substring is represented by three lists `l m r`, where `m` is the middle section\n(the actual substring) and `l ++ m ++ r` is the underlying string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.ValidFor\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L796-L796","name":"Substring.Valid_default","line":796,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid_default\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid_default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">default</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L794-L794","name":"Substring.Valid.le","line":794,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.le","doc":"The stop position of a substring is at least the start. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.le\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L792-L792","name":"Substring.Valid.stopValid","line":792,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.stopValid","doc":"The stop position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.stopValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">stopValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L790-L790","name":"Substring.Valid.startValid","line":790,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.startValid","doc":"The start position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.startValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">startValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.startPos</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L788-L788","name":"Substring.Valid.mk","line":788,"kind":"ctor","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(startValid : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.startPos</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopValid : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.str</span> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.startPos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.stopPos</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#Substring.Valid\">Substring.Valid</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L788-L794","name":"Substring.Valid","line":788,"kind":"structure","docLink":"./Std/Data/String/Lemmas.html#Substring.Valid","doc":"Validity for a substring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.Valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L783-L785","name":"Substring.prevn_zero","line":783,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.prevn_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.prevn_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prevn_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prevn\">Substring.prevn</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L781-L781","name":"Substring.prev_zero","line":781,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Substring.prev_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Substring.prev_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.prev\">Substring.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L764-L773","name":"String.takeWhileAux_of_valid","line":764,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.takeWhileAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.takeWhileAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">takeWhileAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\">Substring.takeWhileAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">p</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L756-L757","name":"String.map_eq","line":756,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.map_eq\"><span class=\"name\">String</span>.<span class=\"name\">map_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.map\">String.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L748-L754","name":"String.mapAux_of_valid","line":748,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.mapAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.mapAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mapAux\">String.mapAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">r</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L744-L745","name":"String.contains_iff","line":744,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.contains_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.contains_iff\"><span class=\"name\">String</span>.<span class=\"name\">contains_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.contains\">String.contains</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L742-L742","name":"String.all_iff","line":742,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.all_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.all_iff\"><span class=\"name\">String</span>.<span class=\"name\">all_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.all\">String.all</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L739-L740","name":"String.all_eq","line":739,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.all_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.all_eq\"><span class=\"name\">String</span>.<span class=\"name\">all_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.all\">String.all</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.all\">List.all</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L737-L737","name":"String.any_iff","line":737,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.any_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.any_iff\"><span class=\"name\">String</span>.<span class=\"name\">any_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.any\">String.any</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L734-L735","name":"String.any_eq","line":734,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.any_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.any_eq\"><span class=\"name\">String</span>.<span class=\"name\">any_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.any\">String.any</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L724-L732","name":"String.anyAux_of_valid","line":724,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.anyAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.anyAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">anyAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.anyAux\">String.anyAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">p</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\">m</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L720-L721","name":"String.foldr_eq","line":720,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldr_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldr_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldr_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldr\">String.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L710-L718","name":"String.foldrAux_of_valid","line":710,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldrAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldrAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldrAux\">String.foldrAux</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L706-L707","name":"String.foldl_eq","line":706,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldl_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldl\">String.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L697-L704","name":"String.foldlAux_of_valid","line":697,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.foldlAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.foldlAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldlAux\">String.foldlAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L693-L694","name":"String.offsetOfPos_of_valid","line":693,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.offsetOfPos_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.offsetOfPos_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.offsetOfPos\">String.offsetOfPos</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L682-L691","name":"String.offsetOfPosAux_of_valid","line":682,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.offsetOfPosAux\">String.offsetOfPosAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L674-L676","name":"String.Iterator.Valid.prevn","line":674,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">String.Iterator.prevn</a> <span class=\"fn\">it</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L670-L672","name":"String.Iterator.Valid.remainingToString","line":670,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">String.Iterator.remainingToString</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L668-L668","name":"String.Iterator.Valid.toEnd","line":668,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">String.Iterator.toEnd</a> <span class=\"fn\">it</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L663-L666","name":"String.Iterator.Valid.setCurr","line":663,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">String.Iterator.setCurr</a> <span class=\"fn\">it</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L657-L661","name":"String.Iterator.Valid.prev","line":657,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">String.Iterator.prev</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L651-L655","name":"String.Iterator.Valid.next","line":651,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">it</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L648-L649","name":"String.Iterator.Valid.remainingBytes_le","line":648,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingBytes_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">String.Iterator.remainingBytes</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\"><span class=\"fn\">it</span>.s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L646-L646","name":"String.valid_mkIterator","line":646,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.valid_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.valid_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">valid_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mkIterator\">String.mkIterator</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L642-L644","name":"String.Iterator.Valid.validFor","line":642,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid.validFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>), <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L630-L636","name":"String.Iterator.ValidFor.prevn","line":630,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span></span> →\n      <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">String.Iterator.prevn</a> <span class=\"fn\">it</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L622-L628","name":"String.Iterator.ValidFor.nextn","line":622,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">r</span></span></span> →\n      <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">String.Iterator.nextn</a> <span class=\"fn\">it</span> <span class=\"fn\">n</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L618-L620","name":"String.Iterator.ValidFor.remainingToString","line":618,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">String.Iterator.remainingToString</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L612-L616","name":"String.Iterator.ValidFor.extract","line":612,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it₁ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it₂ : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">it₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">it₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.extract\">String.Iterator.extract</a> <span class=\"fn\">it₁</span> <span class=\"fn\">it₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L608-L610","name":"String.Iterator.ValidFor.toEnd'","line":608,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.data</span></span>)</span> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">String.Iterator.toEnd</a> <span class=\"fn\">it</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L604-L606","name":"String.Iterator.ValidFor.toEnd","line":604,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">[]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">String.Iterator.toEnd</a> <span class=\"fn\">it</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L601-L602","name":"String.Iterator.ValidFor.setCurr","line":601,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">String.Iterator.setCurr</a> <span class=\"fn\">it</span> <span class=\"fn\">c</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L592-L599","name":"String.Iterator.ValidFor.setCurr'","line":592,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">String.Iterator.setCurr</a> <span class=\"fn\">it</span> <span class=\"fn\">c</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L589-L590","name":"String.Iterator.ValidFor.hasPrev","line":589,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasPrev\">String.Iterator.hasPrev</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L586-L587","name":"String.Iterator.ValidFor.hasNext","line":586,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasNext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L581-L584","name":"String.Iterator.ValidFor.atEnd","line":581,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\">String.Iterator.atEnd</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L578-L579","name":"String.Iterator.ValidFor.prev_nil","line":578,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">String.Iterator.prev</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L571-L576","name":"String.Iterator.ValidFor.prev","line":571,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">String.Iterator.prev</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L565-L569","name":"String.Iterator.ValidFor.next","line":565,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">String.Iterator.next</a> <span class=\"fn\">it</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L562-L563","name":"String.Iterator.ValidFor.curr","line":562,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.curr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">curr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.curr\">String.Iterator.curr</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">r</span> <span class=\"fn\">default</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L558-L560","name":"String.Iterator.ValidFor.pos_eq_endPos","line":558,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\"><span class=\"fn\">it</span>.s</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L555-L556","name":"String.Iterator.ValidFor.pos_eq_zero","line":555,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L552-L553","name":"String.Iterator.ValidFor.pos","line":552,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L549-L550","name":"String.Iterator.ValidFor.toString","line":549,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L546-L547","name":"String.Iterator.ValidFor.remainingBytes","line":546,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">String.Iterator.remainingBytes</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L544-L544","name":"String.validFor_mkIterator","line":544,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.validFor_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.validFor_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">validFor_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">[]</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mkIterator\">String.mkIterator</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L541-L542","name":"String.Iterator.ValidFor.of_eq","line":541,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.s</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.i</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L538-L539","name":"String.Iterator.ValidFor.mk'","line":538,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span>\n  <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L535-L536","name":"String.Iterator.ValidFor.out'","line":535,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> →\n  <span class=\"fn\"><span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span>)</span></span> }</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L532-L533","name":"String.Iterator.ValidFor.out","line":532,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.out\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L529-L530","name":"String.Iterator.ValidFor.valid","line":529,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\">String.Iterator.Valid</a> <span class=\"fn\">it</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L522-L523","name":"String.Iterator.ValidFor.mk","line":522,"kind":"ctor","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk","doc":"The canonical constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L521-L523","name":"String.Iterator.ValidFor","line":521,"kind":"inductive","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor","doc":"`it.ValidFor l r` means that `it` is a string iterator whose underlying string is\n`l.reverse ++ r`, and where the cursor is pointing at the end of `l.reverse`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.ValidFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L517-L517","name":"String.Iterator.Valid","line":517,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.Valid","doc":"Validity for a string iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(it : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L512-L514","name":"String.Iterator.hasNext_cons_addChar","line":512,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">String.Iterator.hasNext</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L509-L510","name":"String.Iterator.forward_eq_nextn","line":509,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward_eq_nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.forward\">String.Iterator.forward</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">String.Iterator.nextn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L504-L505","name":"String.append_assoc","line":504,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.append_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.append_assoc\"><span class=\"name\">String</span>.<span class=\"name\">append_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₃ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L502-L502","name":"String.nil_append","line":502,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.nil_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.nil_append\"><span class=\"name\">String</span>.<span class=\"name\">nil_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L500-L500","name":"String.append_nil","line":500,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.append_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.append_nil\"><span class=\"name\">String</span>.<span class=\"name\">append_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L498-L498","name":"String.data_singleton","line":498,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_singleton\"><span class=\"name\">String</span>.<span class=\"name\">data_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">c</span>]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L496-L496","name":"String.singleton_eq","line":496,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.singleton_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.singleton_eq\"><span class=\"name\">String</span>.<span class=\"name\">singleton_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">[<span class=\"fn\">c</span>]</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L493-L494","name":"String.data_join","line":493,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_join\"><span class=\"name\">String</span>.<span class=\"name\">data_join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.join\">String.join</a> <span class=\"fn\">ss</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.join\">List.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L489-L491","name":"String.join_eq.go","line":489,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.join_eq.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.join_eq.go\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.join\">List.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L488-L491","name":"String.join_eq","line":488,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.join_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.join_eq\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ss : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.join\">String.join</a> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.join\">List.join</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">String.data</a> <span class=\"fn\">ss</span></span>)</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L483-L484","name":"String.toString_toSubstring","line":483,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.toString_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.toString_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">toString_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.toString\">Substring.toString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.toSubstring\">String.toSubstring</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L478-L479","name":"String.split_of_valid","line":478,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.split_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.split_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">split_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.split\">String.split</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">String.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.splitOnP\">List.splitOnP</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L465-L476","name":"String.splitAux_of_valid","line":465,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.splitAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.splitAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">splitAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(acc : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.splitAux\">String.splitAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">String.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.splitOnP.go\">List.splitOnP.go</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">m</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L457-L463","name":"String.extract_of_valid","line":457,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">extract_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L451-L455","name":"String.extract_zero_endPos","line":451,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract_zero_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract_zero_endPos\"><span class=\"name\">String</span>.<span class=\"name\">extract_zero_endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L446-L449","name":"String.extract_cons_addChar","line":446,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract\">String.extract</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L442-L444","name":"String.extract.go₁_zero_utf8Len","line":442,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_zero_utf8Len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L435-L440","name":"String.extract.go₁_append_right","line":435,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_append_right\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_append_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">t</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L430-L433","name":"String.extract.go₁_cons_addChar","line":430,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">cs</span> <span class=\"fn\">0</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L417-L428","name":"String.extract.go₁_add_right_cancel","line":417,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">String.extract.go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L410-L415","name":"String.extract.go₂_append_left","line":410,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₂_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₂_append_left\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_append_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L400-L408","name":"String.extract.go₂_add_right_cancel","line":400,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">String.extract.go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L395-L398","name":"String.firstDiffPos_eq","line":395,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.firstDiffPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.firstDiffPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.firstDiffPos\">String.firstDiffPos</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span>)</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">a</span>.data</span> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span>)</span>.fst</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L368-L393","name":"String.firstDiffPos_loop_eq","line":368,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.firstDiffPos_loop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.firstDiffPos_loop_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_loop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stop : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl₁ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₁</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl₂ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₂</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hstop : <span class=\"fn\"><span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r₁</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">r₂</span></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\">String.firstDiffPos.loop</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₁</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">stop</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span>)</span></span></span>)</span> <span class=\"fn\">r₁</span> <span class=\"fn\">r₂</span></span>)</span>.fst</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L364-L366","name":"String.revFind_of_valid","line":364,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revFind_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revFind_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFind_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFind\">String.revFind</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">x</span></span> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.tail?\">List.tail?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L353-L362","name":"String.revFindAux_of_valid","line":353,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revFindAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revFindAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFindAux\">String.revFindAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">x</span></span> }</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.tail?\">List.tail?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L349-L350","name":"String.find_of_valid","line":349,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.find_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.find_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">find_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.find\">String.find</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.data</span></span>)</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L335-L347","name":"String.findAux_of_valid","line":335,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.findAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.findAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">findAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.findAux\">String.findAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span> }</span>\n    <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span> <span class=\"fn\">m</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L332-L332","name":"String.revPosOf_eq","line":332,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revPosOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revPosOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revPosOf\">String.revPosOf</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFind\">String.revFind</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L330-L330","name":"String.revPosOfAux_eq","line":330,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.revPosOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.revPosOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revPosOfAux\">String.revPosOfAux</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.revFindAux\">String.revFindAux</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L328-L328","name":"String.posOf_eq","line":328,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.posOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.posOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.posOf\">String.posOf</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.find\">String.find</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L326-L326","name":"String.posOfAux_eq","line":326,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.posOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.posOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.posOfAux\">String.posOfAux</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.findAux\">String.findAux</a> <span class=\"fn\">s</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L324-L324","name":"String.next'_eq","line":324,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.next'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.next'_eq\"><span class=\"name\">String</span>.<span class=\"name\">next'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next'\">String.next'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L322-L322","name":"String.get'_eq","line":322,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get'_eq\"><span class=\"name\">String</span>.<span class=\"name\">get'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get'\">String.get'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L317-L320","name":"String.atEnd_of_valid","line":317,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.atEnd_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.atEnd_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L312-L315","name":"String.back_eq","line":312,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.back_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.back_eq\"><span class=\"name\">String</span>.<span class=\"name\">back_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.back\">String.back</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.getLastD\">List.getLastD</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L309-L310","name":"String.front_eq","line":309,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.front_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.front_eq\"><span class=\"name\">String</span>.<span class=\"name\">front_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.front\">String.front</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\"><span class=\"fn\">s</span>.data</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L307-L307","name":"String.prev_zero","line":307,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.prev_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.prev_zero\"><span class=\"name\">String</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.prev\">String.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L301-L305","name":"String.prev_of_valid'","line":301,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.prev_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.prev_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.prev\">String.prev</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropLast\">List.dropLast</a> <span class=\"fn\">cs</span></span>)</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L296-L299","name":"String.prev_of_valid","line":296,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.prev_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.prev_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.prev\">String.prev</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L284-L294","name":"String.utf8PrevAux_of_valid","line":284,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8PrevAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8PrevAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\">String.utf8PrevAux</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L277-L282","name":"String.valid_next","line":277,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.valid_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.valid_next\"><span class=\"name\">String</span>.<span class=\"name\">valid_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L274-L275","name":"String.atEnd_iff","line":274,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.atEnd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.atEnd_iff\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.atEnd\">String.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L272-L272","name":"String.lt_next'","line":272,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.lt_next'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.lt_next'\"><span class=\"name\">String</span>.<span class=\"name\">lt_next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L269-L270","name":"String.next_of_valid","line":269,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.next_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.next_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span></span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L265-L267","name":"String.next_of_valid'","line":265,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.next_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.next_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.next\">String.next</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">cs'</span> <span class=\"fn\">default</span></span>)</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L261-L263","name":"String.modify_of_valid","line":261,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.modify_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.modify_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">modify_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.modify\">String.modify</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">f</span> <span class=\"fn\">cs'</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L257-L259","name":"String.set_of_valid","line":257,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.set_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.set_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">set_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.set\">String.set</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">c'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span></span>)</span> <span class=\"fn\">cs'</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L246-L255","name":"String.utf8SetAux_of_valid","line":246,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8SetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8SetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c' : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">String.utf8SetAux</a> <span class=\"fn\">c'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span></span>)</span> <span class=\"fn\">cs'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L244-L244","name":"String.get!_eq_get","line":244,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get!_eq_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get!_eq_get\"><span class=\"name\">String</span>.<span class=\"name\">get!_eq_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get!\">String.get!</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L241-L242","name":"String.get?_of_valid","line":241,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get?\">String.get?</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head?\">List.head?</a> <span class=\"fn\">cs'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L230-L239","name":"String.utf8GetAux?_of_valid","line":230,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\">String.utf8GetAux?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head?\">List.head?</a> <span class=\"fn\">cs'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L226-L228","name":"String.get_cons_addChar","line":226,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">get_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L223-L224","name":"String.get_of_valid","line":223,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.get_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.get_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.get\">String.get</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">cs'</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L212-L221","name":"String.utf8GetAux_of_valid","line":212,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.headD\">List.headD</a> <span class=\"fn\">cs'</span> <span class=\"fn\">default</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L209-L210","name":"String.utf8GetAux_addChar_right_cancel","line":209,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_addChar_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L198-L207","name":"String.utf8GetAux_add_right_cancel","line":198,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">String.utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L185-L196","name":"String.utf8InductionOn","line":185,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.utf8InductionOn","doc":"Induction along the valid positions in a list of characters.\n(This definition is intended only for specification purposes.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8InductionOn\"><span class=\"name\">String</span>.<span class=\"name\">utf8InductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> → <a href=\"./foundational_types.html\">Sort</a> u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span> <span class=\"fn\">p</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ind : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">cs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span> <span class=\"fn\">i</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L178-L179","name":"String.isEmpty_iff","line":178,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.isEmpty_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.isEmpty_iff\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.isEmpty\">String.isEmpty</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L175-L176","name":"String.endPos_eq_zero","line":175,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.endPos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.endPos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L170-L171","name":"String.Pos.Valid.le_endPos","line":170,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.Valid.le_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid.le_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L168-L168","name":"String.Pos.Valid.mk","line":168,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid.mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs' : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L166-L166","name":"String.Pos.valid_endPos","line":166,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.valid_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.valid_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L164-L164","name":"String.Pos.valid_zero","line":164,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.valid_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.valid_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L161-L162","name":"String.Pos.Valid","line":161,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.Pos.Valid","doc":"A string position is valid if it is equal to the UTF-8 length of an initial substring of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L158-L158","name":"String.Pos.mk_lt_mk","line":158,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_lt_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_lt_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_lt_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> }</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L156-L156","name":"String.Pos.lt_iff","line":156,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L154-L154","name":"String.Pos.mk_le_mk","line":154,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_le_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_le_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> }</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L152-L152","name":"String.Pos.le_iff","line":152,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.le_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L149-L150","name":"String.Pos.zero_addString_eq","line":149,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L143-L144","name":"String.Pos.zero_addString_byteIdx","line":143,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addString_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L141-L141","name":"String.Pos.addString_eq","line":141,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L138-L139","name":"String.Pos.addString_byteIdx","line":138,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addString_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addString_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L136-L136","name":"String.Pos.ne_of_gt","line":136,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ne_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ne_of_gt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L134-L134","name":"String.Pos.ne_of_lt","line":134,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ne_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ne_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L132-L132","name":"String.Pos.lt_addChar","line":132,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.lt_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.lt_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L127-L130","name":"String.Pos.addChar_right_comm","line":127,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addChar_right_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addChar_right_comm\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_right_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L125-L125","name":"String.Pos.zero_addChar_eq","line":125,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L122-L123","name":"String.Pos.zero_addChar_byteIdx","line":122,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.zero_addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">zero_addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L120-L120","name":"String.Pos.addChar_eq","line":120,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addChar_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L118-L118","name":"String.Pos.addChar_byteIdx","line":118,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.addChar_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L116-L116","name":"String.Pos.sub_eq","line":116,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.sub_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.sub_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">sub_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L114-L114","name":"String.Pos.sub_byteIdx","line":114,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.sub_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.sub_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">sub_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p₂</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L112-L112","name":"String.Pos.add_eq","line":112,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.add_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">add_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L110-L110","name":"String.Pos.add_byteIdx","line":110,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.add_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.add_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">add_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p₂</span></span>)</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L108-L108","name":"String.Pos.ext_iff","line":108,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L105-L106","name":"String.Pos.ext","line":105,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.ext\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₁ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i₂ : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i₁</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.byteIdx</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L103-L103","name":"String.Pos.mk_byteIdx","line":103,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_byteIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span>.byteIdx</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L101-L101","name":"String.Pos.mk_zero","line":101,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.mk_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.mk_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">0</span> }</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L99-L99","name":"String.Pos.byteIdx_mk","line":99,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byteIdx_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">n</span> }</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L97-L97","name":"String.Pos.byteIdx_zero","line":97,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.Pos.byteIdx_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byteIdx_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span>.byteIdx</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L93-L93","name":"String.endPos_eq","line":93,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.endPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.endPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.endPos\">String.endPos</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L89-L90","name":"String.utf8Len_le_of_prefix","line":89,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_prefix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Std/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L86-L87","name":"String.utf8Len_le_of_suffix","line":86,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_suffix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Std/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L83-L84","name":"String.utf8Len_le_of_infix","line":83,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_infix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_infix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Std/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">cs₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L78-L81","name":"String.utf8Len_le_of_sublist","line":78,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_le_of_sublist\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Sublist\">List.Sublist</a> <span class=\"fn\">cs₁</span> <span class=\"fn\">cs₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L73-L74","name":"String.utf8Len_eq_zero","line":73,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L71-L71","name":"String.utf8Len_reverse","line":71,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_reverse\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverse\">List.reverse</a> <span class=\"fn\">cs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L67-L69","name":"String.utf8Len_reverseAux","line":67,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_reverseAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_reverseAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverseAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.reverseAux\">List.reverseAux</a> <span class=\"fn\">cs₁</span> <span class=\"fn\">cs₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L64-L65","name":"String.utf8Len_append","line":64,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_append\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L62-L62","name":"String.utf8Len_cons","line":62,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.csize\">String.csize</a> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L60-L60","name":"String.utf8Len_nil","line":60,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len_nil\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L58-L58","name":"String.utf8ByteSize_mk","line":58,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8ByteSize_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8ByteSize_mk\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cs : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize\">String.utf8ByteSize</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">cs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L56-L56","name":"String.utf8ByteSize.go_eq","line":56,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.utf8ByteSize.go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8ByteSize.go_eq\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize</span>.<span class=\"name\">go_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">String.utf8ByteSize.go</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L54-L54","name":"String.utf8Len","line":54,"kind":"def","docLink":"./Std/Data/String/Lemmas.html#String.utf8Len","doc":"The UTF-8 byte length of a list of characters. (This is intended for specification purposes.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L42-L42","name":"String.lt_iff","line":42,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.lt_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L38-L38","name":"String.data_append","line":38,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_append\"><span class=\"name\">String</span>.<span class=\"name\">data_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">t</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L36-L36","name":"String.data_push","line":36,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.data_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.data_push\"><span class=\"name\">String</span>.<span class=\"name\">data_push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.push\">String.push</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span>)</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">c</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L32-L34","name":"String.length_push","line":32,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.length_push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.length_push\"><span class=\"name\">String</span>.<span class=\"name\">length_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.push\">String.push</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L30-L30","name":"String.length_singleton","line":30,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.length_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.length_singleton\"><span class=\"name\">String</span>.<span class=\"name\">length_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L28-L28","name":"String.length_empty","line":28,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.length_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.length_empty\"><span class=\"name\">String</span>.<span class=\"name\">length_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L26-L26","name":"String.mk_length","line":26,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.mk_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.mk_length\"><span class=\"name\">String</span>.<span class=\"name\">mk_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">s</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L24-L24","name":"String.str_eq","line":24,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.str_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.str_eq\"><span class=\"name\">String</span>.<span class=\"name\">str_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.str\">String.str</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.push\">String.push</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L22-L22","name":"String.default_eq","line":22,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.default_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.default_eq\"><span class=\"name\">String</span>.<span class=\"name\">default_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">default</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L20-L20","name":"String.ext_iff","line":20,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.data</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L17-L18","name":"String.ext","line":17,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#String.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#String.ext\"><span class=\"name\">String</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.data</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.data</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/String/Lemmas.lean#L13-L13","name":"Char.length_toString","line":13,"kind":"theorem","docLink":"./Std/Data/String/Lemmas.html#Char.length_toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/String/Lemmas.html#Char.length_toString\"><span class=\"name\">Char</span>.<span class=\"name\">length_toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Char.toString\">Char.toString</a> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"}]}