{"name":"Mathlib.Analysis.Normed.Group.ControlledClosure","instances":[],"imports":["Init","Mathlib.Analysis.Normed.Group.Hom","Mathlib.Analysis.SpecificLimits.Normed"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/ControlledClosure.lean#L121-L130","name":"controlled_closure_range_of_complete","line":121,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/ControlledClosure.html#controlled_closure_range_of_complete","doc":"Given `f : NormedAddGroupHom G H` for some complete `G`, if every element `x` of the image of\nan isometric immersion `j : NormedAddGroupHom K H` has a preimage under `f` whose norm is at most\n`C*‖x‖` then the same holds for elements of the (topological) closure of this image with constant\n`C+ε` instead of `C`, for any positive `ε`.\nThis is useful in particular if `j` is the inclusion of a normed group into its completion\n(in this case the closure is the full target group).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/ControlledClosure.html#controlled_closure_range_of_complete\"><span class=\"name\">controlled_closure_range_of_complete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom\">NormedAddGroupHom</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#SeminormedAddCommGroup\">SeminormedAddCommGroup</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom\">NormedAddGroupHom</a> <span class=\"fn\">K</span> <span class=\"fn\">H</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">K</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">j</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">x</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyp : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\">K</span>), <span class=\"fn\">∃ (g : <span class=\"fn\">G</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">g</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">k</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.SurjectiveOnWith\">NormedAddGroupHom.SurjectiveOnWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#AddSubgroup.topologicalClosure\">AddSubgroup.topologicalClosure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.range\">NormedAddGroupHom.range</a> <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ε</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Analysis/Normed/Group/ControlledClosure.lean#L33-L111","name":"controlled_closure_of_complete","line":33,"kind":"theorem","docLink":"./Mathlib/Analysis/Normed/Group/ControlledClosure.html#controlled_closure_of_complete","doc":"Given `f : NormedAddGroupHom G H` for some complete `G` and a subgroup `K` of `H`, if every\nelement `x` of `K` has a preimage under `f` whose norm is at most `C*‖x‖` then the same holds for\nelements of the (topological) closure of `K` with constant `C+ε` instead of `C`, for any\npositive `ε`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/Normed/Group/ControlledClosure.html#controlled_closure_of_complete\"><span class=\"name\">controlled_closure_of_complete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Cauchy.html#CompleteSpace\">CompleteSpace</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom\">NormedAddGroupHom</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">H</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ε : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hε : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyp : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.SurjectiveOnWith\">NormedAddGroupHom.SurjectiveOnWith</a> <span class=\"fn\">f</span> <span class=\"fn\">K</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Hom.html#NormedAddGroupHom.SurjectiveOnWith\">NormedAddGroupHom.SurjectiveOnWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Group/Basic.html#AddSubgroup.topologicalClosure\">AddSubgroup.topologicalClosure</a> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ε</span></span>)</span></span></div></div>"}]}