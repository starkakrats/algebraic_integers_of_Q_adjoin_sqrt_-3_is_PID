{"name":"Mathlib.Topology.Category.Profinite.CofilteredLimit","instances":[{"typeNames":["Profinite.toTopCat"],"name":"Profinite.preserves_smaller_limits_toTopCat","className":"CategoryTheory.Limits.PreservesLimitsOfSize"}],"imports":["Init","Mathlib.Topology.Category.Profinite.Basic","Mathlib.Topology.LocallyConstant.Basic","Mathlib.Topology.DiscreteQuotient","Mathlib.Topology.Category.TopCat.Limits.Cofiltered","Mathlib.Topology.Category.TopCat.Limits.Konig"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/CofilteredLimit.lean#L219-L257","name":"Profinite.exists_locallyConstant","line":219,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant","doc":"Any locally constant function from a cofiltered limit of profinite sets factors through\none of the components. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant\"><span class=\"name\">Profinite</span>.<span class=\"name\">exists_locallyConstant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered\">CategoryTheory.IsCofiltered</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\">ProfiniteMax</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.pt</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (j : <span class=\"fn\">J</span>) (g : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">j</span></span>)</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.π</span>.app <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/CofilteredLimit.lean#L184-L213","name":"Profinite.exists_locallyConstant_finite_nonempty","line":184,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant_finite_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant_finite_nonempty\"><span class=\"name\">Profinite</span>.<span class=\"name\">exists_locallyConstant_finite_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered\">CategoryTheory.IsCofiltered</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\">ProfiniteMax</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.pt</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (j : <span class=\"fn\">J</span>) (g : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">j</span></span>)</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.π</span>.app <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/CofilteredLimit.lean#L137-L180","name":"Profinite.exists_locallyConstant_finite_aux","line":137,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant_finite_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant_finite_aux\"><span class=\"name\">Profinite</span>.<span class=\"name\">exists_locallyConstant_finite_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered\">CategoryTheory.IsCofiltered</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\">ProfiniteMax</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.pt</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (j : <span class=\"fn\">J</span>) (g : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">j</span></span>)</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.map\">LocallyConstant.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> b : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> then <span class=\"fn\">0</span> else <span class=\"fn\">1</span></span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.π</span>.app <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/CofilteredLimit.lean#L122-L133","name":"Profinite.exists_locallyConstant_fin_two","line":122,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant_fin_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_locallyConstant_fin_two\"><span class=\"name\">Profinite</span>.<span class=\"name\">exists_locallyConstant_fin_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered\">CategoryTheory.IsCofiltered</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\">ProfiniteMax</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.pt</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (j : <span class=\"fn\">J</span>) (g : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">j</span></span>)</span>.toCompHaus</span>.toTop</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.π</span>.app <span class=\"fn\">j</span></span>)</span></span>)</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/CofilteredLimit.lean#L50-L118","name":"Profinite.exists_isClopen_of_cofiltered","line":50,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_isClopen_of_cofiltered","doc":"If `X` is a cofiltered limit of profinite sets, then any clopen subset of `X` arises from\na clopen set in one of the terms in the limit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.exists_isClopen_of_cofiltered\"><span class=\"name\">Profinite</span>.<span class=\"name\">exists_isClopen_of_cofiltered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered\">CategoryTheory.IsCofiltered</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#ProfiniteMax\">ProfiniteMax</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{U : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.pt</span>.toCompHaus</span>.toTop</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hU : <span class=\"fn\"><a href=\"./Mathlib/Topology/Clopen.html#IsClopen\">IsClopen</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (j : <span class=\"fn\">J</span>) (V : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">j</span></span>)</span>.toCompHaus</span>.toTop</span></span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Clopen.html#IsClopen\">IsClopen</a> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">U</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span>.π</span>.app <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">V</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/CofilteredLimit.lean#L40-L42","name":"Profinite.preserves_smaller_limits_toTopCat","line":40,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.preserves_smaller_limits_toTopCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/CofilteredLimit.html#Profinite.preserves_smaller_limits_toTopCat\"><span class=\"name\">Profinite</span>.<span class=\"name\">preserves_smaller_limits_toTopCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimitsOfSize\">CategoryTheory.Limits.PreservesLimitsOfSize.{v, v, max u v, max u v, max (u + 1) (v + 1), max (u + 1) (v + 1)}</a>                                                               \n  <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite.toTopCat\">Profinite.toTopCat</a></span></div></div>"}]}