{"name":"Mathlib.Util.Superscript","instances":[{"typeNames":["Char"],"name":"Mathlib.Tactic.Superscript.instHashableChar","className":"Hashable"},{"typeNames":["Mathlib.Tactic.Superscript.Mapping"],"name":"Mathlib.Tactic.Superscript.instInhabitedMapping","className":"Inhabited"}],"imports":["Init","Std.Tactic.Lint"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L261-L266","name":"Mathlib.Tactic.registerAlias","line":261,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.registerAlias","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.registerAlias\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">registerAlias</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(aliasName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Parser/Extension.html#Lean.Parser.ParserAliasValue\">Lean.Parser.ParserAliasValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Parser/Extension.html#Lean.Parser.ParserAliasInfo\">Lean.Parser.ParserAliasInfo</a>\n  <span class=\"fn\">{ <span class=\"fn\">declName</span> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>, <span class=\"fn\">stackSz?</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">autoGroupArgs</span> := <span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.isSome\">Option.isSome</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">1</span></span>)</span></span> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L254-L258","name":"Mathlib.Tactic.registerAliasCore","line":254,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.registerAliasCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.registerAliasCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">registerAliasCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(mapRef : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Parser/Extension.html#Lean.Parser.AliasTable\">Lean.Parser.AliasTable</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aliasName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <span class=\"fn\"><a href=\"./Lean/Parser/Extension.html#Lean.Parser.AliasValue\">Lean.Parser.AliasValue</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L249-L249","name":"Mathlib.Tactic.subscript.formatter","line":249,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.formatter","doc":"Formatter for the subscript parser. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.formatter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">subscript</span>.<span class=\"name\">formatter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L246-L246","name":"Mathlib.Tactic.subscript.parenthesizer","line":246,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.parenthesizer","doc":"Formatter for the subscript parser. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript.parenthesizer\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">subscript</span>.<span class=\"name\">parenthesizer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L242-L243","name":"Mathlib.Tactic.subscript","line":242,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript","doc":"The parser `subscript(term)` parses a subscript. Basic usage is:\n```\nlocal syntax:arg term:max subscript(term) : term\nlocal macro_rules | `($a:term $i:subscript) => `($a $i)\n```\nGiven a notation like this, the expression `(a)ᵢ` parses and expands to `a i`. (Either parentheses\nor a whitespace as in `a ᵢ` is required, because `aᵢ` is considered as an identifier.)\n\nNote that because of Unicode limitations, not many characters can actually be typed inside the\nsubscript, so this should not be used for complex expressions. Legal subscript characters:\n```\n₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘꞯʀꜱᴛᴜᴠᴡʏᴢᵦᵧᵨᵩᵪ₊₋₌₍₎\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.subscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">subscript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L224-L224","name":"Mathlib.Tactic.superscript.formatter","line":224,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.formatter","doc":"Formatter for the superscript parser. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.formatter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">superscript</span>.<span class=\"name\">formatter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L221-L221","name":"Mathlib.Tactic.superscript.parenthesizer","line":221,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.parenthesizer","doc":"Formatter for the superscript parser. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript.parenthesizer\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">superscript</span>.<span class=\"name\">parenthesizer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L217-L218","name":"Mathlib.Tactic.superscript","line":217,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript","doc":"The parser `superscript(term)` parses a superscript. Basic usage is:\n```\nlocal syntax:arg term:max superscript(term) : term\nlocal macro_rules | `($a:term $b:superscript) => `($a ^ $b)\n```\nGiven a notation like this, the expression `2⁶⁴` parses and expands to `2 ^ 64`.\n\nNote that because of Unicode limitations, not many characters can actually be typed inside the\nsuperscript, so this should not be used for complex expressions. Legal superscript characters:\n```\n⁰¹²³⁴⁵⁶⁷⁸⁹ᵃᵇᶜᵈᵉᶠᵍʰⁱʲᵏˡᵐⁿᵒᵖ𐞥ʳˢᵗᵘᵛʷˣʸᶻᴬᴮᴰᴱᴳᴴᴵᴶᴷᴸᴹᴺᴼᴾꟴᴿᵀᵁⱽᵂᵝᵞᵟᵋᶿᶥᶹᵠᵡ⁺⁻⁼⁽⁾\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.superscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">superscript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L197-L199","name":"Mathlib.Tactic.Superscript.scriptParser.formatter","line":197,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.formatter","doc":"Formatter for the script parser. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.formatter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptParser</span>.<span class=\"name\">formatter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Formatter.html#Lean.PrettyPrinter.Formatter\">Lean.PrettyPrinter.Formatter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L193-L194","name":"Mathlib.Tactic.Superscript.scriptParser.parenthesizer","line":193,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.parenthesizer","doc":"Parenthesizer for the script parser. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser.parenthesizer\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptParser</span>.<span class=\"name\">parenthesizer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Parenthesizer.html#Lean.PrettyPrinter.Parenthesizer\">Lean.PrettyPrinter.Parenthesizer</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L181-L190","name":"Mathlib.Tactic.Superscript.scriptParser","line":181,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser","doc":"The super/subscript parser.\n\n* `m`: the character mapping\n* `antiquotName`: the name to use for antiquotation bindings `$a:antiquotName`.\n  Note that the actual syntax kind bound will be the body kind (parsed by `p`), not `kind`.\n* `errorMsg`: shown when the parser does not match\n* `p`: the inner parser (usually `term`), to be called on the body of the superscript\n* `many`: if false, whitespace is not allowed inside the superscript\n* `kind`: the term will be wrapped in a node with this kind\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptParser\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(antiquotName : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(errorMsg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(many : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <a href=\"./Mathlib/Util/Superscript.html#_auto._@.Mathlib.Util.Superscript._hyg.1474\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L159-L167","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax","line":159,"kind":"opaque","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax","doc":"Applies the alignment mapping to a `Syntax`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">alignSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(input : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aligns : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L150-L157","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo","line":150,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo","doc":"Applies the alignment mapping to a `SourceInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignInfo\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">alignInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(input : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aligns : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a> → <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L147-L148","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr","line":147,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr","doc":"Applies the alignment mapping to a `Substring`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.alignSubstr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">alignSubstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(input : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(aligns : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L139-L142","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align","line":139,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align","doc":"Applies the alignment mapping to a position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot.align\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span>.<span class=\"name\">align</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(aligns : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pos : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L115-L169","name":"Mathlib.Tactic.Superscript.scriptFnNoAntiquot","line":115,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot","doc":"The core function for super/subscript parsing. It consists of three stages:\n\n1. Parse a run of superscripted characters, skipping whitespace and stopping when we hit a\n   non-superscript character.\n2. Un-superscript the text and pass the body to the inner parser (usually `term`).\n3. Take the resulting `Syntax` object and align all the positions to fit back into the original\n   text (which as a side effect also rewrites all the substrings to be in subscript text).\n\nIf `many` is false, then whitespace (and comments) are not allowed inside the superscript.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.scriptFnNoAntiquot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">scriptFnNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(errorMsg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Lean.Parser.ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(many : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Lean.Parser.ParserFn</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L95-L103","name":"Mathlib.Tactic.Superscript.partitionPoint","line":95,"kind":"opaque","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.partitionPoint","doc":"Given a predicate `leftOfPartition` which is true for indexes `< i` and false for `≥ i`,\nreturns `i`, by binary search. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.partitionPoint\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">partitionPoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(leftOfPartition : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array.size\">Array.size</a> <span class=\"fn\">as</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L81-L88","name":"Mathlib.Tactic.Superscript.satisfyTokensFn.loop","line":81,"kind":"opaque","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn.loop","doc":"Loop body of `satisfyTokensFn` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn.loop\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">satisfyTokensFn</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">Lean.Parser.ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toks : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L70-L90","name":"Mathlib.Tactic.Superscript.satisfyTokensFn","line":70,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn","doc":"Collects runs of text satisfying `p` followed by whitespace. Fails if the first character does\nnot satisfy `p`. If `many` is true, it will parse 1 or more many whitespace-separated runs,\notherwise it will parse only 1. If successful, it passes the result to `k` as an array `(a, b, c)`\nwhere `a..b` is a token and `b..c` is whitespace.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.satisfyTokensFn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">satisfyTokensFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(errorMsg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(many : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">Lean.Parser.ParserState</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Lean.Parser.ParserFn</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L61-L63","name":"Mathlib.Tactic.Superscript.Mapping.subscript","line":61,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.subscript","doc":"A mapping from subscripts to and from regular text. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.subscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">subscript</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L56-L58","name":"Mathlib.Tactic.Superscript.Mapping.superscript","line":56,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.superscript","doc":"A mapping from superscripts to and from regular text. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.superscript\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">superscript</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L44-L53","name":"Mathlib.Tactic.Superscript.mkMapping","line":44,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.mkMapping","doc":"Constructs a mapping (intended for compile time use). Panics on violated invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.mkMapping\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">mkMapping</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L41-L41","name":"Mathlib.Tactic.Superscript.instInhabitedMapping","line":41,"kind":"instance","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instInhabitedMapping","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instInhabitedMapping\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">instInhabitedMapping</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L40-L40","name":"Mathlib.Tactic.Superscript.Mapping.toSpecial","line":40,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toSpecial","doc":"Map from \"normal\" text to \"special\" (e.g. superscript) characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toSpecial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">toSpecial</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L38-L38","name":"Mathlib.Tactic.Superscript.Mapping.toNormal","line":38,"kind":"def","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toNormal","doc":"Map from \"special\" (e.g. superscript) characters to \"normal\" characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.toNormal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">toNormal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L36-L36","name":"Mathlib.Tactic.Superscript.Mapping.mk","line":36,"kind":"ctor","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toNormal : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toSpecial : <span class=\"fn\"><a href=\"./Lean/Data/HashMap.html#Lean.HashMap\">Lean.HashMap</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\">Mathlib.Tactic.Superscript.Mapping</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L36-L41","name":"Mathlib.Tactic.Superscript.Mapping","line":36,"kind":"structure","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping","doc":"A bidirectional character mapping. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.Mapping\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">Mapping</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/Superscript.lean#L33-L33","name":"Mathlib.Tactic.Superscript.instHashableChar","line":33,"kind":"instance","docLink":"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instHashableChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Superscript.html#Mathlib.Tactic.Superscript.instHashableChar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Superscript</span>.<span class=\"name\">instHashableChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"}]}