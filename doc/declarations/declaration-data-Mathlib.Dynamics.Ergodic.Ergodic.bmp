{"name":"Mathlib.Dynamics.Ergodic.Ergodic","instances":[],"imports":["Init","Mathlib.Dynamics.Ergodic.MeasurePreserving"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L193-L195","name":"Ergodic.ae_empty_or_univ_of_image_ae_le","line":193,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_image_ae_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_image_ae_le\"><span class=\"name\">Ergodic</span>.<span class=\"name\">ae_empty_or_univ_of_image_ae_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L188-L190","name":"Ergodic.ae_empty_or_univ_of_ae_le_preimage","line":188,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_ae_le_preimage","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_ae_le_preimage\"><span class=\"name\">Ergodic</span>.<span class=\"name\">ae_empty_or_univ_of_ae_le_preimage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L183-L185","name":"Ergodic.ae_empty_or_univ_of_preimage_ae_le","line":183,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_preimage_ae_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_preimage_ae_le\"><span class=\"name\">Ergodic</span>.<span class=\"name\">ae_empty_or_univ_of_preimage_ae_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsFiniteMeasure\">MeasureTheory.IsFiniteMeasure</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L171-L176","name":"Ergodic.ae_empty_or_univ_of_image_ae_le'","line":171,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_image_ae_le'","doc":"See also `Ergodic.ae_empty_or_univ_of_image_ae_le`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_image_ae_le'\"><span class=\"name\">Ergodic</span>.<span class=\"name\">ae_empty_or_univ_of_image_ae_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_fin : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L163-L167","name":"Ergodic.ae_empty_or_univ_of_ae_le_preimage'","line":163,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_ae_le_preimage'","doc":"See also `Ergodic.ae_empty_or_univ_of_ae_le_preimage`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_ae_le_preimage'\"><span class=\"name\">Ergodic</span>.<span class=\"name\">ae_empty_or_univ_of_ae_le_preimage'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_fin : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L155-L159","name":"Ergodic.ae_empty_or_univ_of_preimage_ae_le'","line":155,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_preimage_ae_le'","doc":"See also `Ergodic.ae_empty_or_univ_of_preimage_ae_le`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.ae_empty_or_univ_of_preimage_ae_le'\"><span class=\"name\">Ergodic</span>.<span class=\"name\">ae_empty_or_univ_of_preimage_ae_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">≤ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_fin : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L150-L151","name":"Ergodic.quasiErgodic","line":150,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.quasiErgodic","doc":"An ergodic map is quasi ergodic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.quasiErgodic\"><span class=\"name\">Ergodic</span>.<span class=\"name\">quasiErgodic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic\">QuasiErgodic</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L140-L143","name":"QuasiErgodic.ae_mem_or_ae_nmem₀","line":140,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.ae_mem_or_ae_nmem₀","doc":"For a quasi ergodic map, sets that are almost invariant (rather than strictly invariant) are\nstill either almost empty or full. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.ae_mem_or_ae_nmem₀\"><span class=\"name\">QuasiErgodic</span>.<span class=\"name\">ae_mem_or_ae_nmem₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic\">QuasiErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsm : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/NullMeasurable.html#MeasureTheory.NullMeasurableSet\">MeasureTheory.NullMeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ᵐ (x : <span class=\"fn\">α</span>) ∂<span class=\"fn\">μ</span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ᵐ (x : <span class=\"fn\">α</span>) ∂<span class=\"fn\">μ</span>, <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L132-L136","name":"QuasiErgodic.ae_empty_or_univ₀","line":132,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.ae_empty_or_univ₀","doc":"For a quasi ergodic map, sets that are almost invariant (rather than strictly invariant) are\nstill either almost empty or full. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.ae_empty_or_univ₀\"><span class=\"name\">QuasiErgodic</span>.<span class=\"name\">ae_empty_or_univ₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic\">QuasiErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsm : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/NullMeasurable.html#MeasureTheory.NullMeasurableSet\">MeasureTheory.NullMeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L124-L127","name":"QuasiErgodic.ae_empty_or_univ'","line":124,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.ae_empty_or_univ'","doc":"For a quasi ergodic map, sets that are almost invariant (rather than strictly invariant) are\nstill either almost empty or full. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.ae_empty_or_univ'\"><span class=\"name\">QuasiErgodic</span>.<span class=\"name\">ae_empty_or_univ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic\">QuasiErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L109-L115","name":"MeasureTheory.MeasurePreserving.ergodic_conjugate_iff","line":109,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#MeasureTheory.MeasurePreserving.ergodic_conjugate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#MeasureTheory.MeasurePreserving.ergodic_conjugate_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">MeasurePreserving</span>.<span class=\"name\">ergodic_conjugate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ' : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Basic.html#MeasurableEquiv\">≃ᵐ</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasureTheory.MeasurePreserving</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L99-L106","name":"MeasureTheory.MeasurePreserving.preErgodic_conjugate_iff","line":99,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#MeasureTheory.MeasurePreserving.preErgodic_conjugate_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#MeasureTheory.MeasurePreserving.preErgodic_conjugate_iff\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">MeasurePreserving</span>.<span class=\"name\">preErgodic_conjugate_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ' : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Basic.html#MeasurableEquiv\">≃ᵐ</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasureTheory.MeasurePreserving</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L89-L96","name":"MeasureTheory.MeasurePreserving.preErgodic_of_preErgodic_conjugate","line":89,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#MeasureTheory.MeasurePreserving.preErgodic_of_preErgodic_conjugate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#MeasureTheory.MeasurePreserving.preErgodic_of_preErgodic_conjugate\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">MeasurePreserving</span>.<span class=\"name\">preErgodic_of_preErgodic_conjugate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m' : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ' : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasureTheory.MeasurePreserving</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f' : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h_comm : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L79-L80","name":"PreErgodic.of_iterate","line":79,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.of_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.of_iterate\"><span class=\"name\">PreErgodic</span>.<span class=\"name\">of_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\"><span class=\"fn\">f</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">n</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L74-L76","name":"PreErgodic.prob_eq_zero_or_one","line":74,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.prob_eq_zero_or_one","doc":"On a probability space, the (pre)ergodicity condition is a zero one law. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.prob_eq_zero_or_one\"><span class=\"name\">PreErgodic</span>.<span class=\"name\">prob_eq_zero_or_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsProbabilityMeasure\">MeasureTheory.IsProbabilityMeasure</a> <span class=\"fn\">μ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L69-L71","name":"PreErgodic.ae_mem_or_ae_nmem","line":69,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.ae_mem_or_ae_nmem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.ae_mem_or_ae_nmem\"><span class=\"name\">PreErgodic</span>.<span class=\"name\">ae_mem_or_ae_nmem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsm : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ᵐ (x : <span class=\"fn\">α</span>) ∂<span class=\"fn\">μ</span>, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ᵐ (x : <span class=\"fn\">α</span>) ∂<span class=\"fn\">μ</span>, <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L64-L66","name":"PreErgodic.measure_self_or_compl_eq_zero","line":64,"kind":"theorem","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.measure_self_or_compl_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.measure_self_or_compl_eq_zero\"><span class=\"name\">PreErgodic</span>.<span class=\"name\">measure_self_or_compl_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs' : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\"><span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L56-L56","name":"QuasiErgodic.mk","line":56,"kind":"ctor","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic.mk\"><span class=\"name\">QuasiErgodic</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#_auto._@.Mathlib.Dynamics.Ergodic.Ergodic._hyg.169\">_auto✝</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toQuasiMeasurePreserving : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.QuasiMeasurePreserving\">MeasureTheory.Measure.QuasiMeasurePreserving</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toPreErgodic : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic\">QuasiErgodic</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L56-L57","name":"QuasiErgodic","line":56,"kind":"structure","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic","doc":"A map `f : α → α` is said to be quasi ergodic with respect to a measure `μ` if it is quasi\nmeasure preserving and pre-ergodic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#QuasiErgodic\"><span class=\"name\">QuasiErgodic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#_auto._@.Mathlib.Dynamics.Ergodic.Ergodic._hyg.169\">_auto✝</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.QuasiMeasurePreserving\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Measure</span>.<span class=\"name\">QuasiMeasurePreserving</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\"><span class=\"name\">PreErgodic</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L49-L49","name":"Ergodic.mk","line":49,"kind":"ctor","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic.mk\"><span class=\"name\">Ergodic</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#_auto._@.Mathlib.Dynamics.Ergodic.Ergodic._hyg.116\">_auto✝</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toMeasurePreserving : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\">MeasureTheory.MeasurePreserving</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toPreErgodic : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\">Ergodic</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L49-L50","name":"Ergodic","line":49,"kind":"structure","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic","doc":"A map `f : α → α` is said to be ergodic with respect to a measure `μ` if it is measure\npreserving and pre-ergodic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#Ergodic\"><span class=\"name\">Ergodic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#_auto._@.Mathlib.Dynamics.Ergodic.Ergodic._hyg.116\">_auto✝</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/MeasurePreserving.html#MeasureTheory.MeasurePreserving\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">MeasurePreserving</span></a></span></span>\n, <span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\"><span class=\"name\">PreErgodic</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L43-L43","name":"PreErgodic.ae_empty_or_univ","line":43,"kind":"def","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.ae_empty_or_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.ae_empty_or_univ\"><span class=\"name\">PreErgodic</span>.<span class=\"name\">ae_empty_or_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#_auto._@.Mathlib.Dynamics.Ergodic.Ergodic._hyg.28\">_auto✝</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L42-L42","name":"PreErgodic.mk","line":42,"kind":"ctor","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic.mk\"><span class=\"name\">PreErgodic</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#_auto._@.Mathlib.Dynamics.Ergodic.Ergodic._hyg.28\">_auto✝</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ae_empty_or_univ : <span class=\"fn\">∀ ⦃<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄,\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">=ᶠ[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure.ae\">MeasureTheory.Measure.ae</a> <span class=\"fn\">μ</span></span><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Set.univ</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\">PreErgodic</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Dynamics/Ergodic/Ergodic.lean#L42-L43","name":"PreErgodic","line":42,"kind":"structure","docLink":"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic","doc":"A map `f : α → α` is said to be pre-ergodic with respect to a measure `μ` if any measurable\nstrictly invariant set is either almost empty or full. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#PreErgodic\"><span class=\"name\">PreErgodic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">α</span></span>)</span> <a href=\"./Mathlib/Dynamics/Ergodic/Ergodic.html#_auto._@.Mathlib.Dynamics.Ergodic.Ergodic._hyg.28\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}