{"name":"Std.Tactic.SolveByElim.Backtrack","instances":[],"imports":["Init","Std.Control.Nondet.Basic","Std.Data.List.Basic","Std.Lean.Except"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L200-L203","name":"Std.Tactic.backtrack","line":200,"kind":"def","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.backtrack","doc":"Attempts to solve the `goals`, by recursively calling `alternatives g` on each subgoal that appears.\n`alternatives` returns a nondeterministic list of new subgoals generated from a goal.\n\n`backtrack` performs a backtracking search, attempting to close all subgoals.\n\nFurther flow control options are available via the `Config` argument.\n\nReturns a list of subgoals which were \"suspended\" via the `suspend` or `discharge` hooks\nin `Config`. In the default configuration, `backtrack` will either return an empty list or fail.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.backtrack\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">backtrack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\">Std.Tactic.BacktrackConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">maxDepth</span> := <span class=\"fn\">6</span>, <span class=\"fn\">proc</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">none</span></span></span>, <span class=\"fn\">suspend</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span>,\n    <span class=\"fn\">discharge</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) =&gt; <span class=\"fn\">failure</span></span>, <span class=\"fn\">commitIndependentGoals</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> }</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(trace : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alternatives : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Std/Control/Nondet/Basic.html#Nondet\">Nondet</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L81-L84","name":"Std.Tactic.Backtrack.tryAllM","line":81,"kind":"def","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.Backtrack.tryAllM","doc":"Run a monadic function on every element of a list,\nreturning the list of elements on which the function fails, and the list of successful results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.Backtrack.tryAllM\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Backtrack</span>.<span class=\"name\">tryAllM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2) → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L65-L65","name":"Std.Tactic.BacktrackConfig.commitIndependentGoals","line":65,"kind":"def","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.commitIndependentGoals","doc":"If we solve any \"independent\" goals, don't fail.\nSee `Lean.MVarId.independent?` for the definition of independence.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.commitIndependentGoals\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BacktrackConfig</span>.<span class=\"name\">commitIndependentGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\">Std.Tactic.BacktrackConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L60-L60","name":"Std.Tactic.BacktrackConfig.discharge","line":60,"kind":"def","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.discharge","doc":"`discharge g` is called on goals for which there were no alternatives.\nIf `none` we return `g` as a new subgoal.\nIf `some l`, we replace `g` by `l` in the list of active goals, and recurse.\nIf failure, we backtrack. (defaults to failure) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.discharge\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BacktrackConfig</span>.<span class=\"name\">discharge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\">Std.Tactic.BacktrackConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L55-L55","name":"Std.Tactic.BacktrackConfig.suspend","line":55,"kind":"def","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.suspend","doc":"If `suspend g`, then we do not consider alternatives for `g`,\nbut return `g` as a new subgoal. (defaults to `false`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.suspend\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BacktrackConfig</span>.<span class=\"name\">suspend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\">Std.Tactic.BacktrackConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L52-L52","name":"Std.Tactic.BacktrackConfig.proc","line":52,"kind":"def","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.proc","doc":"An arbitrary procedure which can be used to modify the list of goals\nbefore each attempt to generate alternatives.\nCalled as `proc goals curr`, where `goals` are the original goals for `backtracking`,\nand `curr` are the current goals.\nReturning `some l` will replace the current goals with `l` and recurse\n(consuming one step of maximum depth).\nReturning `none` will proceed to generating alternative without changing goals.\nFailure will cause backtracking.\n(defaults to `none`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.proc\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BacktrackConfig</span>.<span class=\"name\">proc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\">Std.Tactic.BacktrackConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L42-L42","name":"Std.Tactic.BacktrackConfig.maxDepth","line":42,"kind":"def","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.maxDepth","doc":"Maximum recursion depth. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.maxDepth\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BacktrackConfig</span>.<span class=\"name\">maxDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\">Std.Tactic.BacktrackConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L40-L40","name":"Std.Tactic.BacktrackConfig.mk","line":40,"kind":"ctor","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BacktrackConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proc : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suspend : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discharge : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(commitIndependentGoals : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\">Std.Tactic.BacktrackConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/SolveByElim/Backtrack.lean#L40-L65","name":"Std.Tactic.BacktrackConfig","line":40,"kind":"structure","docLink":"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig","doc":"Configuration structure to control the behaviour of `backtrack`:\n* control the maximum depth and behaviour (fail or return subgoals) at the maximum depth,\n* and hooks allowing\n  * modifying intermediate goals before running the external tactic,\n  * 'suspending' goals, returning them in the result, and\n  * discharging subgoals if the external tactic fails.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/SolveByElim/Backtrack.html#Std.Tactic.BacktrackConfig\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BacktrackConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}