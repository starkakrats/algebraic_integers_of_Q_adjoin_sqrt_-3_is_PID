{"name":"Mathlib.Util.TermBeta","instances":[],"imports":["Init","Lean.Elab.Term"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/TermBeta.lean#L33-L38","name":"Mathlib.Util.TermBeta.elabBeta","line":33,"kind":"def","docLink":"./Mathlib/Util/TermBeta.html#Mathlib.Util.TermBeta.elabBeta","doc":"`beta% t` elaborates `t` and then if the result is in the form\n`f x1 ... xn` where `f` is a (nested) lambda expression,\nit will substitute all of its arguments by beta reduction.\nThis does not recursively do beta reduction, nor will it do\nbeta reduction of subexpressions.\n\nIn particular, `t` is elaborated, its metavariables are instantiated,\nand then `Lean.Expr.headBeta` is applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermBeta.html#Mathlib.Util.TermBeta.elabBeta\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermBeta</span>.<span class=\"name\">elabBeta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Util/TermBeta.lean#L22-L30","name":"Mathlib.Util.TermBeta.betaStx","line":22,"kind":"def","docLink":"./Mathlib/Util/TermBeta.html#Mathlib.Util.TermBeta.betaStx","doc":"`beta% t` elaborates `t` and then if the result is in the form\n`f x1 ... xn` where `f` is a (nested) lambda expression,\nit will substitute all of its arguments by beta reduction.\nThis does not recursively do beta reduction, nor will it do\nbeta reduction of subexpressions.\n\nIn particular, `t` is elaborated, its metavariables are instantiated,\nand then `Lean.Expr.headBeta` is applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/TermBeta.html#Mathlib.Util.TermBeta.betaStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Util</span>.<span class=\"name\">TermBeta</span>.<span class=\"name\">betaStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}