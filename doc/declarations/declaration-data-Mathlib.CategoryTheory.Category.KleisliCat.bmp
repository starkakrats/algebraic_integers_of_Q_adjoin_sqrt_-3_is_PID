{"name":"Mathlib.CategoryTheory.Category.KleisliCat","instances":[{"typeNames":["CategoryTheory.KleisliCat"],"name":"CategoryTheory.KleisliCat.categoryStruct","className":"CategoryTheory.CategoryStruct"},{"typeNames":["CategoryTheory.KleisliCat"],"name":"CategoryTheory.KleisliCat.category","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.KleisliCat"],"name":"CategoryTheory.instInhabitedKleisliCatIdType","className":"Inhabited"},{"typeNames":["CategoryTheory.KleisliCat.mk"],"name":"CategoryTheory.instInhabitedMkIdType","className":"Inhabited"}],"imports":["Init","Mathlib.CategoryTheory.Category.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L71-L72","name":"CategoryTheory.instInhabitedMkIdType","line":71,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedMkIdType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedMkIdType\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedMkIdType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.mk\">CategoryTheory.KleisliCat.mk</a> <span class=\"fn\">id</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L68-L69","name":"CategoryTheory.instInhabitedKleisliCatIdType","line":68,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedKleisliCatIdType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedKleisliCatIdType\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedKleisliCatIdType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">id</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L63-L65","name":"CategoryTheory.KleisliCat.comp_def","line":63,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.comp_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.comp_def\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">comp_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(β : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">ys</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L59-L60","name":"CategoryTheory.KleisliCat.id_def","line":59,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.id_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.id_def\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">id_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pure</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L50-L55","name":"CategoryTheory.KleisliCat.category","line":50,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.category","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{max u v, u + 1}</a>             <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L43-L47","name":"CategoryTheory.KleisliCat.categoryStruct","line":43,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.categoryStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.categoryStruct\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">categoryStruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryTheory.CategoryStruct.{max u v, u + 1}</a>             <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L39-L40","name":"CategoryTheory.KleisliCat.mk","line":39,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.mk","doc":"Construct an object of the Kleisli category from a type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">CategoryTheory.KleisliCat</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Category/KleisliCat.lean#L34-L35","name":"CategoryTheory.KleisliCat","line":34,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat","doc":"The Kleisli category on the (type-)monad `m`. Note that the monad is not assumed to be lawful\nyet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span> → <a href=\"./foundational_types.html\">Type</a> (u + 1)</span></div></div>"}]}