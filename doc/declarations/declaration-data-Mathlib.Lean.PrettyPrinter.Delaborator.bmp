{"name":"Mathlib.Lean.PrettyPrinter.Delaborator","instances":[],"imports":["Init","Lean.PrettyPrinter.Delaborator.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/PrettyPrinter/Delaborator.lean#L52-L55","name":"Lean.PrettyPrinter.Delaborator.OptionsPerPos.setBool","line":52,"kind":"def","docLink":"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos.setBool","doc":"Update `OptionsPerPos` at the given position, setting the key `n`\nto have the boolean value `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos.setBool\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OptionsPerPos</span>.<span class=\"name\">setBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(opts : <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">Lean.PrettyPrinter.Delaborator.OptionsPerPos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">Lean.SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">Lean.PrettyPrinter.Delaborator.OptionsPerPos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/PrettyPrinter/Delaborator.lean#L45-L48","name":"Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName'","line":45,"kind":"def","docLink":"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName'","doc":"Assuming the current expression in a lambda or pi,\ndescend into the body using an unused name generated from the binder's name.\nProvides `d` with both `Syntax` for the bound name as an identifier\nas well as the fresh fvar for the bound variable.\nSee also `Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName'\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withBindingBodyUnusedName'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">Lean.PrettyPrinter.Delaborator.DelabM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">Lean.PrettyPrinter.Delaborator.DelabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/PrettyPrinter/Delaborator.lean#L31-L34","name":"Lean.PrettyPrinter.Delaborator.SubExpr.withBindingBody'","line":31,"kind":"def","docLink":"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.SubExpr.withBindingBody'","doc":"Assuming the current expression is a lambda or pi,\ndescend into the body using the given name `n` for the username of the fvar.\nProvides `x` with the fresh fvar for the bound variable.\nSee also `Lean.PrettyPrinter.Delaborator.SubExpr.withBindingBody`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.SubExpr.withBindingBody'\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">SubExpr</span>.<span class=\"name\">withBindingBody'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">Lean.SubExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">Lean.SubExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"}]}