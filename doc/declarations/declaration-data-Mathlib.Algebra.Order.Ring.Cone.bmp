{"name":"Mathlib.Algebra.Order.Ring.Cone","instances":[],"imports":["Init","Mathlib.Algebra.Order.Ring.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L74-L76","name":"LinearOrderedRing.mkOfPositiveCone","line":74,"kind":"def","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#LinearOrderedRing.mkOfPositiveCone","doc":"Construct a `LinearOrderedRing` by\ndesignating a positive cone in an existing `Ring`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#LinearOrderedRing.mkOfPositiveCone\"><span class=\"name\">LinearOrderedRing</span>.<span class=\"name\">mkOfPositiveCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone\">Ring.TotalPositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#LinearOrderedRing\">LinearOrderedRing</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L58-L69","name":"StrictOrderedRing.mkOfPositiveCone","line":58,"kind":"def","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#StrictOrderedRing.mkOfPositiveCone","doc":"Construct a `StrictOrderedRing` by designating a positive cone in an existing `Ring`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#StrictOrderedRing.mkOfPositiveCone\"><span class=\"name\">StrictOrderedRing</span>.<span class=\"name\">mkOfPositiveCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#StrictOrderedRing\">StrictOrderedRing</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L49-L50","name":"Ring.PositiveCone.one_pos","line":49,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.one_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.one_pos\"><span class=\"name\">Ring</span>.<span class=\"name\">PositiveCone</span>.<span class=\"name\">one_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.pos\">AddCommGroup.PositiveCone.pos</a> <span class=\"fn\"><span class=\"fn\">C</span>.toPositiveCone</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L45-L46","name":"Ring.TotalPositiveCone.toTotalPositiveCone","line":45,"kind":"def","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone.toTotalPositiveCone","doc":"Forget that a `TotalPositiveCone` in a ring respects the multiplicative structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone.toTotalPositiveCone\"><span class=\"name\">Ring</span>.<span class=\"name\">TotalPositiveCone</span>.<span class=\"name\">toTotalPositiveCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone\">Ring.TotalPositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.TotalPositiveCone\">AddCommGroup.TotalPositiveCone</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L42-L43","name":"Ring.TotalPositiveCone.toPositiveCone_1","line":42,"kind":"def","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone.toPositiveCone_1","doc":"Forget that a `TotalPositiveCone` in a ring is total. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone.toPositiveCone_1\"><span class=\"name\">Ring</span>.<span class=\"name\">TotalPositiveCone</span>.<span class=\"name\">toPositiveCone_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone\">Ring.TotalPositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L37-L37","name":"Ring.TotalPositiveCone.mk","line":37,"kind":"ctor","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone.mk\"><span class=\"name\">Ring</span>.<span class=\"name\">TotalPositiveCone</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toPositiveCone_1 : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonnegDecidable : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\"><span class=\"fn\">toPositiveCone_1</span>.nonneg</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonneg_total : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.nonneg\">AddCommGroup.PositiveCone.nonneg</a> <span class=\"fn\"><span class=\"fn\">toPositiveCone_1</span>.toPositiveCone</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a>     <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.nonneg\">AddCommGroup.PositiveCone.nonneg</a> <span class=\"fn\"><span class=\"fn\">toPositiveCone_1</span>.toPositiveCone</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone\">Ring.TotalPositiveCone</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L37-L38","name":"Ring.TotalPositiveCone","line":37,"kind":"structure","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone","doc":"A total positive cone in a nontrivial ring induces a linear order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.TotalPositiveCone\"><span class=\"name\">Ring</span>.<span class=\"name\">TotalPositiveCone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\"><span class=\"name\">Ring</span>.<span class=\"name\">PositiveCone</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L32-L33","name":"Ring.PositiveCone.toPositiveCone","line":32,"kind":"def","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.toPositiveCone","doc":"Forget that a positive cone in a ring respects the multiplicative structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.toPositiveCone\"><span class=\"name\">Ring</span>.<span class=\"name\">PositiveCone</span>.<span class=\"name\">toPositiveCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone\">AddCommGroup.PositiveCone</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L29-L29","name":"Ring.PositiveCone.mul_pos","line":29,"kind":"def","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.mul_pos","doc":"In a positive cone, if `a` and `b` are `pos` then so is `a * b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.mul_pos\"><span class=\"name\">Ring</span>.<span class=\"name\">PositiveCone</span>.<span class=\"name\">mul_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.pos\">AddCommGroup.PositiveCone.pos</a> <span class=\"fn\"><span class=\"fn\">self</span>.toPositiveCone</span> <span class=\"fn\">a</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.pos\">AddCommGroup.PositiveCone.pos</a> <span class=\"fn\"><span class=\"fn\">self</span>.toPositiveCone</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.pos\">AddCommGroup.PositiveCone.pos</a> <span class=\"fn\"><span class=\"fn\">self</span>.toPositiveCone</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L27-L27","name":"Ring.PositiveCone.one_nonneg","line":27,"kind":"def","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.one_nonneg","doc":"In a positive cone, `1` is `nonneg` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.one_nonneg\"><span class=\"name\">Ring</span>.<span class=\"name\">PositiveCone</span>.<span class=\"name\">one_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.nonneg\">AddCommGroup.PositiveCone.nonneg</a> <span class=\"fn\"><span class=\"fn\">self</span>.toPositiveCone</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L25-L25","name":"Ring.PositiveCone.mk","line":25,"kind":"ctor","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone.mk\"><span class=\"name\">Ring</span>.<span class=\"name\">PositiveCone</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toPositiveCone : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone\">AddCommGroup.PositiveCone</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(one_nonneg : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.nonneg\">AddCommGroup.PositiveCone.nonneg</a> <span class=\"fn\">toPositiveCone</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mul_pos : <span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\">α</span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.pos\">AddCommGroup.PositiveCone.pos</a> <span class=\"fn\">toPositiveCone</span> <span class=\"fn\">a</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.pos\">AddCommGroup.PositiveCone.pos</a> <span class=\"fn\">toPositiveCone</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone.pos\">AddCommGroup.PositiveCone.pos</a> <span class=\"fn\">toPositiveCone</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\">Ring.PositiveCone</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Order/Ring/Cone.lean#L25-L29","name":"Ring.PositiveCone","line":25,"kind":"structure","docLink":"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone","doc":"A positive cone in a ring consists of a positive cone in underlying `AddCommGroup`,\nwhich contains `1` and such that the positive elements are closed under multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Ring/Cone.html#Ring.PositiveCone\"><span class=\"name\">Ring</span>.<span class=\"name\">PositiveCone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Group/Defs.html#AddCommGroup.PositiveCone\"><span class=\"name\">AddCommGroup</span>.<span class=\"name\">PositiveCone</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"}]}