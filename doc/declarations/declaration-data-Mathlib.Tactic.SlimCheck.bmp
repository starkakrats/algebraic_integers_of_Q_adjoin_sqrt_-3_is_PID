{"name":"Mathlib.Tactic.SlimCheck","instances":[],"imports":["Init","Mathlib.Testing.SlimCheck.Testable","Qq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/SlimCheck.lean#L113-L164","name":"slimCheckSyntax","line":113,"kind":"def","docLink":"./Mathlib/Tactic/SlimCheck.html#slimCheckSyntax","doc":"`slim_check` considers a proof goal and tries to generate examples\nthat would contradict the statement.\n\nLet's consider the following proof goal.\n\n```lean\nxs : List ℕ,\nh : ∃ (x : ℕ) (H : x ∈ xs), x < 3\n⊢ ∀ (y : ℕ), y ∈ xs → y < 5\n```\n\nThe local constants will be reverted and an instance will be found for\n`Testable (∀ (xs : List ℕ), (∃ x ∈ xs, x < 3) → (∀ y ∈ xs, y < 5))`.\nThe `Testable` instance is supported by an instance of `Sampleable (List ℕ)`,\n`Decidable (x < 3)` and `Decidable (y < 5)`.\n\nExamples will be created in ascending order of size (more or less)\n\nThe first counter-examples found will be printed and will result in an error:\n\n```\n===================\nFound problems!\nxs := [1, 28]\nx := 1\ny := 28\n-------------------\n```\n\nIf `slim_check` successfully tests 100 examples, it acts like\nadmit. If it gives up or finds a counter-example, it reports an error.\n\nFor more information on writing your own `Sampleable` and `Testable`\ninstances, see `Testing.SlimCheck.Testable`.\n\nOptional arguments given with `slim_check (config : { ... })`\n* `numInst` (default 100): number of examples to test properties with\n* `maxSize` (default 100): final size argument\n\nOptions:\n* `set_option trace.slim_check.decoration true`: print the proposition with quantifier annotations\n* `set_option trace.slim_check.discarded true`: print the examples discarded because they do not\n  satisfy assumptions\n* `set_option trace.slim_check.shrink.steps true`: trace the shrinking of counter-example\n* `set_option trace.slim_check.shrink.candidates true`: print the lists of candidates considered\n  when shrinking each variable\n* `set_option trace.slim_check.instance true`: print the instances of `testable` being used to test\n  the proposition\n* `set_option trace.slim_check.success true`: print the tested samples that satisfy a property\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/SlimCheck.html#slimCheckSyntax\"><span class=\"name\">slimCheckSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}