{"name":"Lean.Meta.WHNF","instances":[{"typeNames":["Eq"],"name":"Lean.Meta.instDecidableEqProjReductionKind","className":"Decidable"},{"typeNames":["Lean.Meta.ProjReductionKind"],"name":"Lean.Meta.instInhabitedProjReductionKind","className":"Inhabited"},{"typeNames":["Lean.Meta.ProjReductionKind"],"name":"Lean.Meta.instReprProjReductionKind","className":"Repr"}],"imports":["Init","Lean.Structure","Lean.Util.Recognizers","Lean.Meta.GetUnfoldableConst","Lean.Meta.FunInfo","Lean.Meta.Match.MatcherInfo","Lean.Meta.Match.MatchPatternAttr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L924-L937","name":"Lean.Meta.reduceProjOf?","line":924,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceProjOf?","doc":"If `e` is a projection function that satisfies `p`, then reduce it "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceProjOf?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceProjOf?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L905-L921","name":"Lean.Meta.whnfImp","line":905,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfImp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfImp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L852-L873","name":"Lean.Meta.reduceNat?","line":852,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNat?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L847-L850","name":"Lean.Meta.reduceBinNatPred","line":847,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBinNatPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L841-L845","name":"Lean.Meta.reduceBinNatOp","line":841,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBinNatOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBinNatOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L837-L839","name":"Lean.Meta.reduceUnaryNatOp","line":837,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceUnaryNatOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceUnaryNatOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceUnaryNatOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L830-L835","name":"Lean.Meta.withNatValue","line":830,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.withNatValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.withNatValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">withNatValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L818-L828","name":"Lean.Meta.reduceNative?","line":818,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNative?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNative?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNative?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L816-L816","name":"Lean.Meta.reduceNatNative","line":816,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNative\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNatNative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L815-L815","name":"Lean.Meta.reduceBoolNative","line":815,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNative\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBoolNative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L814-L814","name":"Lean.Meta.reduceNatNativeUnsafe","line":814,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNativeUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceNatNativeUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceNatNativeUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L813-L813","name":"Lean.Meta.reduceBoolNativeUnsafe","line":813,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNativeUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceBoolNativeUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceBoolNativeUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L797-L811","name":"Lean.Meta.reduceRecMatcher?","line":797,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceRecMatcher?","doc":"Try to reduce matcher/recursor/quot applications. We say they are all \"morally\" recursor applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceRecMatcher?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceRecMatcher?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L789-L794","name":"Lean.Meta.whnfUntil","line":789,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfUntil\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L779-L787","name":"Lean.Meta.whnfHeadPred","line":779,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfHeadPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfHeadPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfHeadPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pred : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L775-L777","name":"Lean.Meta.unfoldDefinition","line":775,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L693-L772","name":"Lean.Meta.unfoldDefinition?","line":693,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition?","doc":"Unfold definition using \"smart unfolding\" if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldDefinition?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldDefinition?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L686-L690","name":"Lean.Meta.unfoldProjInstWhenIntances?","line":686,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInstWhenIntances?","doc":"Auxiliary method for unfolding a class projection. when transparency is set to `TransparencyMode.instances`.\nRecall that class instance projections are not marked with `[reducible]` because we want them to be\nin \"reducible canonical form\".\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInstWhenIntances?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldProjInstWhenIntances?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L667-L679","name":"Lean.Meta.unfoldProjInst?","line":667,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInst?","doc":"Auxiliary method for unfolding a class projection.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.unfoldProjInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldProjInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L646-L660","name":"Lean.Meta.smartUnfoldingReduce?.goMatch","line":646,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.goMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.goMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingReduce?</span>.<span class=\"name\">goMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L633-L644","name":"Lean.Meta.smartUnfoldingReduce?.go","line":633,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingReduce?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L630-L660","name":"Lean.Meta.smartUnfoldingReduce?","line":630,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?","doc":"Recall that `_sunfold` auxiliary definitions contains the markers: `markSmartUnfoldingMatch` (*) and `markSmartUnfoldingMatchAlt` (**).\nFor example, consider the following definition\n```\ndef r (i j : Nat) : Nat :=\n  i +\n    match j with\n    | Nat.zero => 1\n    | Nat.succ j =>\n      i + match j with\n          | Nat.zero => 2\n          | Nat.succ j => r i j\n```\nproduces the following `_sunfold` auxiliary definition with the markers\n```\ndef r._sunfold (i j : Nat) : Nat :=\n  i +\n    (*) match j with\n    | Nat.zero => (**) 1\n    | Nat.succ j =>\n      i + (*) match j with\n          | Nat.zero => (**) 2\n          | Nat.succ j => (**) r i j\n```\n\n`match` expressions marked with `markSmartUnfoldingMatch` (*) must be reduced, otherwise the resulting term is not definitionally\n equal to the given expression. The recursion may be interrupted as soon as the annotation `markSmartUnfoldingAlt` (**) is reached.\n\nFor example, the term `r i j.succ.succ` reduces to the definitionally equal term `i + i * r i j`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingReduce?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingReduce?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L556-L598","name":"Lean.Meta.whnfCore.go","line":556,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L553-L598","name":"Lean.Meta.whnfCore","line":553,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore","doc":"Apply beta-reduction, zeta-reduction (i.e., unfold let local-decls), iota-reduction,\nexpand let-expressions, expand assigned meta-variables.\n\nThe parameter `deltaAtProj` controls how to reduce projections `s.i`. If `deltaAtProj == true`,\nthen delta reduction is used to reduce `s` (i.e., `whnf` is used), otherwise `whnfCore`.\n\nIf `simpleReduceOnly`, then `iota` and projection reduction are not performed.\nNote that the value of `deltaAtProj` is irrelevant if `simpleReduceOnly = true`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L513-L516","name":"Lean.Meta.reduceProj?","line":513,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceProj?","doc":"Reduce kernel projection `Expr.proj ..` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceProj?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceProj?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L509-L510","name":"Lean.Meta.project?","line":509,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.project?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.project?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">project?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L474-L497","name":"Lean.Meta.reduceMatcher?","line":474,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.reduceMatcher?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.reduceMatcher?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">reduceMatcher?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L433-L456","name":"Lean.Meta.canUnfoldAtMatcher","line":433,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.canUnfoldAtMatcher","doc":"The \"match\" compiler uses `if-then-else` expressions and other auxiliary declarations to compile match-expressions such as\n```\nmatch v with\n| 'a' => 1\n| 'b' => 2\n| _   => 3\n```\nbecause it is more efficient than using `casesOn` recursors.\nThe method `reduceMatcher?` fails if these auxiliary definitions (e.g., `ite`) cannot be unfolded in the current\ntransparency setting. This is problematic because tactics such as `simp` use `TransparencyMode.reducible`, and\nmost users assume that expressions such as\n```\nmatch 0 with\n| 0 => 1\n| 100 => 2\n| _ => 3\n```\nshould reduce in any transparency mode.\nThus, we define a custom `canUnfoldAtMatcher` predicate for `whnfMatcher`.\n\nThis solution is not very modular because modifications at the `match` compiler require changes here.\nWe claim this is defensible because it is reducing the auxiliary declaration defined by the `match` compiler.\n\nAlternative solution: tactics that use `TransparencyMode.reducible` should rely on the equations we generated for match-expressions.\nThis solution is also not perfect because the match-expression above will not reduce during type checking when we are not using\n`TransparencyMode.default` or `TransparencyMode.all`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.canUnfoldAtMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">canUnfoldAtMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cfg : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.Config\">Lean.Meta.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(info : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L403-L403","name":"Lean.Meta.ReduceMatcherResult.partialApp","line":403,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.partialApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.partialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">partialApp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L402-L402","name":"Lean.Meta.ReduceMatcherResult.notMatcher","line":402,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.notMatcher","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.notMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">notMatcher</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L401-L401","name":"Lean.Meta.ReduceMatcherResult.stuck","line":401,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.stuck","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.stuck\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">stuck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L400-L400","name":"Lean.Meta.ReduceMatcherResult.reduced","line":400,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.reduced","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult.reduced\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span>.<span class=\"name\">reduced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\">Lean.Meta.ReduceMatcherResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L399-L403","name":"Lean.Meta.ReduceMatcherResult","line":399,"kind":"inductive","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ReduceMatcherResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ReduceMatcherResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L357-L381","name":"Lean.Meta.whnfEasyCases","line":357,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.whnfEasyCases","doc":"Auxiliary combinator for handling easy WHNF cases. It takes a function for handling the \"hard\" cases as an argument "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.whnfEasyCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whnfEasyCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(config : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>\n  <span class=\"fn\">{ <span class=\"fn\">iota</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">beta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">proj</span> := <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\">Lean.Meta.ProjReductionKind.yesWithDelta</a>, <span class=\"fn\">zeta</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L354-L354","name":"Lean.Meta.WhnfCoreConfig.zeta","line":354,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.zeta","doc":"Zeta reduction.\nIt includes two kinds of reduction:\n- `let x := v; e[x]` reduces to `e[v]`.\n- Given a local context containing entry `x : t := e`, free variable `x` reduces to `e`.\n\nWe say a let-declaration `let x := v; e` is non dependent if it is equivalent to `(fun x => e) v`.\nRecall that\n```\nfun x : BitVec 5 => let n := 5; fun y : BitVec n => x = y\n```\nis type correct, but\n```\nfun x : BitVec 5 => (fun n => fun y : BitVec n => x = y) 5\n```\nis not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">WhnfCoreConfig</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L336-L336","name":"Lean.Meta.WhnfCoreConfig.proj","line":336,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.proj","doc":"Control projection reduction at `whnfCore`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">WhnfCoreConfig</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L334-L334","name":"Lean.Meta.WhnfCoreConfig.beta","line":334,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.beta","doc":"If `true`, reduce terms such as `(fun x => t[x]) a` into `t[a]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">WhnfCoreConfig</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L332-L332","name":"Lean.Meta.WhnfCoreConfig.iota","line":332,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.iota","doc":"If `true`, reduce recursor/matcher applications, e.g., `Nat.rec true (fun _ _ => false) Nat.zero` reduces to `true` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">WhnfCoreConfig</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L330-L330","name":"Lean.Meta.WhnfCoreConfig.mk","line":330,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">WhnfCoreConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(iota : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(beta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proj : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zeta : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L330-L354","name":"Lean.Meta.WhnfCoreConfig","line":330,"kind":"structure","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig","doc":"Configuration options for `whnfEasyCases` and `whnfCore`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">WhnfCoreConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L325-L325","name":"Lean.Meta.instReprProjReductionKind","line":325,"kind":"instance","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.instReprProjReductionKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.instReprProjReductionKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprProjReductionKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L325-L325","name":"Lean.Meta.instInhabitedProjReductionKind","line":325,"kind":"instance","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.instInhabitedProjReductionKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.instInhabitedProjReductionKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedProjReductionKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L325-L325","name":"Lean.Meta.instDecidableEqProjReductionKind","line":325,"kind":"instance","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.instDecidableEqProjReductionKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.instDecidableEqProjReductionKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instDecidableEqProjReductionKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L320-L324","name":"Lean.Meta.ProjReductionKind.yesWithDelta","line":320,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta","doc":"Projections `s.i` are reduced at `whnfCore`, and `whnf` is used at `s` during the process.\nRecall that `whnfCore` does not perform `delta` reduction (i.e., it will not unfold constant declarations), but `whnf` does.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yesWithDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ProjReductionKind</span>.<span class=\"name\">yesWithDelta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L315-L319","name":"Lean.Meta.ProjReductionKind.yes","line":315,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yes","doc":"Projections `s.i` are reduced at `whnfCore`, and `whnfCore` is used at `s` during the process.\nRecall that `whnfCore` does not perform `delta` reduction (i.e., it will not unfold constant declarations).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.yes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ProjReductionKind</span>.<span class=\"name\">yes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L313-L314","name":"Lean.Meta.ProjReductionKind.no","line":313,"kind":"ctor","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.no","doc":"Projections `s.i` are not reduced at `whnfCore`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind.no\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ProjReductionKind</span>.<span class=\"name\">no</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\">Lean.Meta.ProjReductionKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L312-L325","name":"Lean.Meta.ProjReductionKind","line":312,"kind":"inductive","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind","doc":"Configuration for projection reduction. See `whnfCore`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.ProjReductionKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ProjReductionKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L256-L302","name":"Lean.Meta.getStuckMVar?","line":256,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.getStuckMVar?","doc":"Return `some (Expr.mvar mvarId)` if metavariable `mvarId` is blocking reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.getStuckMVar?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getStuckMVar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L116-L121","name":"Lean.Meta.mkProjFn","line":116,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.mkProjFn","doc":"Create the `i`th projection `major`. It tries to use the auto-generated projection functions if available. Otherwise falls back\nto `Expr.proj`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.mkProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ctorVal : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">Lean.ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(major : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L58-L60","name":"Lean.Meta.isAuxDef","line":58,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.isAuxDef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.isAuxDef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isAuxDef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L51-L52","name":"Lean.Meta.smartUnfoldingMatchAlt?","line":51,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatchAlt?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatchAlt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingMatchAlt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L48-L49","name":"Lean.Meta.markSmartUnfoldingMatchAlt","line":48,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatchAlt","doc":"Add auxiliary annotation to indicate expression `e` (a `match` alternative rhs) was successfully reduced by smart unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatchAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">markSmartUnfoldingMatchAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L44-L45","name":"Lean.Meta.smartUnfoldingMatch?","line":44,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatch?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingMatch?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingMatch?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L41-L42","name":"Lean.Meta.markSmartUnfoldingMatch","line":41,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatch","doc":"Add auxiliary annotation to indicate the `match`-expression `e` must be reduced when performing smart unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.markSmartUnfoldingMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">markSmartUnfoldingMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L35-L38","name":"Lean.Meta.smartUnfolding","line":35,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfolding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfolding\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfolding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L32-L33","name":"Lean.Meta.hasSmartUnfoldingDecl","line":32,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.hasSmartUnfoldingDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.hasSmartUnfoldingDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">hasSmartUnfoldingDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L29-L30","name":"Lean.Meta.mkSmartUnfoldingNameFor","line":29,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.mkSmartUnfoldingNameFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.mkSmartUnfoldingNameFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkSmartUnfoldingNameFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L27-L27","name":"Lean.Meta.smartUnfoldingSuffix","line":27,"kind":"def","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.smartUnfoldingSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">smartUnfoldingSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/WHNF.lean#L25-L25","name":"Lean.Meta.getStructuralRecArgPos?","line":25,"kind":"opaque","docLink":"./Lean/Meta/WHNF.html#Lean.Meta.getStructuralRecArgPos?","doc":"Forward declaration. It is defined in the module `src/Lean/Elab/PreDefinition/Structural/Eqns.lean`.\nIt is possible to avoid this hack if we move `Structural.EqnInfo` and `Structural.eqnInfoExt`\nto this module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/WHNF.html#Lean.Meta.getStructuralRecArgPos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getStructuralRecArgPos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span></div></div>"}]}