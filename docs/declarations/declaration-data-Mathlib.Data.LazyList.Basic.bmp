{"name":"Mathlib.Data.LazyList.Basic","instances":[{"typeNames":["Eq"],"name":"LazyList.decidableEq","className":"Decidable"},{"typeNames":["LazyList"],"name":"LazyList.instTraversableLazyList","className":"Traversable"},{"typeNames":["LazyList"],"name":"LazyList.instLawfulTraversableLazyListInstTraversableLazyList","className":"LawfulTraversable"},{"typeNames":["LazyList"],"name":"LazyList.instMonadLazyList","className":"Monad"},{"typeNames":["LazyList"],"name":"LazyList.instLawfulMonadLazyListInstMonadLazyList","className":"LawfulMonad"},{"typeNames":["LazyList"],"name":"LazyList.instMembershipLazyList","className":"Membership"},{"typeNames":["Membership.mem"],"name":"LazyList.Mem.decidable","className":"Decidable"},{"typeNames":["LazyList"],"name":"LazyList.instReprLazyList","className":"Repr"}],"imports":["Init","Mathlib.Control.Traversable.Equiv","Mathlib.Control.Traversable.Instances","Mathlib.Data.LazyList","Mathlib.Lean.Thunk"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L263-L264","name":"LazyList.instReprLazyList","line":263,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instReprLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instReprLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">instReprLazyList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L259-L260","name":"LazyList.attach","line":259,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.attach","doc":"\"Attach\" the proof that the elements of `l` are in `l` to produce a new `LazyList`\nwith the same elements but in the type `{x // x ∈ l}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.attach\"><span class=\"name\">LazyList</span>.<span class=\"name\">attach</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">{ <span class=\"fn\">x</span> : <span class=\"fn\">α</span> // <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L251-L254","name":"LazyList.pmap","line":251,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.pmap","doc":"Partial map. If `f : ∀ a, p a → β` is a partial function defined on\n`a : α` satisfying `p`, then `pmap f l h` is essentially the same as `map f l`\nbut is defined only when all members of `l` satisfy `p`, using the proof\nto apply `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.pmap\"><span class=\"name\">LazyList</span>.<span class=\"name\">pmap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">a</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L238-L240","name":"LazyList.forall_mem_cons","line":238,"kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.forall_mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.forall_mem_cons\"><span class=\"name\">LazyList</span>.<span class=\"name\">forall_mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.cons\">LazyList.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Init/Core.html#Thunk.get\">Thunk.get</a> <span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L233-L235","name":"LazyList.mem_cons","line":233,"kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.mem_cons\"><span class=\"name\">LazyList</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.cons\">LazyList.cons</a> <span class=\"fn\">y</span> <span class=\"fn\">ys</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Core.html#Thunk.get\">Thunk.get</a> <span class=\"fn\">ys</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L228-L229","name":"LazyList.mem_nil","line":228,"kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.mem_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.mem_nil\"><span class=\"name\">LazyList</span>.<span class=\"name\">mem_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">LazyList.nil</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L212-L224","name":"LazyList.Mem.decidable","line":212,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.Mem.decidable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.Mem.decidable\"><span class=\"name\">LazyList</span>.<span class=\"name\">Mem</span>.<span class=\"name\">decidable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L209-L210","name":"LazyList.instMembershipLazyList","line":209,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instMembershipLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instMembershipLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">instMembershipLazyList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L204-L206","name":"LazyList.Mem","line":204,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.Mem","doc":"Membership in lazy lists "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.Mem\"><span class=\"name\">LazyList</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L198-L200","name":"LazyList.mfirst","line":198,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.mfirst","doc":"Try applying function `f` to every element of a `LazyList` and\nreturn the result of the first attempt that succeeds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.mfirst\"><span class=\"name\">LazyList</span>.<span class=\"name\">mfirst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L170-L193","name":"LazyList.instLawfulMonadLazyListInstMonadLazyList","line":170,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulMonadLazyListInstMonadLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulMonadLazyListInstMonadLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">instLawfulMonadLazyListInstMonadLazyList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L159-L167","name":"LazyList.append_bind","line":159,"kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.append_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.append_bind\"><span class=\"name\">LazyList</span>.<span class=\"name\">append_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.bind\">LazyList.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.append\">LazyList.append</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.append\">LazyList.append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.bind\">LazyList.bind</a> <span class=\"fn\">xs</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.bind\">LazyList.bind</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Thunk.get\">Thunk.get</a> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">f</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L150-L155","name":"LazyList.append_assoc","line":150,"kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.append_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.append_assoc\"><span class=\"name\">LazyList</span>.<span class=\"name\">append_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zs : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.append\">LazyList.append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.append\">LazyList.append</a> <span class=\"fn\">xs</span> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">ys</span></span> }</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">zs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.append\">LazyList.append</a> <span class=\"fn\">xs</span> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.append\">LazyList.append</a> <span class=\"fn\">ys</span> <span class=\"fn\">{ <span class=\"fn\">fn</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">zs</span></span> }</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L143-L147","name":"LazyList.append_nil","line":143,"kind":"theorem","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.append_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.append_nil\"><span class=\"name\">LazyList</span>.<span class=\"name\">append_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList.append\">LazyList.append</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Thunk.pure\">Thunk.pure</a> <span class=\"fn\">LazyList.nil</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L138-L140","name":"LazyList.instMonadLazyList","line":138,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instMonadLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instMonadLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">instMonadLazyList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L134-L135","name":"LazyList.reverse","line":134,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.reverse","doc":"Reverse the order of a `LazyList`.\nIt is done by converting to a `List` first because reversal involves evaluating all\nthe list and if the list is all evaluated, `List` is a better representation for\nit than a series of thunks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.reverse\"><span class=\"name\">LazyList</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L125-L127","name":"LazyList.bind","line":125,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.bind","doc":"Monadic bind operation for `LazyList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.bind\"><span class=\"name\">LazyList</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L119-L121","name":"LazyList.interleaveAll","line":119,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.interleaveAll","doc":"`interleaveAll (xs::ys::zs::xss)` creates a list where elements of `xs`, `ys`\nand `zs` and the rest alternate. Every other element of the resulting list is taken from\n`xs`, every fourth is taken from `ys`, every eighth is taken from `zs` and so on. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.interleaveAll\"><span class=\"name\">LazyList</span>.<span class=\"name\">interleaveAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L109-L113","name":"LazyList.interleave","line":109,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.interleave","doc":"`interleave xs ys` creates a list where elements of `xs` and `ys` alternate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.interleave\"><span class=\"name\">LazyList</span>.<span class=\"name\">interleave</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L103-L105","name":"LazyList.find","line":103,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.find","doc":"Return the first object contained in the list that satisfies\npredicate `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.find\"><span class=\"name\">LazyList</span>.<span class=\"name\">find</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L92-L98","name":"LazyList.init","line":92,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.init","doc":"`init xs`, if `xs` non-empty, drops the last element of the list.\nOtherwise, return the empty list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.init\"><span class=\"name\">LazyList</span>.<span class=\"name\">init</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L69-L88","name":"LazyList.instLawfulTraversableLazyListInstTraversableLazyList","line":69,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulTraversableLazyListInstTraversableLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instLawfulTraversableLazyListInstTraversableLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">instLawfulTraversableLazyListInstTraversableLazyList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L65-L67","name":"LazyList.instTraversableLazyList","line":65,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.instTraversableLazyList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.instTraversableLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">instTraversableLazyList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L59-L62","name":"LazyList.traverse","line":59,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.traverse","doc":"Traversal of lazy lists using an applicative effect. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.traverse\"><span class=\"name\">LazyList</span>.<span class=\"name\">traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L46-L56","name":"LazyList.decidableEq","line":46,"kind":"instance","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.decidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.decidableEq\"><span class=\"name\">LazyList</span>.<span class=\"name\">decidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/LazyList/Basic.lean#L29-L42","name":"LazyList.listEquivLazyList","line":29,"kind":"def","docLink":"./Mathlib/Data/LazyList/Basic.html#LazyList.listEquivLazyList","doc":"Isomorphism between strict and lazy lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/LazyList/Basic.html#LazyList.listEquivLazyList\"><span class=\"name\">LazyList</span>.<span class=\"name\">listEquivLazyList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Data/LazyList.html#LazyList\">LazyList</a> <span class=\"fn\">α</span></span></span></div></div>"}]}