{"name":"Mathlib.CategoryTheory.Filtered.Small","instances":[{"typeNames":["CategoryTheory.FullSubcategory"],"name":"CategoryTheory.IsFiltered.instIsFilteredOrEmptyFullSubcategoryFilteredClosureCategory","className":"CategoryTheory.IsFilteredOrEmpty"},{"typeNames":["CategoryTheory.FullSubcategory"],"name":"CategoryTheory.IsFiltered.instEssentiallySmallFullSubcategoryFilteredClosureCategory","className":"CategoryTheory.EssentiallySmall"},{"typeNames":["CategoryTheory.IsFiltered.SmallFilteredIntermediate"],"name":"CategoryTheory.IsFiltered.instSmallCategorySmallFilteredIntermediate","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion"],"name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFaithfulSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion","className":"CategoryTheory.Faithful"},{"typeNames":["CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion"],"name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFullSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion","className":"CategoryTheory.Full"},{"typeNames":["CategoryTheory.IsFiltered.SmallFilteredIntermediate"],"name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredOrEmptySmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate","className":"CategoryTheory.IsFilteredOrEmpty"},{"typeNames":["CategoryTheory.IsFiltered.SmallFilteredIntermediate"],"name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate","className":"CategoryTheory.IsFiltered"},{"typeNames":["CategoryTheory.FullSubcategory"],"name":"CategoryTheory.IsCofiltered.instIsCofilteredOrEmptyFullSubcategoryCofilteredClosureCategory","className":"CategoryTheory.IsCofilteredOrEmpty"},{"typeNames":["CategoryTheory.FullSubcategory"],"name":"CategoryTheory.IsCofiltered.instEssentiallySmallFullSubcategoryCofilteredClosureCategory","className":"CategoryTheory.EssentiallySmall"},{"typeNames":["CategoryTheory.IsCofiltered.SmallCofilteredIntermediate"],"name":"CategoryTheory.IsCofiltered.instSmallCategorySmallCofilteredIntermediate","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion"],"name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFaithfulSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion","className":"CategoryTheory.Faithful"},{"typeNames":["CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion"],"name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFullSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion","className":"CategoryTheory.Full"},{"typeNames":["CategoryTheory.IsCofiltered.SmallCofilteredIntermediate"],"name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredOrEmptySmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate","className":"CategoryTheory.IsCofilteredOrEmpty"},{"typeNames":["CategoryTheory.IsCofiltered.SmallCofilteredIntermediate"],"name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate","className":"CategoryTheory.IsCofiltered"}],"imports":["Init","Mathlib.CategoryTheory.EssentiallySmall","Mathlib.CategoryTheory.Filtered.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L292-L294","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate","line":292,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span>.<span class=\"name\">instIsCofilteredSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered\">CategoryTheory.IsCofiltered</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L289-L290","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredOrEmptySmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate","line":289,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredOrEmptySmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instIsCofilteredOrEmptySmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span>.<span class=\"name\">instIsCofilteredOrEmptySmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L286-L287","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoringCompInclusion","line":286,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoringCompInclusion","doc":"The factorization through a small filtered category is in fact a factorization, up to natural\nisomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoringCompInclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span>.<span class=\"name\">factoringCompInclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoring\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoring</a> <span class=\"fn\">F</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion</a> <span class=\"fn\">F</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L281-L282","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFullSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion","line":281,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFullSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFullSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span>.<span class=\"name\">instFullSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L278-L279","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFaithfulSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion","line":278,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFaithfulSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.instFaithfulSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span>.<span class=\"name\">instFaithfulSmallCofilteredIntermediateInstSmallCategorySmallCofilteredIntermediateInclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L275-L276","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion","line":275,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion","doc":"The second, fully faithful part of a factoring of a functor from a small category to a filtered\ncategory through a small filtered category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.inclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span>.<span class=\"name\">inclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L270-L271","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoring","line":270,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoring","doc":"The first part of a factoring of a functor from a small category to a cofiltered category\nthrough a small filtered category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate.factoring\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span>.<span class=\"name\">factoring</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L263-L264","name":"CategoryTheory.IsCofiltered.instSmallCategorySmallCofilteredIntermediate","line":263,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.instSmallCategorySmallCofilteredIntermediate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.instSmallCategorySmallCofilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">instSmallCategorySmallCofilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate\">CategoryTheory.IsCofiltered.SmallCofilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L260-L261","name":"CategoryTheory.IsCofiltered.SmallCofilteredIntermediate","line":260,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate","doc":"Every functor from a small category to a cofiltered category factors fully faithfully through a\nsmall cofiltered category. This is that category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.SmallCofilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">SmallCofilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u₁ v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L246-L250","name":"CategoryTheory.IsCofiltered.instEssentiallySmallFullSubcategoryCofilteredClosureCategory","line":246,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.instEssentiallySmallFullSubcategoryCofilteredClosureCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.instEssentiallySmallFullSubcategoryCofilteredClosureCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">instEssentiallySmallFullSubcategoryCofilteredClosureCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EssentiallySmall.html#CategoryTheory.EssentiallySmall\">CategoryTheory.EssentiallySmall.{max v w, v, u}</a>           \n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.FullSubcategory\">CategoryTheory.FullSubcategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L226-L244","name":"CategoryTheory.IsCofiltered.small_fullSubcategory_cofilteredClosure","line":226,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.small_fullSubcategory_cofilteredClosure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.small_fullSubcategory_cofilteredClosure\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">small_fullSubcategory_cofilteredClosure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{max v w, u}</a>         <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.FullSubcategory\">CategoryTheory.FullSubcategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L184-L188","name":"CategoryTheory.IsCofiltered.instIsCofilteredOrEmptyFullSubcategoryCofilteredClosureCategory","line":184,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.instIsCofilteredOrEmptyFullSubcategoryCofilteredClosureCategory","doc":"The full subcategory induced by the cofiltered closure of a family is cofiltered. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.instIsCofilteredOrEmptyFullSubcategoryCofilteredClosureCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">instIsCofilteredOrEmptyFullSubcategoryCofilteredClosureCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.FullSubcategory\">CategoryTheory.FullSubcategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L180-L181","name":"CategoryTheory.IsCofiltered.CofilteredClosure.eq","line":180,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure.eq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">CofilteredClosure</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j' : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j'</span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">f_1 </span>f' : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j'</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered.eq\">CategoryTheory.IsCofiltered.eq</a> <span class=\"fn\">f_1</span> <span class=\"fn\">f'</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L179-L179","name":"CategoryTheory.IsCofiltered.CofilteredClosure.min","line":179,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure.min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure.min\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">CofilteredClosure</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j' : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j'</span></span> →\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofiltered.min\">CategoryTheory.IsCofiltered.min</a> <span class=\"fn\">j</span> <span class=\"fn\">j'</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L178-L178","name":"CategoryTheory.IsCofiltered.CofilteredClosure.base","line":178,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure.base","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure.base\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">CofilteredClosure</span>.<span class=\"name\">base</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\">CategoryTheory.IsCofiltered.CofilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L177-L181","name":"CategoryTheory.IsCofiltered.CofilteredClosure","line":177,"kind":"inductive","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure","doc":"The \"cofiltered closure\" of an `α`-indexed family of objects in `C` is the set of objects in `C`\nobtained by starting with the family and successively adding minima and equalizers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsCofiltered.CofilteredClosure\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsCofiltered</span>.<span class=\"name\">CofilteredClosure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsCofilteredOrEmpty\">CategoryTheory.IsCofilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L159-L161","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate","line":159,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span>.<span class=\"name\">instIsFilteredSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFiltered\">CategoryTheory.IsFiltered</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate\">CategoryTheory.IsFiltered.SmallFilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L156-L157","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredOrEmptySmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate","line":156,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredOrEmptySmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instIsFilteredOrEmptySmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span>.<span class=\"name\">instIsFilteredOrEmptySmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate\">CategoryTheory.IsFiltered.SmallFilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L153-L154","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoringCompInclusion","line":153,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoringCompInclusion","doc":"The factorization through a small filtered category is in fact a factorization, up to natural\nisomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoringCompInclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span>.<span class=\"name\">factoringCompInclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoring\">CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoring</a> <span class=\"fn\">F</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion\">CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion</a> <span class=\"fn\">F</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L148-L149","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFullSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion","line":148,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFullSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFullSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span>.<span class=\"name\">instFullSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion\">CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L145-L146","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFaithfulSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion","line":145,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFaithfulSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.instFaithfulSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span>.<span class=\"name\">instFaithfulSmallFilteredIntermediateInstSmallCategorySmallFilteredIntermediateInclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion\">CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L142-L143","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion","line":142,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion","doc":"The second, fully faithful part of a factoring of a functor from a small category to a filtered\ncategory through a small filtered category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.inclusion\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span>.<span class=\"name\">inclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate\">CategoryTheory.IsFiltered.SmallFilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L137-L138","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoring","line":137,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoring","doc":"The first part of a factoring of a functor from a small category to a filtered category through\na small filtered category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate.factoring\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span>.<span class=\"name\">factoring</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate\">CategoryTheory.IsFiltered.SmallFilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L130-L131","name":"CategoryTheory.IsFiltered.instSmallCategorySmallFilteredIntermediate","line":130,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.instSmallCategorySmallFilteredIntermediate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.instSmallCategorySmallFilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">instSmallCategorySmallFilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate\">CategoryTheory.IsFiltered.SmallFilteredIntermediate</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L127-L128","name":"CategoryTheory.IsFiltered.SmallFilteredIntermediate","line":127,"kind":"def","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate","doc":"Every functor from a small category to a filtered category factors fully faithfully through a\nsmall filtered category. This is that category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.SmallFilteredIntermediate\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">SmallFilteredIntermediate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u₁ v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L114-L117","name":"CategoryTheory.IsFiltered.instEssentiallySmallFullSubcategoryFilteredClosureCategory","line":114,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.instEssentiallySmallFullSubcategoryFilteredClosureCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.instEssentiallySmallFullSubcategoryFilteredClosureCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">instEssentiallySmallFullSubcategoryFilteredClosureCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EssentiallySmall.html#CategoryTheory.EssentiallySmall\">CategoryTheory.EssentiallySmall.{max v w, v, u}</a>           \n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.FullSubcategory\">CategoryTheory.FullSubcategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L94-L112","name":"CategoryTheory.IsFiltered.small_fullSubcategory_filteredClosure","line":94,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.small_fullSubcategory_filteredClosure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.small_fullSubcategory_filteredClosure\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">small_fullSubcategory_filteredClosure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{max v w, u}</a>         <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.FullSubcategory\">CategoryTheory.FullSubcategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L39-L43","name":"CategoryTheory.IsFiltered.instIsFilteredOrEmptyFullSubcategoryFilteredClosureCategory","line":39,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.instIsFilteredOrEmptyFullSubcategoryFilteredClosureCategory","doc":"The full subcategory induced by the filtered closure of a family of objects is filtered. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.instIsFilteredOrEmptyFullSubcategoryFilteredClosureCategory\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">instIsFilteredOrEmptyFullSubcategoryFilteredClosureCategory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.FullSubcategory\">CategoryTheory.FullSubcategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L35-L36","name":"CategoryTheory.IsFiltered.FilteredClosure.coeq","line":35,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure.coeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure.coeq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">FilteredClosure</span>.<span class=\"name\">coeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j' : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j'</span></span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">f_1 </span>f' : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">j'</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFiltered.coeq\">CategoryTheory.IsFiltered.coeq</a> <span class=\"fn\">f_1</span> <span class=\"fn\">f'</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L34-L34","name":"CategoryTheory.IsFiltered.FilteredClosure.max","line":34,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure.max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure.max\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">FilteredClosure</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j' : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">j'</span></span> →\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFiltered.max\">CategoryTheory.IsFiltered.max</a> <span class=\"fn\">j</span> <span class=\"fn\">j'</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L33-L33","name":"CategoryTheory.IsFiltered.FilteredClosure.base","line":33,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure.base","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure.base\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">FilteredClosure</span>.<span class=\"name\">base</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\">CategoryTheory.IsFiltered.FilteredClosure</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Filtered/Small.lean#L32-L36","name":"CategoryTheory.IsFiltered.FilteredClosure","line":32,"kind":"inductive","docLink":"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure","doc":"The \"filtered closure\" of an `α`-indexed family of objects in `C` is the set of objects in `C`\nobtained by starting with the family and successively adding maxima and coequalizers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Filtered/Small.html#CategoryTheory.IsFiltered.FilteredClosure\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsFiltered</span>.<span class=\"name\">FilteredClosure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a>    <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFilteredOrEmpty\">CategoryTheory.IsFilteredOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}