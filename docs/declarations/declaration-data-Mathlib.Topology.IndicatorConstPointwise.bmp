{"name":"Mathlib.Topology.IndicatorConstPointwise","instances":[],"imports":["Init","Mathlib.Algebra.Function.Indicator","Mathlib.Topology.Separation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/IndicatorConstPointwise.lean#L118-L123","name":"tendsto_indicator_const_iff_tendsto_pi_pure","line":118,"kind":"theorem","docLink":"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_tendsto_pi_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_tendsto_pi_pure\"><span class=\"name\">tendsto_indicator_const_iff_tendsto_pi_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{As : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T1Space\">T1Space</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span></span>)</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">A</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">As</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Pi.html#Filter.pi\">Filter.pi</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span>)</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/IndicatorConstPointwise.lean#L110-L116","name":"tendsto_indicator_const_iff_tendsto_pi_pure'","line":110,"kind":"theorem","docLink":"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_tendsto_pi_pure'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_tendsto_pi_pure'\"><span class=\"name\">tendsto_indicator_const_iff_tendsto_pi_pure'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{As : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nhd_b : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">0</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nhd_o : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">b</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span></span>)</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">A</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">As</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Pi.html#Filter.pi\">Filter.pi</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span>)</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/IndicatorConstPointwise.lean#L103-L108","name":"tendsto_indicator_const_iff_forall_eventually","line":103,"kind":"theorem","docLink":"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_forall_eventually","doc":"The indicator functions of `Asᵢ` tend to the indicator function of `A` pointwise if and only if\nfor every `x`, we eventually have the equivalence `x ∈ Asᵢ ↔ x ∈ A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_forall_eventually\"><span class=\"name\">tendsto_indicator_const_iff_forall_eventually</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{As : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T1Space\">T1Space</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span></span>)</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">A</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∀ᶠ (i : <span class=\"fn\">ι</span>) in <span class=\"fn\">L</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/IndicatorConstPointwise.lean#L93-L99","name":"tendsto_indicator_const_apply_iff_eventually","line":93,"kind":"theorem","docLink":"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_apply_iff_eventually","doc":"The indicator functions of `Asᵢ` evaluated at `x` tend to the indicator function of `A`\nevaluated at `x` if and only if we eventually have the equivalence `x ∈ Asᵢ ↔ x ∈ A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_apply_iff_eventually\"><span class=\"name\">tendsto_indicator_const_apply_iff_eventually</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{As : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T1Space\">T1Space</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">L</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ᶠ (i : <span class=\"fn\">ι</span>) in <span class=\"fn\">L</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/IndicatorConstPointwise.lean#L83-L89","name":"tendsto_indicator_const_iff_forall_eventually'","line":83,"kind":"theorem","docLink":"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_forall_eventually'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_iff_forall_eventually'\"><span class=\"name\">tendsto_indicator_const_iff_forall_eventually'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{As : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nhd_b : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">0</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nhd_o : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">b</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span></span>)</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">A</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">∀ᶠ (i : <span class=\"fn\">ι</span>) in <span class=\"fn\">L</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/IndicatorConstPointwise.lean#L69-L81","name":"tendsto_indicator_const_apply_iff_eventually'","line":69,"kind":"theorem","docLink":"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_apply_iff_eventually'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_indicator_const_apply_iff_eventually'\"><span class=\"name\">tendsto_indicator_const_apply_iff_eventually'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{As : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nhd_b : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">0</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nhd_o : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">b</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">L</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Function/Indicator.html#Set.indicator\">Set.indicator</a> <span class=\"fn\">A</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ᶠ (i : <span class=\"fn\">ι</span>) in <span class=\"fn\">L</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">As</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">A</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/IndicatorConstPointwise.lean#L39-L67","name":"tendsto_ite","line":39,"kind":"theorem","docLink":"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/IndicatorConstPointwise.html#tendsto_ite\"><span class=\"name\">tendsto_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(haG : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">a</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbF : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">b</span>}</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(haF : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.principal\">Filter.principal</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hbG : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.principal\">Filter.principal</a> <span class=\"fn\">{<span class=\"fn\">b</span>}</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span></span>)</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\">q</span> then <span class=\"fn\">F</span> else <span class=\"fn\">G</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ᶠ (i : <span class=\"fn\">ι</span>) in <span class=\"fn\">L</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span></span></span></span></div></div>"}]}