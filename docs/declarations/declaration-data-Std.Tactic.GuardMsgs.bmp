{"name":"Std.Tactic.GuardMsgs","instances":[{"typeNames":["Std.Tactic.GuardMsgs.GuardMsgFailure"],"name":"Std.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","className":"TypeName"}],"imports":["Init","Lean.Elab.Command","Std.CodeAction.Basic","Std.Lean.Position"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L166-L195","name":"Std.Tactic.GuardMsgs.guardMsgsCodeAction","line":166,"kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsCodeAction","doc":"A code action which will update the doc comment on a `#guard_msgs` invocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsCodeAction\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">guardMsgsCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/CodeAction/Attr.html#Std.CodeAction.CommandCodeAction\">Std.CodeAction.CommandCodeAction</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L136-L136","name":"Std.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","line":136,"kind":"instance","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.instTypeNameGuardMsgFailure\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">instTypeNameGuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure\">Std.Tactic.GuardMsgs.GuardMsgFailure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L135-L135","name":"Std.Tactic.GuardMsgs.GuardMsgFailure.res","line":135,"kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure.res","doc":"The result of the nested command "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure.res\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">res</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure\">Std.Tactic.GuardMsgs.GuardMsgFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L133-L133","name":"Std.Tactic.GuardMsgs.GuardMsgFailure.mk","line":133,"kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(res : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure\">Std.Tactic.GuardMsgs.GuardMsgFailure</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L133-L136","name":"Std.Tactic.GuardMsgs.GuardMsgFailure","line":133,"kind":"structure","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure","doc":"An info tree node corresponding to a failed `#guard_msgs` invocation,\nused for code action support. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.GuardMsgFailure\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L108-L129","name":"Std.Tactic.GuardMsgs.parseGuardMsgsSpec","line":108,"kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.parseGuardMsgsSpec","doc":"Parses a `guardMsgsSpec`.\n- No specification: check everything.\n- With a specification: interpret the spec, and if nothing applies pass it through. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.parseGuardMsgsSpec\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsSpec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(spec? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Std.Tactic.GuardMsgs.guardMsgsSpec</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a> â†’ <a href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult\">Std.Tactic.GuardMsgs.SpecResult</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L102-L103","name":"Std.Tactic.GuardMsgs.SpecResult.passthrough","line":102,"kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.passthrough","doc":"Do not capture the message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.passthrough\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span>.<span class=\"name\">passthrough</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult\">Std.Tactic.GuardMsgs.SpecResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L100-L101","name":"Std.Tactic.GuardMsgs.SpecResult.drop","line":100,"kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.drop","doc":"Drop the message and delete it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.drop\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult\">Std.Tactic.GuardMsgs.SpecResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L98-L99","name":"Std.Tactic.GuardMsgs.SpecResult.check","line":98,"kind":"ctor","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.check","doc":"Capture the message and check it matches the docstring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult.check\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult\">Std.Tactic.GuardMsgs.SpecResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L97-L103","name":"Std.Tactic.GuardMsgs.SpecResult","line":97,"kind":"inductive","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult","doc":"The decision made by a specification for a message. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.SpecResult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">SpecResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L26-L80","name":"Std.Tactic.GuardMsgs.guardMsgsCmd","line":26,"kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsCmd","doc":"`#guard_msgs` captures the messages generated by another command and checks that they\nmatch the contents of the docstring attached to the `#guard_msgs` command.\n\nBasic example:\n```lean\n/--\nerror: unknown identifier 'x'\n-/\n#guard_msgs in\nexample : Î± := x\n```\nThis checks that there is such an error and then consumes the message entirely.\n\nBy default, the command intercepts all messages, but there is a way to specify which types\nof messages to consider. For example, we can select only warnings:\n```lean\n/--\nwarning: declaration uses 'sorry'\n-/\n#guard_msgs(warning) in\nexample : Î± := sorry\n```\nor only errors\n```lean\n#guard_msgs(error) in\nexample : Î± := sorry\n```\nIn this last example, since the message is not intercepted there is a warning on `sorry`.\nWe can drop the warning completely with\n```lean\n#guard_msgs(error, drop warning) in\nexample : Î± := sorry\n```\n\nSyntax description:\n```\n#guard_msgs (drop? info|warning|error|all,*)? in cmd\n```\n\nIf there is no specification, `#guard_msgs` intercepts all messages.\nOtherwise, if there is one, the specification is considered in left-to-right order, and the first\nthat applies chooses the outcome of the message:\n- `info`, `warning`, `error`: intercept a message with the given severity level.\n- `all`: intercept any message (so `#guard_msgs in cmd` and `#guard_msgs (all) in cmd`\n  are equivalent).\n- `drop info`, `drop warning`, `drop error`: intercept a message with the given severity\n  level and then drop it. These messages are not checked.\n- `drop all`: intercept a message and drop it.\n\nFor example, `#guard_msgs (error, drop all) in cmd` means to check warnings and then drop\neverything else.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsCmd\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">guardMsgsCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L23-L24","name":"Std.Tactic.GuardMsgs.guardMsgsSpec","line":23,"kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsSpec","doc":"Specification for `#guard_msgs` command. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsSpec\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">guardMsgsSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/GuardMsgs.lean#L20-L21","name":"Std.Tactic.GuardMsgs.guardMsgsSpecElt","line":20,"kind":"def","docLink":"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsSpecElt","doc":"Element that can be part of a `#guard_msgs` specification. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/GuardMsgs.html#Std.Tactic.GuardMsgs.guardMsgsSpecElt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">guardMsgsSpecElt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}