{"name":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","instances":[{"typeNames":["MeasureTheory.ProbabilityMeasure"],"name":"MeasureTheory.ProbabilityMeasure.instInhabitedProbabilityMeasure","className":"Inhabited"},{"typeNames":["MeasureTheory.ProbabilityMeasure","MeasureTheory.Measure"],"name":"MeasureTheory.ProbabilityMeasure.instCoeProbabilityMeasureMeasure","className":"Coe"},{"typeNames":["MeasureTheory.ProbabilityMeasure"],"name":"MeasureTheory.ProbabilityMeasure.instCoeFunProbabilityMeasureForAllSetNNReal","className":"CoeFun"},{"typeNames":["MeasureTheory.ProbabilityMeasure.toMeasure"],"name":"MeasureTheory.ProbabilityMeasure.instIsProbabilityMeasureToMeasure","className":"MeasureTheory.IsProbabilityMeasure"},{"typeNames":["MeasureTheory.ProbabilityMeasure"],"name":"MeasureTheory.ProbabilityMeasure.instTopologicalSpaceProbabilityMeasure","className":"TopologicalSpace"},{"typeNames":["MeasureTheory.ProbabilityMeasure"],"name":"MeasureTheory.ProbabilityMeasure.t2Space","className":"T2Space"}],"imports":["Init","Mathlib.MeasureTheory.Measure.FiniteMeasure","Mathlib.MeasureTheory.Integral.Average"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L580-L583","name":"MeasureTheory.ProbabilityMeasure.continuous_map","line":580,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.continuous_map","doc":"If `f : X → Y` is continuous and `Y` is equipped with the Borel sigma algebra, then\nthe push-forward of probability measures `f* : ProbabilityMeasure X → ProbabilityMeasure Y`\nis continuous (in the topologies of convergence in distribution). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.continuous_map\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">continuous_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_cont : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">ν</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\">MeasureTheory.ProbabilityMeasure.map</a> <span class=\"fn\">ν</span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L565-L575","name":"MeasureTheory.ProbabilityMeasure.tendsto_map_of_tendsto_of_continuous","line":565,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_map_of_tendsto_of_continuous","doc":"If `f : X → Y` is continuous and `Y` is equipped with the Borel sigma algebra, then\nconvergence (in distribution) of `ProbabilityMeasure`s on `X` implies convergence (in\ndistribution) of the push-forwards of these measures by `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_map_of_tendsto_of_continuous\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">tendsto_map_of_tendsto_of_continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(νs : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">νs</span> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">ν</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_cont : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\">MeasureTheory.ProbabilityMeasure.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">νs</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span></span>)</span> <span class=\"fn\">L</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\">MeasureTheory.ProbabilityMeasure.map</a> <span class=\"fn\">ν</span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L554-L557","name":"MeasureTheory.ProbabilityMeasure.map_apply","line":554,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map_apply\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_aemble : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A_mble : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω'</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\">MeasureTheory.ProbabilityMeasure.map</a> <span class=\"fn\">ν</span> <span class=\"fn\">f_aemble</span></span>)</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L548-L552","name":"MeasureTheory.ProbabilityMeasure.map_apply_of_aemeasurable","line":548,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map_apply_of_aemeasurable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map_apply_of_aemeasurable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">map_apply_of_aemeasurable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_aemble : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A_mble : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω'</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\">MeasureTheory.ProbabilityMeasure.map</a> <span class=\"fn\">ν</span> <span class=\"fn\">f_aemble</span></span>)</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L543-L546","name":"MeasureTheory.ProbabilityMeasure.map_apply'","line":543,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map_apply'","doc":"Note that this is an equality of elements of `ℝ≥0∞`. See also\n`MeasureTheory.ProbabilityMeasure.map_apply` for the corresponding equality as elements of `ℝ≥0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map_apply'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">map_apply'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_aemble : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(A_mble : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">A</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\">MeasureTheory.ProbabilityMeasure.map</a> <span class=\"fn\">ν</span> <span class=\"fn\">f_aemble</span></span>)</span></span></span> <span class=\"fn\">A</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L538-L539","name":"MeasureTheory.ProbabilityMeasure.toMeasure_map","line":538,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure_map\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toMeasure_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\">MeasureTheory.ProbabilityMeasure.map</a> <span class=\"fn\">ν</span> <span class=\"fn\">hf</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.map\">MeasureTheory.Measure.map</a> <span class=\"fn\">f</span> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L532-L536","name":"MeasureTheory.ProbabilityMeasure.map","line":532,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map","doc":"The push-forward of a probability measure by a measurable function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.map\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">Ω'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f_aemble : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#AEMeasurable\">AEMeasurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L509-L518","name":"MeasureTheory.FiniteMeasure.tendsto_normalize_iff_tendsto","line":509,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_normalize_iff_tendsto","doc":"The weak convergence of finite measures to a nonzero limit can be characterized by the weak\nconvergence of both their normalized versions (probability measures) and their total masses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_normalize_iff_tendsto\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">tendsto_normalize_iff_tendsto</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">F</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">F</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">μs</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L499-L504","name":"MeasureTheory.FiniteMeasure.tendsto_normalize_of_tendsto","line":499,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_normalize_of_tendsto","doc":"If finite measures themselves converge weakly to a nonzero limit measure, then their\nnormalized versions also converge weakly. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_normalize_of_tendsto\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">tendsto_normalize_of_tendsto</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μs_lim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">μs</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">F</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L489-L494","name":"MeasureTheory.FiniteMeasure.tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass","line":489,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass","doc":"If the normalized versions of finite measures converge weakly and their total masses\nalso converge, then the finite measures themselves converge weakly. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μs_lim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">F</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mass_lim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">μs</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">μ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L461-L484","name":"MeasureTheory.FiniteMeasure.tendsto_normalize_testAgainstNN_of_tendsto","line":461,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_normalize_testAgainstNN_of_tendsto","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_normalize_testAgainstNN_of_tendsto\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">tendsto_normalize_testAgainstNN_of_tendsto</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μs_lim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">μs</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a>\n  <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span></span>)</span>\n  <span class=\"fn\">F</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L442-L458","name":"MeasureTheory.FiniteMeasure.tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass","line":442,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μs_lim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">F</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mass_lim : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">F</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L433-L435","name":"MeasureTheory.FiniteMeasure.normalize_testAgainstNN","line":433,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize_testAgainstNN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize_testAgainstNN\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">normalize_testAgainstNN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L427-L430","name":"MeasureTheory.FiniteMeasure.testAgainstNN_eq_mass_mul","line":427,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN_eq_mass_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN_eq_mass_mul\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">testAgainstNN_eq_mass_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a> <span class=\"fn\">μ</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L417-L422","name":"MeasureTheory.FiniteMeasure.average_eq_integral_normalize","line":417,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.average_eq_integral_normalize","doc":"Averaging with respect to a finite measure is the same as integrating against\n`MeasureTheory.FiniteMeasure.normalize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.average_eq_integral_normalize\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">average_eq_integral_normalize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/NormedSpace/Basic.html#NormedSpace\">NormedSpace</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Integral/Average.html#MeasureTheory.average\">MeasureTheory.average</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∫ (ω : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ω</span></span> ∂<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L406-L412","name":"ProbabilityMeasure.toFiniteMeasure_normalize_eq_self","line":406,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#ProbabilityMeasure.toFiniteMeasure_normalize_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#ProbabilityMeasure.toFiniteMeasure_normalize_eq_self\"><span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toFiniteMeasure_normalize_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L397-L402","name":"MeasureTheory.FiniteMeasure.toMeasure_normalize_eq_of_nonzero","line":397,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.toMeasure_normalize_eq_of_nonzero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.toMeasure_normalize_eq_of_nonzero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">toMeasure_normalize_eq_of_nonzero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">↑<span class=\"fn\">μ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L389-L394","name":"MeasureTheory.FiniteMeasure.normalize_eq_inv_mass_smul_of_nonzero","line":389,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize_eq_inv_mass_smul_of_nonzero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize_eq_inv_mass_smul_of_nonzero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">normalize_eq_inv_mass_smul_of_nonzero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L384-L386","name":"MeasureTheory.FiniteMeasure.normalize_eq_of_nonzero","line":384,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize_eq_of_nonzero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize_eq_of_nonzero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">normalize_eq_of_nonzero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nonzero : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L377-L381","name":"MeasureTheory.FiniteMeasure.self_eq_mass_smul_normalize","line":377,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.self_eq_mass_smul_normalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.self_eq_mass_smul_normalize\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">self_eq_mass_smul_normalize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a>     <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L364-L374","name":"MeasureTheory.FiniteMeasure.self_eq_mass_mul_normalize","line":364,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.self_eq_mass_mul_normalize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.self_eq_mass_mul_normalize\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">self_eq_mass_mul_normalize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\">MeasureTheory.FiniteMeasure.normalize</a> <span class=\"fn\">μ</span></span>)</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L349-L360","name":"MeasureTheory.FiniteMeasure.normalize","line":349,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize","doc":"Normalize a finite measure so that it becomes a probability measure, i.e., divide by the\ntotal mass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.FiniteMeasure.normalize\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">FiniteMeasure</span>.<span class=\"name\">normalize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m0 : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L321-L322","name":"MeasureTheory.ProbabilityMeasure.t2Space","line":321,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.t2Space","doc":"On topological spaces where indicators of closed sets have decreasing approximating sequences of\ncontinuous functions (`HasOuterApproxClosed`), the topology of convergence in distribution of Borel\nprobability measures is Hausdorff (`T2Space`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.t2Space\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">t2Space</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Ω : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/HasOuterApproxClosed.html#HasOuterApproxClosed\">HasOuterApproxClosed</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#BorelSpace\">BorelSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L300-L307","name":"MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_integral_tendsto","line":300,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_integral_tendsto","doc":"The characterization of weak convergence of probability measures by the usual (defining)\ncondition that the integrals of every continuous bounded function converge to the integral of the\nfunction against the limit measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_integral_tendsto\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">tendsto_iff_forall_integral_tendsto</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">μs</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\">∫ (ω : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ω</span></span> ∂<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\">∫ (ω : <span class=\"fn\">Ω</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ω</span></span> ∂<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L288-L294","name":"MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto","line":288,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto","doc":"A characterization of weak convergence of probability measures by the condition that the\nintegrals of every continuous bounded nonnegative function converge to the integral of the function\nagainst the limit measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">tendsto_iff_forall_lintegral_tendsto</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">μs</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\">∫⁻ (ω : <span class=\"fn\">Ω</span>), <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ω</span></span>)</span></span> ∂<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μs</span> <span class=\"fn\">i</span></span>)</span></span></span></span>)</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\">∫⁻ (ω : <span class=\"fn\">Ω</span>), <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ω</span></span>)</span></span> ∂<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L279-L282","name":"MeasureTheory.ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds","line":279,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μs : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ₀ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">μs</span> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">μ₀</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">μs</span></span>)</span> <span class=\"fn\">F</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">μ₀</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L272-L276","name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_embedding","line":272,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure_embedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure_embedding\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toFiniteMeasure_embedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Ω : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#Embedding\">Embedding</a> <span class=\"fn\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L266-L268","name":"MeasureTheory.ProbabilityMeasure.continuous_testAgainstNN_eval","line":266,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.continuous_testAgainstNN_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.continuous_testAgainstNN_eval\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">continuous_testAgainstNN_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L260-L261","name":"MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_continuous","line":260,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_continuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_continuous\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toWeakDualBCNN_continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">fun (<span class=\"fn\">μ</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN\">MeasureTheory.ProbabilityMeasure.toWeakDualBCNN</a> <span class=\"fn\">μ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L255-L257","name":"MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_apply","line":255,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_apply\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toWeakDualBCNN_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN\">MeasureTheory.ProbabilityMeasure.toWeakDualBCNN</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">∫⁻ (ω : <span class=\"fn\">Ω</span>), <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ω</span></span>)</span></span> ∂<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L249-L251","name":"MeasureTheory.ProbabilityMeasure.coe_toWeakDualBCNN","line":249,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coe_toWeakDualBCNN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coe_toWeakDualBCNN\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">coe_toWeakDualBCNN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN\">MeasureTheory.ProbabilityMeasure.toWeakDualBCNN</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">μ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L244-L245","name":"MeasureTheory.ProbabilityMeasure.toWeakDualBCNN","line":244,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN","doc":"Probability measures yield elements of the `WeakDual` of bounded continuous nonnegative\nfunctions via `MeasureTheory.FiniteMeasure.testAgainstNN`, i.e., integration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toWeakDualBCNN\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toWeakDualBCNN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Module/WeakDual.html#WeakDual\">WeakDual</a> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L237-L239","name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_continuous","line":237,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure_continuous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure_continuous\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toFiniteMeasure_continuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L234-L235","name":"MeasureTheory.ProbabilityMeasure.instTopologicalSpaceProbabilityMeasure","line":234,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instTopologicalSpaceProbabilityMeasure","doc":"The topology of weak convergence on `MeasureTheory.ProbabilityMeasure Ω`. This is inherited\n(induced) from the topology of weak convergence of finite measures via the inclusion\n`MeasureTheory.ProbabilityMeasure.toFiniteMeasure`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instTopologicalSpaceProbabilityMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">instTopologicalSpaceProbabilityMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L226-L228","name":"MeasureTheory.ProbabilityMeasure.testAgainstNN_lipschitz","line":226,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.testAgainstNN_lipschitz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.testAgainstNN_lipschitz\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">testAgainstNN_lipschitz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Constructions/BorelSpace/Basic.html#OpensMeasurableSpace\">OpensMeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/EMetricSpace/Lipschitz.html#LipschitzWith\">LipschitzWith</a> <span class=\"fn\">1</span> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Bounded.html#BoundedContinuousFunction\">BoundedContinuousFunction</a> <span class=\"fn\">Ω</span> <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.testAgainstNN\">MeasureTheory.FiniteMeasure.testAgainstNN</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L217-L219","name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_nonzero","line":217,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure_nonzero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure_nonzero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toFiniteMeasure_nonzero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L213-L214","name":"MeasureTheory.ProbabilityMeasure.mass_toFiniteMeasure","line":213,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.mass_toFiniteMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.mass_toFiniteMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">mass_toFiniteMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure.mass\">MeasureTheory.FiniteMeasure.mass</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L206-L209","name":"MeasureTheory.ProbabilityMeasure.eq_of_forall_apply_eq","line":206,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.eq_of_forall_apply_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.eq_of_forall_apply_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">eq_of_forall_apply_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L199-L203","name":"MeasureTheory.ProbabilityMeasure.eq_of_forall_toMeasure_apply_eq","line":199,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.eq_of_forall_toMeasure_apply_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.eq_of_forall_toMeasure_apply_eq\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">eq_of_forall_toMeasure_apply_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L190-L195","name":"MeasureTheory.ProbabilityMeasure.nonempty","line":190,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.nonempty\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L187-L188","name":"MeasureTheory.ProbabilityMeasure.apply_le_one","line":187,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.apply_le_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.apply_le_one\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">apply_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L182-L184","name":"MeasureTheory.ProbabilityMeasure.apply_mono","line":182,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.apply_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.apply_mono\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">apply_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L176-L179","name":"MeasureTheory.ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure","line":176,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">ennreal_coeFn_eq_coeFn_toMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L170-L172","name":"MeasureTheory.ProbabilityMeasure.coeFn_comp_toFiniteMeasure_eq_coeFn","line":170,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coeFn_comp_toFiniteMeasure_eq_coeFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coeFn_comp_toFiniteMeasure_eq_coeFn\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">coeFn_comp_toFiniteMeasure_eq_coeFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">ν</span></span>)</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L164-L166","name":"MeasureTheory.ProbabilityMeasure.toMeasure_comp_toFiniteMeasure_eq_toMeasure","line":164,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure_comp_toFiniteMeasure_eq_toMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure_comp_toFiniteMeasure_eq_toMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toMeasure_comp_toFiniteMeasure_eq_toMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\">MeasureTheory.ProbabilityMeasure.toFiniteMeasure</a> <span class=\"fn\">ν</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L159-L160","name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure","line":159,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure","doc":"A probability measure can be interpreted as a finite measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toFiniteMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toFiniteMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/FiniteMeasure.html#MeasureTheory.FiniteMeasure\">MeasureTheory.FiniteMeasure</a> <span class=\"fn\">Ω</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L154-L155","name":"MeasureTheory.ProbabilityMeasure.coeFn_univ_ne_zero","line":154,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coeFn_univ_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coeFn_univ_ne_zero\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">coeFn_univ_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L150-L151","name":"MeasureTheory.ProbabilityMeasure.coeFn_univ","line":150,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coeFn_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coeFn_univ\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">coeFn_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.toNNReal\">ENNReal.toNNReal</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">ν</span></span></span> <span class=\"fn\">s</span></span>)</span></span></span>)</span> <span class=\"fn\">Set.univ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L145-L146","name":"MeasureTheory.ProbabilityMeasure.toMeasure_injective","line":145,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure_injective\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toMeasure_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">MeasureTheory.ProbabilityMeasure.toMeasure</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L141-L142","name":"MeasureTheory.ProbabilityMeasure.val_eq_to_measure","line":141,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.val_eq_to_measure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.val_eq_to_measure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">val_eq_to_measure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ν : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">ν</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L138-L138","name":"MeasureTheory.ProbabilityMeasure.coe_mk","line":138,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coe_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.coe_mk\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">coe_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hμ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsProbabilityMeasure\">MeasureTheory.IsProbabilityMeasure</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">μ</span>, <span class=\"fn\">property</span> := <span class=\"fn\">hμ</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L132-L133","name":"MeasureTheory.ProbabilityMeasure.instIsProbabilityMeasureToMeasure","line":132,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instIsProbabilityMeasureToMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instIsProbabilityMeasureToMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">instIsProbabilityMeasureToMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses.html#MeasureTheory.IsProbabilityMeasure\">MeasureTheory.IsProbabilityMeasure</a> <span class=\"fn\">↑<span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L129-L130","name":"MeasureTheory.ProbabilityMeasure.instCoeFunProbabilityMeasureForAllSetNNReal","line":129,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instCoeFunProbabilityMeasureForAllSetNNReal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instCoeFunProbabilityMeasureForAllSetNNReal\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">instCoeFunProbabilityMeasureForAllSetNNReal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Ω</span></span> → <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L126-L127","name":"MeasureTheory.ProbabilityMeasure.instCoeProbabilityMeasureMeasure","line":126,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instCoeProbabilityMeasureMeasure","doc":"A probability measure can be interpreted as a measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instCoeProbabilityMeasureMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">instCoeProbabilityMeasureMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L123-L123","name":"MeasureTheory.ProbabilityMeasure.toMeasure","line":123,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure","doc":"Coercion from `MeasureTheory.ProbabilityMeasure Ω` to `MeasureTheory.Measure Ω`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.toMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">toMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span> → <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L116-L117","name":"MeasureTheory.ProbabilityMeasure.instInhabitedProbabilityMeasure","line":116,"kind":"instance","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instInhabitedProbabilityMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure.instInhabitedProbabilityMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span>.<span class=\"name\">instInhabitedProbabilityMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\">MeasureTheory.ProbabilityMeasure</a> <span class=\"fn\">Ω</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/MeasureTheory/Measure/ProbabilityMeasure.lean#L108-L109","name":"MeasureTheory.ProbabilityMeasure","line":108,"kind":"def","docLink":"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure","doc":"Probability measures are defined as the subtype of measures that have the property of being\nprobability measures (i.e., their total mass is one). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/Measure/ProbabilityMeasure.html#MeasureTheory.ProbabilityMeasure\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">ProbabilityMeasure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Ω : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}