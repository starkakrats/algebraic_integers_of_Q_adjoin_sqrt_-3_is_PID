{"name":"Std.Tactic.Omega.LinearCombo","instances":[{"typeNames":["Eq"],"name":"Std.Tactic.Omega.instDecidableEqLinearCombo","className":"Decidable"},{"typeNames":["Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.instReprLinearCombo","className":"Repr"},{"typeNames":["Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.LinearCombo.instToStringLinearCombo","className":"ToString"},{"typeNames":["Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.LinearCombo.instToExprLinearCombo","className":"Lean.ToExpr"},{"typeNames":["Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.LinearCombo.instInhabitedLinearCombo","className":"Inhabited"},{"typeNames":["Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.LinearCombo.instAddLinearCombo","className":"Add"},{"typeNames":["Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.LinearCombo.instSubLinearCombo","className":"Sub"},{"typeNames":["Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.LinearCombo.instNegLinearCombo","className":"Neg"},{"typeNames":["Int","Std.Tactic.Omega.LinearCombo","Std.Tactic.Omega.LinearCombo"],"name":"Std.Tactic.Omega.LinearCombo.instHMulIntLinearCombo","className":"HMul"}],"imports":["Init","Std.Tactic.Omega.Coeffs.IntList"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L179-L183","name":"Std.Tactic.Omega.LinearCombo.mul_eval","line":179,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.isZero\">Std.Tactic.Omega.Coeffs.isZero</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.coeffs</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.isZero\">Std.Tactic.Omega.Coeffs.isZero</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.coeffs</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul\">Std.Tactic.Omega.LinearCombo.mul</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₁</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₂</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L173-L177","name":"Std.Tactic.Omega.LinearCombo.mul_eval_of_const_right","line":173,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul_eval_of_const_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul_eval_of_const_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul_eval_of_const_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.isZero\">Std.Tactic.Omega.Coeffs.isZero</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.coeffs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul\">Std.Tactic.Omega.LinearCombo.mul</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₁</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₂</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L167-L171","name":"Std.Tactic.Omega.LinearCombo.mul_eval_of_const_left","line":167,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul_eval_of_const_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul_eval_of_const_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul_eval_of_const_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.isZero\">Std.Tactic.Omega.Coeffs.isZero</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.coeffs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul\">Std.Tactic.Omega.LinearCombo.mul</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₁</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₂</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L164-L165","name":"Std.Tactic.Omega.LinearCombo.mul","line":164,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul","doc":"Multiplication of two linear combinations.\nThis is useful only if at least one of the linear combinations is constant,\nand otherwise should be considered as a junk value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L155-L157","name":"Std.Tactic.Omega.LinearCombo.smul_eval_comm","line":155,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_eval_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_eval_comm\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_eval_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">lc</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L150-L153","name":"Std.Tactic.Omega.LinearCombo.smul_eval","line":150,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">lc</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L146-L148","name":"Std.Tactic.Omega.LinearCombo.sub_eval","line":146,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₁</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₂</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L142-L144","name":"Std.Tactic.Omega.LinearCombo.neg_eval","line":142,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">lc</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">lc</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L135-L140","name":"Std.Tactic.Omega.LinearCombo.add_eval","line":135,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l₂</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₁</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">l₂</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L133-L133","name":"Std.Tactic.Omega.LinearCombo.smul_coeffs","line":133,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_coeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_coeffs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span></span>)</span>.coeffs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">lc</span>.coeffs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L132-L132","name":"Std.Tactic.Omega.LinearCombo.smul_const","line":132,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span></span>)</span>.const</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">lc</span>.const</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L130-L130","name":"Std.Tactic.Omega.LinearCombo.instHMulIntLinearCombo","line":130,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instHMulIntLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instHMulIntLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instHMulIntLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMul\">HMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L126-L128","name":"Std.Tactic.Omega.LinearCombo.smul","line":126,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul","doc":"Implementation of scalar multiplication of a `LinearCombo` by an `Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.smul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L119-L123","name":"Std.Tactic.Omega.LinearCombo.sub_eq_add_neg","line":119,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_eq_add_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">l₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L117-L117","name":"Std.Tactic.Omega.LinearCombo.neg_coeffs","line":117,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg_coeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg_coeffs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">l</span></span>)</span>.coeffs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">l</span>.coeffs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L116-L116","name":"Std.Tactic.Omega.LinearCombo.neg_const","line":116,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">l</span></span>)</span>.const</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">l</span>.const</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L114-L114","name":"Std.Tactic.Omega.LinearCombo.instNegLinearCombo","line":114,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instNegLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instNegLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instNegLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L110-L112","name":"Std.Tactic.Omega.LinearCombo.neg","line":110,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg","doc":"Implementation of negation on `LinearCombo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L107-L107","name":"Std.Tactic.Omega.LinearCombo.sub_coeffs","line":107,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_coeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_coeffs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span></span>)</span>.coeffs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.coeffs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.coeffs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L106-L106","name":"Std.Tactic.Omega.LinearCombo.sub_const","line":106,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span></span>)</span>.const</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.const</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.const</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L104-L104","name":"Std.Tactic.Omega.LinearCombo.instSubLinearCombo","line":104,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instSubLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instSubLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instSubLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L100-L102","name":"Std.Tactic.Omega.LinearCombo.sub","line":100,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub","doc":"Implementation of subtraction on `LinearCombo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.sub\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L97-L97","name":"Std.Tactic.Omega.LinearCombo.add_coeffs","line":97,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add_coeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add_coeffs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l₂</span></span>)</span>.coeffs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.coeffs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.coeffs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L96-L96","name":"Std.Tactic.Omega.LinearCombo.add_const","line":96,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l₂</span></span>)</span>.const</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.const</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.const</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L94-L94","name":"Std.Tactic.Omega.LinearCombo.instAddLinearCombo","line":94,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instAddLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instAddLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instAddLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L90-L92","name":"Std.Tactic.Omega.LinearCombo.add","line":90,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add","doc":"Implementation of addition on `LinearCombo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.add\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L85-L87","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_9","line":85,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_9","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_9\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_9</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a3 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a4 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a5 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a6 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a7 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a8 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a9 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">9</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a7</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a8</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a9</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span></span></span></span></span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a9</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L82-L84","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_8","line":82,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_8\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a3 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a4 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a5 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a6 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a7 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a8 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">8</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a7</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a8</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span></span></span></span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a8</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L79-L81","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_7","line":79,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_7","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_7\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_7</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a3 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a4 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a5 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a6 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a7 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">7</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a7</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span></span></span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a7</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L77-L78","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_6","line":77,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_6","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_6\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_6</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a3 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a4 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a5 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a6 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">6</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span></span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a6</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L75-L76","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_5","line":75,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_5","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_5\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_5</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a3 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a4 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a5 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">5</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a5</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L73-L74","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_4","line":73,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_4","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_4\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_4</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a3 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a4 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">4</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a4</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L71-L72","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_3","line":71,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_3\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a3 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">3</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a3</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L70-L70","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_2","line":70,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_2\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a2 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">2</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L69-L69","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_1","line":69,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_1\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a1 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">1</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L68-L68","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval_0","line":68,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval_0\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a0 : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">0</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.ofList\">Std.Tactic.Omega.Coeffs.ofList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">a0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L64-L66","name":"Std.Tactic.Omega.LinearCombo.coordinate_eval","line":64,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\">Std.Tactic.Omega.LinearCombo.coordinate</a> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs.get\">Std.Tactic.Omega.Coeffs.get</a> <span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L60-L62","name":"Std.Tactic.Omega.LinearCombo.coordinate","line":60,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate","doc":"The `i`-th coordinate function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coordinate\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L56-L57","name":"Std.Tactic.Omega.LinearCombo.eval_nil","line":56,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">eval_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\">Std.Tactic.Omega.LinearCombo.eval</a> <span class=\"fn\">lc</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lc</span>.const</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L53-L54","name":"Std.Tactic.Omega.LinearCombo.eval","line":53,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval","doc":"Evaluate a linear combination `⟨r, [c_1, …, c_k]⟩` at values `[v_1, …, v_k]` to obtain\n`r + (c_1 * x_1 + (c_2 * x_2 + ... (c_k * x_k + 0))))`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lc : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(values : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L43-L47","name":"Std.Tactic.Omega.LinearCombo.ext","line":43,"kind":"theorem","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.ext\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w₁ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.const</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.const</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w₂ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.coeffs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.coeffs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L41-L41","name":"Std.Tactic.Omega.LinearCombo.instInhabitedLinearCombo","line":41,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instInhabitedLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instInhabitedLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instInhabitedLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L36-L39","name":"Std.Tactic.Omega.LinearCombo.instToExprLinearCombo","line":36,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instToExprLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instToExprLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instToExprLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L31-L33","name":"Std.Tactic.Omega.LinearCombo.instToStringLinearCombo","line":31,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instToStringLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.instToStringLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instToStringLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L27-L27","name":"Std.Tactic.Omega.instReprLinearCombo","line":27,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.instReprLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.instReprLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instReprLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L27-L27","name":"Std.Tactic.Omega.instDecidableEqLinearCombo","line":27,"kind":"instance","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.instDecidableEqLinearCombo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.instDecidableEqLinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instDecidableEqLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L26-L26","name":"Std.Tactic.Omega.LinearCombo.coeffs","line":26,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coeffs","doc":"Coefficients of the atoms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.coeffs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L24-L24","name":"Std.Tactic.Omega.LinearCombo.const","line":24,"kind":"def","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.const","doc":"Constant term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L22-L22","name":"Std.Tactic.Omega.LinearCombo.mk","line":22,"kind":"ctor","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(const : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(coeffs : <a href=\"./Std/Tactic/Omega/Coeffs/IntList.html#Std.Tactic.Omega.Coeffs\">Std.Tactic.Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\">Std.Tactic.Omega.LinearCombo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Omega/LinearCombo.lean#L22-L27","name":"Std.Tactic.Omega.LinearCombo","line":22,"kind":"structure","docLink":"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo","doc":"Internal representation of a linear combination of atoms, and a constant term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Omega/LinearCombo.html#Std.Tactic.Omega.LinearCombo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}