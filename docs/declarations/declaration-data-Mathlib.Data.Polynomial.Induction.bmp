{"name":"Mathlib.Data.Polynomial.Induction","instances":[],"imports":["Init","Mathlib.RingTheory.Ideal.Basic","Mathlib.Data.Polynomial.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Polynomial/Induction.lean#L98-L99","name":"Polynomial.exists_C_coeff_not_mem","line":98,"kind":"theorem","docLink":"./Mathlib/Data/Polynomial/Induction.html#Polynomial.exists_C_coeff_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Polynomial/Induction.html#Polynomial.exists_C_coeff_not_mem\"><span class=\"name\">Polynomial</span>.<span class=\"name\">exists_C_coeff_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal\">Ideal</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> ∉ <span class=\"fn\">I</span></span> → <span class=\"fn\">∃ (i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Polynomial.C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial.coeff\">Polynomial.coeff</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span> ∉ <span class=\"fn\">I</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Polynomial/Induction.lean#L82-L94","name":"Polynomial.mem_span_C_coeff","line":82,"kind":"theorem","docLink":"./Mathlib/Data/Polynomial/Induction.html#Polynomial.mem_span_C_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Polynomial/Induction.html#Polynomial.mem_span_C_coeff\"><span class=\"name\">Polynomial</span>.<span class=\"name\">mem_span_C_coeff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span> | <span class=\"fn\">∃ (i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Polynomial.C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial.coeff\">Polynomial.coeff</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Polynomial/Induction.lean#L75-L78","name":"Polynomial.span_le_of_C_coeff_mem","line":75,"kind":"theorem","docLink":"./Mathlib/Data/Polynomial/Induction.html#Polynomial.span_le_of_C_coeff_mem","doc":"If the coefficients of a polynomial belong to an ideal, then that ideal contains\nthe ideal spanned by the coefficients of the polynomial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Polynomial/Induction.html#Polynomial.span_le_of_C_coeff_mem\"><span class=\"name\">Polynomial</span>.<span class=\"name\">span_le_of_C_coeff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal\">Ideal</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cf : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Polynomial.C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial.coeff\">Polynomial.coeff</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span> | <span class=\"fn\">∃ (i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Polynomial.C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial.coeff\">Polynomial.coeff</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span>}</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Polynomial/Induction.lean#L63-L66","name":"Polynomial.induction_on'","line":63,"kind":"theorem","docLink":"./Mathlib/Data/Polynomial/Induction.html#Polynomial.induction_on'","doc":"To prove something about polynomials,\nit suffices to show the condition is closed under taking sums,\nand it holds for monomials.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Polynomial/Induction.html#Polynomial.induction_on'\"><span class=\"name\">Polynomial</span>.<span class=\"name\">induction_on'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_add : <span class=\"fn\">∀ (<span class=\"fn\">p </span>q : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">q</span></span> → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_monomial : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial.monomial\">Polynomial.monomial</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Polynomial/Induction.lean#L39-L55","name":"Polynomial.induction_on","line":39,"kind":"theorem","docLink":"./Mathlib/Data/Polynomial/Induction.html#Polynomial.induction_on","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Polynomial/Induction.html#Polynomial.induction_on\"><span class=\"name\">Polynomial</span>.<span class=\"name\">induction_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{R : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_C : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Polynomial.C</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_add : <span class=\"fn\">∀ (<span class=\"fn\">p </span>q : <span class=\"fn\"><a href=\"./Mathlib/Data/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">R</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">q</span></span> → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h_monomial : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a</span> : <span class=\"fn\">R</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Polynomial.C</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Polynomial.X</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Polynomial.C</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Polynomial.X</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">p</span></span></div></div>"}]}