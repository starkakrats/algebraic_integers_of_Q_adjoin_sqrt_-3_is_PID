{"name":"Mathlib.Algebra.Homology.ExactSequence","instances":[],"imports":["Init","Mathlib.Algebra.Homology.ShortComplex.Exact","Mathlib.CategoryTheory.ComposableArrows"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L240-L258","name":"CategoryTheory.ComposableArrows.exact_iff_δlast","line":240,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_iff_δlast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_iff_δlast\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact_iff_δlast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlast\">CategoryTheory.ComposableArrows.δlast</a> <span class=\"fn\">S</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂\">CategoryTheory.ComposableArrows.mk₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L235-L238","name":"CategoryTheory.ComposableArrows.exact_of_δ₀","line":235,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_of_δ₀","doc":"If `S : ComposableArrows C (n + 2)` is such that the first two arrows form\nan exact sequence and that the tail `S.δ₀` is exact, then `S` is also exact.\nSee `ShortComplex.SnakeInput.snake_lemma` in `Algebra.Homology.ShortComplex.SnakeLemma`\nfor a use of this lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_of_δ₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact_of_δ₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂\">CategoryTheory.ComposableArrows.mk₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₀ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">CategoryTheory.ComposableArrows.δ₀</a> <span class=\"fn\">S</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L211-L229","name":"CategoryTheory.ComposableArrows.exact_iff_δ₀","line":211,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_iff_δ₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_iff_δ₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact_iff_δ₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂\">CategoryTheory.ComposableArrows.mk₂</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">CategoryTheory.ComposableArrows.δ₀</a> <span class=\"fn\">S</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L206-L209","name":"CategoryTheory.ShortComplex.exact_iff_exact_toComposableArrows","line":206,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.exact_iff_exact_toComposableArrows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.exact_iff_exact_toComposableArrows\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ShortComplex</span>.<span class=\"name\">exact_iff_exact_toComposableArrows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows\">CategoryTheory.ShortComplex.toComposableArrows</a> <span class=\"fn\">S</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L201-L204","name":"CategoryTheory.ShortComplex.Exact.exact_toComposableArrows","line":201,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.Exact.exact_toComposableArrows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.Exact.exact_toComposableArrows\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ShortComplex</span>.<span class=\"name\">Exact</span>.<span class=\"name\">exact_toComposableArrows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows\">CategoryTheory.ShortComplex.toComposableArrows</a> <span class=\"fn\">S</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L197-L199","name":"CategoryTheory.ComposableArrows.exact₂_mk","line":197,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₂_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₂_mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact₂_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex.mk\">CategoryTheory.ShortComplex.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>)</span> <span class=\"fn\">w</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L187-L195","name":"CategoryTheory.ComposableArrows.exact₂_iff","line":187,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₂_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₂_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact₂_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'\">CategoryTheory.ComposableArrows.sc'</a> <span class=\"fn\">S</span> <span class=\"fn\">hS</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L183-L185","name":"CategoryTheory.ShortComplex.isComplex_toComposableArrows","line":183,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.isComplex_toComposableArrows","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.isComplex_toComposableArrows\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ShortComplex</span>.<span class=\"name\">isComplex_toComposableArrows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows\">CategoryTheory.ShortComplex.toComposableArrows</a> <span class=\"fn\">S</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L179-L181","name":"CategoryTheory.ComposableArrows.isComplex₂_mk","line":179,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₂_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₂_mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isComplex₂_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L169-L177","name":"CategoryTheory.ComposableArrows.isComplex₂_iff","line":169,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₂_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₂_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isComplex₂_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">1</span> <span class=\"fn\">2</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L165-L167","name":"CategoryTheory.ComposableArrows.exact₁","line":165,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L160-L163","name":"CategoryTheory.ComposableArrows.exact₀","line":160,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L156-L158","name":"CategoryTheory.ComposableArrows.exact_iff_of_iso","line":156,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_iff_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_iff_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact_iff_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L150-L154","name":"CategoryTheory.ComposableArrows.exact_of_iso","line":150,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.exact_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">exact_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L141-L148","name":"CategoryTheory.ComposableArrows.scMapIso","line":141,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso","doc":"The isomorphism `S₁.sc _ i ≅ S₂.sc _ i` induced by an isomorphism `S₁ ≅ S₂`\nin `ComposableArrows C n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">scMapIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.2123\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc\">CategoryTheory.ComposableArrows.sc</a> <span class=\"fn\">S₁</span> <span class=\"fn\">h₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc\">CategoryTheory.ComposableArrows.sc</a> <span class=\"fn\">S₂</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L140-L140","name":"CategoryTheory.ComposableArrows.scMapIso_hom","line":140,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">scMapIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.2123\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso\">CategoryTheory.ComposableArrows.scMapIso</a> <span class=\"fn\">e</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap\">CategoryTheory.ComposableArrows.scMap</a> <span class=\"fn\"><span class=\"fn\">e</span>.hom</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L140-L140","name":"CategoryTheory.ComposableArrows.scMapIso_inv","line":140,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">scMapIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.2123\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMapIso\">CategoryTheory.ComposableArrows.scMapIso</a> <span class=\"fn\">e</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap\">CategoryTheory.ComposableArrows.scMap</a> <span class=\"fn\"><span class=\"fn\">e</span>.inv</span> <span class=\"fn\">h₂</span> <span class=\"fn\">h₁</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L129-L136","name":"CategoryTheory.ComposableArrows.sc'MapIso","line":129,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso","doc":"The isomorphism `S₁.sc' _ i j k ≅ S₂.sc' _ i j k` induced by an isomorphism `S₁ ≅ S₂`\nin `ComposableArrows C n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'MapIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1813\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1850\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1887\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'\">CategoryTheory.ComposableArrows.sc'</a> <span class=\"fn\">S₁</span> <span class=\"fn\">h₁</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'\">CategoryTheory.ComposableArrows.sc'</a> <span class=\"fn\">S₂</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L128-L128","name":"CategoryTheory.ComposableArrows.sc'MapIso_inv","line":128,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'MapIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1813\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1850\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1887\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso\">CategoryTheory.ComposableArrows.sc'MapIso</a> <span class=\"fn\">e</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map\">CategoryTheory.ComposableArrows.sc'Map</a> <span class=\"fn\"><span class=\"fn\">e</span>.inv</span> <span class=\"fn\">h₂</span> <span class=\"fn\">h₁</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L128-L128","name":"CategoryTheory.ComposableArrows.sc'MapIso_hom","line":128,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'MapIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1813\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1850\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1887\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'MapIso\">CategoryTheory.ComposableArrows.sc'MapIso</a> <span class=\"fn\">e</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map\">CategoryTheory.ComposableArrows.sc'Map</a> <span class=\"fn\"><span class=\"fn\">e</span>.hom</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L121-L124","name":"CategoryTheory.ComposableArrows.scMap","line":121,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap","doc":"Functoriality maps for `ComposableArrows.sc`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">scMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1685\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc\">CategoryTheory.ComposableArrows.sc</a> <span class=\"fn\">S₁</span> <span class=\"fn\">h₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc\">CategoryTheory.ComposableArrows.sc</a> <span class=\"fn\">S₂</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L120-L120","name":"CategoryTheory.ComposableArrows.scMap_τ₁","line":120,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap_τ₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap_τ₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">scMap_τ₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1685\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap\">CategoryTheory.ComposableArrows.scMap</a> <span class=\"fn\">φ</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span>)</span>.τ₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">φ</span>.app <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L120-L120","name":"CategoryTheory.ComposableArrows.scMap_τ₃","line":120,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap_τ₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap_τ₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">scMap_τ₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1685\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap\">CategoryTheory.ComposableArrows.scMap</a> <span class=\"fn\">φ</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span>)</span>.τ₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">φ</span>.app <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L120-L120","name":"CategoryTheory.ComposableArrows.scMap_τ₂","line":120,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap_τ₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap_τ₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">scMap_τ₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1685\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.scMap\">CategoryTheory.ComposableArrows.scMap</a> <span class=\"fn\">φ</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span></span>)</span>.τ₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">φ</span>.app <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L111-L117","name":"CategoryTheory.ComposableArrows.sc'Map","line":111,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map","doc":"Functoriality maps for `ComposableArrows.sc'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'Map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1450\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1487\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1524\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'\">CategoryTheory.ComposableArrows.sc'</a> <span class=\"fn\">S₁</span> <span class=\"fn\">h₁</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'\">CategoryTheory.ComposableArrows.sc'</a> <span class=\"fn\">S₂</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L110-L110","name":"CategoryTheory.ComposableArrows.sc'Map_τ₂","line":110,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map_τ₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map_τ₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'Map_τ₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1450\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1487\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1524\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map\">CategoryTheory.ComposableArrows.sc'Map</a> <span class=\"fn\">φ</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span>.τ₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">φ</span>.app <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">j</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L110-L110","name":"CategoryTheory.ComposableArrows.sc'Map_τ₁","line":110,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map_τ₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map_τ₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'Map_τ₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1450\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1487\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1524\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map\">CategoryTheory.ComposableArrows.sc'Map</a> <span class=\"fn\">φ</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span>.τ₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">φ</span>.app <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">i</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L110-L110","name":"CategoryTheory.ComposableArrows.sc'Map_τ₃","line":110,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map_τ₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map_τ₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'Map_τ₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(φ : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1450\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1487\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1524\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'Map\">CategoryTheory.ComposableArrows.sc'Map</a> <span class=\"fn\">φ</span> <span class=\"fn\">h₁</span> <span class=\"fn\">h₂</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span>.τ₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">φ</span>.app <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">k</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L103-L107","name":"CategoryTheory.ComposableArrows.Exact.exact'","line":103,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact.exact'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact.exact'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Exact</span>.<span class=\"name\">exact'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1271\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1308\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1345\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'\">CategoryTheory.ComposableArrows.sc'</a> <span class=\"fn\">S</span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L99-L99","name":"CategoryTheory.ComposableArrows.Exact.exact","line":99,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact.exact\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Exact</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1166\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc\">CategoryTheory.ComposableArrows.sc</a> <span class=\"fn\">S</span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span> <span class=\"fn\">i</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L98-L98","name":"CategoryTheory.ComposableArrows.Exact.mk","line":98,"kind":"ctor","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Exact</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toIsComplex : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exact : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1166\">_auto✝</a></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc\">CategoryTheory.ComposableArrows.sc</a> <span class=\"fn\">S</span> <span class=\"fn\">toIsComplex</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\">CategoryTheory.ComposableArrows.Exact</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L98-L99","name":"CategoryTheory.ComposableArrows.Exact","line":98,"kind":"structure","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact","doc":"`F : ComposableArrows C n` is exact if it is a complex and that all short\ncomplexes consisting of two consecutive arrows are exact. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.Exact\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">IsComplex</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L92-L94","name":"CategoryTheory.ComposableArrows.sc","line":92,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc","doc":"The short complex consisting of maps `S.map' i (i + 1)` and `S.map' (i + 1) (i + 2)`\nwhen we know that `S : ComposableArrows C n` satisfies `S.IsComplex`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.1074\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L85-L88","name":"CategoryTheory.ComposableArrows.sc'","line":85,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'","doc":"The short complex consisting of maps `S.map' i j` and `S.map' j k` when we know\nthat `S : ComposableArrows C n` satisfies `S.IsComplex`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.sc'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">sc'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.804\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.841\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.878\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L77-L78","name":"CategoryTheory.ComposableArrows.isComplex₁","line":77,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isComplex₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L72-L75","name":"CategoryTheory.ComposableArrows.isComplex₀","line":72,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isComplex₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L68-L70","name":"CategoryTheory.ComposableArrows.isComplex_iff_of_iso","line":68,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex_iff_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex_iff_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isComplex_iff_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L61-L66","name":"CategoryTheory.ComposableArrows.isComplex_of_iso","line":61,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.isComplex_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isComplex_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">S₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">S₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L55-L59","name":"CategoryTheory.ComposableArrows.IsComplex.zero'","line":55,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">IsComplex</span>.<span class=\"name\">zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.302\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.339\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.376\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L54-L54","name":"CategoryTheory.ComposableArrows.IsComplex.zero'_assoc","line":54,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero'_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero'_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">IsComplex</span>.<span class=\"name\">zero'_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hij : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.302\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hjk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.339\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hk : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.376\">_auto✝</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">k</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L50-L50","name":"CategoryTheory.ComposableArrows.IsComplex.zero_assoc","line":50,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">IsComplex</span>.<span class=\"name\">zero_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.72\">_auto✝</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.obj <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span>)</span> }</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L47-L47","name":"CategoryTheory.ComposableArrows.IsComplex.zero","line":47,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero","doc":"the composition of two consecutive arrows is zero "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">IsComplex</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.72\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L45-L45","name":"CategoryTheory.ComposableArrows.IsComplex.mk","line":45,"kind":"ctor","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">IsComplex</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(zero : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#_auto._@.Mathlib.Algebra.Homology.ExactSequence._hyg.72\">_auto✝</a></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">CategoryTheory.ComposableArrows.map'</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\">CategoryTheory.ComposableArrows.IsComplex</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L45-L48","name":"CategoryTheory.ComposableArrows.IsComplex","line":45,"kind":"structure","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex","doc":"`F : ComposableArrows C n` is a complex if all compositions of\ntwo consecutive arrows are zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ComposableArrows.IsComplex\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">IsComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L36-L37","name":"CategoryTheory.ShortComplex.toComposableArrows","line":36,"kind":"def","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows","doc":"The composable arrows associated to a short complex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ShortComplex</span>.<span class=\"name\">toComposableArrows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">CategoryTheory.ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L35-L35","name":"CategoryTheory.ShortComplex.toComposableArrows_obj","line":35,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ShortComplex</span>.<span class=\"name\">toComposableArrows_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows\">CategoryTheory.ShortComplex.toComposableArrows</a> <span class=\"fn\">S</span></span>)</span>.obj <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">CategoryTheory.ComposableArrows.Precomp.obj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">CategoryTheory.ComposableArrows.mk₁</a> <span class=\"fn\"><span class=\"fn\">S</span>.g</span></span>)</span> <span class=\"fn\"><span class=\"fn\">S</span>.X₁</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Homology/ExactSequence.lean#L35-L35","name":"CategoryTheory.ShortComplex.toComposableArrows_map","line":35,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ShortComplex</span>.<span class=\"name\">toComposableArrows_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_2, u_1}</a>      <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">CategoryTheory.Limits.HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex\">CategoryTheory.ShortComplex</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>} (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ExactSequence.html#CategoryTheory.ShortComplex.toComposableArrows\">CategoryTheory.ShortComplex.toComposableArrows</a> <span class=\"fn\">S</span></span>)</span>.map <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">CategoryTheory.ComposableArrows.Precomp.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">CategoryTheory.ComposableArrows.mk₁</a> <span class=\"fn\"><span class=\"fn\">S</span>.g</span></span>)</span> <span class=\"fn\"><span class=\"fn\">S</span>.f</span> <span class=\"fn\">X</span> <span class=\"fn\">Y</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">Y</span></span>)</span></span></span></span></div></div>"}]}