{"name":"Mathlib.FieldTheory.Finite.Trace","instances":[],"imports":["Init","Mathlib.RingTheory.Trace","Mathlib.FieldTheory.Finite.GaloisField"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/FieldTheory/Finite/Trace.lean#L25-L32","name":"FiniteField.trace_to_zmod_nondegenerate","line":25,"kind":"theorem","docLink":"./Mathlib/FieldTheory/Finite/Trace.html#FiniteField.trace_to_zmod_nondegenerate","doc":"The trace map from a finite field to its prime field is nongedenerate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/FieldTheory/Finite/Trace.html#FiniteField.trace_to_zmod_nondegenerate\"><span class=\"name\">FiniteField</span>.<span class=\"name\">trace_to_zmod_nondegenerate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Basic.html#Algebra\">Algebra</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharP/Basic.html#ringChar\">ringChar</a> <span class=\"fn\">F</span></span>)</span></span>)</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (b : <span class=\"fn\">F</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Trace.html#Algebra.trace\">Algebra.trace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharP/Basic.html#ringChar\">ringChar</a> <span class=\"fn\">F</span></span>)</span></span>)</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"}]}