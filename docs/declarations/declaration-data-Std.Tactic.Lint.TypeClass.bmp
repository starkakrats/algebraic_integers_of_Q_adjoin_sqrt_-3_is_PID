{"name":"Std.Tactic.Lint.TypeClass","instances":[],"imports":["Init","Std.Tactic.Lint.Basic","Std.Data.Array.Init.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/TypeClass.lean#L39-L46","name":"Std.Tactic.Lint.nonClassInstance","line":39,"kind":"def","docLink":"./Std/Tactic/Lint/TypeClass.html#Std.Tactic.Lint.nonClassInstance","doc":"A linter for checking if any declaration whose type is not a class is marked as an instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/TypeClass.html#Std.Tactic.Lint.nonClassInstance\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">nonClassInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/TypeClass.lean#L18-L34","name":"Std.Tactic.Lint.impossibleInstance","line":18,"kind":"def","docLink":"./Std/Tactic/Lint/TypeClass.html#Std.Tactic.Lint.impossibleInstance","doc":"Lints for instances with arguments that cannot be filled in, like\n```\ninstance {α β : Type} [Group α] : Mul α where ...\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/TypeClass.html#Std.Tactic.Lint.impossibleInstance\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">impossibleInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"}]}