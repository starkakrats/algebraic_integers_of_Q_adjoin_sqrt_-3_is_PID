{"name":"Mathlib.Computability.Encoding","instances":[{"typeNames":["Computability.Encoding.Γ"],"name":"Computability.Γ.fintype","className":"Fintype"},{"typeNames":["Eq"],"name":"Computability.instDecidableEqΓ'","className":"Decidable"},{"typeNames":["Computability.Γ'"],"name":"Computability.Γ'.fintype","className":"Fintype"},{"typeNames":["Computability.Γ'"],"name":"Computability.inhabitedΓ'","className":"Inhabited"},{"typeNames":["Computability.FinEncoding"],"name":"Computability.inhabitedFinEncoding","className":"Inhabited"},{"typeNames":["Computability.Encoding"],"name":"Computability.inhabitedEncoding","className":"Inhabited"}],"imports":["Init","Mathlib.Data.Fintype.Basic","Mathlib.Data.Num.Lemmas","Mathlib.Data.Option.Basic","Mathlib.SetTheory.Cardinal.Ordinal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L257-L259","name":"Computability.FinEncoding.card_le_aleph0","line":257,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.card_le_aleph0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.card_le_aleph0\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span>.<span class=\"name\">card_le_aleph0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L248-L254","name":"Computability.Encoding.card_le_aleph0","line":248,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_aleph0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_aleph0\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">card_le_aleph0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\"><span class=\"fn\">e</span>.Γ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.aleph0\">Cardinal.aleph0</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L243-L245","name":"Computability.Encoding.card_le_card_list","line":243,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_card_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.card_le_card_list\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">card_le_card_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.lift\">Cardinal.lift.{v, u}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.lift\">Cardinal.lift.{u, v}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Basic.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\"><span class=\"fn\">e</span>.Γ</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L239-L240","name":"Computability.inhabitedEncoding","line":239,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.inhabitedEncoding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inhabitedEncoding\"><span class=\"name\">Computability</span>.<span class=\"name\">inhabitedEncoding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L235-L236","name":"Computability.inhabitedFinEncoding","line":235,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.inhabitedFinEncoding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inhabitedFinEncoding\"><span class=\"name\">Computability</span>.<span class=\"name\">inhabitedFinEncoding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L227-L232","name":"Computability.finEncodingBoolBool","line":227,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.finEncodingBoolBool","doc":"A fin_encoding of bool in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.finEncodingBoolBool\"><span class=\"name\">Computability</span>.<span class=\"name\">finEncodingBoolBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L223-L223","name":"Computability.decode_encodeBool","line":223,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodeBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodeBool\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodeBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodeBool\">Computability.decodeBool</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.encodeBool\">Computability.encodeBool</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L218-L220","name":"Computability.decodeBool","line":218,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodeBool","doc":"A decoding function from `List Bool` to bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodeBool\"><span class=\"name\">Computability</span>.<span class=\"name\">decodeBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L213-L214","name":"Computability.encodeBool","line":213,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodeBool","doc":"An encoding function of bool in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodeBool\"><span class=\"name\">Computability</span>.<span class=\"name\">encodeBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L204-L209","name":"Computability.unaryFinEncodingNat","line":204,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.unaryFinEncodingNat","doc":"A unary fin_encoding of ℕ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unaryFinEncodingNat\"><span class=\"name\">Computability</span>.<span class=\"name\">unaryFinEncodingNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L199-L200","name":"Computability.unary_decode_encode_nat","line":199,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.unary_decode_encode_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unary_decode_encode_nat\"><span class=\"name\">Computability</span>.<span class=\"name\">unary_decode_encode_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.unaryDecodeNat\">Computability.unaryDecodeNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.unaryEncodeNat\">Computability.unaryEncodeNat</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L195-L196","name":"Computability.unaryDecodeNat","line":195,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.unaryDecodeNat","doc":"A unary decoding function from `List Bool` to ℕ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unaryDecodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">unaryDecodeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L189-L191","name":"Computability.unaryEncodeNat","line":189,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.unaryEncodeNat","doc":"A unary encoding function of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.unaryEncodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">unaryEncodeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L184-L185","name":"Computability.finEncodingNatΓ'","line":184,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatΓ'","doc":"A binary fin_encoding of ℕ in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">finEncodingNatΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L172-L180","name":"Computability.encodingNatΓ'","line":172,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodingNatΓ'","doc":"A binary encoding of ℕ in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodingNatΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">encodingNatΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L167-L168","name":"Computability.finEncodingNatBool","line":167,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatBool","doc":"A binary fin_encoding of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.finEncodingNatBool\"><span class=\"name\">Computability</span>.<span class=\"name\">finEncodingNatBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L159-L163","name":"Computability.encodingNatBool","line":159,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodingNatBool","doc":"A binary encoding of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodingNatBool\"><span class=\"name\">Computability</span>.<span class=\"name\">encodingNatBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L152-L155","name":"Computability.decode_encodeNat","line":152,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodeNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNat\">Computability.decodeNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNat\">Computability.encodeNat</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L143-L149","name":"Computability.decode_encodeNum","line":143,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodeNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodeNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNum\">Computability.decodeNum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNum\">Computability.encodeNum</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L134-L140","name":"Computability.decode_encodePosNum","line":134,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.decode_encodePosNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decode_encodePosNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decode_encodePosNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.decodePosNum\">Computability.decodePosNum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum\">Computability.encodePosNum</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L129-L131","name":"Computability.encodePosNum_nonempty","line":129,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodePosNum_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum_nonempty\"><span class=\"name\">Computability</span>.<span class=\"name\">encodePosNum_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum\">Computability.encodePosNum</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L126-L126","name":"Computability.decodeNat","line":126,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodeNat","doc":"A decoding function from `List Bool` to ℕ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">decodeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L122-L122","name":"Computability.decodeNum","line":122,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodeNum","doc":"A decoding function from `List Bool` to the binary numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodeNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decodeNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L115-L118","name":"Computability.decodePosNum","line":115,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.decodePosNum","doc":"A decoding function from `List Bool` to the positive binary numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.decodePosNum\"><span class=\"name\">Computability</span>.<span class=\"name\">decodePosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L110-L111","name":"Computability.encodeNat","line":110,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodeNat","doc":"An encoding function of ℕ in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNat\"><span class=\"name\">Computability</span>.<span class=\"name\">encodeNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L104-L106","name":"Computability.encodeNum","line":104,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodeNum","doc":"An encoding function of the binary numbers in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodeNum\"><span class=\"name\">Computability</span>.<span class=\"name\">encodeNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L97-L100","name":"Computability.encodePosNum","line":97,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.encodePosNum","doc":"An encoding function of the positive binary numbers in bool. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.encodePosNum\"><span class=\"name\">Computability</span>.<span class=\"name\">encodePosNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L92-L93","name":"Computability.inclusionBoolΓ'_injective","line":92,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'_injective\"><span class=\"name\">Computability</span>.<span class=\"name\">inclusionBoolΓ'_injective</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'\">Computability.inclusionBoolΓ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L88-L89","name":"Computability.leftInverse_section_inclusion","line":88,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.leftInverse_section_inclusion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.leftInverse_section_inclusion\"><span class=\"name\">Computability</span>.<span class=\"name\">leftInverse_section_inclusion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.LeftInverse\">Function.LeftInverse</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool\">Computability.sectionΓ'Bool</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'\">Computability.inclusionBoolΓ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L83-L85","name":"Computability.sectionΓ'Bool","line":83,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool","doc":"An arbitrary section of the natural inclusion of bool in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.sectionΓ'Bool\"><span class=\"name\">Computability</span>.<span class=\"name\">sectionΓ'Bool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L78-L79","name":"Computability.inclusionBoolΓ'","line":78,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'","doc":"The natural inclusion of bool in Γ'. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inclusionBoolΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">inclusionBoolΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L73-L74","name":"Computability.inhabitedΓ'","line":73,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.inhabitedΓ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.inhabitedΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">inhabitedΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L68-L70","name":"Computability.Γ'.fintype","line":68,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.fintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.fintype\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">fintype</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L64-L64","name":"Computability.instDecidableEqΓ'","line":64,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.instDecidableEqΓ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.instDecidableEqΓ'\"><span class=\"name\">Computability</span>.<span class=\"name\">instDecidableEqΓ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L63-L63","name":"Computability.Γ'.comma","line":63,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.comma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.comma\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">comma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L62-L62","name":"Computability.Γ'.ket","line":62,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.ket","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.ket\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">ket</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L61-L61","name":"Computability.Γ'.bra","line":61,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.bra","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.bra\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">bra</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L60-L60","name":"Computability.Γ'.bit","line":60,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.bit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.bit\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L59-L59","name":"Computability.Γ'.blank","line":59,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'.blank","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'.blank\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span>.<span class=\"name\">blank</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\">Computability.Γ'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L58-L64","name":"Computability.Γ'","line":58,"kind":"inductive","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ'","doc":"A standard Turing machine alphabet, consisting of blank,bit0,bit1,bra,ket,comma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ'\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L53-L54","name":"Computability.Γ.fintype","line":53,"kind":"instance","docLink":"./Mathlib/Computability/Encoding.html#Computability.Γ.fintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Γ.fintype\"><span class=\"name\">Computability</span>.<span class=\"name\">Γ</span>.<span class=\"name\">fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">e</span>.Γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L50-L50","name":"Computability.FinEncoding.ΓFin","line":50,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.ΓFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.ΓFin\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span>.<span class=\"name\">ΓFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">self</span>.Γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L49-L49","name":"Computability.FinEncoding.mk","line":49,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding.mk\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toEncoding : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ΓFin : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">toEncoding</span>.Γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\">Computability.FinEncoding</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L49-L50","name":"Computability.FinEncoding","line":49,"kind":"structure","docLink":"./Mathlib/Computability/Encoding.html#Computability.FinEncoding","doc":"An encoding plus a guarantee of finiteness of the alphabet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.FinEncoding\"><span class=\"name\">Computability</span>.<span class=\"name\">FinEncoding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max 1 u)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L43-L45","name":"Computability.Encoding.encode_injective","line":43,"kind":"theorem","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode_injective\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">encode_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\"><span class=\"fn\">e</span>.encode</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L40-L40","name":"Computability.Encoding.decode_encode","line":40,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode_encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode_encode\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">decode_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\">Computability.Encoding.decode</a> <span class=\"fn\">self</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\">Computability.Encoding.encode</a> <span class=\"fn\">self</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L39-L39","name":"Computability.Encoding.decode","line":39,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\"><span class=\"fn\">self</span>.Γ</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L38-L38","name":"Computability.Encoding.encode","line":38,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\"><span class=\"fn\">self</span>.Γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L37-L37","name":"Computability.Encoding.Γ","line":37,"kind":"def","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L36-L36","name":"Computability.Encoding.mk","line":36,"kind":"ctor","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.mk\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Γ : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(encode : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decode : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">Γ</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decode_encode : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">decode</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">encode</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Computability/Encoding.lean#L36-L40","name":"Computability.Encoding","line":36,"kind":"structure","docLink":"./Mathlib/Computability/Encoding.html#Computability.Encoding","doc":"An encoding of a type in a certain alphabet, together with a decoding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\"><span class=\"name\">Computability</span>.<span class=\"name\">Encoding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u (v + 1))</div></div>"}]}