{"name":"Mathlib.Control.ULift","instances":[{"typeNames":["PLift"],"name":"PLift.instMonadPLift","className":"Monad"},{"typeNames":["PLift"],"name":"PLift.instLawfulFunctorPLiftToFunctorToApplicativeInstMonadPLift","className":"LawfulFunctor"},{"typeNames":["PLift"],"name":"PLift.instLawfulApplicativePLiftToApplicativeInstMonadPLift","className":"LawfulApplicative"},{"typeNames":["PLift"],"name":"PLift.instLawfulMonadPLiftInstMonadPLift","className":"LawfulMonad"},{"typeNames":["ULift"],"name":"ULift.instMonadULift","className":"Monad"},{"typeNames":["ULift"],"name":"ULift.instLawfulFunctorULiftToFunctorToApplicativeInstMonadULift","className":"LawfulFunctor"},{"typeNames":["ULift"],"name":"ULift.instLawfulApplicativeULiftToApplicativeInstMonadULift","className":"LawfulApplicative"},{"typeNames":["ULift"],"name":"ULift.instLawfulMonadULiftInstMonadULift","className":"LawfulMonad"}],"imports":["Init","Mathlib.Mathport.Rename"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L153-L154","name":"ULift.rec.constant","line":153,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#ULift.rec.constant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.rec.constant\"><span class=\"name\">ULift</span>.<span class=\"name\">rec</span>.<span class=\"name\">constant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift.rec\">ULift.rec</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L146-L150","name":"ULift.instLawfulMonadULiftInstMonadULift","line":146,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#ULift.instLawfulMonadULiftInstMonadULift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.instLawfulMonadULiftInstMonadULift\"><span class=\"name\">ULift</span>.<span class=\"name\">instLawfulMonadULiftInstMonadULift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Init/Prelude.html#ULift\">ULift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L138-L144","name":"ULift.instLawfulApplicativeULiftToApplicativeInstMonadULift","line":138,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#ULift.instLawfulApplicativeULiftToApplicativeInstMonadULift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.instLawfulApplicativeULiftToApplicativeInstMonadULift\"><span class=\"name\">ULift</span>.<span class=\"name\">instLawfulApplicativeULiftToApplicativeInstMonadULift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulApplicative\">LawfulApplicative</a> <a href=\"./Init/Prelude.html#ULift\">ULift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L133-L136","name":"ULift.instLawfulFunctorULiftToFunctorToApplicativeInstMonadULift","line":133,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#ULift.instLawfulFunctorULiftToFunctorToApplicativeInstMonadULift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.instLawfulFunctorULiftToFunctorToApplicativeInstMonadULift\"><span class=\"name\">ULift</span>.<span class=\"name\">instLawfulFunctorULiftToFunctorToApplicativeInstMonadULift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulFunctor\">LawfulFunctor</a> <a href=\"./Init/Prelude.html#ULift\">ULift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L127-L131","name":"ULift.instMonadULift","line":127,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#ULift.instMonadULift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.instMonadULift\"><span class=\"name\">ULift</span>.<span class=\"name\">instMonadULift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Init/Prelude.html#ULift\">ULift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L123-L124","name":"ULift.bind_up","line":123,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#ULift.bind_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.bind_up\"><span class=\"name\">ULift</span>.<span class=\"name\">bind_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/ULift.html#ULift.bind\">ULift.bind</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">a</span> }</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L118-L119","name":"ULift.bind","line":118,"kind":"def","docLink":"./Mathlib/Control/ULift.html#ULift.bind","doc":"Monadic bind. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.bind\"><span class=\"name\">ULift</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L113-L114","name":"ULift.seq_up","line":113,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#ULift.seq_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.seq_up\"><span class=\"name\">ULift</span>.<span class=\"name\">seq_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/ULift.html#ULift.seq\">ULift.seq</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">f</span> }</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">x</span> }</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L108-L109","name":"ULift.seq","line":108,"kind":"def","docLink":"./Mathlib/Control/ULift.html#ULift.seq","doc":"Applicative sequencing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.seq\"><span class=\"name\">ULift</span>.<span class=\"name\">seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L103-L104","name":"ULift.pure","line":103,"kind":"def","docLink":"./Mathlib/Control/ULift.html#ULift.pure","doc":"Embedding of pure values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.pure\"><span class=\"name\">ULift</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L98-L98","name":"ULift.map_up","line":98,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#ULift.map_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.map_up\"><span class=\"name\">ULift</span>.<span class=\"name\">map_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/ULift.html#ULift.map\">ULift.map</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">a</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L94-L94","name":"ULift.map","line":94,"kind":"def","docLink":"./Mathlib/Control/ULift.html#ULift.map","doc":"Functorial action. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#ULift.map\"><span class=\"name\">ULift</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L83-L84","name":"PLift.rec.constant","line":83,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#PLift.rec.constant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.rec.constant\"><span class=\"name\">PLift</span>.<span class=\"name\">rec</span>.<span class=\"name\">constant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#PLift.rec\">PLift.rec</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">b</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L76-L80","name":"PLift.instLawfulMonadPLiftInstMonadPLift","line":76,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#PLift.instLawfulMonadPLiftInstMonadPLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.instLawfulMonadPLiftInstMonadPLift\"><span class=\"name\">PLift</span>.<span class=\"name\">instLawfulMonadPLiftInstMonadPLift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Init/Prelude.html#PLift\">PLift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L68-L74","name":"PLift.instLawfulApplicativePLiftToApplicativeInstMonadPLift","line":68,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#PLift.instLawfulApplicativePLiftToApplicativeInstMonadPLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.instLawfulApplicativePLiftToApplicativeInstMonadPLift\"><span class=\"name\">PLift</span>.<span class=\"name\">instLawfulApplicativePLiftToApplicativeInstMonadPLift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulApplicative\">LawfulApplicative</a> <a href=\"./Init/Prelude.html#PLift\">PLift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L63-L66","name":"PLift.instLawfulFunctorPLiftToFunctorToApplicativeInstMonadPLift","line":63,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#PLift.instLawfulFunctorPLiftToFunctorToApplicativeInstMonadPLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.instLawfulFunctorPLiftToFunctorToApplicativeInstMonadPLift\"><span class=\"name\">PLift</span>.<span class=\"name\">instLawfulFunctorPLiftToFunctorToApplicativeInstMonadPLift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulFunctor\">LawfulFunctor</a> <a href=\"./Init/Prelude.html#PLift\">PLift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L57-L61","name":"PLift.instMonadPLift","line":57,"kind":"instance","docLink":"./Mathlib/Control/ULift.html#PLift.instMonadPLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.instMonadPLift\"><span class=\"name\">PLift</span>.<span class=\"name\">instMonadPLift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Init/Prelude.html#PLift\">PLift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L53-L54","name":"PLift.bind_up","line":53,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#PLift.bind_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.bind_up\"><span class=\"name\">PLift</span>.<span class=\"name\">bind_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/ULift.html#PLift.bind\">PLift.bind</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">a</span> }</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L48-L49","name":"PLift.bind","line":48,"kind":"def","docLink":"./Mathlib/Control/ULift.html#PLift.bind","doc":"Monadic bind. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.bind\"><span class=\"name\">PLift</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L43-L44","name":"PLift.seq_up","line":43,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#PLift.seq_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.seq_up\"><span class=\"name\">PLift</span>.<span class=\"name\">seq_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/ULift.html#PLift.seq\">PLift.seq</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">f</span> }</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">x</span> }</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L38-L39","name":"PLift.seq","line":38,"kind":"def","docLink":"./Mathlib/Control/ULift.html#PLift.seq","doc":"Applicative sequencing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.seq\"><span class=\"name\">PLift</span>.<span class=\"name\">seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L33-L34","name":"PLift.pure","line":33,"kind":"def","docLink":"./Mathlib/Control/ULift.html#PLift.pure","doc":"Embedding of pure values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.pure\"><span class=\"name\">PLift</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L27-L28","name":"PLift.map_up","line":27,"kind":"theorem","docLink":"./Mathlib/Control/ULift.html#PLift.map_up","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.map_up\"><span class=\"name\">PLift</span>.<span class=\"name\">map_up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/ULift.html#PLift.map\">PLift.map</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\">a</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Control/ULift.lean#L22-L23","name":"PLift.map","line":22,"kind":"def","docLink":"./Mathlib/Control/ULift.html#PLift.map","doc":"Functorial action. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/ULift.html#PLift.map\"><span class=\"name\">PLift</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">β</span></span></div></div>"}]}