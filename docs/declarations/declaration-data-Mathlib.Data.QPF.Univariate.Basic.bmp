{"name":"Mathlib.Data.QPF.Univariate.Basic","instances":[{"typeNames":["QPF.Cofix"],"name":"QPF.instInhabitedCofix","className":"Inhabited"}],"imports":["Init","Mathlib.Data.PFunctor.Univariate.M"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L725-L726","name":"QPF.liftpPreservation_iff_uniform","line":725,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftpPreservation_iff_uniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftpPreservation_iff_uniform\"><span class=\"name\">QPF</span>.<span class=\"name\">liftpPreservation_iff_uniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">QPF.LiftpPreservation</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">QPF.IsUniform</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L711-L722","name":"QPF.suppPreservation_iff_liftpPreservation","line":711,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_liftpPreservation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_liftpPreservation\"><span class=\"name\">QPF</span>.<span class=\"name\">suppPreservation_iff_liftpPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">QPF.SuppPreservation</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">QPF.LiftpPreservation</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L703-L708","name":"QPF.suppPreservation_iff_uniform","line":703,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_uniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_uniform\"><span class=\"name\">QPF</span>.<span class=\"name\">suppPreservation_iff_uniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">QPF.SuppPreservation</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">QPF.IsUniform</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L697-L700","name":"QPF.supp_map","line":697,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_map\"><span class=\"name\">QPF</span>.<span class=\"name\">supp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">QPF.IsUniform</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L682-L694","name":"QPF.liftp_iff_of_isUniform","line":682,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff_of_isUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff_of_isUniform\"><span class=\"name\">QPF</span>.<span class=\"name\">liftp_iff_of_isUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">QPF.IsUniform</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L673-L679","name":"QPF.supp_eq_of_isUniform","line":673,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq_of_isUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq_of_isUniform\"><span class=\"name\">QPF</span>.<span class=\"name\">supp_eq_of_isUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">QPF.IsUniform</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L669-L670","name":"QPF.SuppPreservation","line":669,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.SuppPreservation","doc":"does `abs` preserve `supp`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.SuppPreservation\"><span class=\"name\">QPF</span>.<span class=\"name\">SuppPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L664-L665","name":"QPF.LiftpPreservation","line":664,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.LiftpPreservation","doc":"does `abs` preserve `Liftp`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.LiftpPreservation\"><span class=\"name\">QPF</span>.<span class=\"name\">LiftpPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L658-L660","name":"QPF.IsUniform","line":658,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform","doc":"A qpf is said to be uniform if every polynomial functor\nrepresenting a single value all have the same range. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform\"><span class=\"name\">QPF</span>.<span class=\"name\">IsUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L630-L653","name":"QPF.has_good_supp_iff","line":630,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.has_good_supp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.has_good_supp_iff\"><span class=\"name\">QPF</span>.<span class=\"name\">has_good_supp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">u</span></span></span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">∀ (<span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a'</span></span> → <span class=\"fn\">α</span></span>),\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a'</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">f'</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L624-L627","name":"QPF.supp_eq","line":624,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">supp_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">α</span> | <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L610-L621","name":"QPF.mem_supp","line":610,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mem_supp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mem_supp\"><span class=\"name\">QPF</span>.<span class=\"name\">mem_supp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">Set.univ</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L588-L594","name":"QPF.quotientQPF","line":588,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.quotientQPF","doc":"Given a qpf `F` and a well-behaved surjection `FG_abs` from `F α` to\nfunctor `G α`, `G` is a qpf. We can consider `G` a quotient on `F` where\nelements `x y : F α` are in the same equivalence class if\n`FG_abs x = FG_abs y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.quotientQPF\"><span class=\"name\">QPF</span>.<span class=\"name\">quotientQPF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{FG_abs : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{FG_repr : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(FG_abs_repr : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FG_repr</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(FG_abs_map : <span class=\"fn\">∀ {<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L525-L564","name":"QPF.comp","line":525,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp","doc":"composition of qpfs gives another qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp\"><span class=\"name\">QPF</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Comp\">Functor.Comp</a> <span class=\"fn\">F₂</span> <span class=\"fn\">F₁</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L500-L510","name":"QPF.Cofix.bisim'","line":500,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim'\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> →\n    <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span></span>) (f' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">QPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">QPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>           <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span>), <span class=\"fn\">∃ (x' : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x'</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x'</span></span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L489-L497","name":"QPF.Cofix.bisim","line":489,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftr\">Functor.Liftr</a> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">QPF.Cofix.dest</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">QPF.Cofix.dest</a> <span class=\"fn\">y</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L469-L486","name":"QPF.Cofix.bisim_rel","line":469,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim_rel\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">QPF.Cofix.dest</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">QPF.Cofix.dest</a> <span class=\"fn\">y</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L423-L429","name":"QPF.Cofix.dest_corec","line":423,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest_corec\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">QPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec\">QPF.Cofix.corec</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec\">QPF.Cofix.corec</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L409-L420","name":"QPF.Cofix.dest","line":409,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest","doc":"destructor for type defined by `Cofix` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L404-L405","name":"QPF.Cofix.corec","line":404,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec","doc":"corecursor for type defined by `Cofix` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L400-L401","name":"QPF.instInhabitedCofix","line":400,"kind":"instance","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.instInhabitedCofix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.instInhabitedCofix\"><span class=\"name\">QPF</span>.<span class=\"name\">instInhabitedCofix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">QPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L396-L397","name":"QPF.Cofix","line":396,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix","doc":"coinductive type defined as the final coalgebra of a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L391-L391","name":"QPF.Mcongr","line":391,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Mcongr","doc":"The maximal congruence on `q.P.M`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Mcongr\"><span class=\"name\">QPF</span>.<span class=\"name\">Mcongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L385-L387","name":"QPF.IsPrecongr","line":385,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsPrecongr","doc":"A pre-congruence on `q.P.M` *viewed as an F-coalgebra*. Not necessarily symmetric. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsPrecongr\"><span class=\"name\">QPF</span>.<span class=\"name\">IsPrecongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L377-L379","name":"QPF.corecF_eq","line":377,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">corecF_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">PFunctor.M.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF\">QPF.corecF</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF\">QPF.corecF</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr\">QPF.repr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L372-L373","name":"QPF.corecF","line":372,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF","doc":"does recursion on `q.P.M` using `g : α → F α` rather than `g : α → P α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF\"><span class=\"name\">QPF</span>.<span class=\"name\">corecF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">PFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L348-L357","name":"QPF.Fix.ind","line":348,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L339-L345","name":"QPF.Fix.dest_mk","line":339,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest_mk\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">dest_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest\">QPF.Fix.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L330-L336","name":"QPF.Fix.mk_dest","line":330,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk_dest\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">mk_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest\">QPF.Fix.dest</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L322-L327","name":"QPF.Fix.rec_unique","line":322,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_unique\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">rec_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyp : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\">QPF.Fix.rec</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L309-L319","name":"QPF.Fix.ind_rec","line":309,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_rec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_rec\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">ind_rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g₂ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L296-L306","name":"QPF.Fix.ind_aux","line":296,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_aux\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">ind_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\">⟦<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>⟧</span></span> }</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟦<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>⟧</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L278-L293","name":"QPF.Fix.rec_eq","line":278,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">rec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\">QPF.Fix.rec</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">QPF.Fix.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\">QPF.Fix.rec</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L274-L275","name":"QPF.Fix.dest","line":274,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest","doc":"destructor of a type defined by a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L269-L270","name":"QPF.Fix.mk","line":269,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk","doc":"constructor of a type defined by a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L263-L264","name":"QPF.fixToW","line":263,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.fixToW","doc":"access the underlying W-type of a fixpoint data type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.fixToW\"><span class=\"name\">QPF</span>.<span class=\"name\">fixToW</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L258-L259","name":"QPF.Fix.rec","line":258,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec","doc":"recursor of a type defined by a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">QPF.Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L253-L254","name":"QPF.Fix","line":253,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix","doc":"inductive type defined as initial algebra of a Quotient of Polynomial Functor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L244-L245","name":"QPF.Wsetoid","line":244,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wsetoid","doc":"Define the fixed point as the quotient of trees under the equivalence relation `Wequiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wsetoid\"><span class=\"name\">QPF</span>.<span class=\"name\">Wsetoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L231-L239","name":"QPF.Wrepr_equiv","line":231,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr_equiv\"><span class=\"name\">QPF</span>.<span class=\"name\">Wrepr_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr\">QPF.Wrepr</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L226-L227","name":"QPF.Wrepr","line":226,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr","doc":"maps every element of the W type to a canonical representative "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr\"><span class=\"name\">QPF</span>.<span class=\"name\">Wrepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L216-L221","name":"QPF.Wequiv.symm","line":216,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.symm\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L210-L212","name":"QPF.Wequiv.refl","line":210,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.refl\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L202-L206","name":"QPF.Wequiv.abs'","line":202,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs'\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">abs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">PFunctor.W.dest</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">PFunctor.W.dest</a> <span class=\"fn\">y</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L192-L198","name":"QPF.recF_eq_of_Wequiv","line":192,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq_of_Wequiv","doc":"`recF` is insensitive to the representation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq_of_Wequiv\"><span class=\"name\">QPF</span>.<span class=\"name\">recF_eq_of_Wequiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">QPF.recF</a> <span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">QPF.recF</a> <span class=\"fn\">u</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L187-L187","name":"QPF.Wequiv.trans","line":187,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.trans\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L185-L186","name":"QPF.Wequiv.abs","line":185,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a' : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a'</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f'</span> }</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a'</span> <span class=\"fn\">f'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L184-L184","name":"QPF.Wequiv.ind","line":184,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.ind\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">x</span></span>)</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">QPF.Wequiv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L183-L187","name":"QPF.Wequiv","line":183,"kind":"inductive","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv","doc":"two trees are equivalent if their F-abstractions are "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L176-L178","name":"QPF.recF_eq'","line":176,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq'\"><span class=\"name\">QPF</span>.<span class=\"name\">recF_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">QPF.recF</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">QPF.recF</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L169-L172","name":"QPF.recF_eq","line":169,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">recF_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">QPF.recF</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">QPF.recF</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">PFunctor.W.dest</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L164-L165","name":"QPF.recF","line":164,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF","doc":"does recursion on `q.P.W` using `g : F α → α` rather than `g : P α → α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\"><span class=\"name\">QPF</span>.<span class=\"name\">recF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">PFunctor.W</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L134-L153","name":"QPF.liftr_iff","line":134,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftr_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftr_iff\"><span class=\"name\">QPF</span>.<span class=\"name\">liftr_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftr\">Functor.Liftr</a> <span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (f₀ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>) (f₁ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f₀</span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f₁</span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₀</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L117-L131","name":"QPF.liftp_iff'","line":117,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff'\"><span class=\"name\">QPF</span>.<span class=\"name\">liftp_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (u : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">u</span>.fst</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#Sigma.snd\">Sigma.snd</a> <span class=\"fn\">u</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L101-L114","name":"QPF.liftp_iff","line":101,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff\"><span class=\"name\">QPF</span>.<span class=\"name\">liftp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">f</span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L86-L91","name":"QPF.lawfulFunctor","line":86,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.lawfulFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.lawfulFunctor\"><span class=\"name\">QPF</span>.<span class=\"name\">lawfulFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u), <span class=\"fn\"><span class=\"fn\">Functor.mapConst</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Functor.map</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <span class=\"fn\">β</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulFunctor\">LawfulFunctor</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L78-L83","name":"QPF.comp_map","line":78,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp_map\"><span class=\"name\">QPF</span>.<span class=\"name\">comp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L71-L75","name":"QPF.id_map","line":71,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.id_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.id_map\"><span class=\"name\">QPF</span>.<span class=\"name\">id_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">id</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L56-L56","name":"QPF.abs_map","line":56,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_map\"><span class=\"name\">QPF</span>.<span class=\"name\">abs_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L55-L55","name":"QPF.abs_repr","line":55,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_repr\"><span class=\"name\">QPF</span>.<span class=\"name\">abs_repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr\">QPF.repr</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L54-L54","name":"QPF.repr","line":54,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr\"><span class=\"name\">QPF</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L53-L53","name":"QPF.abs","line":53,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\"><span class=\"name\">QPF</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">QPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L52-L52","name":"QPF.P","line":52,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\"><span class=\"name\">QPF</span>.<span class=\"name\">P</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L51-L51","name":"QPF.mk","line":51,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mk\"><span class=\"name\">QPF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(P : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abs : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(repr : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abs_repr : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">repr</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(abs_map : <span class=\"fn\">∀ {<span class=\"fn\">α </span>β : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">P</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">PFunctor.map</a> <span class=\"fn\">P</span> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">p</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Univariate/Basic.lean#L51-L56","name":"QPF","line":51,"kind":"class","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF","doc":"Quotients of polynomial functors.\n\nRoughly speaking, saying that `F` is a quotient of a polynomial functor means that for each `α`,\nelements of `F α` are represented by pairs `⟨a, f⟩`, where `a` is the shape of the object and\n`f` indexes the relevant elements of `α`, in a suitably natural manner.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\"><span class=\"name\">QPF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}