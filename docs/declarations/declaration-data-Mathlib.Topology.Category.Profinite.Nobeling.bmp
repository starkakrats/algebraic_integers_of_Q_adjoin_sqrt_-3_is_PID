{"name":"Mathlib.Topology.Category.Profinite.Nobeling","instances":[{"typeNames":["Profinite.NobelingProof.Products"],"name":"Profinite.NobelingProof.Products.instLinearOrderProducts","className":"LinearOrder"},{"typeNames":["Profinite.NobelingProof.Products"],"name":"Profinite.NobelingProof.Products.instIsWellFoundedProductsLtToLTToPreorderToPartialOrderToSemilatticeInfToLatticeInstDistribLatticeInstLinearOrderProducts","className":"IsWellFounded"},{"typeNames":["Set.Elem"],"name":"Profinite.NobelingProof.instFintypeElemForAllBoolπMemFinsetInstMembershipFinsetDecidableMemInstDecidableEq","className":"Fintype"},{"typeNames":["LocallyConstant"],"name":"Profinite.NobelingProof.instSubsingletonLocallyConstantElemForAllBoolEmptyCollectionSetInstEmptyCollectionSetIntInstTopologicalSpaceSubtypeMemInstMembershipSetTopologicalSpaceInstTopologicalSpaceBool","className":"Subsingleton"},{"typeNames":["Subtype"],"name":"Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForAllBoolInstEmptyCollectionSet","className":"IsEmpty"},{"typeNames":["LocallyConstant"],"name":"Profinite.NobelingProof.instNontrivialLocallyConstantInt","className":"Nontrivial"},{"typeNames":["Subtype"],"name":"Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForAllBoolSetInstSingletonSetFalse","className":"Unique"},{"typeNames":["Int","LocallyConstant"],"name":"Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstantToZeroToCommMonoidWithZeroInstCommSemiringIntInstZeroLocallyConstantSMulIntToSubNegMonoidInstAddGroupLocallyConstantInstAddGroupInt","className":"NoZeroSMulDivisors"},{"typeNames":["Int","LocallyConstant"],"name":"LocallyConstant.freeOfProfinite","className":"Module.Free"}],"imports":["Init","Mathlib.Algebra.Category.ModuleCat.Free","Mathlib.Topology.Category.Profinite.CofilteredLimit","Mathlib.Topology.Category.Profinite.Product","Mathlib.Topology.LocallyConstant.Algebra","Mathlib.Init.Data.Bool.Lemmas","Mathlib.Init.IteSimp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1828-L1832","name":"LocallyConstant.freeOfProfinite","line":1828,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#LocallyConstant.freeOfProfinite","doc":"Nöbeling's theorem: the `ℤ`-module `LocallyConstant S ℤ` is free for every `S : Profinite` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#LocallyConstant.freeOfProfinite\"><span class=\"name\">LocallyConstant</span>.<span class=\"name\">freeOfProfinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FreeModule/Basic.html#Module.Free\">Module.Free</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1798-L1821","name":"Profinite.Nobeling.embedding","line":1798,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.embedding","doc":"The map `Nobeling.ι` is a closed embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.embedding\"><span class=\"name\">Profinite</span>.<span class=\"name\">Nobeling</span>.<span class=\"name\">embedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#ClosedEmbedding\">ClosedEmbedding</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.ι\">Profinite.Nobeling.ι</a> <span class=\"fn\">S</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1794-L1794","name":"Profinite.Nobeling.ι","line":1794,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.ι","doc":"The embedding `S → (I → Bool)` where `I` is the set of clopens of `S`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.ι\"><span class=\"name\">Profinite</span>.<span class=\"name\">Nobeling</span>.<span class=\"name\">ι</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span> → <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span></span> // <span class=\"fn\"><a href=\"./Mathlib/Topology/Clopen.html#IsClopen\">IsClopen</a> <span class=\"fn\">C</span></span> }</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1783-L1785","name":"Profinite.NobelingProof.Nobeling_aux","line":1783,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Nobeling_aux","doc":"Given a profinite set `S` and a closed embedding `S → (I → Bool)`, the `ℤ`-module\n`LocallyConstant C ℤ` is free.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Nobeling_aux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Nobeling_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span> → <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hι : <span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#ClosedEmbedding\">ClosedEmbedding</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FreeModule/Basic.html#Module.Free\">Module.Free</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.toCompHaus</span>.toTop</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1771-L1773","name":"Profinite.NobelingProof.GoodProducts.Basis","line":1771,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Basis","doc":"`GoodProducts C` as a `ℤ`-basis for `LocallyConstant C ℤ`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Basis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">Basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis.html#Basis\">Basis</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1764-L1767","name":"Profinite.NobelingProof.GoodProducts.linearIndependent","line":1764,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1751-L1762","name":"Profinite.NobelingProof.GoodProducts.linearIndependentAux","line":1751,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentAux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">Profinite.NobelingProof.P</a> <span class=\"fn\">I</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1742-L1749","name":"Profinite.NobelingProof.GoodProducts.Plimit","line":1742,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Plimit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Plimit\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">Plimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">Ordinal.IsLimit</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ <span class=\"fn\">o'</span> &lt; <span class=\"fn\">o</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">Profinite.NobelingProof.P</a> <span class=\"fn\">I</span> <span class=\"fn\">o'</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">Profinite.NobelingProof.P</a> <span class=\"fn\">I</span> <span class=\"fn\">o</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1732-L1740","name":"Profinite.NobelingProof.GoodProducts.P0","line":1732,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.P0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.P0\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">P0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">Profinite.NobelingProof.P</a> <span class=\"fn\">I</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1696-L1707","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_comp_of_eval","line":1696,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_comp_of_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_comp_of_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_comp_of_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span> →\n  <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> (ι := <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>) <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a>       <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\">Profinite.NobelingProof.GoodProducts.SumEval</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Sum.inr</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1687-L1694","name":"Profinite.NobelingProof.GoodProducts.maxToGood_injective","line":1687,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxToGood_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxToGood_injective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">maxToGood_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxToGood\">Profinite.NobelingProof.GoodProducts.MaxToGood</a> <span class=\"fn\">C</span> <span class=\"fn\">hC</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span> <span class=\"fn\">h₁</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1682-L1685","name":"Profinite.NobelingProof.GoodProducts.MaxToGood","line":1682,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxToGood","doc":"Given `l : MaxProducts C ho`, its `Tail` is a `GoodProducts (C' C ho)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxToGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">MaxToGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span> →\n  <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1612-L1678","name":"Profinite.NobelingProof.GoodProducts.maxTail_isGood","line":1612,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxTail_isGood","doc":"Removing the leading `o` from a term of `MaxProducts C` yields a list which `isGood` with respect to\n`C'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxTail_isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">maxTail_isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1597-L1606","name":"Profinite.NobelingProof.GoodProducts.good_lt_maxProducts","line":1597,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.good_lt_maxProducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.good_lt_maxProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">good_lt_maxProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Lex.html#List.Lex\">List.Lex</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">q</span></span></span> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1582-L1595","name":"Profinite.NobelingProof.GoodProducts.chain'_cons_of_lt","line":1582,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.chain'_cons_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.chain'_cons_of_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">chain'_cons_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(q : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1576-L1580","name":"Profinite.NobelingProof.GoodProducts.max_eq_eval_unapply","line":1576,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval_unapply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval_unapply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">max_eq_eval_unapply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1571-L1574","name":"Profinite.NobelingProof.GoodProducts.max_eq_eval","line":1571,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">max_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1539-L1567","name":"Profinite.NobelingProof.Products.max_eq_eval","line":1539,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">max_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hlh : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1534-L1537","name":"Profinite.NobelingProof.Products.evalCons","line":1534,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalCons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalCons\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">evalCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hla : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">hla</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">Profinite.NobelingProof.e</a> <span class=\"fn\">C</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">l</span>, <span class=\"fn\">property</span> := <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">l</span></span>)</span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1529-L1532","name":"Profinite.NobelingProof.GoodProducts.max_eq_o_cons_tail","line":1529,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_o_cons_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_o_cons_tail\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">max_eq_o_cons_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">l</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1516-L1527","name":"Profinite.NobelingProof.GoodProducts.head!_eq_o_of_maxProducts","line":1516,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.head!_eq_o_of_maxProducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.head!_eq_o_of_maxProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">head!_eq_o_of_maxProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1510-L1514","name":"Profinite.NobelingProof.Products.max_eq_o_cons_tail'","line":1510,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">max_eq_o_cons_tail'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hlh : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hlc : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x_1</span></span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">l</span></span>)</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">l</span></span>)</span></span></span>, <span class=\"fn\">property</span> := <span class=\"fn\">hlc</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1505-L1508","name":"Profinite.NobelingProof.Products.max_eq_o_cons_tail","line":1505,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">max_eq_o_cons_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hlh : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Profinite.NobelingProof.Products.Tail</a> <span class=\"fn\">l</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1502-L1503","name":"Profinite.NobelingProof.Products.Tail","line":1502,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail","doc":"`List.tail` as a `Products`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">Tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1497-L1499","name":"Profinite.NobelingProof.mem_C'_eq_false","line":1497,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.mem_C'_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.mem_C'_eq_false\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">mem_C'_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1494-L1495","name":"Profinite.NobelingProof.swapTrue_eq_true","line":1494,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_eq_true\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">swapTrue_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">Profinite.NobelingProof.SwapTrue</a> <span class=\"fn\">o</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1485-L1490","name":"Profinite.NobelingProof.GoodProducts.square_commutes","line":1485,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.square_commutes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.square_commutes\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">square_commutes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\">Profinite.NobelingProof.GoodProducts.SumEval</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">Sum.inl</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1478-L1482","name":"Profinite.NobelingProof.GoodProducts.span_sum","line":1478,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_sum\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">span_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a>\n      <span class=\"fn\">(<span class=\"fn\">fun\n          (<span class=\"fn\">l</span> :\n            <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a>\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span>)</span>\n      <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1472-L1476","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_sum","line":1472,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_sum\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\">Profinite.NobelingProof.GoodProducts.SumEval</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1468-L1470","name":"Profinite.NobelingProof.GoodProducts.SumEval","line":1468,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval","doc":"Let\n\n`N := LocallyConstant (π C (ord I · < o)) ℤ`\n\n`M := LocallyConstant C ℤ`\n\n`P := LocallyConstant (C' C ho) ℤ`\n\n`ι := GoodProducts (π C (ord I · < o))`\n\n`ι' := GoodProducts (C' C ho')`\n\n`v : ι → N := GoodProducts.eval (π C (ord I · < o))`\n\nThen `SumEval C ho` is the map `u` in the diagram below. It is linearly independent if and only if\n`GoodProducts.eval C` is, see `linearIndependent_iff_sum`. The top row is the exact sequence given\nby `succ_exact` and `succ_mono`. The left square commutes by `GoodProducts.square_commutes`.\n```\n0 --→ N --→ M --→  P\n      ↑     ↑      ↑\n     v|    u|      |\n      ι → ι ⊕ ι' ← ι'\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">SumEval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a>     <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></span> →\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1439-L1442","name":"Profinite.NobelingProof.GoodProducts.sum_equiv_comp_eval_eq_elim","line":1439,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv_comp_eval_eq_elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv_comp_eval_eq_elim\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_equiv_comp_eval_eq_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv\">Profinite.NobelingProof.GoodProducts.sum_equiv</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span>.toFun</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a>\n    <span class=\"fn\">(<span class=\"fn\">fun\n        (<span class=\"fn\">l</span> :\n          <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span>)</span>\n    <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1435-L1437","name":"Profinite.NobelingProof.GoodProducts.sum_equiv","line":1435,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv","doc":"The equivalence from the sum of `GoodProducts (π C (ord I · < o))` and\n`(MaxProducts C ho)` to `GoodProducts C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a>     <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a>   <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1426-L1430","name":"Profinite.NobelingProof.GoodProducts.sum_to_range","line":1426,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to_range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_to_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to\">Profinite.NobelingProof.GoodProducts.sum_to</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1419-L1424","name":"Profinite.NobelingProof.GoodProducts.injective_sum_to","line":1419,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective_sum_to","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective_sum_to\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">injective_sum_to</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to\">Profinite.NobelingProof.GoodProducts.sum_to</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1416-L1417","name":"Profinite.NobelingProof.GoodProducts.sum_to","line":1416,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to","doc":"The inclusion map from the sum of `GoodProducts (π C (ord I · < o))` and\n`(MaxProducts C ho)` to `Products I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_to</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a>     <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></span> →\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1390-L1412","name":"Profinite.NobelingProof.GoodProducts.union_succ","line":1390,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union_succ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">union_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">Profinite.NobelingProof.GoodProducts.MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1388-L1388","name":"Profinite.NobelingProof.GoodProducts.MaxProducts","line":1388,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts","doc":"The `GoodProducts` in `C` that contain `o` (they necessarily start with `o`, see\n`GoodProducts.head!_eq_o_of_maxProducts`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">MaxProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1371-L1376","name":"Profinite.NobelingProof.succ_exact","line":1371,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_exact\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">succ_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">CategoryTheory.ShortComplex.Exact</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/Basic.html#CategoryTheory.ShortComplex.mk\">CategoryTheory.ShortComplex.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span></span>)</span>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\">0</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1367-L1369","name":"Profinite.NobelingProof.succ_mono","line":1367,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">succ_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1332-L1364","name":"Profinite.NobelingProof.CC_exact","line":1332,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_exact\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (y : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1317-L1329","name":"Profinite.NobelingProof.C1_projOrd","line":1317,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1_projOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1_projOrd\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C1_projOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">Profinite.NobelingProof.C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">Profinite.NobelingProof.SwapTrue</a> <span class=\"fn\">o</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1303-L1315","name":"Profinite.NobelingProof.C0_projOrd","line":1303,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0_projOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0_projOrd\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C0_projOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\">Profinite.NobelingProof.C0</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1289-L1301","name":"Profinite.NobelingProof.CC_comp_zero","line":1289,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_comp_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_comp_zero\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC_comp_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Profinite.NobelingProof.Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1286-L1287","name":"Profinite.NobelingProof.Linear_CC'","line":1286,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'","doc":"The difference between `Linear_CC'₁` and `Linear_CC'₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Linear_CC'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1281-L1282","name":"Profinite.NobelingProof.Linear_CC'₁","line":1281,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₁","doc":"The `ℤ`-linear map induced by precomposing with `CC'₁` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₁\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Linear_CC'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1276-L1277","name":"Profinite.NobelingProof.Linear_CC'₀","line":1276,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₀","doc":"The `ℤ`-linear map induced by precomposing with `CC'₀` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₀\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Linear_CC'₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1271-L1272","name":"Profinite.NobelingProof.continuous_CC'₁","line":1271,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₁\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_CC'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₁\">Profinite.NobelingProof.CC'₁</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1269-L1269","name":"Profinite.NobelingProof.continuous_CC'₀","line":1269,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₀\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_CC'₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₀\">Profinite.NobelingProof.CC'₀</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1266-L1267","name":"Profinite.NobelingProof.CC'₁","line":1266,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₁","doc":"The second way to map `C'` into `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₁\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span> → <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1262-L1262","name":"Profinite.NobelingProof.CC'₀","line":1262,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₀","doc":"The first way to map `C'` into `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₀\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC'₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span> → <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1246-L1259","name":"Profinite.NobelingProof.swapTrue_mem_C1","line":1246,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_mem_C1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_mem_C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">swapTrue_mem_C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">Profinite.NobelingProof.C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">Profinite.NobelingProof.SwapTrue</a> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">Profinite.NobelingProof.C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1235-L1242","name":"Profinite.NobelingProof.continuous_swapTrue","line":1235,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_swapTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_swapTrue\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_swapTrue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">Profinite.NobelingProof.SwapTrue</a> <span class=\"fn\">o</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1232-L1233","name":"Profinite.NobelingProof.SwapTrue","line":1232,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue","doc":"Swapping the `o`-th coordinate to `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">SwapTrue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1226-L1226","name":"Profinite.NobelingProof.contained_C'","line":1226,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_C'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1223-L1224","name":"Profinite.NobelingProof.isClosed_C'","line":1223,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_C'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">Profinite.NobelingProof.C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1221-L1221","name":"Profinite.NobelingProof.C'","line":1221,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'","doc":"The intersection of `C0` and the projection of `C1`. We will apply the inductive hypothesis to\nthis set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1212-L1215","name":"Profinite.NobelingProof.union_C0C1_eq","line":1212,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.union_C0C1_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.union_C0C1_eq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">union_C0C1_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\">Profinite.NobelingProof.C0</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">Profinite.NobelingProof.C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1209-L1210","name":"Profinite.NobelingProof.contained_C1","line":1209,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">Profinite.NobelingProof.C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1204-L1207","name":"Profinite.NobelingProof.isClosed_C1","line":1204,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">Profinite.NobelingProof.C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1199-L1202","name":"Profinite.NobelingProof.isClosed_C0","line":1199,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C0\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_C0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\">Profinite.NobelingProof.C0</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1197-L1197","name":"Profinite.NobelingProof.C1","line":1197,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1","doc":"The subset of `C` consisting of those elements whose `o`-th entry is `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1194-L1194","name":"Profinite.NobelingProof.C0","line":1194,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0","doc":"The subset of `C` consisting of those elements whose `o`-th entry is `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1115-L1119","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller","line":1115,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_union_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">Ordinal.IsLimit</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">⋃ (e : <span class=\"fn\">{ <span class=\"fn\">o'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> // <span class=\"fn\"><span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span> }</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1111-L1113","name":"Profinite.NobelingProof.GoodProducts.range_equiv_factorization","line":1111,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_factorization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_factorization\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_factorization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">Ordinal.IsLimit</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">⋃ (e : <span class=\"fn\">{ <span class=\"fn\">o'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> // <span class=\"fn\"><span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span> }</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv\">Profinite.NobelingProof.GoodProducts.range_equiv</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span> <span class=\"fn\">hsC</span></span>)</span>.toFun</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a> <span class=\"fn\">C</span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1108-L1109","name":"Profinite.NobelingProof.GoodProducts.range_equiv","line":1108,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv","doc":"The image of the `GoodProducts` in `C` is equivalent to the union of `smaller C o'` over all\nordinals `o' < o`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">Ordinal.IsLimit</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a>   <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">⋃ (e : <span class=\"fn\">{ <span class=\"fn\">o'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> // <span class=\"fn\"><span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span> }</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1090-L1102","name":"Profinite.NobelingProof.GoodProducts.union","line":1090,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">Ordinal.IsLimit</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⋃ (e : <span class=\"fn\">{ <span class=\"fn\">o'</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> // <span class=\"fn\"><span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span> }</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1074-L1088","name":"Profinite.NobelingProof.Products.limitOrdinal","line":1074,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.limitOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.limitOrdinal\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">limitOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">Ordinal.IsLimit</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span>\n    <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ o' &lt; <span class=\"fn\">o</span>,\n    <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o'</span></span></span></span>)</span> <span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1057-L1068","name":"Profinite.NobelingProof.GoodProducts.smaller_mono","line":1057,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o₁</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1049-L1055","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller","line":1049,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1045-L1047","name":"Profinite.NobelingProof.GoodProducts.smaller_factorization","line":1045,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_factorization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_factorization\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller_factorization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller\">Profinite.NobelingProof.GoodProducts.range_equiv_smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span>.toFun</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a>     <span class=\"fn\">fun\n      (<span class=\"fn\">p</span> :\n        <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>) =&gt;\n    <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1042-L1043","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller","line":1042,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller","doc":"The equivalence from the image of the `GoodProducts` in `LocallyConstant (π C (ord I · < o)) ℤ` to\n`smaller C o`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a>   <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1027-L1035","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective","line":1027,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller_toFun_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun\">Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1024-L1025","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun","line":1024,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun","doc":"The map from the image of the `GoodProducts` in `LocallyConstant (π C (ord I · < o)) ℤ` to\n`smaller C o`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">Profinite.NobelingProof.GoodProducts.smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1016-L1017","name":"Profinite.NobelingProof.GoodProducts.smaller","line":1016,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller","doc":"The image of the `GoodProducts` for `π C (ord I · < o)` in `LocallyConstant C ℤ`. The name `smaller`\nrefers to the setting in which we will use this, when we are mapping in `GoodProducts` from a\nsmaller set, i.e. when `o` is a smaller ordinal than the one `C` is \"contained\" in.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L968-L973","name":"Profinite.NobelingProof.Products.isGood_mono","line":968,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_mono","doc":"If `l` is good w.r.t. `π C (ord I · < o₁)` and `o₁ ≤ o₂`, then it is good w.r.t.\n`π C (ord I · < o₂)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">isGood_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span></span></span>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L960-L962","name":"Profinite.NobelingProof.Products.head_lt_ord_of_isGood","line":960,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head_lt_ord_of_isGood","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head_lt_ord_of_isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">head_lt_ord_of_isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span>\n  <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hn : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L951-L958","name":"Profinite.NobelingProof.Products.eval_πs_image'","line":951,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs_image'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span></span></span>)</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a>     <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">Profinite.NobelingProof.πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a>     <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span></span>)</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a>       <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>}</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L942-L949","name":"Profinite.NobelingProof.Products.eval_πs_image","line":942,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a>     <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a>       <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>}</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L934-L940","name":"Profinite.NobelingProof.Products.eval_πs'","line":934,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hlt : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">Profinite.NobelingProof.πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span></span></span>)</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L929-L932","name":"Profinite.NobelingProof.Products.eval_πs","line":929,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hlt : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L925-L927","name":"Profinite.NobelingProof.Products.lt_ord_of_lt","line":925,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_ord_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_ord_of_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">lt_ord_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L920-L921","name":"Profinite.NobelingProof.injective_πs'","line":920,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">injective_πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">Profinite.NobelingProof.πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L915-L918","name":"Profinite.NobelingProof.coe_πs'","line":915,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">coe_πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">Profinite.NobelingProof.πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">f</span></span>)</span>.toFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.toFun</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span>\n      <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L910-L913","name":"Profinite.NobelingProof.πs'","line":910,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'","doc":"The `ℤ`-linear map induced by precomposition of the projection\n`π C (ord I · < o₂) → π C (ord I · < o₁)` for `o₁ ≤ o₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L908-L908","name":"Profinite.NobelingProof.πs'_apply","line":908,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs'_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₁ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o₂ : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">Profinite.NobelingProof.πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span>\n        <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span></span></span>)</span></span>)</span>\n      <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L902-L904","name":"Profinite.NobelingProof.injective_πs","line":902,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">injective_πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L898-L900","name":"Profinite.NobelingProof.coe_πs","line":898,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">coe_πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L895-L896","name":"Profinite.NobelingProof.πs","line":895,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs","doc":"The `ℤ`-linear map induced by precomposition of the projection `C → π C (ord I · < o)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L893-L893","name":"Profinite.NobelingProof.πs_apply","line":893,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">Profinite.NobelingProof.πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L886-L890","name":"Profinite.NobelingProof.contained_proj","line":886,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L883-L884","name":"Profinite.NobelingProof.isClosed_proj","line":883,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L877-L881","name":"Profinite.NobelingProof.contained_eq_proj","line":877,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_eq_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_eq_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_eq_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L851-L854","name":"Profinite.NobelingProof.GoodProducts.linearIndependentSingleton","line":851,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentSingleton\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentSingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">{<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>}</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L841-L849","name":"Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstantToZeroToCommMonoidWithZeroInstCommSemiringIntInstZeroLocallyConstantSMulIntToSubNegMonoidInstAddGroupLocallyConstantInstAddGroupInt","line":841,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstantToZeroToCommMonoidWithZeroInstCommSemiringIntInstZeroLocallyConstantSMulIntToSubNegMonoidInstAddGroupLocallyConstantInstAddGroupInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstantToZeroToCommMonoidWithZeroInstCommSemiringIntInstZeroLocallyConstantSMulIntToSubNegMonoidInstAddGroupLocallyConstantInstAddGroupInt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instNoZeroSMulDivisorsIntLocallyConstantToZeroToCommMonoidWithZeroInstCommSemiringIntInstZeroLocallyConstantSMulIntToSubNegMonoidInstAddGroupLocallyConstantInstAddGroupInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Basic.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">α</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L826-L839","name":"Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForAllBoolSetInstSingletonSetFalse","line":826,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForAllBoolSetInstSingletonSetFalse","doc":"There is a unique `GoodProducts` for the singleton `{fun _ ↦ false}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForAllBoolSetInstSingletonSetFalse\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instUniqueSubtypeProductsIsGoodSingletonForAllBoolSetInstSingletonSetFalse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> // <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">{<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>}</span> <span class=\"fn\">l</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L813-L822","name":"Profinite.NobelingProof.Products.span_nil_eq_top","line":813,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.span_nil_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.span_nil_eq_top\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">span_nil_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">{<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>}</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a> <span class=\"fn\">{<span class=\"fn\">Profinite.NobelingProof.Products.nil</span>}</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L808-L811","name":"Profinite.NobelingProof.Products.isGood_nil","line":808,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_nil\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">isGood_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">{<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>}</span> <span class=\"fn\">Profinite.NobelingProof.Products.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L803-L806","name":"Profinite.NobelingProof.instNontrivialLocallyConstantInt","line":803,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNontrivialLocallyConstantInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNontrivialLocallyConstantInt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instNontrivialLocallyConstantInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">α</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L798-L801","name":"Profinite.NobelingProof.Products.lt_nil_empty","line":798,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_nil_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_nil_empty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">lt_nil_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">Profinite.NobelingProof.Products.nil</span></span>}</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L796-L796","name":"Profinite.NobelingProof.Products.nil","line":796,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.nil","doc":"The empty list as a `Products` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.nil\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L792-L793","name":"Profinite.NobelingProof.GoodProducts.linearIndependentEmpty","line":792,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentEmpty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L787-L790","name":"Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForAllBoolInstEmptyCollectionSet","line":787,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForAllBoolInstEmptyCollectionSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForAllBoolInstEmptyCollectionSet\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForAllBoolInstEmptyCollectionSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> // <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">l</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L784-L785","name":"Profinite.NobelingProof.instSubsingletonLocallyConstantElemForAllBoolEmptyCollectionSetInstEmptyCollectionSetIntInstTopologicalSpaceSubtypeMemInstMembershipSetTopologicalSpaceInstTopologicalSpaceBool","line":784,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instSubsingletonLocallyConstantElemForAllBoolEmptyCollectionSetInstEmptyCollectionSetIntInstTopologicalSpaceSubtypeMemInstMembershipSetTopologicalSpaceInstTopologicalSpaceBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instSubsingletonLocallyConstantElemForAllBoolEmptyCollectionSetInstEmptyCollectionSetIntInstTopologicalSpaceSubtypeMemInstMembershipSetTopologicalSpaceInstTopologicalSpaceBool\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instSubsingletonLocallyConstantElemForAllBoolEmptyCollectionSetInstEmptyCollectionSetIntInstTopologicalSpaceSubtypeMemInstMembershipSetTopologicalSpaceInstTopologicalSpaceBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L763-L772","name":"Profinite.NobelingProof.Products.prop_of_isGood_of_contained","line":763,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood_of_contained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood_of_contained\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">prop_of_isGood_of_contained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hsC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">Profinite.NobelingProof.contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L758-L761","name":"Profinite.NobelingProof.P","line":758,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P","doc":"The predicate on ordinals which we prove by induction, see `GoodProducts.P0`,\n`GoodProducts.Plimit` and `GoodProducts.linearIndependentAux` in the section `Induction` below\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">P</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L751-L751","name":"Profinite.NobelingProof.contained","line":751,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained","doc":"A predicate saying that `C` is \"small\" enough to satisfy the inductive hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L742-L748","name":"Profinite.NobelingProof.ord_term","line":742,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ord_term</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L738-L740","name":"Profinite.NobelingProof.ord_term_aux","line":738,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term_aux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ord_term_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L733-L735","name":"Profinite.NobelingProof.term_ord_aux","line":733,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term_ord_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term_ord_aux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">term_ord_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">Profinite.NobelingProof.ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">Profinite.NobelingProof.term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L728-L729","name":"Profinite.NobelingProof.term","line":728,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term","doc":"An ordinal regarded as a term of `I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{o : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ho : <span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">I</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L724-L724","name":"Profinite.NobelingProof.ord","line":724,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord","doc":"A term of `I` regarded as an ordinal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L688-L696","name":"Profinite.NobelingProof.GoodProducts.span","line":688,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span","doc":"The good products span all of `LocallyConstant C ℤ` if `C` is closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">span</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L678-L685","name":"Profinite.NobelingProof.fin_comap_jointlySurjective","line":678,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.fin_comap_jointlySurjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.fin_comap_jointlySurjective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">fin_comap_jointlySurjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) (g : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>),\n  <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L624-L674","name":"Profinite.NobelingProof.GoodProducts.spanFin","line":624,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.spanFin","doc":"If `s` is a finite subset of `I`, then the good products span. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.spanFin\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">spanFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L605-L621","name":"Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval","line":605,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">finsupp_sum_mem_span_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">c</span>.support</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">as</span></span>}</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Finsupp.html#Finsupp.sum\">Finsupp.sum</a> <span class=\"fn\">c</span> <span class=\"fn\">fun (<span class=\"fn\">a_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) =&gt;\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">Profinite.NobelingProof.e</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a>       <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span> <span class=\"fn\">a_1</span></span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span> <a href=\"./Mathlib/Init/Set.html#Set.image\">''</a>       <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> | <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span></span></span>}</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L598-L603","name":"Profinite.NobelingProof.factors_prod_eq_basis","line":598,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis","doc":"If `s` is finite, the product of the elements of the list `factors C s x`\nis the delta function at `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">Profinite.NobelingProof.factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis\">Profinite.NobelingProof.spanFinBasis</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L580-L594","name":"Profinite.NobelingProof.factors_prod_eq_basis_of_ne","line":580,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_ne\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">Profinite.NobelingProof.factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L571-L578","name":"Profinite.NobelingProof.one_sub_e_mem_of_false","line":571,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.one_sub_e_mem_of_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.one_sub_e_mem_of_false\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">one_sub_e_mem_of_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">y</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">Profinite.NobelingProof.e</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">Profinite.NobelingProof.factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L563-L569","name":"Profinite.NobelingProof.e_mem_of_eq_true","line":563,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e_mem_of_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e_mem_of_eq_true\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">e_mem_of_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">Profinite.NobelingProof.e</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">Profinite.NobelingProof.factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L551-L561","name":"Profinite.NobelingProof.factors_prod_eq_basis_of_eq","line":551,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_eq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">Profinite.NobelingProof.factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L546-L549","name":"Profinite.NobelingProof.list_prod_apply","line":546,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.list_prod_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.list_prod_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">list_prod_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Algebra.html#LocallyConstant.evalMonoidHom\">LocallyConstant.evalMonoidHom</a> <span class=\"fn\">x</span></span>)</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L542-L544","name":"Profinite.NobelingProof.factors","line":542,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors","doc":"A certain explicit list of locally constant maps. The theorem `factors_prod_eq_basis` shows that the\nproduct of the elements in this list is the delta function `spanFinBasis C s x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L527-L536","name":"Profinite.NobelingProof.spanFinBasis.span","line":527,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis.span","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis.span\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFinBasis</span>.<span class=\"name\">span</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis\">Profinite.NobelingProof.spanFinBasis</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L520-L524","name":"Profinite.NobelingProof.spanFinBasis","line":520,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis","doc":"The Kronecker delta as a locally constant map from `π C (· ∈ s)` to `ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFinBasis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L507-L514","name":"Profinite.NobelingProof.instFintypeElemForAllBoolπMemFinsetInstMembershipFinsetDecidableMemInstDecidableEq","line":507,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instFintypeElemForAllBoolπMemFinsetInstMembershipFinsetDecidableMemInstDecidableEq","doc":"`π C (· ∈ s)` is finite for a finite set `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instFintypeElemForAllBoolπMemFinsetInstMembershipFinsetDecidableMemInstDecidableEq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instFintypeElemForAllBoolπMemFinsetInstMembershipFinsetDecidableMemInstDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L498-L503","name":"Profinite.NobelingProof.eval_eq_πJ","line":498,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.eval_eq_πJ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.eval_eq_πJ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">eval_eq_πJ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πJ\">Profinite.NobelingProof.πJ</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L495-L496","name":"Profinite.NobelingProof.πJ","line":495,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πJ","doc":"The `ℤ`-linear map induced by precomposition of the projection `C → π C (· ∈ s)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πJ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πJ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L451-L469","name":"Profinite.NobelingProof.GoodProducts.span_iff_products","line":451,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_iff_products","doc":"The good products span `LocallyConstant C ℤ` if and only all the products do. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_iff_products\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">span_iff_products</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L431-L446","name":"Profinite.NobelingProof.Products.eval_mem_span_goodProducts","line":431,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_mem_span_goodProducts","doc":"An arbitrary product `e C i₁ * e C i₂ * ... * e C iᵣ` is in the ℤ-span of the good products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_mem_span_goodProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_mem_span_goodProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L414-L428","name":"Profinite.NobelingProof.Products.prop_of_isGood","line":414,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">prop_of_isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">j</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span> → <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L405-L412","name":"Profinite.NobelingProof.Products.evalFacProps","line":405,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProps\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">evalFacProps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ <span class=\"fn\">a</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">j</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">j</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hJK : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a>     <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">hJK</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L394-L403","name":"Profinite.NobelingProof.Products.evalFacProp","line":394,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProp\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">evalFacProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ <span class=\"fn\">a</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">j</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L378-L392","name":"Profinite.NobelingProof.Products.eval_eq","line":378,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_eq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">↑<span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Profinite.NobelingProof.Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L369-L372","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_range","line":369,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a> <span class=\"fn\">C</span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L367-L367","name":"Profinite.NobelingProof.GoodProducts.equiv_toFun_eq_eval","line":367,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_toFun_eq_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_toFun_eq_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">equiv_toFun_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_range\">Profinite.NobelingProof.GoodProducts.equiv_range</a> <span class=\"fn\">C</span></span>)</span>.toFun</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.rangeFactorization\">Set.rangeFactorization</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L364-L365","name":"Profinite.NobelingProof.GoodProducts.equiv_range","line":364,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_range","doc":"The type of good products is equivalent to its image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">equiv_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">Profinite.NobelingProof.GoodProducts</a> <span class=\"fn\">C</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">Profinite.NobelingProof.GoodProducts.range</a> <span class=\"fn\">C</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L360-L360","name":"Profinite.NobelingProof.GoodProducts.range","line":360,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range","doc":"The image of the good products in the module `LocallyConstant C ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L349-L357","name":"Profinite.NobelingProof.GoodProducts.injective","line":349,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">Profinite.NobelingProof.GoodProducts.eval</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L346-L347","name":"Profinite.NobelingProof.GoodProducts.eval","line":346,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval","doc":"Evaluation of good products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\">{ <span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span> // <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Profinite.NobelingProof.Products.isGood</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L341-L341","name":"Profinite.NobelingProof.GoodProducts","line":341,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts","doc":"The set of good products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L334-L336","name":"Profinite.NobelingProof.Products.head!_le_of_lt","line":334,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head!_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head!_le_of_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">head!_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hq : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L331-L332","name":"Profinite.NobelingProof.Products.rel_head!_of_mem","line":331,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.rel_head!_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.rel_head!_of_mem\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">rel_head!_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.head!\">List.head!</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L328-L329","name":"Profinite.NobelingProof.Products.isGood","line":328,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood","doc":"The predicate on products which we prove picks out a basis of `LocallyConstant C ℤ`. We call such a\nproduct \"good\".\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L322-L322","name":"Profinite.NobelingProof.Products.eval","line":322,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval","doc":"The evaluation `e C i₁ ··· e C iᵣ : C → ℤ`  of a formal product `[i₁, i₂, ..., iᵣ]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L313-L319","name":"Profinite.NobelingProof.Products.instIsWellFoundedProductsLtToLTToPreorderToPartialOrderToSemilatticeInfToLatticeInstDistribLatticeInstLinearOrderProducts","line":313,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instIsWellFoundedProductsLtToLTToPreorderToPartialOrderToSemilatticeInfToLatticeInstDistribLatticeInstLinearOrderProducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instIsWellFoundedProductsLtToLTToPreorderToPartialOrderToSemilatticeInfToLatticeInstDistribLatticeInstLinearOrderProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">instIsWellFoundedProductsLtToLTToPreorderToPartialOrderToSemilatticeInfToLatticeInstDistribLatticeInstLinearOrderProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <span class=\"fn\">I</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellFounded\">IsWellFounded</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L310-L311","name":"Profinite.NobelingProof.Products.lt_iff_lex_lt","line":310,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_iff_lex_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_iff_lex_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">lt_iff_lex_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/Lex.html#List.Lex\">List.Lex</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span> <span class=\"fn\">↑<span class=\"fn\">m</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L306-L307","name":"Profinite.NobelingProof.Products.instLinearOrderProducts","line":306,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instLinearOrderProducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instLinearOrderProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">instLinearOrderProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Profinite.NobelingProof.Products</a> <span class=\"fn\">I</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L302-L302","name":"Profinite.NobelingProof.Products","line":302,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products","doc":"`Products I` is the type of lists of decreasing elements of `I`, so a typical element is\n`[i₁, i₂, ...]` with `i₁ > i₂ > ...`. We order `Products I` lexicographically, so `[] < [i₁, ...]`,\nand `[i₁, i₂, ...] < [j₁, j₂, ...]` if either `i₁ < j₁`, or `i₁ = j₁` and `[i₂, ...] < [j₂, ...]`.\n\nTerms `m = [i₁, i₂, ..., iᵣ]` of this type will be used to represent products of the form\n`e C i₁ ··· e C iᵣ : LocallyConstant C ℤ` . The function associated to `m` is `m.eval`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(I : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L287-L292","name":"Profinite.NobelingProof.e","line":287,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e","doc":"`e C i` is the locally constant map from `C : Set (I → Bool)` to `ℤ` sending `f` to 1 if\n`f.val i = true`, and 0 otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">e</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L231-L246","name":"Profinite.NobelingProof.spanCone_isLimit","line":231,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone_isLimit","doc":"`spanCone` is a limit cone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone_isLimit\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanCone_isLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#IsCompact\">IsCompact</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone\">Profinite.NobelingProof.spanCone</a> <span class=\"fn\">hC</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L218-L227","name":"Profinite.NobelingProof.spanCone","line":218,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone","doc":"The limit cone on `spanFunctor` with point `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#IsCompact\">IsCompact</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFunctor\">Profinite.NobelingProof.spanFunctor</a> <span class=\"fn\">hC</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L208-L214","name":"Profinite.NobelingProof.spanFunctor","line":208,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFunctor","doc":"For a given compact subset `C` of `I → Bool`, `spanFunctor` is the functor from the poset of finsets\nof `I` to `Profinite`, sending a finite subset set `J` to the image of `C` under the projection\n`Proj J`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFunctor\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hC : <span class=\"fn\"><a href=\"./Mathlib/Topology/Compactness/Compact.html#IsCompact\">IsCompact</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L185-L198","name":"Profinite.NobelingProof.iso_map_bijective","line":185,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map_bijective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">iso_map_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map\">Profinite.NobelingProof.iso_map</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L176-L183","name":"Profinite.NobelingProof.iso_map","line":176,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map","doc":"The objectwise map in the isomorphism `spanFunctor ≅ Profinite.indexFunctor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">iso_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">C(</a><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">,</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Product.html#Profinite.IndexFunctor.obj\">Profinite.IndexFunctor.obj</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span></span><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMap\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L167-L171","name":"Profinite.NobelingProof.projRestricts_comp_projRestrict","line":167,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_comp_projRestrict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_comp_projRestrict\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">projRestricts_comp_projRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L161-L165","name":"Profinite.NobelingProof.projRestricts_eq_comp","line":161,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_comp\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">projRestricts_eq_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hJK : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hKL : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">hJK</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">hKL</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L157-L159","name":"Profinite.NobelingProof.projRestricts_eq_id","line":157,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_id\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">projRestricts_eq_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L153-L154","name":"Profinite.NobelingProof.surjective_projRestricts","line":153,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.surjective_projRestricts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.surjective_projRestricts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">surjective_projRestricts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L150-L151","name":"Profinite.NobelingProof.continuous_projRestricts","line":150,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestricts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestricts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_projRestricts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L146-L147","name":"Profinite.NobelingProof.ProjRestricts","line":146,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts","doc":"A variant of `ProjRestrict` with domain of the form `π C K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestricts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span></span>)</span></span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L145-L145","name":"Profinite.NobelingProof.ProjRestricts_coe","line":145,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts_coe\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestricts_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span></span>)</span></span>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">I</span>),\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">Profinite.NobelingProof.ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L130-L140","name":"Profinite.NobelingProof.proj_eq_of_subset","line":130,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_of_subset\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_eq_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span></span>)</span> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L126-L128","name":"Profinite.NobelingProof.proj_comp_of_subset","line":126,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_comp_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_comp_of_subset\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_comp_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(K : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">K</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">J</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L120-L124","name":"Profinite.NobelingProof.proj_prop_eq_self","line":120,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_prop_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_prop_eq_self\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_prop_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hh : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">C</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> → <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L114-L118","name":"Profinite.NobelingProof.proj_eq_self","line":114,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_self\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> → <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">J</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L111-L112","name":"Profinite.NobelingProof.continuous_projRestrict","line":111,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestrict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestrict\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_projRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L107-L108","name":"Profinite.NobelingProof.ProjRestrict","line":107,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict","doc":"The restriction of `Proj π J` to a subset, mapping to its image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">C</span></span> → <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">Profinite.NobelingProof.π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L106-L106","name":"Profinite.NobelingProof.ProjRestrict_coe","line":106,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict_coe\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestrict_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">C</span></span>) (<span class=\"fn\">a_1</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">Profinite.NobelingProof.ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">J</span> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L103-L103","name":"Profinite.NobelingProof.π","line":103,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π","doc":"The image of `Proj π J` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L93-L100","name":"Profinite.NobelingProof.continuous_proj","line":93,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Profinite.NobelingProof.Proj</a> <span class=\"fn\">J</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/Profinite/Nobeling.lean#L89-L90","name":"Profinite.NobelingProof.Proj","line":89,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj","doc":"The projection mapping everything that satisfies `J i` to itself, and everything else to `false`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(J : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"}]}