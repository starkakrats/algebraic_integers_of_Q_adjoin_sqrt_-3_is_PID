{"name":"Std.Data.RBMap.Alter","instances":[],"imports":["Init","Std.Data.RBMap.WF"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L458-L464","name":"Std.RBMap.alter","line":458,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBMap.alter","doc":"`O(log n)`. `alterP cut f t` simultaneously handles inserting, erasing and replacing an element\nusing a function `f : Option α → Option α`. It is passed the result of `t.findP? cut`\nand can either return `none` to remove the element or `some a` to replace/insert\nthe element with `a` (which must have the same ordering properties as the original element).\n\nThe element is used linearly if `t` is unshared.\n\nThe `AlterWF` assumption is required because `f` may change\nthe ordering properties of the element, which would break the invariants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBMap.alter\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L437-L445","name":"Std.RBMap.alter.adapt","line":437,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBMap.alter.adapt","doc":"Auxiliary definition for `alter`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBMap.alter.adapt\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">alter</span>.<span class=\"name\">adapt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L432-L434","name":"Std.RBMap.modify","line":432,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBMap.modify","doc":"`O(log n)`. In-place replace the corresponding to key `k`.\nThis takes the element out of the tree while `f` runs,\nso it uses the element linearly if `t` is unshared.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBMap.modify\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L417-L421","name":"Std.RBSet.ModifyWF.of_eq","line":417,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBSet.ModifyWF.of_eq","doc":"A sufficient condition for `ModifyWF` is that the new element compares equal to the original.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBSet.ModifyWF.of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\"><span class=\"fn\">t</span>.val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet.ModifyWF\">Std.RBSet.ModifyWF</a> <span class=\"fn\">t</span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L405-L407","name":"Std.RBNode.find?_eq_zoom","line":405,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.find?_eq_zoom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.find?_eq_zoom\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_eq_zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">Std.RBNode.Path.root</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.find?\">Std.RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.root?\">Std.RBNode.root?</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">p</span></span>)</span>.fst</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L400-L403","name":"Std.RBNode.WF.modify","line":400,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.WF.modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.WF.modify\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot\">Std.RBNode.OnRoot</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span>)</span>.fst</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.modify\">Std.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L394-L398","name":"Std.RBNode.WF.alter","line":394,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.WF.alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.WF.alter\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">p</span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.root?\">Std.RBNode.root?</a> <span class=\"fn\">t'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot\">Std.RBNode.OnRoot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">t'</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.alter\">Std.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L391-L392","name":"Std.RBNode.Balanced.modify","line":391,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.modify","doc":"The `modify` function preserves the balance invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.modify\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.modify\">Std.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L383-L388","name":"Std.RBNode.Ordered.modify","line":383,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.modify","doc":"The `modify` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.modify\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot\">Std.RBNode.OnRoot</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span>)</span>.fst</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.modify\">Std.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L379-L380","name":"Std.RBNode.modify_eq_alter","line":379,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.modify_eq_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.modify_eq_alter\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">modify_eq_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.modify\">Std.RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.alter\">Std.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L361-L377","name":"Std.RBNode.Balanced.alter","line":361,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.alter","doc":"The `alter` function preserves the balance invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.alter\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.alter\">Std.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L343-L358","name":"Std.RBNode.Ordered.alter","line":343,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.alter","doc":"The `alter` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.alter\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">p</span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.root?\">Std.RBNode.root?</a> <span class=\"fn\">t'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot\">Std.RBNode.OnRoot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">t'</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.alter\">Std.RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L333-L336","name":"Std.RBNode.Path.Ordered.erase","line":333,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.erase\">Std.RBNode.Path.erase</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L319-L331","name":"Std.RBNode.Path.Ordered.del","line":319,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.del","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.del\">Std.RBNode.Path.del</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span> <span class=\"fn\">c</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L312-L317","name":"Std.RBNode.Path.Ordered.insert","line":312,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span> <span class=\"fn\">t</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span> →\n        <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot\">Std.RBNode.OnRoot</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insert\">Std.RBNode.Path.insert</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L308-L310","name":"Std.RBNode.Path.Ordered.insertNew","line":308,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.insertNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.insertNew\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">insertNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insertNew\">Std.RBNode.Path.insertNew</a> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L294-L306","name":"Std.RBNode.Path.Ordered.ins","line":294,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.ins","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins\">Std.RBNode.Path.ins</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L289-L292","name":"Std.RBNode.Ordered.zoom","line":289,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.zoom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.zoom\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span></span>)</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed\">Std.RBNode.Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L282-L287","name":"Std.RBNode.Ordered.zoom'","line":282,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.zoom'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Ordered.zoom'\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">zoom'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pz : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed\">Std.RBNode.Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span></span>)</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed\">Std.RBNode.Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L268-L280","name":"Std.RBNode.Path.Ordered.fill","line":268,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.fill","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered.fill\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\">Std.RBNode.Path.fill</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\">Std.RBNode.Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span> <span class=\"fn\">t</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L259-L266","name":"Std.RBNode.Path.Ordered","line":259,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered","doc":"The ordering invariant for a `Path`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Ordered\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L252-L256","name":"Std.RBNode.Path.Zoomed.toRootOrdered","line":252,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed.toRootOrdered","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed.toRootOrdered\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Zoomed</span>.<span class=\"name\">toRootOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed\">Std.RBNode.Path.Zoomed</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">path</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L246-L250","name":"Std.RBNode.cmpEq.RootOrdered_congr","line":246,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.cmpEq.RootOrdered_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.cmpEq.RootOrdered_congr\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span>.<span class=\"name\">RootOrdered_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\">Std.RBNode.Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L241-L244","name":"Std.RBNode.Path.RootOrdered","line":241,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered","doc":"`path.RootOrdered cmp v` is true if `v` would be able to fit into the hole\nwithout violating the ordering invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.RootOrdered\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">RootOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L227-L235","name":"Std.RBNode.Path.zoom_zoomed₂","line":227,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_zoomed₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_zoomed₂\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_zoomed₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}\n  {<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed\">Std.RBNode.Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed\">Std.RBNode.Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L218-L225","name":"Std.RBNode.Path.zoom_zoomed₁","line":218,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_zoomed₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_zoomed₁\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_zoomed₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}\n  {<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot\">Std.RBNode.OnRoot</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></span></span>)</span> <span class=\"fn\">t'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L213-L216","name":"Std.RBNode.Path.Zoomed","line":213,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed","doc":"The property of a path returned by `t.zoom cut`. Each of the parents visited along the path have\nthe appropriate ordering relation to the cut.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Zoomed\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Zoomed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L204-L207","name":"Std.RBNode.Path.AllR","line":204,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.AllR","doc":"Asserts that `p` holds on all elements to the right of the hole. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.AllR\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">AllR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L198-L201","name":"Std.RBNode.Path.AllL","line":198,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.AllL","doc":"Asserts that `p` holds on all elements to the left of the hole. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.AllL\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">AllL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L178-L195","name":"Std.RBNode.Path.Balanced.del","line":178,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.del","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c' : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp\">Std.RBNode.DelProp</a> <span class=\"fn\">c'</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hc : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a></span> → <span class=\"fn\"><span class=\"fn\">c'</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.del\">Std.RBNode.Path.del</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span> <span class=\"fn\">c'</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L169-L176","name":"Std.RBNode.Path.zoom_insert","line":169,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insert\">Std.RBNode.Path.insert</a> <span class=\"fn\">path</span> <span class=\"fn\">t'</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L163-L167","name":"Std.RBNode.Path.Balanced.insert","line":163,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insert\">Std.RBNode.Path.insert</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L160-L161","name":"Std.RBNode.Path.Balanced.insertNew","line":160,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.insertNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.insertNew\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">insertNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span> <span class=\"fn\">path</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insertNew\">Std.RBNode.Path.insertNew</a> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L144-L158","name":"Std.RBNode.Path.Balanced.ins","line":144,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.ins","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ht : <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins\">Std.RBNode.Path.ins</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L137-L142","name":"Std.RBNode.Path.ins_eq_fill","line":137,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.ins_eq_fill","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.ins_eq_fill\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ins_eq_fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins\">Std.RBNode.Path.ins</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\">Std.RBNode.Path.fill</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L123-L135","name":"Std.RBNode.Balanced.zoom","line":123,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.zoom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Balanced.zoom\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">zoom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}\n  {<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">c₀</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} {<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span> →\n        <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t'</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path'</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L117-L121","name":"Std.RBNode.Path.Balanced.fill","line":117,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.fill","doc":"The defining property of a balanced path: If `path` is a `c₀,n₀` tree with a `c,n` hole,\nthen filling the hole with a `c,n` tree yields a `c₀,n₀` tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.fill\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\">Std.RBNode.Path.fill</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L109-L111","name":"Std.RBNode.Path.Balanced.blackR","line":109,"kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.blackR","doc":"Descend into the right subtree of a black node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.blackR\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">blackR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{parent : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">x</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.right\">Std.RBNode.Path.right</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">parent</span></span>)</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L106-L108","name":"Std.RBNode.Path.Balanced.blackL","line":106,"kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.blackL","doc":"Descend into the left subtree of a black node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.blackL\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">blackL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{parent : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">y</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.left\">Std.RBNode.Path.left</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">parent</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L103-L105","name":"Std.RBNode.Path.Balanced.redR","line":103,"kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.redR","doc":"Descend into the right subtree of a red node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.redR\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">redR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{parent : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">x</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.right\">Std.RBNode.Path.right</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">parent</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L100-L102","name":"Std.RBNode.Path.Balanced.redL","line":100,"kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.redL","doc":"Descend into the left subtree of a red node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.redL\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">redL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{parent : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">y</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.left\">Std.RBNode.Path.left</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">parent</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L98-L99","name":"Std.RBNode.Path.Balanced.root","line":98,"kind":"ctor","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.root","doc":"The root of the tree is `c₀, n₀`-balanced by assumption. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced.root\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\">Std.RBNode.Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">Std.RBNode.Path.root</span> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L97-L111","name":"Std.RBNode.Path.Balanced","line":97,"kind":"inductive","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced","doc":"The balance invariant for a path. `path.Balanced c₀ n₀ c n` means that `path` is a red-black tree\nwith balance invariant `c₀, n₀`, but it has a \"hole\" where a tree with balance invariant `c, n`\nhas been removed. The defining property is `Balanced.fill`: if `path.Balanced c₀ n₀ c n` and you\nfill the hole with a tree satisfying `t.Balanced c n`, then `(path.fill t).Balanced c₀ n₀` .\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.Balanced\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c₀ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n₀ : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L72-L88","name":"Std.RBNode.Path.zoom_del","line":72,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_del","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.del\">Std.RBNode.Path.del</a> <span class=\"fn\">path</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.del\">Std.RBNode.del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">t</span> with\n      | <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <span class=\"fn\">c</span> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> =&gt; <span class=\"fn\">c</span>\n      | <span class=\"fn\">x</span> =&gt; <span class=\"fn\">Std.RBColor.red</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.del\">Std.RBNode.Path.del</a> <span class=\"fn\">path'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.delRoot\">Std.RBNode.delRoot</a> <span class=\"fn\">t'</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\">match <span class=\"fn\">t'</span> with\n      | <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <span class=\"fn\">c</span> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> =&gt; <span class=\"fn\">c</span>\n      | <span class=\"fn\">x</span> =&gt; <span class=\"fn\">Std.RBColor.red</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L68-L70","name":"Std.RBNode.Path.insertNew_eq_insert","line":68,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.insertNew_eq_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.insertNew_eq_insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insertNew_eq_insert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">v</span> : <span class=\"fn\">α</span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">Std.RBNode.Path.root</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">Std.RBNode.nil</span>, <span class=\"fn\">path</span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.insertNew\">Std.RBNode.Path.insertNew</a> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L57-L66","name":"Std.RBNode.Path.zoom_ins","line":57,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_ins","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{path' : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins\">Std.RBNode.Path.ins</a> <span class=\"fn\">path</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.ins\">Std.RBNode.ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.ins\">Std.RBNode.Path.ins</a> <span class=\"fn\">path'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.setRoot\">Std.RBNode.setRoot</a> <span class=\"fn\">v</span> <span class=\"fn\">t'</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L54-L55","name":"Std.RBNode.Path.zoom_fill","line":54,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_fill","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_fill\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_fill</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}\n  {<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">t'</span>, <span class=\"fn\">path'</span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\">Std.RBNode.Path.fill</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\">Std.RBNode.Path.fill</a> <span class=\"fn\">path'</span> <span class=\"fn\">t'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L48-L52","name":"Std.RBNode.Path.zoom_fill'","line":48,"kind":"theorem","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_fill'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.zoom_fill'\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_fill'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(path : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.fill'\">Std.RBNode.Path.fill'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.zoom\">Std.RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path.fill\">Std.RBNode.Path.fill</a> <span class=\"fn\">path</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L46-L46","name":"Std.RBNode.Path.fill'","line":46,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.fill'","doc":"Same as `fill` but taking its arguments in a pair for easier composition with `zoom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.Path.fill'\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">fill'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Path\">Std.RBNode.Path</a> <span class=\"fn\">α</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L39-L41","name":"Std.RBNode.delRoot","line":39,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.delRoot","doc":"Auxiliary definition for `zoom_ins`: set the root of the tree to `v`, creating a node if necessary.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.delRoot\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">delRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L32-L34","name":"Std.RBNode.setRoot","line":32,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.setRoot","doc":"Auxiliary definition for `zoom_ins`: set the root of the tree to `v`, creating a node if necessary.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.setRoot\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/Alter.lean#L25-L27","name":"Std.RBNode.OnRoot","line":25,"kind":"def","docLink":"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot","doc":"Asserts that property `p` holds on the root of the tree, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/Alter.html#Std.RBNode.OnRoot\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">OnRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}