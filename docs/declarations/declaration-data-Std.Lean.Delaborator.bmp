{"name":"Std.Lean.Delaborator","instances":[],"imports":["Init","Lean.PrettyPrinter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Delaborator.lean#L44-L55","name":"Lean.ppConst","line":44,"kind":"def","docLink":"./Std/Lean/Delaborator.html#Lean.ppConst","doc":"Pretty print a const expression using `delabConst` and generate terminfo.\nThis function avoids inserting `@` if the constant is for a function whose first\nargument is implicit, which is what the default `toMessageData` for `Expr` does.\nPanics if `e` is not a constant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Delaborator.html#Lean.ppConst\"><span class=\"name\">Lean</span>.<span class=\"name\">ppConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Delaborator.lean#L30-L36","name":"Lean.PrettyPrinter.Delaborator.withOverApp.loop","line":30,"kind":"def","docLink":"./Std/Lean/Delaborator.html#Lean.PrettyPrinter.Delaborator.withOverApp.loop","doc":"Inner loop of `withOverApp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Delaborator.html#Lean.PrettyPrinter.Delaborator.withOverApp.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withOverApp</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kinds : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">Lean.PrettyPrinter.Delaborator.ParamKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">Lean.PrettyPrinter.Delaborator.DelabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Delaborator.lean#L24-L38","name":"Lean.PrettyPrinter.Delaborator.withOverApp","line":24,"kind":"def","docLink":"./Std/Lean/Delaborator.html#Lean.PrettyPrinter.Delaborator.withOverApp","doc":"This is similar to `withAppFnArgs` but it handles construction of an \"over-application\".\nFor example, suppose we want to implement a delaborator for applications of `f : Foo A → A`\nlike `f x` as `F[x]`, but because `A` is a type variable we might encounter a term of the form\n`@f (A → B) x y` which has an additional argument `y`.\n\nMost of the built in delaborators will deliberately fail on such an example, resulting in\ndelaborated syntax `f x y`, but this combinator can be used if we want to display `F[x] y`\ninstead.\n\n* `arity`: the expected number of arguments to `f`.\n  The combinator will fail if fewer than this number of arguments are passed\n* `x`: constructs data corresponding to the main application (`f x` in the example)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Delaborator.html#Lean.PrettyPrinter.Delaborator.withOverApp\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withOverApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(arity : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Lean.PrettyPrinter.Delaborator.Delab</a></div></div>"}]}