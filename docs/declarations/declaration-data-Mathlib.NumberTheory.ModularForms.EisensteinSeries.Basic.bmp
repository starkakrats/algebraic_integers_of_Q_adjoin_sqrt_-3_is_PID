{"name":"Mathlib.NumberTheory.ModularForms.EisensteinSeries.Basic","instances":[],"imports":["Init","Mathlib.NumberTheory.ModularForms.SlashInvariantForms","Mathlib.NumberTheory.ModularForms.CongruenceSubgroups"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L119-L122","name":"EisensteinSeries.eisensteinSeries_SIF","line":119,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries_SIF","doc":"The SlashInvariantForm defined by an Eisenstein series of weight `k : ℤ`, level `Γ(N)`,\nand congruence condition given by `a : Fin 2 → ZMod N`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries_SIF\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">eisensteinSeries_SIF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/SlashInvariantForms.html#SlashInvariantForm\">SlashInvariantForm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#Gamma\">Gamma</a> <span class=\"fn\">N</span></span>)</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L109-L115","name":"EisensteinSeries.eisensteinSeries_slash_apply","line":109,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries_slash_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries_slash_apply\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">eisensteinSeries_slash_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">Matrix.SpecialLinearGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/SlashActions.html#SlashAction.map\">SlashAction.map</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">k</span> <span class=\"fn\">γ</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries\">EisensteinSeries.eisensteinSeries</a> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries\">EisensteinSeries.eisensteinSeries</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup.map\">Matrix.SpecialLinearGroup.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Lemmas.html#Int.castRingHom\">Int.castRingHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">γ</span></span>)</span></span></span>)</span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L107-L107","name":"EisensteinSeries.eisensteinSeries","line":107,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries","doc":"An Eisenstein series of weight `k` and level `Γ(N)`, with congruence condition `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisensteinSeries\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">eisensteinSeries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L92-L100","name":"EisensteinSeries.eisSummand_SL2_apply","line":92,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisSummand_SL2_apply","doc":"How the `eisSummand` function changes under the Moebius action. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisSummand_SL2_apply\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">eisSummand_SL2_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">Matrix.SpecialLinearGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisSummand\">EisensteinSeries.eisSummand</a> <span class=\"fn\">k</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane.denom\">UpperHalfPlane.denom</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A</span></span>)</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisSummand\">EisensteinSeries.eisSummand</a> <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">i</span> <span class=\"fn\">↑<span class=\"fn\">A</span></span></span>)</span> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L89-L89","name":"EisensteinSeries.eisSummand","line":89,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisSummand","doc":"The function on `(Fin 2 → ℤ)` whose sum defines an Eisenstein series."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.eisSummand\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">eisSummand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L72-L82","name":"EisensteinSeries.gammaSetEquiv","line":72,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSetEquiv","doc":"The bijection between `GammaSets` given by multiplying by an element of `SL(2, ℤ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSetEquiv\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">gammaSetEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">Matrix.SpecialLinearGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">N</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a>   <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">N</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup.map\">Matrix.SpecialLinearGroup.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Lemmas.html#Int.castRingHom\">Int.castRingHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">γ</span></span>)</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L62-L68","name":"EisensteinSeries.vecMul_SL2_mem_gammaSet","line":62,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.vecMul_SL2_mem_gammaSet","doc":"Right-multiplying by `γ ∈ SL(2, ℤ)` sends `gammaSet N a` to `gammaSet N (vecMul a γ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.vecMul_SL2_mem_gammaSet\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">vecMul_SL2_mem_gammaSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hv : <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">N</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(γ : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">Matrix.SpecialLinearGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">v</span> <span class=\"fn\">↑<span class=\"fn\">γ</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">N</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Basic.html#Matrix.vecMul\">Matrix.vecMul</a> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup.map\">Matrix.SpecialLinearGroup.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Lemmas.html#Int.castRingHom\">Int.castRingHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">γ</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L52-L53","name":"EisensteinSeries.gammaSet_one_equiv","line":52,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet_one_equiv","doc":"For level `N = 1`, the gamma sets are all equivalent; this is the equivalence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet_one_equiv\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">gammaSet_one_equiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">1</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">1</span> <span class=\"fn\">a'</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L48-L49","name":"EisensteinSeries.gammaSet_one_eq","line":48,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet_one_eq","doc":"For level `N = 1`, the gamma sets are all equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet_one_eq\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">gammaSet_one_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">1</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">1</span> <span class=\"fn\">a'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L41-L45","name":"EisensteinSeries.pairwise_disjoint_gammaSet","line":41,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.pairwise_disjoint_gammaSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.pairwise_disjoint_gammaSet\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">pairwise_disjoint_gammaSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Disjoint</span> <a href=\"./Mathlib/Init/Function.html#Function.onFun\">on</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\">EisensteinSeries.gammaSet</a> <span class=\"fn\">N</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.lean#L39-L39","name":"EisensteinSeries.gammaSet","line":39,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet","doc":"The set of pairs of coprime integers congruent to `a` mod `N`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/EisensteinSeries/Basic.html#EisensteinSeries.gammaSet\"><span class=\"name\">EisensteinSeries</span>.<span class=\"name\">gammaSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(N : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span></div></div>"}]}