{"name":"Mathlib.Tactic.Rewrites","instances":[],"imports":["Init","Std.Data.MLList.Heartbeats","Std.Tactic.Relation.Rfl","Std.Tactic.SolveByElim","Std.Util.Pickle","Std.Util.Cache","Mathlib.Init.Core","Mathlib.Control.Basic","Mathlib.Data.MLList.Dedup","Mathlib.Lean.Expr.Basic","Mathlib.Lean.Meta.DiscrTree","Mathlib.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L319-L328","name":"Mathlib.Tactic.Rewrites.rewrites'","line":319,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewrites'","doc":"`rw?` tries to find a lemma which can rewrite the goal.\n\n`rw?` should not be left in proofs; it is a search tool, like `apply?`.\n\nSuggestions are printed as `rw [h]` or `rw [← h]`.\n\nYou can use `rw? [-my_lemma, -my_theorem]` to prevent `rw?` using the named lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewrites'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rewrites'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L313-L317","name":"Mathlib.Tactic.Rewrites.forbidden","line":313,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.forbidden","doc":"Syntax for excluding some names, e.g. `[-my_lemma, -my_theorem]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.forbidden\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">forbidden</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L289-L309","name":"Mathlib.Tactic.Rewrites.rewrites","line":289,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewrites","doc":"Find lemmas which can rewrite the goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewrites\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rewrites</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(forbidden : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(side : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions\">Mathlib.Tactic.Rewrites.SideConditions</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.solveByElim\">Mathlib.Tactic.Rewrites.SideConditions.solveByElim</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stopAtRfl : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(max : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">20</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(leavePercentHeartbeats : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">10</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L276-L286","name":"Mathlib.Tactic.Rewrites.rewritesDedup","line":276,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewritesDedup","doc":"Find lemmas which can rewrite the goal, and deduplicate based on pretty-printed results.\nNote that this builds a `HashMap` containing the results, and so may consume significant memory.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewritesDedup\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rewritesDedup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(forbidden : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(side : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions\">Mathlib.Tactic.Rewrites.SideConditions</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.solveByElim\">Mathlib.Tactic.Rewrites.SideConditions.solveByElim</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/MLList/Basic.html#MLList\">MLList</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L210-L270","name":"Mathlib.Tactic.Rewrites.rewritesCore","line":210,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewritesCore","doc":"Find lemmas which can rewrite the goal.\n\nThis core function returns a monadic list, to allow the caller to decide how long to search.\nSee also `rewrites` for a more convenient interface.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewritesCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rewritesCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lemmas : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(target : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(forbidden : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(side : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions\">Mathlib.Tactic.Rewrites.SideConditions</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.solveByElim\">Mathlib.Tactic.Rewrites.SideConditions.solveByElim</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/MLList/Basic.html#MLList\">MLList</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L199-L199","name":"Mathlib.Tactic.Rewrites.SideConditions.solveByElim","line":199,"kind":"ctor","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.solveByElim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.solveByElim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions\">Mathlib.Tactic.Rewrites.SideConditions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L198-L198","name":"Mathlib.Tactic.Rewrites.SideConditions.assumption","line":198,"kind":"ctor","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.assumption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.assumption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span>.<span class=\"name\">assumption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions\">Mathlib.Tactic.Rewrites.SideConditions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L197-L197","name":"Mathlib.Tactic.Rewrites.SideConditions.none","line":197,"kind":"ctor","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions.none\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions\">Mathlib.Tactic.Rewrites.SideConditions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L196-L199","name":"Mathlib.Tactic.Rewrites.SideConditions","line":196,"kind":"inductive","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions","doc":"Should we try discharging side conditions? If so, using `assumption`, or `solve_by_elim`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.SideConditions\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L187-L193","name":"Mathlib.Tactic.Rewrites.solveByElim","line":187,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.solveByElim","doc":"Shortcut for calling `solveByElim`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.solveByElim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(depth : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">6</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{1}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L180-L184","name":"Mathlib.Tactic.Rewrites.RewriteResult.ppResult","line":180,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.ppResult","doc":"Pretty print the result of the rewrite.\nIf this will be done more than once you should use `prepare_ppResult`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.ppResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">ppResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L170-L174","name":"Mathlib.Tactic.Rewrites.RewriteResult.prepare_ppResult","line":170,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.prepare_ppResult","doc":"Pretty print the result of the rewrite, and store it for later use. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.prepare_ppResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">prepare_ppResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L157-L167","name":"Mathlib.Tactic.Rewrites.RewriteResult.computeRfl","line":157,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.computeRfl","doc":"Update a `RewriteResult` by filling in the `rfl?` field if it is currently `none`,\nto reflect whether the remaining goal can be closed by `with_reducible rfl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.computeRfl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">computeRfl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L153-L153","name":"Mathlib.Tactic.Rewrites.RewriteResult.mctx","line":153,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.mctx","doc":"The metavariable context after the rewrite.\nThis needs to be stored as part of the result so we can backtrack the state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.mctx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L150-L150","name":"Mathlib.Tactic.Rewrites.RewriteResult.rfl?","line":150,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.rfl?","doc":"Can the new goal in `result` be closed by `with_reducible rfl`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.rfl?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">rfl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L147-L147","name":"Mathlib.Tactic.Rewrites.RewriteResult.ppResult?","line":147,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.ppResult?","doc":"Pretty-printed result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.ppResult?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">ppResult?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L144-L144","name":"Mathlib.Tactic.Rewrites.RewriteResult.result","line":144,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.result","doc":"The result from the `rw` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.result\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">result</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Lean.Meta.RewriteResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L142-L142","name":"Mathlib.Tactic.Rewrites.RewriteResult.weight","line":142,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.weight","doc":"The \"weight\" of the rewrite. This is calculated based on how specific the rewrite rule was. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.weight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">weight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L140-L140","name":"Mathlib.Tactic.Rewrites.RewriteResult.symm","line":140,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.symm","doc":"`True` if we rewrote backwards (i.e. with `rw [← h]`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.symm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">symm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L138-L138","name":"Mathlib.Tactic.Rewrites.RewriteResult.expr","line":138,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.expr","doc":"The lemma we rewrote by.\nThis is `Expr`, not just a `Name`, as it may be a local hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.expr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L135-L135","name":"Mathlib.Tactic.Rewrites.RewriteResult.mk","line":135,"kind":"ctor","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(expr : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(symm : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(weight : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(result : <a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Lean.Meta.RewriteResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ppResult? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rfl? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mctx : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\">Mathlib.Tactic.Rewrites.RewriteResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L135-L153","name":"Mathlib.Tactic.Rewrites.RewriteResult","line":135,"kind":"structure","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult","doc":"Data structure recording a potential rewrite to report from the `rw?` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.RewriteResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L122-L132","name":"Mathlib.Tactic.Rewrites.rewriteLemmas","line":122,"kind":"opaque","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewriteLemmas","doc":"Retrieve the current cache of lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.rewriteLemmas\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rewriteLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Util/Cache.html#Std.Tactic.DiscrTreeCache\">Std.Tactic.DiscrTreeCache</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L116-L120","name":"Mathlib.Tactic.Rewrites.cachePath","line":116,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.cachePath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.cachePath\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">cachePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L103-L112","name":"Mathlib.Tactic.Rewrites.buildDiscrTree","line":103,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.buildDiscrTree","doc":"Construct the discrimination tree of all lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.buildDiscrTree\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">buildDiscrTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Util/Cache.html#Std.Tactic.DiscrTreeCache\">Std.Tactic.DiscrTreeCache</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L85-L100","name":"Mathlib.Tactic.Rewrites.localHypotheses","line":85,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.localHypotheses","doc":"Select `=` and `↔` local hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.localHypotheses\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">localHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(except : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L63-L82","name":"Mathlib.Tactic.Rewrites.processLemma","line":63,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.processLemma","doc":"Prepare the discrimination tree entries for a lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.processLemma\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">processLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(constInfo : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Lean.Meta.DiscrTree.Key</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L58-L58","name":"Mathlib.Tactic.Rewrites.discrTreeConfig","line":58,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.discrTreeConfig","doc":"Configuration for `DiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.discrTreeConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">discrTreeConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L55-L55","name":"Mathlib.Tactic.Rewrites.backwardWeight","line":55,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.backwardWeight","doc":"Weight to multiply the \"specificity\" of a rewrite lemma by when rewriting backwards. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.backwardWeight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">backwardWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L53-L53","name":"Mathlib.Tactic.Rewrites.forwardWeight","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.forwardWeight","doc":"Weight to multiply the \"specificity\" of a rewrite lemma by when rewriting forwards. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Mathlib.Tactic.Rewrites.forwardWeight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">forwardWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Rewrites.lean#L37-L41","name":"Lean.Meta.RewriteResult.by?","line":37,"kind":"def","docLink":"./Mathlib/Tactic/Rewrites.html#Lean.Meta.RewriteResult.by?","doc":"Extract the lemma, with arguments, that was used to produce a `RewriteResult`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Rewrites.html#Lean.Meta.RewriteResult.by?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">by?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(r : <a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Lean.Meta.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}