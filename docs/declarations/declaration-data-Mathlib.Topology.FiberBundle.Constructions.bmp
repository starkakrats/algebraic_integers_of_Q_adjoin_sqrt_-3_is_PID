{"name":"Mathlib.Topology.FiberBundle.Constructions","instances":[{"typeNames":["Bundle.TotalSpace"],"name":"Bundle.Trivial.topologicalSpace","className":"TopologicalSpace"},{"typeNames":["Bundle.Trivial"],"name":"Bundle.Trivial.fiberBundle","className":"FiberBundle"},{"typeNames":["Bundle.TotalSpace"],"name":"FiberBundle.Prod.topologicalSpace","className":"TopologicalSpace"},{"typeNames":["Prod"],"name":"FiberBundle.prod","className":"FiberBundle"},{"typeNames":["Trivialization.prod"],"name":"instMemTrivializationAtlasProdInstTopologicalSpaceProdProdTopologicalSpaceInstTopologicalSpaceProdProdProd","className":"MemTrivializationAtlas"},{"typeNames":["Bundle.Pullback"],"name":"instForAllTopologicalSpacePullback","className":"TopologicalSpace"},{"typeNames":["Bundle.TotalSpace"],"name":"Pullback.TotalSpace.topologicalSpace","className":"TopologicalSpace"},{"typeNames":["Bundle.Pullback"],"name":"FiberBundle.pullback","className":"FiberBundle"}],"imports":["Init","Mathlib.Topology.FiberBundle.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L378-L387","name":"FiberBundle.pullback","line":378,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.pullback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.pullback\"><span class=\"name\">FiberBundle</span>.<span class=\"name\">pullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span> <span class=\"fn\">b</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> U}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMapClass\">ContinuousMapClass</a> <span class=\"fn\">K</span> <span class=\"fn\">B'</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">*ᵖ</a> <span class=\"fn\">E</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L334-L375","name":"Trivialization.pullback","line":334,"kind":"def","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.pullback","doc":"A fiber bundle trivialization can be pulled back to a trivialization on the pullback bundle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.pullback\"><span class=\"name\">Trivialization</span>.<span class=\"name\">pullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span> <span class=\"fn\">b</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> U}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousFunction/Basic.html#ContinuousMapClass\">ContinuousMapClass</a> <span class=\"fn\">K</span> <span class=\"fn\">B'</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L322-L326","name":"Pullback.continuous_totalSpaceMk","line":322,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.continuous_totalSpaceMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.continuous_totalSpaceMk\"><span class=\"name\">Pullback</span>.<span class=\"name\">continuous_totalSpaceMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">B'</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.mk\">Bundle.TotalSpace.mk</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L310-L315","name":"inducing_pullbackTotalSpaceEmbedding","line":310,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#inducing_pullbackTotalSpaceEmbedding","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#inducing_pullbackTotalSpaceEmbedding\"><span class=\"name\">inducing_pullbackTotalSpaceEmbedding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#Inducing\">Inducing</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.pullbackTotalSpaceEmbedding\">Bundle.pullbackTotalSpaceEmbedding</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L305-L307","name":"Pullback.continuous_lift","line":305,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.continuous_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.continuous_lift\"><span class=\"name\">Pullback</span>.<span class=\"name\">continuous_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback.lift\">Bundle.Pullback.lift</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L300-L302","name":"Pullback.continuous_proj","line":300,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.continuous_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.continuous_proj\"><span class=\"name\">Pullback</span>.<span class=\"name\">continuous_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">Bundle.TotalSpace.proj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L296-L297","name":"Pullback.TotalSpace.topologicalSpace","line":296,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.TotalSpace.topologicalSpace","doc":"The topology on the total space of a pullback bundle is the coarsest topology for which both\nthe projections to the base and the map to the original bundle are continuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Pullback.TotalSpace.topologicalSpace\"><span class=\"name\">Pullback</span>.<span class=\"name\">TotalSpace</span>.<span class=\"name\">topologicalSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">*ᵖ</a> <span class=\"fn\">E</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L288-L291","name":"pullbackTopology","line":288,"kind":"def","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#pullbackTopology","doc":"Definition of `Pullback.TotalSpace.topologicalSpace`, which we make irreducible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#pullbackTopology\"><span class=\"name\">pullbackTopology</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">*ᵖ</a> <span class=\"fn\">E</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L288-L291","name":"pullbackTopology_def","line":288,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#pullbackTopology_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#pullbackTopology_def\"><span class=\"name\">pullbackTopology_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#pullbackTopology\">pullbackTopology</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#TopologicalSpace.induced\">TopologicalSpace.induced</a> <span class=\"fn\">Bundle.TotalSpace.proj</span> <span class=\"fn\">inst✝¹</span></span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#TopologicalSpace.induced\">TopologicalSpace.induced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback.lift\">Bundle.Pullback.lift</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">inst✝</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L280-L284","name":"instForAllTopologicalSpacePullback","line":280,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#instForAllTopologicalSpacePullback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#instForAllTopologicalSpacePullback\"><span class=\"name\">instForAllTopologicalSpacePullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(E : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> w₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B' : <a href=\"./foundational_types.html\">Type</a> w₂}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">B'</span> → <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">B'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">*ᵖ</a> <span class=\"fn\">E</span></a>)</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L265-L268","name":"instMemTrivializationAtlasProdInstTopologicalSpaceProdProdTopologicalSpaceInstTopologicalSpaceProdProdProd","line":265,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#instMemTrivializationAtlasProdInstTopologicalSpaceProdProdTopologicalSpaceInstTopologicalSpaceProdProdProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#instMemTrivializationAtlasProdInstTopologicalSpaceProdProdTopologicalSpaceInstTopologicalSpaceProdProdProd\"><span class=\"name\">instMemTrivializationAtlasProdInstTopologicalSpaceProdProdTopologicalSpaceInstTopologicalSpaceProdProdProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F₁ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F₂ : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#MemTrivializationAtlas\">MemTrivializationAtlas</a> <span class=\"fn\">e₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#MemTrivializationAtlas\">MemTrivializationAtlas</a> <span class=\"fn\">e₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#MemTrivializationAtlas\">MemTrivializationAtlas</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">Trivialization.prod</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L250-L262","name":"FiberBundle.prod","line":250,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.prod","doc":"The product of two fiber bundles is a fiber bundle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.prod\"><span class=\"name\">FiberBundle</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F₁ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F₂ : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L238-L239","name":"Trivialization.prod_symm_apply","line":238,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod_symm_apply\"><span class=\"name\">Trivialization</span>.<span class=\"name\">prod_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w₁ : <span class=\"fn\">F₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w₂ : <span class=\"fn\">F₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/PartialEquiv.html#PartialEquiv.symm\">PartialEquiv.symm</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">Trivialization.prod</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span></span>)</span>.toPartialHomeomorph</span>.toPartialEquiv</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">w₁</span>, <span class=\"fn\">w₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">proj</span> := <span class=\"fn\">x</span>, <span class=\"fn\">snd</span> := <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization.symm\">Trivialization.symm</a> <span class=\"fn\">e₁</span> <span class=\"fn\">x</span> <span class=\"fn\">w₁</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization.symm\">Trivialization.symm</a> <span class=\"fn\">e₂</span> <span class=\"fn\">x</span> <span class=\"fn\">w₂</span></span>)</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L235-L235","name":"Trivialization.baseSet_prod","line":235,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.baseSet_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.baseSet_prod\"><span class=\"name\">Trivialization</span>.<span class=\"name\">baseSet_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">Trivialization.prod</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span></span>)</span>.baseSet</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e₁</span>.baseSet</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">e₂</span>.baseSet</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L210-L231","name":"Trivialization.prod","line":210,"kind":"def","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod","doc":"Given trivializations `e₁`, `e₂` for bundle types `E₁`, `E₂` over a base `B`, the induced\ntrivialization for the fiberwise product of `E₁` and `E₂`, whose base set is\n`e₁.baseSet ∩ e₂.baseSet`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\"><span class=\"name\">Trivialization</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span>)</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L196-L202","name":"Trivialization.Prod.continuous_inv_fun","line":196,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.continuous_inv_fun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.continuous_inv_fun\"><span class=\"name\">Trivialization</span>.<span class=\"name\">Prod</span>.<span class=\"name\">continuous_inv_fun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousOn.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.invFun'\">Trivialization.Prod.invFun'</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e₁</span>.baseSet</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">e₂</span>.baseSet</span></span>)</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">Set.univ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L188-L193","name":"Trivialization.Prod.right_inv","line":188,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.right_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.right_inv\"><span class=\"name\">Trivialization</span>.<span class=\"name\">Prod</span>.<span class=\"name\">right_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e₁</span>.baseSet</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">e₂</span>.baseSet</span></span>)</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">Set.univ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.toFun'\">Trivialization.Prod.toFun'</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.invFun'\">Trivialization.Prod.invFun'</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L180-L185","name":"Trivialization.Prod.left_inv","line":180,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.left_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.left_inv\"><span class=\"name\">Trivialization</span>.<span class=\"name\">Prod</span>.<span class=\"name\">left_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">Bundle.TotalSpace.proj</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e₁</span>.baseSet</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">e₂</span>.baseSet</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.invFun'\">Trivialization.Prod.invFun'</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.toFun'\">Trivialization.Prod.toFun'</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L174-L175","name":"Trivialization.Prod.invFun'","line":174,"kind":"def","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.invFun'","doc":"Given trivializations `e₁`, `e₂` for fiber bundles `E₁`, `E₂` over a base `B`, the inverse\nfunction for the construction `Trivialization.prod`, the induced\ntrivialization for the fiberwise product of `E₁` and `E₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.invFun'\"><span class=\"name\">Trivialization</span>.<span class=\"name\">Prod</span>.<span class=\"name\">invFun'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) → <span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L148-L166","name":"Trivialization.Prod.continuous_to_fun","line":148,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.continuous_to_fun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.continuous_to_fun\"><span class=\"name\">Trivialization</span>.<span class=\"name\">Prod</span>.<span class=\"name\">continuous_to_fun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousOn.html#ContinuousOn\">ContinuousOn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.toFun'\">Trivialization.Prod.toFun'</a> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Bundle.TotalSpace.proj</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e₁</span>.baseSet</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">e₂</span>.baseSet</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L142-L143","name":"Trivialization.Prod.toFun'","line":142,"kind":"def","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.toFun'","doc":"Given trivializations `e₁`, `e₂` for fiber bundles `E₁`, `E₂` over a base `B`, the forward\nfunction for the construction `Trivialization.prod`, the induced\ntrivialization for the fiberwise product of `E₁` and `E₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.Prod.toFun'\"><span class=\"name\">Trivialization</span>.<span class=\"name\">Prod</span>.<span class=\"name\">toFun'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₁</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F₂</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L120-L123","name":"FiberBundle.Prod.inducing_diag","line":120,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.Prod.inducing_diag","doc":"The diagonal map from the total space of the fiberwise product of two fiber bundles\n`E₁`, `E₂` into `TotalSpace F₁ E₁ × TotalSpace F₂ E₂` is `Inducing`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.Prod.inducing_diag\"><span class=\"name\">FiberBundle</span>.<span class=\"name\">Prod</span>.<span class=\"name\">inducing_diag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F₁ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F₂ : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#Inducing\">Inducing</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span></span></span></span>) =&gt;\n  <span class=\"fn\">(<span class=\"fn\">{ <span class=\"fn\">proj</span> := <span class=\"fn\"><span class=\"fn\">p</span>.proj</span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.snd</span>.1</span> }</span>, <span class=\"fn\">{ <span class=\"fn\">proj</span> := <span class=\"fn\"><span class=\"fn\">p</span>.proj</span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.snd</span>.2</span> }</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L112-L115","name":"FiberBundle.Prod.topologicalSpace","line":112,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.Prod.topologicalSpace","doc":"Equip the total space of the fiberwise product of two fiber bundles `E₁`, `E₂` with\nthe induced topology from the diagonal embedding into `TotalSpace F₁ E₁ × TotalSpace F₂ E₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#FiberBundle.Prod.topologicalSpace\"><span class=\"name\">FiberBundle</span>.<span class=\"name\">Prod</span>.<span class=\"name\">topologicalSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F₁ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E₁ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_3</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F₂ : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(E₂ : <span class=\"fn\"><span class=\"fn\">B</span> → <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₁</span> <span class=\"fn\">E₁</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F₂</span> <span class=\"fn\">E₂</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F₂</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">E₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">E₂</span> <span class=\"fn\">x</span></span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L89-L90","name":"Bundle.Trivial.eq_trivialization","line":89,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.eq_trivialization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.eq_trivialization\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">eq_trivialization</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[i : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#MemTrivializationAtlas\">MemTrivializationAtlas</a> <span class=\"fn\">e</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization\">Bundle.Trivial.trivialization</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L80-L86","name":"Bundle.Trivial.fiberBundle","line":80,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.fiberBundle","doc":"Fiber bundle instance on the trivial bundle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.fiberBundle\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">fiberBundle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.Trivial\">Bundle.Trivial</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L76-L76","name":"Bundle.Trivial.trivialization_target","line":76,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization_target","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization_target\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">trivialization_target</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization\">Bundle.Trivial.trivialization</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span></span>)</span>.toPartialHomeomorph</span>.toPartialEquiv</span>.target</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L72-L72","name":"Bundle.Trivial.trivialization_source","line":72,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization_source","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization_source\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">trivialization_source</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization\">Bundle.Trivial.trivialization</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span></span>)</span>.toPartialHomeomorph</span>.toPartialEquiv</span>.source</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L61-L68","name":"Bundle.Trivial.trivialization","line":61,"kind":"def","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization","doc":"Local trivialization for trivial bundle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">trivialization</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F</span> <span class=\"fn\">Bundle.TotalSpace.proj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L57-L58","name":"Bundle.Trivial.homeomorphProd","line":57,"kind":"def","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.homeomorphProd","doc":"Homeomorphism between the total space of the trivial bundle and the Cartesian product. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.homeomorphProd\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">homeomorphProd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.Trivial\">Bundle.Trivial</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span></span>)</span></span> <a href=\"./Mathlib/Topology/Homeomorph.html#Homeomorph\">≃ₜ</a> <span class=\"fn\"><span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L53-L54","name":"Bundle.Trivial.inducing_toProd","line":53,"kind":"theorem","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.inducing_toProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.inducing_toProd\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">inducing_toProd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Maps.html#Inducing\">Inducing</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.toProd\">Bundle.TotalSpace.toProd</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/FiberBundle/Constructions.lean#L46-L48","name":"Bundle.Trivial.topologicalSpace","line":46,"kind":"instance","docLink":"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.topologicalSpace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.topologicalSpace\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">topologicalSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(B : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(F : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t₁ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[t₂ : <span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Bundle.html#Bundle.Trivial\">Bundle.Trivial</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span></span>)</span></span>)</span></span></div></div>"}]}