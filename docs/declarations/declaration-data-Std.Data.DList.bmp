{"name":"Std.Data.DList","instances":[{"typeNames":["Std.DList"],"name":"Std.DList.instEmptyCollectionDList","className":"EmptyCollection"},{"typeNames":["Std.DList"],"name":"Std.DList.instAppendDList","className":"Append"}],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L70-L70","name":"Std.DList.instAppendDList","line":70,"kind":"instance","docLink":"./Std/Data/DList.html#Std.DList.instAppendDList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.instAppendDList\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">instAppendDList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L60-L68","name":"Std.DList.push","line":60,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.push","doc":"`O(1)` (`apply` is `O(1)`). Append an element at the end of a `DList α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.push\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L50-L57","name":"Std.DList.append","line":50,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.append","doc":"`O(1)` (`apply` is `O(1)`). Append two `DList α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.append\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L43-L47","name":"Std.DList.cons","line":43,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.cons","doc":"`O(1)` (`apply` is `O(1)`). Prepend `a` on a `DList α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.cons\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L38-L40","name":"Std.DList.singleton","line":38,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.singleton","doc":"`O(1)` (`apply` is `O(1)`). A `DList α` corresponding to the list `[a]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L34-L35","name":"Std.DList.toList","line":34,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.toList","doc":"`O(apply())`. Convert a `DList α` into a `List α` by running the `apply` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.toList\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L31-L31","name":"Std.DList.instEmptyCollectionDList","line":31,"kind":"instance","docLink":"./Std/Data/DList.html#Std.DList.instEmptyCollectionDList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.instEmptyCollectionDList\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">instEmptyCollectionDList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L28-L29","name":"Std.DList.empty","line":28,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.empty","doc":"`O(1)` (`apply` is `O(1)`). Return an empty `DList α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.empty\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L24-L25","name":"Std.DList.ofList","line":24,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.ofList","doc":"`O(1)` (`apply` is `O(|l|)`). Convert a `List α` into a `DList α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L17-L17","name":"Std.DList.invariant","line":17,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.invariant","doc":"The `apply` function of a `DList` is completely determined by the list `apply []`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.invariant\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">invariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList.apply\">Std.DList.apply</a> <span class=\"fn\">self</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList.apply\">Std.DList.apply</a> <span class=\"fn\">self</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L15-L15","name":"Std.DList.apply","line":15,"kind":"def","docLink":"./Std/Data/DList.html#Std.DList.apply","doc":"\"Run\" a `DList` by appending it on the right by a `List α` to get another `List α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.apply\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L13-L13","name":"Std.DList.mk","line":13,"kind":"ctor","docLink":"./Std/Data/DList.html#Std.DList.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList.mk\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(apply : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(invariant : <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">apply</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">apply</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DList.html#Std.DList\">Std.DList</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/DList.lean#L13-L17","name":"Std.DList","line":13,"kind":"structure","docLink":"./Std/Data/DList.html#Std.DList","doc":"A difference List is a Function that, given a List, returns the original\ncontents of the difference List prepended to the given List.\nThis structure supports `O(1)` `append` and `concat` operations on lists, making it\nuseful for append-heavy uses such as logging and pretty printing.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DList.html#Std.DList\"><span class=\"name\">Std</span>.<span class=\"name\">DList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}