{"name":"Std.Lean.Meta.AssertHypotheses","instances":[],"imports":["Init","Std.Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/AssertHypotheses.lean#L26-L38","name":"Lean.MVarId.assertHypotheses'","line":26,"kind":"def","docLink":"./Std/Lean/Meta/AssertHypotheses.html#Lean.MVarId.assertHypotheses'","doc":"Add the given hypotheses to the local context. This is a generalisation of\n`Lean.MVarId.assertHypotheses` which lets you specify\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.MVarId.assertHypotheses'\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">assertHypotheses'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(mvarId : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'\">Lean.Meta.Hypothesis'</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/AssertHypotheses.lean#L20-L20","name":"Lean.Meta.Hypothesis'.kind","line":20,"kind":"def","docLink":"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'.kind","doc":"The hypothesis' `LocalDeclKind` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hypothesis'</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'\">Lean.Meta.Hypothesis'</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">Lean.LocalDeclKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/AssertHypotheses.lean#L18-L18","name":"Lean.Meta.Hypothesis'.binderInfo","line":18,"kind":"def","docLink":"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'.binderInfo","doc":"The hypothesis' `BinderInfo` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'.binderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hypothesis'</span>.<span class=\"name\">binderInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'\">Lean.Meta.Hypothesis'</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/AssertHypotheses.lean#L16-L16","name":"Lean.Meta.Hypothesis'.mk","line":16,"kind":"ctor","docLink":"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hypothesis'</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toHypothesis : <a href=\"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis\">Lean.Meta.Hypothesis</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(binderInfo : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">Lean.LocalDeclKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'\">Lean.Meta.Hypothesis'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Meta/AssertHypotheses.lean#L16-L20","name":"Lean.Meta.Hypothesis'","line":16,"kind":"structure","docLink":"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'","doc":"Description of a hypothesis for `Lean.MVarId.assertHypotheses'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Meta/AssertHypotheses.html#Lean.Meta.Hypothesis'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hypothesis'</span></a></span><span class=\"decl_extends\">extends</span><span class=\"decl_parent\">\n<span class=\"fn\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hypothesis</span></a></span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}