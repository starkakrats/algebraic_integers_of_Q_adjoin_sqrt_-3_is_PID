{"name":"Std.Tactic.TryThis","instances":[{"typeNames":["Std.Tactic.TryThis.TryThisInfo"],"name":"Std.Tactic.TryThis.instTypeNameTryThisInfo","className":"TypeName"},{"typeNames":["Std.Tactic.TryThis.SuggestionText"],"name":"Std.Tactic.TryThis.instInhabitedSuggestionText","className":"Inhabited"},{"typeNames":["Std.Tactic.TryThis.SuggestionText"],"name":"Std.Tactic.TryThis.instToMessageDataSuggestionText","className":"Lean.ToMessageData"},{"typeNames":["Lean.TSyntax","Std.Tactic.TryThis.SuggestionText"],"name":"Std.Tactic.TryThis.instCoeHeadTSyntaxConsSyntaxNodeKindNilSuggestionText","className":"CoeHead"},{"typeNames":["String","Std.Tactic.TryThis.SuggestionText"],"name":"Std.Tactic.TryThis.instCoeStringSuggestionText","className":"Coe"},{"typeNames":["Std.Tactic.TryThis.Suggestion"],"name":"Std.Tactic.TryThis.instInhabitedSuggestion","className":"Inhabited"},{"typeNames":["Std.Tactic.TryThis.Suggestion"],"name":"Std.Tactic.TryThis.instToMessageDataSuggestion","className":"Lean.ToMessageData"},{"typeNames":["Std.Tactic.TryThis.SuggestionText","Std.Tactic.TryThis.Suggestion"],"name":"Std.Tactic.TryThis.instCoeSuggestionTextSuggestion","className":"Coe"}],"imports":["Init","Lean.Server.CodeActions","Lean.Widget.UserWidget","Std.Lean.Name","Std.Lean.Format","Std.Lean.Position","Std.Data.Json"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L521-L525","name":"Std.Tactic.TryThis.addTermSuggestions","line":521,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addTermSuggestions","doc":"Add term suggestions.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `es`: an array of the replacement expressions\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string which precedes the list of suggestions. By default, it's `\"Try these:\"`.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text for all\n  suggestions which do not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is\n  used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addTermSuggestions\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addTermSuggestions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origSpan? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(header : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">&quot;Try these:&quot;</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeActionPrefix? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L503-L507","name":"Std.Tactic.TryThis.addTermSuggestion","line":503,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addTermSuggestion","doc":"Add a term suggestion.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `e`: the replacement expression\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string which precedes the suggestion. By default, it's `\"Try this: \"`.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text if the\n  suggestion does not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addTermSuggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addTermSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origSpan? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(header : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">&quot;Try this: &quot;</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeActionPrefix? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L486-L490","name":"Std.Tactic.TryThis.addExactSuggestions","line":486,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addExactSuggestions","doc":"Add `exact e` or `refine e` suggestions.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `es`: the array of replacement expressions\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `addSubgoalsMsg`: if true (default false), any remaining subgoals will be shown after\n  `Remaining subgoals:`\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text for all\n  suggestions which do not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is\n  used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addExactSuggestions\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addExactSuggestions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(es : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origSpan? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(addSubgoalsMsg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeActionPrefix? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L467-L471","name":"Std.Tactic.TryThis.addExactSuggestion","line":467,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addExactSuggestion","doc":"Add an `exact e` or `refine e` suggestion.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `e`: the replacement expression\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `addSubgoalsMsg`: if true (default false), any remaining subgoals will be shown after\n  `Remaining subgoals:`\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text if the\n  suggestion does not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addExactSuggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addExactSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origSpan? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(addSubgoalsMsg : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeActionPrefix? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L431-L439","name":"Std.Tactic.TryThis.addSuggestions","line":431,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addSuggestions","doc":"Add a list of \"try this\" suggestions as a single \"try these\" suggestion. This has three effects:\n\n* An info diagnostic is displayed saying `Try these: <list of suggestions>`\n* A widget is registered, saying `Try these: <list of suggestions>` with a link on each\n  `<suggestion>` to apply the suggestion\n* A code action for each suggestion is added, which will apply the suggestion.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `suggestions`: an array of `Suggestion`s, which each contain\n  * `suggestion`: the replacement text;\n  * `preInfo?`: an optional string shown immediately after the replacement text in the widget\n    message (only)\n  * `postInfo?`: an optional string shown immediately after the replacement text in the widget\n    message (only)\n  * `style?`: an optional `Json` object used as the value of the `style` attribute of the\n    suggestion text's element (not the whole suggestion element).\n  * `messageData?`: an optional message to display in place of `suggestion` in the info diagnostic\n    (only). The widget message uses only `suggestion`. If `messageData?` is `none`, we simply use\n    `suggestion` instead.\n  * `toCodeActionTitle?`: an optional function `String → String` describing how to transform the\n    pretty-printed suggestion text into the code action text which appears in the lightbulb menu.\n    If `none`, we simply prepend `\"Try This: \"` to the suggestion text.\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string that precedes the list. By default, it is `\"Try these:\"`.\n* `style?`: a default style for all suggestions which do not have a custom `style?` set.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text for all\n  suggestions which do not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is\n  used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addSuggestions\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addSuggestions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suggestions : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origSpan? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(header : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">&quot;Try these:&quot;</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(style? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeActionPrefix? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L394-L398","name":"Std.Tactic.TryThis.addSuggestion","line":394,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addSuggestion","doc":"Add a \"try this\" suggestion. This has three effects:\n\n* An info diagnostic is displayed saying `Try this: <suggestion>`\n* A widget is registered, saying `Try this: <suggestion>` with a link on `<suggestion>` to apply\n  the suggestion\n* A code action is added, which will apply the suggestion.\n\nThe parameters are:\n* `ref`: the span of the info diagnostic\n* `s`: a `Suggestion`, which contains\n  * `suggestion`: the replacement text;\n  * `preInfo?`: an optional string shown immediately after the replacement text in the widget\n    message (only)\n  * `postInfo?`: an optional string shown immediately after the replacement text in the widget\n    message (only)\n  * `style?`: an optional `Json` object used as the value of the `style` attribute of the\n    suggestion text's element (not the whole suggestion element).\n  * `messageData?`: an optional message to display in place of `suggestion` in the info diagnostic\n    (only). The widget message uses only `suggestion`. If `messageData?` is `none`, we simply use\n    `suggestion` instead.\n  * `toCodeActionTitle?`: an optional function `String → String` describing how to transform the\n    pretty-printed suggestion text into the code action text which appears in the lightbulb menu.\n    If `none`, we simply prepend `\"Try This: \"` to the suggestion text.\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string that begins the display. By default, it is `\"Try this: \"`.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text if the\n  suggestion does not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.addSuggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ref : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(origSpan? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(header : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">&quot;Try this: &quot;</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeActionPrefix? : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L329-L330","name":"Std.Tactic.TryThis.delabToRefinableSuggestion","line":329,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.delabToRefinableSuggestion","doc":"Delaborate `e` into a suggestion suitable for use by `refine`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.delabToRefinableSuggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">delabToRefinableSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L325-L326","name":"Std.Tactic.TryThis.instCoeSuggestionTextSuggestion","line":325,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instCoeSuggestionTextSuggestion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instCoeSuggestionTextSuggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instCoeSuggestionTextSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L322-L323","name":"Std.Tactic.TryThis.instToMessageDataSuggestion","line":322,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instToMessageDataSuggestion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instToMessageDataSuggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instToMessageDataSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L311-L318","name":"Std.Tactic.TryThis.Suggestion.toJsonAndInfoM","line":311,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.toJsonAndInfoM","doc":"Converts a `Suggestion` to `Json` in `CoreM`. We need `CoreM` in order to pretty-print syntax.\n\nThis also returns a `String × Option String` consisting of the pretty-printed text and any custom\ncode action title if `toCodeActionTitle?` is provided.\n\nIf `w := none`, then `w := getInputWidth (← getOptions)` is used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.toJsonAndInfoM\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">toJsonAndInfoM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indent : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(column : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L302-L302","name":"Std.Tactic.TryThis.instInhabitedSuggestion","line":302,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instInhabitedSuggestion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instInhabitedSuggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instInhabitedSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L301-L301","name":"Std.Tactic.TryThis.Suggestion.toCodeActionTitle?","line":301,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.toCodeActionTitle?","doc":"How to construct the text that appears in the lightbulb menu from the suggestion text. If\n`none`, we use `fun ppSuggestionText => \"Try this: \" ++ ppSuggestionText`. Only the pretty-printed\n`suggestion : SuggestionText` is used here. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.toCodeActionTitle?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">toCodeActionTitle?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L297-L297","name":"Std.Tactic.TryThis.Suggestion.messageData?","line":297,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.messageData?","doc":"How to represent the suggestion as `MessageData`. This is used only in the info diagnostic.\nIf `none`, we use `suggestion`. Use `toMessageData` to render a `Suggestion` in this manner. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.messageData?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">messageData?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L294-L294","name":"Std.Tactic.TryThis.Suggestion.style?","line":294,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.style?","doc":"Optional style specification for the suggestion. If `none` (the default), the suggestion is\nstyled as a text link. Otherwise, the suggestion can be styled as:\n* a status: `.error`, `.warning`, `.success`\n* a hypothesis name: `.asHypothesis`, `.asInaccessible`\n* a variable color: `.value (t : Float)`, which draws from a red-yellow-green gradient, with red\nat `0.0` and green at `1.0`.\n\nSee `SuggestionStyle` for details. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.style?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">style?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L285-L285","name":"Std.Tactic.TryThis.Suggestion.postInfo?","line":285,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.postInfo?","doc":"Optional info to be printed immediately after replacement text in a widget. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.postInfo?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">postInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L283-L283","name":"Std.Tactic.TryThis.Suggestion.preInfo?","line":283,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.preInfo?","doc":"Optional info to be printed immediately before replacement text in a widget. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.preInfo?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">preInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L281-L281","name":"Std.Tactic.TryThis.Suggestion.suggestion","line":281,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.suggestion","doc":"Text to be used as a replacement via a code action. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.suggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">suggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L279-L279","name":"Std.Tactic.TryThis.Suggestion.mk","line":279,"kind":"ctor","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(suggestion : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(preInfo? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(postInfo? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(style? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(messageData? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(toCodeActionTitle? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L279-L302","name":"Std.Tactic.TryThis.Suggestion","line":279,"kind":"structure","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion","doc":"Holds a `suggestion` for replacement, along with `preInfo` and `postInfo` strings to be printed\nimmediately before and after that suggestion, respectively. It also includes an optional\n`MessageData` to represent the suggestion in logs; by default, this is `none`, and `suggestion` is\nused. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">Suggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L265-L273","name":"Std.Tactic.TryThis.SuggestionStyle.value","line":265,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.value","doc":"Draws the color from a red-yellow-green color gradient with red at `0.0`, yellow at `0.5`, and\ngreen at `1.0`. Values outside the range `[0.0, 1.0]` are clipped to lie within this range.\n\nWith `showValueInHoverText := true` (the default), the value `t` will be included in the `title` of\nthe HTML element (which appears on hover). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.value\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionStyle</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(showValueInHoverText : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L257-L258","name":"Std.Tactic.TryThis.SuggestionStyle.asInaccessible","line":257,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.asInaccessible","doc":"Style the same way as an inaccessible hypothesis appearing in the infoview. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.asInaccessible\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionStyle</span>.<span class=\"name\">asInaccessible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L253-L254","name":"Std.Tactic.TryThis.SuggestionStyle.asHypothesis","line":253,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.asHypothesis","doc":"Style the same way as a hypothesis appearing in the infoview. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.asHypothesis\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionStyle</span>.<span class=\"name\">asHypothesis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L248-L250","name":"Std.Tactic.TryThis.SuggestionStyle.success","line":248,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.success","doc":"Style as a success. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.success\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionStyle</span>.<span class=\"name\">success</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L238-L245","name":"Std.Tactic.TryThis.SuggestionStyle.warning","line":238,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.warning","doc":"Style as a warning. By default, decorates the text with an undersquiggle; providing the\nargument `decorated := false` turns this off. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.warning\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionStyle</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decorated : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L226-L234","name":"Std.Tactic.TryThis.SuggestionStyle.error","line":226,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.error","doc":"Style as an error. By default, decorates the text with an undersquiggle; providing the argument\n`decorated := false` turns this off. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle.error\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionStyle</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decorated : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\">Std.Tactic.TryThis.SuggestionStyle</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L222-L222","name":"Std.Tactic.TryThis.SuggestionStyle","line":222,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle","doc":"Style hooks for `Suggestion`s. See `SuggestionStyle.error`, `.warning`, `.success`, `.value`,\nand other definitions here for style presets. This is an arbitrary `Json` object, with the following\ninteresting fields:\n* `title`: the hover text in the suggestion link\n* `className`: the CSS classes applied to the link\n* `style`: A `Json` object with additional inline CSS styles such as `color` or `textDecoration`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionStyle\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionStyle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L204-L210","name":"Std.Tactic.TryThis.SuggestionText.prettyExtra","line":204,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.prettyExtra","doc":"Pretty-prints a `SuggestionText` as a `String` and wraps with respect to the pane width,\nindentation, and column, via `Format.prettyExtra`. If `w := none`, then\n`w := getInputWidth (← getOptions)` is used. Raw `String`s are returned as-is. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.prettyExtra\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionText</span>.<span class=\"name\">prettyExtra</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indent : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(column : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L195-L197","name":"Std.Tactic.TryThis.SuggestionText.pretty","line":195,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.pretty","doc":"Pretty-prints a `SuggestionText` as a `Format`. If the `SuggestionText` is some `TSyntax kind`,\nwe use the appropriate pretty-printer; strings are coerced to `Format`s as-is. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.pretty\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionText</span>.<span class=\"name\">pretty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L188-L189","name":"Std.Tactic.TryThis.instCoeStringSuggestionText","line":188,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instCoeStringSuggestionText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instCoeStringSuggestionText\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instCoeStringSuggestionText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L185-L186","name":"Std.Tactic.TryThis.instCoeHeadTSyntaxConsSyntaxNodeKindNilSuggestionText","line":185,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instCoeHeadTSyntaxConsSyntaxNodeKindNilSuggestionText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instCoeHeadTSyntaxConsSyntaxNodeKindNilSuggestionText\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instCoeHeadTSyntaxConsSyntaxNodeKindNilSuggestionText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeHead\">CoeHead</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">kind</span></span>)</span> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L180-L183","name":"Std.Tactic.TryThis.instToMessageDataSuggestionText","line":180,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instToMessageDataSuggestionText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instToMessageDataSuggestionText\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instToMessageDataSuggestionText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L178-L178","name":"Std.Tactic.TryThis.instInhabitedSuggestionText","line":178,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instInhabitedSuggestionText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instInhabitedSuggestionText\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instInhabitedSuggestionText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L176-L177","name":"Std.Tactic.TryThis.SuggestionText.string","line":176,"kind":"ctor","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.string","doc":"A raw string to be used as suggested replacement text in the infoview. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.string\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionText</span>.<span class=\"name\">string</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L172-L175","name":"Std.Tactic.TryThis.SuggestionText.tsyntax","line":172,"kind":"ctor","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.tsyntax","doc":"`TSyntax kind` used as suggested replacement text in the infoview. Note that while `TSyntax`\nis in general parameterized by a list of `SyntaxNodeKind`s, we only allow one here; this\nunambiguously guides pretty-printing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText.tsyntax\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionText</span>.<span class=\"name\">tsyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">kind</span></span> → <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\">Std.Tactic.TryThis.SuggestionText</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L171-L178","name":"Std.Tactic.TryThis.SuggestionText","line":171,"kind":"inductive","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText","doc":"Text to be used as a suggested replacement in the infoview. This can be either a `TSyntax kind`\nfor a single `kind : SyntaxNodeKind` or a raw `String`.\n\nInstead of using constructors directly, there are coercions available from these types to\n`SuggestionText`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.SuggestionText\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">SuggestionText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L161-L161","name":"Std.Tactic.TryThis.getInputWidth","line":161,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.getInputWidth","doc":"Get the input width specified in the options "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.getInputWidth\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">getInputWidth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L153-L158","name":"Std.Tactic.TryThis.format.inputWidth","line":153,"kind":"opaque","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.format.inputWidth","doc":"An option allowing the user to customize the ideal input width, this controls output format when\nthe output is intended to be copied back into a lean file "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.format.inputWidth\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">format</span>.<span class=\"name\">inputWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L151-L151","name":"Std.Tactic.TryThis.inputWidth","line":151,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.inputWidth","doc":"The default maximum width of an ideal line in source code, 100 is the current convention. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.inputWidth\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">inputWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L147-L148","name":"Std.Tactic.TryThis.delabToRefinableSyntax","line":147,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.delabToRefinableSyntax","doc":"Delaborate `e` into syntax suitable for use by `refine`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.delabToRefinableSyntax\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">delabToRefinableSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L140-L144","name":"Std.Tactic.TryThis.replaceMVarsByUnderscores","line":140,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.replaceMVarsByUnderscores","doc":"Replace subexpressions like `?m.1234` with `?_` so it can be copy-pasted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.replaceMVarsByUnderscores\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">replaceMVarsByUnderscores</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L134-L137","name":"Std.Tactic.TryThis.getIndentAndColumn","line":134,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.getIndentAndColumn","doc":"Yields `(indent, column)` given a `FileMap` and a `String.Range`, where `indent` is the number\nof spaces by which the line that first includes `range` is initially indented, and `column` is the\ncolumn `range` starts at in that line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.getIndentAndColumn\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">getIndentAndColumn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(map : <a href=\"./Lean/Data/Position.html#Lean.FileMap\">Lean.FileMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(range : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L106-L127","name":"Std.Tactic.TryThis.tryThisProvider","line":106,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.tryThisProvider","doc":"This is a code action provider that looks for `TryThisInfo` nodes and supplies a code action to\napply the replacement.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.tryThisProvider\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">tryThisProvider</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions.html#Lean.Server.CodeActionProvider\">Lean.Server.CodeActionProvider</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L100-L100","name":"Std.Tactic.TryThis.instTypeNameTryThisInfo","line":100,"kind":"instance","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instTypeNameTryThisInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.instTypeNameTryThisInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">instTypeNameTryThisInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo\">Std.Tactic.TryThis.TryThisInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L99-L99","name":"Std.Tactic.TryThis.TryThisInfo.codeActionPrefix?","line":99,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.codeActionPrefix?","doc":"The prefix to display before the code action for a \"Try this\" suggestion if no custom code\naction title is provided. If not provided, `\"Try this: \"` is used. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.codeActionPrefix?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">TryThisInfo</span>.<span class=\"name\">codeActionPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo\">Std.Tactic.TryThis.TryThisInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L96-L96","name":"Std.Tactic.TryThis.TryThisInfo.suggestionTexts","line":96,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.suggestionTexts","doc":"A list of suggestions for the user to choose from.\nEach suggestion may optionally come with an override for the code action title.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.suggestionTexts\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">TryThisInfo</span>.<span class=\"name\">suggestionTexts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo\">Std.Tactic.TryThis.TryThisInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L91-L91","name":"Std.Tactic.TryThis.TryThisInfo.range","line":91,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.range","doc":"The textual range to be replaced by one of the suggestions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.range\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">TryThisInfo</span>.<span class=\"name\">range</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo\">Std.Tactic.TryThis.TryThisInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Lsp/Basic.html#Lean.Lsp.Range\">Lean.Lsp.Range</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L89-L89","name":"Std.Tactic.TryThis.TryThisInfo.mk","line":89,"kind":"ctor","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">TryThisInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(range : <a href=\"./Lean/Data/Lsp/Basic.html#Lean.Lsp.Range\">Lean.Lsp.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(suggestionTexts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(codeActionPrefix? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo\">Std.Tactic.TryThis.TryThisInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L89-L100","name":"Std.Tactic.TryThis.TryThisInfo","line":89,"kind":"structure","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo","doc":"A packet of information about a \"Try this\" suggestion\nthat we store in the infotree for the associated code action to retrieve. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.TryThisInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">TryThisInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/TryThis.lean#L43-L83","name":"Std.Tactic.TryThis.tryThisWidget","line":43,"kind":"def","docLink":"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.tryThisWidget","doc":"This is a widget which is placed by `TryThis.addSuggestion` and `TryThis.addSuggestions`.\n\nWhen placed by `addSuggestion`, it says `Try this: <replacement>`\nwhere `<replacement>` is a link which will perform the replacement.\n\nWhen placed by `addSuggestions`, it says:\n```\nTry these:\n```\n* `<replacement1>`\n* `<replacement2>`\n* `<replacement3>`\n* ...\n\nwhere `<replacement*>` is a link which will perform the replacement.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.tryThisWidget\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">tryThisWidget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Widget/UserWidget.html#Lean.Widget.Module\">Lean.Widget.Module</a></div></div>"}]}