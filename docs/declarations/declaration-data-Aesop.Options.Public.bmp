{"name":"Aesop.Options.Public","instances":[{"typeNames":["Aesop.Strategy"],"name":"Aesop.instInhabitedStrategy","className":"Inhabited"},{"typeNames":["Aesop.Strategy"],"name":"Aesop.instBEqStrategy","className":"BEq"},{"typeNames":["Aesop.Strategy"],"name":"Aesop.instReprStrategy","className":"Repr"},{"typeNames":["Aesop.Options"],"name":"Aesop.instInhabitedOptions","className":"Inhabited"},{"typeNames":["Aesop.Options"],"name":"Aesop.instBEqOptions","className":"BEq"},{"typeNames":["Aesop.Options"],"name":"Aesop.instReprOptions","className":"Repr"}],"imports":["Init","Lean.Meta.TransparencyMode"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L141-L141","name":"Aesop.instReprOptions","line":141,"kind":"instance","docLink":"./Aesop/Options/Public.html#Aesop.instReprOptions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.instReprOptions\"><span class=\"name\">Aesop</span>.<span class=\"name\">instReprOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L141-L141","name":"Aesop.instBEqOptions","line":141,"kind":"instance","docLink":"./Aesop/Options/Public.html#Aesop.instBEqOptions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.instBEqOptions\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L141-L141","name":"Aesop.instInhabitedOptions","line":141,"kind":"instance","docLink":"./Aesop/Options/Public.html#Aesop.instInhabitedOptions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.instInhabitedOptions\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L140-L140","name":"Aesop.Options.enableUnfold","line":140,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.enableUnfold","doc":"Enable the builtin `unfold` normalisation rule.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.enableUnfold\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">enableUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L136-L136","name":"Aesop.Options.useSimpAll","line":136,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.useSimpAll","doc":"Use `simp_all`, rather than `simp at *`, for the builtin `simp` normalisation\nrule.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.useSimpAll\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">useSimpAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L131-L131","name":"Aesop.Options.enableSimp","line":131,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.enableSimp","doc":"Enable the builtin `simp` normalisation rule.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.enableSimp\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">enableSimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L127-L127","name":"Aesop.Options.traceScript","line":127,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.traceScript","doc":"If Aesop proves a goal and this option is `true`, Aesop prints a tactic proof\nas a `Try this:` suggestion.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.traceScript\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">traceScript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L122-L122","name":"Aesop.Options.warnOnNonterminal","line":122,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.warnOnNonterminal","doc":"If `true`, print a warning when Aesop does not prove the goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.warnOnNonterminal\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">warnOnNonterminal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L118-L118","name":"Aesop.Options.terminal","line":118,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.terminal","doc":"If `true`, Aesop succeeds only if it proves the goal. If `false`, Aesop always\nsucceeds and reports the goals remaining after safe rules were applied.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.terminal\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">terminal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L113-L113","name":"Aesop.Options.introsTransparency?","line":113,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.introsTransparency?","doc":"If this option is not `none`, the builtin `intros` rule unfolds the goal's\ntarget with the given transparency to discover `∀` binders. For example, with\n`def T := ∀ x y : Nat, x = y`, `introsTransparency? := some .default` and goal\n`⊢ T`, the `intros` rule produces the goal `x, y : Nat ⊢ x = y`. With\n`introsTransparency? := some .reducible`, it produces `⊢ T`. With\n`introsTransparency? := none`, it only introduces arguments which are\nsyntactically bound by `∀` binders, so it also produces `⊢ T`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.introsTransparency?\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">introsTransparency?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L103-L103","name":"Aesop.Options.destructProductsTransparency","line":103,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.destructProductsTransparency","doc":"The transparency used by the `destructProducts` builtin rule. The rule splits\na hypothesis `h : T` if `T` is defeq to a product-like type (e.g. `T ≡ A ∧ B`\nor `T ≡ A × B`) at the given transparency.\n\nNote: we can index this rule only if the transparency is `.reducible`. With\nany other transparency, the rule becomes unindexed and is applied to every\ngoal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.destructProductsTransparency\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">destructProductsTransparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L93-L93","name":"Aesop.Options.assumptionTransparency","line":93,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.assumptionTransparency","doc":"The transparency used by the `assumption` builtin rule. The rule applies a\nhypothesis `h : T` if `T` is defeq to the goal's target at the given\ntransparency.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.assumptionTransparency\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">assumptionTransparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L87-L87","name":"Aesop.Options.applyHypsTransparency","line":87,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.applyHypsTransparency","doc":"The transparency used by the `applyHyps` builtin rule. The rule applies a\nhypothesis `h : T` if `T ≡ ∀ (x₁ : X₁) ... (xₙ : Xₙ), Y` at the given\ntransparency and if additionally the goal's target is defeq to `Y` at the\ngiven transparency.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.applyHypsTransparency\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">applyHypsTransparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L80-L80","name":"Aesop.Options.maxUnfoldHeartbeats","line":80,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.maxUnfoldHeartbeats","doc":"Heartbeat limit for Aesop's builtin `unfold` rule. If `unfold` goes over this\nlimit, Aesop fails. If `maxUnfoldHeartbeats = 0`, there is no limit for\n`unfold` (but the global heartbeat limit still applies).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.maxUnfoldHeartbeats\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">maxUnfoldHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L74-L74","name":"Aesop.Options.maxSimpHeartbeats","line":74,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.maxSimpHeartbeats","doc":"Heartbeat limit for Aesop's builtin `simp` rule. If `simp` goes over this\nlimit, Aesop fails. If `maxSimpHeartbeats = 0`, there is no limit for `simp`\n(but the global heartbeat limit still applies).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.maxSimpHeartbeats\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">maxSimpHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L68-L68","name":"Aesop.Options.maxRuleHeartbeats","line":68,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.maxRuleHeartbeats","doc":"Heartbeat limit for individual Aesop rules. If a rule goes over this limit, it\nfails, but Aesop itself continues until it reaches the limit set by the\n`maxHeartbeats` option. If `maxRuleHeartbeats = 0`, there is no per-rule\nlimit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.maxRuleHeartbeats\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">maxRuleHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L61-L61","name":"Aesop.Options.maxNormIterations","line":61,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.maxNormIterations","doc":"Maximum number of norm rules applied to a single goal. When this limit is\nexceeded, normalisation is likely stuck in an infinite loop, so Aesop fails. 0\nmeans no limit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.maxNormIterations\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">maxNormIterations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L55-L55","name":"Aesop.Options.maxGoals","line":55,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.maxGoals","doc":"Maximum total number of goals in the search tree. When this limit is exceeded,\nthe search ends. 0 means no limit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.maxGoals\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">maxGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L50-L50","name":"Aesop.Options.maxRuleApplications","line":50,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.maxRuleApplications","doc":"Maximum total number of rule applications in the search tree. When this limit\nis exceeded, the search ends. 0 means no limit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.maxRuleApplications\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">maxRuleApplications</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L45-L45","name":"Aesop.Options.maxRuleApplicationDepth","line":45,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.maxRuleApplicationDepth","doc":"The maximum number of rule applications in any branch of the search tree\n(i.e., the maximum search depth). When a branch exceeds this limit, it is\nconsidered unprovable, but other branches may still be explored. 0 means no\nlimit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.maxRuleApplicationDepth\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">maxRuleApplicationDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L38-L38","name":"Aesop.Options.strategy","line":38,"kind":"def","docLink":"./Aesop/Options/Public.html#Aesop.Options.strategy","doc":"The search strategy used by Aesop.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.strategy\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">strategy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L34-L34","name":"Aesop.Options.mk","line":34,"kind":"ctor","docLink":"./Aesop/Options/Public.html#Aesop.Options.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(strategy : <a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxRuleApplicationDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxRuleApplications : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxGoals : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxNormIterations : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxRuleHeartbeats : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxSimpHeartbeats : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxUnfoldHeartbeats : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(applyHypsTransparency : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(assumptionTransparency : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(destructProductsTransparency : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(introsTransparency? : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(terminal : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(warnOnNonterminal : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(traceScript : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(enableSimp : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(useSimpAll : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(enableUnfold : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Options/Public.html#Aesop.Options\">Aesop.Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L34-L141","name":"Aesop.Options","line":34,"kind":"structure","docLink":"./Aesop/Options/Public.html#Aesop.Options","doc":"Options which modify the behaviour of the `aesop` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Options\"><span class=\"name\">Aesop</span>.<span class=\"name\">Options</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L29-L29","name":"Aesop.instReprStrategy","line":29,"kind":"instance","docLink":"./Aesop/Options/Public.html#Aesop.instReprStrategy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.instReprStrategy\"><span class=\"name\">Aesop</span>.<span class=\"name\">instReprStrategy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L29-L29","name":"Aesop.instBEqStrategy","line":29,"kind":"instance","docLink":"./Aesop/Options/Public.html#Aesop.instBEqStrategy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.instBEqStrategy\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqStrategy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L29-L29","name":"Aesop.instInhabitedStrategy","line":29,"kind":"instance","docLink":"./Aesop/Options/Public.html#Aesop.instInhabitedStrategy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.instInhabitedStrategy\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedStrategy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L24-L28","name":"Aesop.Strategy.breadthFirst","line":24,"kind":"ctor","docLink":"./Aesop/Options/Public.html#Aesop.Strategy.breadthFirst","doc":"Breadth-first search. Aesop always works on the oldest unsolved goal. Goal and\nrule priorities are ignored, except to decide which rule is applied first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Strategy.breadthFirst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Strategy</span>.<span class=\"name\">breadthFirst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L17-L23","name":"Aesop.Strategy.depthFirst","line":17,"kind":"ctor","docLink":"./Aesop/Options/Public.html#Aesop.Strategy.depthFirst","doc":"Depth-first search. Whenever a rule is applied, Aesop immediately tries to\nsolve each of its subgoals (from left to right), up to the maximum rule\napplication depth. Goal and rule priorities are ignored, except to decide\nwhich rule is applied first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Strategy.depthFirst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Strategy</span>.<span class=\"name\">depthFirst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L13-L16","name":"Aesop.Strategy.bestFirst","line":13,"kind":"ctor","docLink":"./Aesop/Options/Public.html#Aesop.Strategy.bestFirst","doc":"Best-first search. This is the default strategy.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Strategy.bestFirst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Strategy</span>.<span class=\"name\">bestFirst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Options/Public.html#Aesop.Strategy\">Aesop.Strategy</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/24a4e8fea81999723bfc38bebf7adc86c2f26c6c/Aesop/Options/Public.lean#L12-L29","name":"Aesop.Strategy","line":12,"kind":"inductive","docLink":"./Aesop/Options/Public.html#Aesop.Strategy","doc":"Search strategies which Aesop can use.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Options/Public.html#Aesop.Strategy\"><span class=\"name\">Aesop</span>.<span class=\"name\">Strategy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}