{"name":"Mathlib.Data.Finsupp.Notation","instances":[{"typeNames":["Finsupp"],"name":"Finsupp.instReprFinsupp","className":"Repr"}],"imports":["Init","Mathlib.Data.Finsupp.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Finsupp/Notation.lean#L66-L74","name":"Finsupp.instReprFinsupp","line":66,"kind":"instance","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.instReprFinsupp","doc":"Display `Finsupp` using `fun₀` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.instReprFinsupp\"><span class=\"name\">Finsupp</span>.<span class=\"name\">instReprFinsupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Finsupp/Notation.lean#L59-L63","name":"Finsupp.updateUnexpander","line":59,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.updateUnexpander","doc":"Unexpander for the `fun₀ | i => x` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.updateUnexpander\"><span class=\"name\">Finsupp</span>.<span class=\"name\">updateUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Finsupp/Notation.lean#L53-L55","name":"Finsupp.singleUnexpander","line":53,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.singleUnexpander","doc":"Unexpander for the `fun₀ | i => x` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.singleUnexpander\"><span class=\"name\">Finsupp</span>.<span class=\"name\">singleUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Finsupp/Notation.lean#L32-L33","name":"Finsupp.fun₀","line":32,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀","doc":"`fun₀ | i => a` is notation for `Finsupp.single i a`, and with multiple match arms,\n`fun₀ ... | i => a` is notation for `Finsupp.update (fun₀ ...) i a`.\n\nAs a result, if multiple match arms coincide, the last one takes precedence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀\"><span class=\"name\">Finsupp</span>.<span class=\"name\">fun₀</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Finsupp/Notation.lean#L24-L25","name":"Finsupp.fun₀.matchAlts","line":24,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀.matchAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀.matchAlts\"><span class=\"name\">Finsupp</span>.<span class=\"name\">fun₀</span>.<span class=\"name\">matchAlts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"}]}