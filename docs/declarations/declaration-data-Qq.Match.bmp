{"name":"Qq.Match","instances":[],"imports":["Init","Qq.Macro","Qq.MetaM","Qq.ForLean.Do","Qq.SortLocalDecls"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L294-L296","name":"Qq.unpackParensIdent","line":294,"kind":"opaque","docLink":"./Qq/Match.html#Qq.unpackParensIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.unpackParensIdent\"><span class=\"name\">Qq</span>.<span class=\"name\">unpackParensIdent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L281-L289","name":"Qq.Impl.floatQMatch","line":281,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.floatQMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.floatQMatch\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatQMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(alt : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeq</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeqItem</span></span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L277-L279","name":"Qq.Impl.hasQMatch","line":277,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.hasQMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.hasQMatch\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">hasQMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L275-L275","name":"Qq.«term~q(_)»","line":275,"kind":"def","docLink":"./Qq/Match.html#Qq.«term~q(_)»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.«term~q(_)»\"><span class=\"name\">Qq</span>.<span class=\"name\">«term~q(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L260-L267","name":"Qq.Impl.mkLetDoSeqItem","line":260,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkLetDoSeqItem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkLetDoSeqItem\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkLetDoSeqItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`term</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alt : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeq</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeqItem</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L257-L258","name":"Qq.Impl.doElemComefrom_Do_","line":257,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.doElemComefrom_Do_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.doElemComefrom_Do_\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">doElemComefrom_Do_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L254-L254","name":"Qq.Impl.term_comefrom_Do_","line":254,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.term_comefrom_Do_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.term_comefrom_Do_\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">term_comefrom_Do_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L249-L252","name":"Qq.Impl.term_comefrom_Do_In_","line":249,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.term_comefrom_Do_In_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.term_comefrom_Do_In_\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">term_comefrom_Do_In_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L241-L247","name":"Qq.Impl.isIrrefutablePattern","line":241,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.isIrrefutablePattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.isIrrefutablePattern\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isIrrefutablePattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L237-L237","name":"Qq.Impl.«term_qq_match_:=_|_»","line":237,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.«term_qq_match_:=_|_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.«term_qq_match_:=_|_»\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">«term_qq_match_:=_|_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L204-L235","name":"Qq.Impl.«term_qq_match_←_|_In_»","line":204,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.«term_qq_match_←_|_In_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.«term_qq_match_←_|_In_»\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">«term_qq_match_←_|_In_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L166-L202","name":"Qq.Impl.elabPat","line":166,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.elabPat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.elabPat\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">elabPat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lctx : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(localInsts : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelNames : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L156-L164","name":"Qq.Impl.getPatVars.mkMVar","line":156,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.getPatVars.mkMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.getPatVars.mkMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getPatVars</span>.<span class=\"name\">mkMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></span>)</span></span>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L152-L154","name":"Qq.Impl.getPatVars.isPatVar","line":152,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.getPatVars.isPatVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.getPatVars.isPatVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getPatVars</span>.<span class=\"name\">isPatVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fn : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L142-L164","name":"Qq.Impl.getPatVars","line":142,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.getPatVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.getPatVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getPatVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pat : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></span>)</span></span>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L137-L140","name":"Qq.Impl.mkNAryFunctionType","line":137,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkNAryFunctionType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkNAryFunctionType\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkNAryFunctionType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L131-L135","name":"Qq.Impl.unquoteForMatch","line":131,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.unquoteForMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.unquoteForMatch\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteForMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(et : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">Qq.Impl.UnquoteM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L105-L129","name":"Qq.Impl.makeMatchCode","line":105,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.makeMatchCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.makeMatchCode\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeMatchCode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(_instLift : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$m»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_instBind : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">«$m»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uTy : <span class=\"fn\">Q(<a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <span class=\"fn\">Q(<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> «$uTy»)</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pat : <span class=\"fn\">Q(<span class=\"fn\">Q(<span class=\"fn\">«$$ty»</span>)</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discr : <span class=\"fn\">Q(<span class=\"fn\">Q(<span class=\"fn\">«$$ty»</span>)</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alt : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$m»</span> <span class=\"fn\">«$γ»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(expectedType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$m»</span> <span class=\"fn\">«$γ»</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$m»</span> <span class=\"fn\">«$γ»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L98-L103","name":"Qq.Impl.replaceTempExprsByQVars","line":98,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.replaceTempExprsByQVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.replaceTempExprsByQVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">replaceTempExprsByQVars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L89-L95","name":"Qq.Impl.mkQqLets","line":89,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkQqLets","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkQqLets\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkQqLets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">let a := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  Q(<span class=\"fn\">«$mkIsDefEqType_1»</span>)</span></span>)</span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\">«$γ»</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\">«$γ»</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L81-L82","name":"Qq.Impl.mkIsDefEq","line":81,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pat : <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discr : <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(<span class=\"fn\">let a := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  Q(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$mkIsDefEqType_1»</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L67-L79","name":"Qq.Impl.mkIsDefEqCore","line":67,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqCore\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pat : <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(discr : <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span> →\n  <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n    <span class=\"fn\">(<span class=\"fn\">let a := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n    <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n    Q(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$mkIsDefEqType_1»</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L53-L65","name":"Qq.Impl.mkInstantiateMVars","line":53,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkInstantiateMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkInstantiateMVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkInstantiateMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span> →\n  <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n    <span class=\"fn\">(<span class=\"fn\">let a := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n    <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n    Q(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$mkIsDefEqType_1»</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L47-L48","name":"Qq.Impl.mkLet'","line":47,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkLet'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkLet'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkLet'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L44-L45","name":"Qq.Impl.mkLambda'","line":44,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkLambda'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkLambda'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkLambda'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(body : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L40-L42","name":"Qq.Impl.mkIsDefEqResultVal","line":40,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqResultVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqResultVal\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqResultVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">let a := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  Q(<span class=\"fn\">«$mkIsDefEqType_1»</span>)</span></span>)</span> →\n  <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L36-L38","name":"Qq.Impl.mkIsDefEqResult","line":36,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqResult\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(val : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(decls : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let a := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n<span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">Qq.Impl.mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\nQ(<span class=\"fn\">«$mkIsDefEqType_1»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L32-L34","name":"Qq.Impl.mkIsDefEqType","line":32,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></span> → <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L29-L30","name":"Qq.Impl.PatVarDecl.fvar","line":29,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.fvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(decl : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let a := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarTy\">Qq.Impl.PatVarDecl.fvarTy</a> <span class=\"fn\">decl</span></span>;\n<span class=\"fn\">let match_1_1 :=\n  <span class=\"fn\">match <span class=\"fn\">decl</span> with\n  | <span class=\"fn\">{ <span class=\"fn\">ty</span> := <span class=\"fn\">none</span>, <span class=\"fn\">fvarId</span> := <span class=\"fn\">fvarId</span>, <span class=\"fn\">userName</span> := <span class=\"fn\">userName</span> }</span> =&gt; <span class=\"fn\">q(<a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span>\n  | <span class=\"fn\">{ <span class=\"fn\">ty</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">val</span></span>, <span class=\"fn\">fvarId</span> := <span class=\"fn\">fvarId</span>, <span class=\"fn\">userName</span> := <span class=\"fn\">userName</span> }</span> =&gt; <span class=\"fn\">q(<span class=\"fn\">Lean.Expr</span>)</span></span>;\nQ(<span class=\"fn\">«$match_1_1»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L25-L27","name":"Qq.Impl.PatVarDecl.fvarTy","line":25,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarTy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarTy\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">fvarTy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a> → <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L23-L23","name":"Qq.Impl.PatVarDecl.userName","line":23,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.userName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.userName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">userName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L22-L22","name":"Qq.Impl.PatVarDecl.fvarId","line":22,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarId\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L21-L21","name":"Qq.Impl.PatVarDecl.ty","line":21,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.ty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.ty\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">ty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L20-L20","name":"Qq.Impl.PatVarDecl.mk","line":20,"kind":"ctor","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.mk\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fvarId : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(userName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">Qq.Impl.PatVarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L20-L23","name":"Qq.Impl.PatVarDecl","line":20,"kind":"structure","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/1c88406514a636d241903e2e288d21dc6d861e01/Qq/Match.lean#L7-L11","name":"Lean.Syntax.stripPos","line":7,"kind":"opaque","docLink":"./Qq/Match.html#Lean.Syntax.stripPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Lean.Syntax.stripPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">stripPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"}]}