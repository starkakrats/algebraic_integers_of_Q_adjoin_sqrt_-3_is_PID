{"name":"Std.Data.PairingHeap","instances":[{"typeNames":["Std.PairingHeapImp.Heap"],"name":"Std.PairingHeapImp.instReprHeap","className":"Repr"},{"typeNames":["Std.PairingHeapImp.Heap.NoSibling"],"name":"Std.PairingHeapImp.instDecidableNoSibling","className":"Decidable"},{"typeNames":["Std.PairingHeap"],"name":"Std.PairingHeap.instInhabitedPairingHeap","className":"Inhabited"}],"imports":["Init","Std.Classes.Order","Std.Logic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L372-L372","name":"Std.PairingHeap.toArrayUnordered","line":372,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.toArrayUnordered","doc":"`O(n)`. Convert the heap to an array in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.toArrayUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L369-L369","name":"Std.PairingHeap.toListUnordered","line":369,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.toListUnordered","doc":"`O(n)`. Convert the heap to a list in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.toListUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L366-L366","name":"Std.PairingHeap.toArray","line":366,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.toArray","doc":"`O(n log n)`. Convert the heap to an array in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L363-L363","name":"Std.PairingHeap.toList","line":363,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.toList","doc":"`O(n log n)`. Convert the heap to a list in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.toList\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L360-L360","name":"Std.PairingHeap.tail","line":360,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.tail","doc":"Amortized `O(log n)`. Removes the smallest element from the heap, if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.tail\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L354-L357","name":"Std.PairingHeap.tail?","line":354,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.tail?","doc":"Amortized `O(log n)`. Removes the smallest element from the heap, or `none` if the heap is empty.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.tail?\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L349-L349","name":"Std.PairingHeap.headI","line":349,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.headI","doc":"`O(1)`. Returns the smallest element in the heap, or `default` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.headI\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">headI</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L346-L346","name":"Std.PairingHeap.head!","line":346,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.head!","doc":"`O(1)`. Returns the smallest element in the heap, or panics if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.head!\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">head!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L343-L343","name":"Std.PairingHeap.head?","line":343,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.head?","doc":"`O(1)`. Returns the smallest element in the heap, or `none` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.head?\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L337-L340","name":"Std.PairingHeap.deleteMin","line":337,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.deleteMin","doc":"Amortized `O(log n)`. Remove and return the minimum element from the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L333-L334","name":"Std.PairingHeap.ofArray","line":333,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.ofArray","doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L329-L330","name":"Std.PairingHeap.ofList","line":329,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.ofList","doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(as : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L325-L326","name":"Std.PairingHeap.insert","line":325,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.insert","doc":"`O(1)`. Add element `a` to the given heap `h`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.insert\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L321-L322","name":"Std.PairingHeap.merge","line":321,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.merge","doc":"`O(1)`. Merge the contents of two heaps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.merge\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L317-L318","name":"Std.PairingHeap.singleton","line":317,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.singleton","doc":"`O(1)`. Make a new heap containing `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L314-L314","name":"Std.PairingHeap.size","line":314,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.size","doc":"`O(n)`. The number of elements in the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.size\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L311-L311","name":"Std.PairingHeap.isEmpty","line":311,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.isEmpty","doc":"`O(1)`. Is the heap empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L308-L308","name":"Std.PairingHeap.instInhabitedPairingHeap","line":308,"kind":"instance","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.instInhabitedPairingHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.instInhabitedPairingHeap\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">instInhabitedPairingHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L306-L306","name":"Std.PairingHeap.empty","line":306,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap.empty","doc":"`O(1)`. Make a new empty pairing heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap.empty\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L299-L300","name":"Std.mkPairingHeap","line":299,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.mkPairingHeap","doc":"`O(1)`. Make a new empty pairing heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.mkPairingHeap\"><span class=\"name\">Std</span>.<span class=\"name\">mkPairingHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\">Std.PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L295-L296","name":"Std.PairingHeap","line":295,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeap","doc":"A [pairing heap](https://en.wikipedia.org/wiki/Pairing_heap) is a data structure which supports\nthe following primary operations:\n\n* `insert : α → PairingHeap α → PairingHeap α`: add an element to the heap\n* `deleteMin : PairingHeap α → Option (α × PairingHeap α)`:\n  remove the minimum element from the heap\n* `merge : PairingHeap α → PairingHeap α → PairingHeap α`: combine two heaps\n\nThe first two operations are known as a \"priority queue\", so this could be called\na \"mergeable priority queue\". The standard choice for a priority queue is a binary heap,\nwhich supports `insert` and `deleteMin` in `O(log n)`, but `merge` is `O(n)`.\nWith a `PairingHeap`, `insert` and `merge` are `O(1)`, `deleteMin` is amortized `O(log n)`.\n\nNote that `deleteMin` may be `O(n)` in a single operation. So if you need an efficient\npersistent priority queue, you should use other data structures with better worst-case time.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeap\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L269-L272","name":"Std.PairingHeapImp.Heap.deleteMin_fst","line":269,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin_fst\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">deleteMin_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.fst</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin\">Std.PairingHeapImp.Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.head?\">Std.PairingHeapImp.Heap.head?</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L263-L267","name":"Std.PairingHeapImp.Heap.WF.tail","line":263,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.tail\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hwf : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail\">Std.PairingHeapImp.Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L257-L261","name":"Std.PairingHeapImp.Heap.WF.tail?","line":257,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.tail?\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{tl : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hwf : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail?\">Std.PairingHeapImp.Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">tl</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">tl</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L253-L255","name":"Std.PairingHeapImp.Heap.WF.deleteMin","line":253,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.deleteMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin\">Std.PairingHeapImp.Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L247-L251","name":"Std.PairingHeapImp.Heap.WF.combine","line":247,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.combine\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NodeWF\">Std.PairingHeapImp.Heap.NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.combine\">Std.PairingHeapImp.Heap.combine</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L239-L245","name":"Std.PairingHeapImp.Heap.WF.merge","line":239,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.merge\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">s₁ </span>s₂ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.merge\">Std.PairingHeapImp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L232-L237","name":"Std.PairingHeapImp.Heap.WF.merge_node","line":232,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.merge_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.merge_node\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge_node</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>} {<span class=\"fn\">a₁</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">c₁</span> : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>}\n  {<span class=\"fn\">c₂ </span>s₁ s₂ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NodeWF\">Std.PairingHeapImp.Heap.NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a₁</span> <span class=\"fn\">c₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NodeWF\">Std.PairingHeapImp.Heap.NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a₂</span> <span class=\"fn\">c₂</span></span> →\n      <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.merge\">Std.PairingHeapImp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node\">Std.PairingHeapImp.Heap.node</a> <span class=\"fn\">a₁</span> <span class=\"fn\">c₁</span> <span class=\"fn\">s₁</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node\">Std.PairingHeapImp.Heap.node</a> <span class=\"fn\">a₂</span> <span class=\"fn\">c₂</span> <span class=\"fn\">s₂</span></span>)</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L230-L230","name":"Std.PairingHeapImp.Heap.WF.singleton","line":230,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">singleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}, <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.singleton\">Std.PairingHeapImp.Heap.singleton</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L227-L228","name":"Std.PairingHeapImp.Heap.WF.node","line":227,"kind":"ctor","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.node","doc":"There is exactly one tree and it is a `le`-min-heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.node\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NodeWF\">Std.PairingHeapImp.Heap.NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node\">Std.PairingHeapImp.Heap.node</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span> <span class=\"fn\">Std.PairingHeapImp.Heap.nil</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L225-L226","name":"Std.PairingHeapImp.Heap.WF.nil","line":225,"kind":"ctor","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.nil","doc":"It is an empty heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF.nil\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\">Std.PairingHeapImp.Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">Std.PairingHeapImp.Heap.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L224-L228","name":"Std.PairingHeapImp.Heap.WF","line":224,"kind":"inductive","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF","doc":"The well formedness predicate for a pairing heap.\nIt asserts that:\n* There is no more than one tree.\n* It is a `le`-min-heap (if `le` is well-behaved)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.WF\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L214-L216","name":"Std.PairingHeapImp.Heap.NodeWF","line":214,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NodeWF","doc":"The well formedness predicate for a heap node.\nIt asserts that:\n* If `a` is added at the top to make the forest into a tree, the resulting tree\n  is a `le`-min-heap (if `le` is well-behaved)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NodeWF\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NodeWF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L205-L206","name":"Std.PairingHeapImp.Heap.toArrayUnordered","line":205,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toArrayUnordered","doc":"`O(n)`. Convert the heap to an array in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toArrayUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L201-L202","name":"Std.PairingHeapImp.Heap.toListUnordered","line":201,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toListUnordered","doc":"`O(n)`. Convert the heap to a list in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toListUnordered\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L197-L198","name":"Std.PairingHeapImp.Heap.foldTree","line":197,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.foldTree","doc":"`O(n)`. Fold a function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.foldTree\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(join : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L192-L194","name":"Std.PairingHeapImp.Heap.foldTreeM","line":192,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.foldTreeM","doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.foldTreeM\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(join : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L189-L189","name":"Std.PairingHeapImp.Heap.toList","line":189,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toList","doc":"`O(n log n)`. Convert the heap to a list in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toList\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L186-L186","name":"Std.PairingHeapImp.Heap.toArray","line":186,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toArray","doc":"`O(n log n)`. Convert the heap to an array in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L182-L183","name":"Std.PairingHeapImp.Heap.fold","line":182,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.fold","doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.fold\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L169-L176","name":"Std.PairingHeapImp.Heap.foldM","line":169,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.foldM","doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.foldM\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(init : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L159-L163","name":"Std.PairingHeapImp.Heap.size_tail?_lt","line":159,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_tail?_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_tail?_lt\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_tail?_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail?\">Std.PairingHeapImp.Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L155-L157","name":"Std.PairingHeapImp.Heap.size_deleteMin_lt","line":155,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_deleteMin_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_deleteMin_lt\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_deleteMin_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin\">Std.PairingHeapImp.Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L149-L153","name":"Std.PairingHeapImp.Heap.size_tail","line":149,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_tail\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail\">Std.PairingHeapImp.Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L143-L147","name":"Std.PairingHeapImp.Heap.size_tail?","line":143,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_tail?\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail?\">Std.PairingHeapImp.Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L139-L141","name":"Std.PairingHeapImp.Heap.size_deleteMin","line":139,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_deleteMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin\">Std.PairingHeapImp.Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L130-L137","name":"Std.PairingHeapImp.Heap.size_combine","line":130,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_combine\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.combine\">Std.PairingHeapImp.Heap.combine</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L124-L128","name":"Std.PairingHeapImp.Heap.size_merge","line":124,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_merge\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.merge\">Std.PairingHeapImp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L120-L122","name":"Std.PairingHeapImp.Heap.size_merge_node","line":120,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_merge_node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size_merge_node\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_merge_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₁ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c₂ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.merge\">Std.PairingHeapImp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node\">Std.PairingHeapImp.Heap.node</a> <span class=\"fn\">a₁</span> <span class=\"fn\">c₁</span> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node\">Std.PairingHeapImp.Heap.node</a> <span class=\"fn\">a₂</span> <span class=\"fn\">c₂</span> <span class=\"fn\">s₂</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\">Std.PairingHeapImp.Heap.size</a> <span class=\"fn\">c₂</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L114-L118","name":"Std.PairingHeapImp.Heap.noSibling_tail","line":114,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_tail\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail\">Std.PairingHeapImp.Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L108-L112","name":"Std.PairingHeapImp.Heap.noSibling_tail?","line":108,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_tail?\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail?\">Std.PairingHeapImp.Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L104-L106","name":"Std.PairingHeapImp.Heap.noSibling_deleteMin","line":104,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_deleteMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s' : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin\">Std.PairingHeapImp.Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">s'</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L96-L102","name":"Std.PairingHeapImp.Heap.noSibling_combine","line":96,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_combine\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.combine\">Std.PairingHeapImp.Heap.combine</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L91-L94","name":"Std.PairingHeapImp.Heap.noSibling_merge","line":91,"kind":"theorem","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.noSibling_merge\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.merge\">Std.PairingHeapImp.Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L85-L89","name":"Std.PairingHeapImp.instDecidableNoSibling","line":85,"kind":"instance","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.instDecidableNoSibling","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.instDecidableNoSibling\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">instDecidableNoSibling</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L82-L83","name":"Std.PairingHeapImp.Heap.NoSibling.node","line":82,"kind":"ctor","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling.node","doc":"Or there is exactly one tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling.node\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NoSibling</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node\">Std.PairingHeapImp.Heap.node</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span> <span class=\"fn\">Std.PairingHeapImp.Heap.nil</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L80-L81","name":"Std.PairingHeapImp.Heap.NoSibling.nil","line":80,"kind":"ctor","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling.nil","doc":"An empty heap is no more than one tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling.nil\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NoSibling</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\">Std.PairingHeapImp.Heap.NoSibling</a> <span class=\"fn\">Std.PairingHeapImp.Heap.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L79-L83","name":"Std.PairingHeapImp.Heap.NoSibling","line":79,"kind":"inductive","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling","doc":"A predicate says there is no more than one tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.NoSibling\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NoSibling</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L75-L76","name":"Std.PairingHeapImp.Heap.tail","line":75,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail","doc":"Amortized `O(log n)`. Remove the minimum element of the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L71-L72","name":"Std.PairingHeapImp.Heap.tail?","line":71,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail?","doc":"Amortized `O(log n)`. Get the tail of the pairing heap after removing the minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.tail?\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L66-L68","name":"Std.PairingHeapImp.Heap.deleteMin","line":66,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin","doc":"Amortized `O(log n)`. Find and remove the the minimum element from the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.deleteMin\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L61-L63","name":"Std.PairingHeapImp.Heap.head?","line":61,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.head?","doc":"`O(1)`. Get the smallest element in the heap, if it has an element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.head?\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L56-L58","name":"Std.PairingHeapImp.Heap.headD","line":56,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.headD","doc":"`O(1)`. Get the smallest element in the heap, including the passed in value `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.headD\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">headD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L51-L53","name":"Std.PairingHeapImp.Heap.combine","line":51,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.combine","doc":"Auxiliary for `Heap.deleteMin`: merge the forest in pairs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.combine\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L43-L48","name":"Std.PairingHeapImp.Heap.merge","line":43,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.merge","doc":"`O(1)`. Merge two heaps. Ignore siblings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.merge\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L38-L40","name":"Std.PairingHeapImp.Heap.isEmpty","line":38,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.isEmpty","doc":"`O(1)`. Is the heap empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L35-L35","name":"Std.PairingHeapImp.Heap.singleton","line":35,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.singleton","doc":"A node containing a single element `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.singleton\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L30-L32","name":"Std.PairingHeapImp.Heap.size","line":30,"kind":"def","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size","doc":"`O(n)`. The number of elements in the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.size\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L27-L27","name":"Std.PairingHeapImp.instReprHeap","line":27,"kind":"instance","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.instReprHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.instReprHeap\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">instReprHeap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L24-L26","name":"Std.PairingHeapImp.Heap.node","line":24,"kind":"ctor","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node","doc":"A forest consists of a root `a`, a forest `child` elements greater than `a`,\nand another forest `sibling`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.node\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(child : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sibling : <span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L22-L23","name":"Std.PairingHeapImp.Heap.nil","line":22,"kind":"ctor","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.nil","doc":"An empty forest, which has depth `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap.nil\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\">Std.PairingHeapImp.Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/PairingHeap.lean#L21-L27","name":"Std.PairingHeapImp.Heap","line":21,"kind":"inductive","docLink":"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap","doc":"A `Heap` is the nodes of the pairing heap.\nEach node have two pointers: `child` going to the first child of this node,\nand `sibling` goes to the next sibling of this tree.\nSo it actually encodes a forest where each node has children\n`node.child`, `node.child.sibling`, `node.child.sibling.sibling`, etc.\n\nEach edge in this forest denotes a `le a b` relation that has been checked, so\nthe root is smaller than everything else under it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/PairingHeap.html#Std.PairingHeapImp.Heap\"><span class=\"name\">Std</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}