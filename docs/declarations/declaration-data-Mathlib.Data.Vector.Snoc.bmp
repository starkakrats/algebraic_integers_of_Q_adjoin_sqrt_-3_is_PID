{"name":"Mathlib.Data.Vector.Snoc","instances":[],"imports":["Init","Mathlib.Data.Vector.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L154-L159","name":"Vector.mapAccumr₂_snoc","line":154,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr₂_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr₂_snoc\"><span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{σ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{φ : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.mapAccumr₂\">Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">ys</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let q := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>;\n  <span class=\"fn\">let r := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.mapAccumr₂\">Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\"><span class=\"fn\">q</span>.1</span></span>;\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.1</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\"><span class=\"fn\">r</span>.2</span> <span class=\"fn\"><span class=\"fn\">q</span>.2</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L150-L151","name":"Vector.mapAccumr₂_nil","line":150,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr₂_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr₂_nil\"><span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α </span>β α_1 β_1 : <a href=\"./foundational_types.html\">Type</a>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β_1</span></span></span></span></span>} {<span class=\"fn\">s</span> : <span class=\"fn\">α_1</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.mapAccumr₂\">Vector.mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">Vector.nil</span> <span class=\"fn\">Vector.nil</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">Vector.nil</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L146-L147","name":"Vector.map₂_snoc","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.map₂_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.map₂_snoc\"><span class=\"name\">Vector</span>.<span class=\"name\">map₂_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ys : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α_1</span></span></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">y</span> : <span class=\"fn\">β</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.map₂\">Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">ys</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.map₂\">Vector.map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L134-L141","name":"Vector.mapAccumr_snoc","line":134,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr_snoc\"><span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a>} {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">s</span> : <span class=\"fn\">α_1</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.mapAccumr\">Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">let q := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>;\n    <span class=\"fn\">let r := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.mapAccumr\">Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\"><span class=\"fn\">q</span>.1</span></span>;\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.1</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\"><span class=\"fn\">r</span>.2</span> <span class=\"fn\"><span class=\"fn\">q</span>.2</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L130-L131","name":"Vector.mapAccumr_nil","line":130,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.mapAccumr_nil\"><span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a>} {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> → <span class=\"fn\"><span class=\"fn\">α_1</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span></span>} {<span class=\"fn\">s</span> : <span class=\"fn\">α_1</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.mapAccumr\">Vector.mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">Vector.nil</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">s</span>, <span class=\"fn\">Vector.nil</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L126-L127","name":"Vector.map_snoc","line":126,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.map_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.map_snoc\"><span class=\"name\">Vector</span>.<span class=\"name\">map_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α_1</span></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.map\">Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.map\">Vector.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L109-L113","name":"Vector.revCasesOn","line":109,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.revCasesOn","doc":"Define `C v` by *reverse* case analysis, i.e. by handling the cases `nil` and `xs.snoc x`\nseparately "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.revCasesOn\"><span class=\"name\">Vector</span>.<span class=\"name\">revCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snoc : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L92-L104","name":"Vector.revInductionOn₂","line":92,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.revInductionOn₂","doc":"Define `C v w` by *reverse* induction on a pair of vectors `v : Vector α n` and\n`w : Vector β n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.revInductionOn₂\"><span class=\"name\">Vector</span>.<span class=\"name\">revInductionOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Vector.nil</span> <span class=\"fn\">Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snoc : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">ys</span> <span class=\"fn\">y</span></span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L79-L87","name":"Vector.revInductionOn","line":79,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.revInductionOn","doc":"Define `C v` by *reverse* induction on `v : Vector α n`.\nThat is, break the vector down starting from the right-most element, using `snoc`\n\nThis function has two arguments: `nil` handles the base case on `C nil`,\nand `snoc` defines the inductive step using `∀ x : α, C xs → C (xs.snoc x)`.\n\nThis can be used as `induction v using Vector.revInductionOn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.revInductionOn\"><span class=\"name\">Vector</span>.<span class=\"name\">revInductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nil : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">Vector.nil</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(snoc : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L54-L62","name":"Vector.replicate_succ_to_snoc","line":54,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.replicate_succ_to_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.replicate_succ_to_snoc\"><span class=\"name\">Vector</span>.<span class=\"name\">replicate_succ_to_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(val : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.replicate\">Vector.replicate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector.replicate\">Vector.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">val</span></span>)</span> <span class=\"fn\">val</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L48-L52","name":"Vector.reverse_snoc","line":48,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.reverse_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.reverse_snoc\"><span class=\"name\">Vector</span>.<span class=\"name\">reverse_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Vector.reverse\">Vector.reverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector.html#Vector.cons\">::ᵥ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Vector.reverse\">Vector.reverse</a> <span class=\"fn\">xs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L42-L45","name":"Vector.reverse_cons","line":42,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.reverse_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.reverse_cons\"><span class=\"name\">Vector</span>.<span class=\"name\">reverse_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Vector.reverse\">Vector.reverse</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector.html#Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Basic.html#Vector.reverse\">Vector.reverse</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L38-L39","name":"Vector.snoc_nil","line":38,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.snoc_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc_nil\"><span class=\"name\">Vector</span>.<span class=\"name\">snoc_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">Vector.nil</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector.html#Vector.cons\">::ᵥ</a> <span class=\"fn\">Vector.nil</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L34-L35","name":"Vector.snoc_cons","line":34,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.snoc_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc_cons\"><span class=\"name\">Vector</span>.<span class=\"name\">snoc_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector.html#Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector.html#Vector.cons\">::ᵥ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\">Vector.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Vector/Snoc.lean#L24-L25","name":"Vector.snoc","line":24,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#Vector.snoc","doc":"Append a single element to the end of a vector "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#Vector.snoc\"><span class=\"name\">Vector</span>.<span class=\"name\">snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Vector.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></div></div>"}]}