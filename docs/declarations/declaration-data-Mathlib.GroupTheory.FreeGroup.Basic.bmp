{"name":"Mathlib.GroupTheory.FreeGroup.Basic","instances":[{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instZeroFreeAddGroup","className":"Zero"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instOneFreeGroup","className":"One"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instInhabitedFreeAddGroup","className":"Inhabited"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instInhabitedFreeGroup","className":"Inhabited"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instUniqueFreeAddGroup","className":"Unique"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instUniqueFreeGroup","className":"Unique"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instAddFreeAddGroup","className":"Add"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instMulFreeGroup","className":"Mul"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instNegFreeAddGroup","className":"Neg"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instInvFreeGroup","className":"Inv"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instAddGroupFreeAddGroup","className":"AddGroup"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instGroupFreeGroup","className":"Group"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instMonadFreeAddGroup","className":"Monad"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instMonadFreeGroup","className":"Monad"},{"typeNames":["FreeAddGroup"],"name":"FreeAddGroup.instLawfulMonadFreeAddGroupInstMonadFreeAddGroup","className":"LawfulMonad"},{"typeNames":["FreeGroup"],"name":"FreeGroup.instLawfulMonadFreeGroupInstMonadFreeGroup","className":"LawfulMonad"},{"typeNames":["Eq"],"name":"FreeAddGroup.instDecidableEqFreeAddGroup","className":"Decidable"},{"typeNames":["Eq"],"name":"FreeGroup.instDecidableEqFreeGroup","className":"Decidable"},{"typeNames":["FreeGroup.Red"],"name":"FreeGroup.Red.decidableRel","className":"Decidable"},{"typeNames":["Subtype"],"name":"FreeGroup.instFintypeSubtypeListProdBoolRed","className":"Fintype"}],"imports":["Init","Mathlib.Data.Fintype.Basic","Mathlib.Data.List.Sublists","Mathlib.Data.List.Basic","Mathlib.GroupTheory.Subgroup.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1429-L1433","name":"FreeGroup.norm_mul_le","line":1429,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_mul_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_mul_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">norm_mul_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1428-L1428","name":"FreeAddGroup.norm_add_le","line":1428,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_add_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_add_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">norm_add_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1423-L1424","name":"FreeGroup.norm_mk_le","line":1423,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_mk_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_mk_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">norm_mk_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1422-L1422","name":"FreeAddGroup.norm_mk_le","line":1422,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_mk_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_mk_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">norm_mk_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1417-L1418","name":"FreeGroup.norm_one","line":1417,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">norm_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1416-L1416","name":"FreeAddGroup.norm_zero","line":1416,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_zero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">norm_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1411-L1412","name":"FreeGroup.norm_eq_zero","line":1411,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_eq_zero\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">norm_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1410-L1410","name":"FreeAddGroup.norm_eq_zero","line":1410,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_eq_zero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">norm_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1405-L1406","name":"FreeGroup.norm_inv_eq","line":1405,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_inv_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm_inv_eq\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">norm_inv_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\">FreeGroup.norm</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1404-L1404","name":"FreeAddGroup.norm_neg_eq","line":1404,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_neg_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm_neg_eq\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">norm_neg_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\">FreeAddGroup.norm</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1399-L1400","name":"FreeGroup.norm","line":1399,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm","doc":"The length of reduced words provides a norm on a free group. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.norm\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1398-L1398","name":"FreeAddGroup.norm","line":1398,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm","doc":"The length of reduced words provides a norm on an additive free group."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.norm\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1386-L1389","name":"FreeGroup.instFintypeSubtypeListProdBoolRed","line":1386,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instFintypeSubtypeListProdBoolRed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instFintypeSubtypeListProdBoolRed\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instFintypeSubtypeListProdBoolRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">{ <span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> // <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1382-L1383","name":"FreeGroup.Red.enum.complete","line":1382,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.enum.complete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.enum.complete\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">enum</span>.<span class=\"name\">complete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.enum\">FreeGroup.Red.enum</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1378-L1379","name":"FreeGroup.Red.enum.sound","line":1378,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.enum.sound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.enum.sound\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">enum</span>.<span class=\"name\">sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">b</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.sublists\">List.sublists</a> <span class=\"fn\">L₁</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1374-L1375","name":"FreeGroup.Red.enum","line":1374,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.enum","doc":"A list containing every word that `w₁` reduces to. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.enum\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">enum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1355-L1370","name":"FreeGroup.Red.decidableRel","line":1355,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.decidableRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.decidableRel\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">decidableRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">FreeGroup.Red</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1351-L1352","name":"FreeGroup.instDecidableEqFreeGroup","line":1351,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instDecidableEqFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instDecidableEqFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instDecidableEqFreeGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1350-L1350","name":"FreeAddGroup.instDecidableEqFreeAddGroup.proof_1","line":1350,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instDecidableEqFreeAddGroup.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instDecidableEqFreeAddGroup.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instDecidableEqFreeAddGroup</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeAddGroup.toWord</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1350-L1350","name":"FreeAddGroup.instDecidableEqFreeAddGroup","line":1350,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instDecidableEqFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instDecidableEqFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instDecidableEqFreeAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1345-L1346","name":"FreeGroup.reduce.churchRosser","line":1345,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.churchRosser","doc":"**Constructive Church-Rosser theorem** (compare `church_rosser`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.churchRosser\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">churchRosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H12 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H13 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₄</span></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1344-L1344","name":"FreeAddGroup.reduce.churchRosser","line":1344,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.churchRosser","doc":"**Constructive Church-Rosser theorem** (compare `church_rosser`)."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.churchRosser\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">churchRosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H12 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H13 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">L₄</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₄</span></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1344-L1344","name":"FreeAddGroup.reduce.churchRosser.proof_1","line":1344,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.churchRosser.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.churchRosser.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">churchRosser</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H12 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H13 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1337-L1339","name":"FreeGroup.toWord_inv","line":1337,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_inv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">toWord_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1336-L1336","name":"FreeAddGroup.toWord_neg","line":1336,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_neg\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1327-L1332","name":"FreeGroup.reduce_invRev","line":1327,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce_invRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce_invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce_invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">w</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">w</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1326-L1326","name":"FreeAddGroup.reduce_negRev","line":1326,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce_negRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce_negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce_negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">w</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">w</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1321-L1322","name":"FreeGroup.toWord_eq_nil_iff","line":1321,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_eq_nil_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_eq_nil_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">toWord_eq_nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1320-L1320","name":"FreeAddGroup.toWord_eq_nil_iff","line":1320,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_eq_nil_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_eq_nil_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord_eq_nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1315-L1316","name":"FreeGroup.toWord_one","line":1315,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">toWord_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1314-L1314","name":"FreeAddGroup.toWord_zero","line":1314,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_zero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1308-L1310","name":"FreeGroup.reduce_toWord","line":1308,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce_toWord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce_toWord\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce_toWord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1307-L1307","name":"FreeAddGroup.reduce_toWord","line":1307,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce_toWord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce_toWord\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce_toWord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1302-L1303","name":"FreeGroup.toWord_mk","line":1302,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">toWord_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1301-L1301","name":"FreeAddGroup.toWord_mk","line":1301,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1296-L1297","name":"FreeGroup.toWord_inj","line":1296,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_inj\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">toWord_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1295-L1295","name":"FreeAddGroup.toWord_inj","line":1295,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_inj\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">y</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1290-L1291","name":"FreeGroup.toWord_injective","line":1290,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord_injective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">toWord_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeGroup.toWord</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1289-L1289","name":"FreeAddGroup.toWord_injective","line":1289,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord_injective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeAddGroup.toWord</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1285-L1285","name":"FreeGroup.mk_toWord","line":1285,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk_toWord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk_toWord\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mk_toWord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\">FreeGroup.toWord</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1284-L1284","name":"FreeAddGroup.mk_toWord","line":1284,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk_toWord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk_toWord\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">mk_toWord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\">FreeAddGroup.toWord</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1279-L1280","name":"FreeGroup.toWord","line":1279,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord","doc":"The function that sends an element of the free group to its maximal reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.toWord\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">toWord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1277-L1278","name":"FreeAddGroup.toWord.proof_1","line":1277,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(_L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">_L₁</span> <span class=\"fn\">_L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">_L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">_L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1277-L1278","name":"FreeAddGroup.toWord","line":1277,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord","doc":"The function that sends an element of the additive free group to its maximal\nreduction."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.toWord\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">toWord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1271-L1272","name":"FreeGroup.reduce.rev","line":1271,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.rev","doc":"If words `w₁ w₂` are such that `w₁` reduces to `w₂`, then `w₂` reduces to the maximal reduction\nof `w₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.rev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1269-L1270","name":"FreeAddGroup.reduce.rev","line":1269,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.rev","doc":"If words `w₁ w₂` are such that `w₁` reduces to `w₂`, then `w₂` reduces to the maximal\nreduction of `w₁`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.rev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1262-L1263","name":"FreeGroup.reduce.self","line":1262,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.self","doc":"A word and its maximal reduction correspond to the same element of the free group. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.self\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1260-L1261","name":"FreeAddGroup.reduce.self","line":1260,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.self","doc":"A word and its maximal reduction correspond to the same element of the additive free\ngroup."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.self\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1254-L1255","name":"FreeGroup.reduce.exact","line":1254,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.exact","doc":"If two words have a common maximal reduction, then they correspond to the same element in the\nfree group. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.exact\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1252-L1253","name":"FreeAddGroup.reduce.exact","line":1252,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.exact","doc":"If two words have a common maximal reduction, then they correspond to the same\nelement in the additive free group."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.exact\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1244-L1246","name":"FreeGroup.reduce.sound","line":1244,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.sound","doc":"If two words correspond to the same element in the free group, then they\nhave a common maximal reduction. This is the proof that the function that sends\nan element of the free group to its maximal reduction is well-defined. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.sound\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1241-L1243","name":"FreeAddGroup.reduce.sound.match_1","line":1241,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.sound.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.sound.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">sound</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">_L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">H13</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">_L₃</span></span>) (<span class=\"fn\">H23</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">_L₃</span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(_ : <span class=\"fn\">∃ (c : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">c</span></span></span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1241-L1243","name":"FreeAddGroup.reduce.sound","line":1241,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.sound","doc":"If two words correspond to the same element in the additive free group, then they\nhave a common maximal reduction. This is the proof that the function that sends an element of the\nfree group to its maximal reduction is well-defined."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.sound\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₂</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1233-L1234","name":"FreeGroup.Red.reduce_left","line":1233,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.reduce_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.reduce_left\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">reduce_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1232-L1232","name":"FreeAddGroup.Red.reduce_left","line":1232,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.reduce_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.reduce_left\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">reduce_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1227-L1228","name":"FreeGroup.Red.reduce_right","line":1227,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.reduce_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.reduce_right\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">reduce_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1226-L1226","name":"FreeAddGroup.Red.reduce_right","line":1226,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.reduce_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.reduce_right\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">reduce_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1223-L1223","name":"FreeGroup.freeAddGroup.red.reduce_eq","line":1223,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeAddGroup.red.reduce_eq","doc":"**Alias** of `FreeAddGroup.reduce.eq_of_red`.\n\n---\n\nIf a word reduces to another word, then they have a common maximal reduction."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeAddGroup.red.reduce_eq\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeAddGroup</span>.<span class=\"name\">red</span>.<span class=\"name\">reduce_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1220-L1220","name":"FreeGroup.red.reduce_eq","line":1220,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red.reduce_eq","doc":"**Alias** of `FreeGroup.reduce.eq_of_red`.\n\n---\n\nIf a word reduces to another word, then they have a common maximal reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red.reduce_eq\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">red</span>.<span class=\"name\">reduce_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1214-L1216","name":"FreeGroup.reduce.eq_of_red","line":1214,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.eq_of_red","doc":"If a word reduces to another word, then they have a common maximal reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.eq_of_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">eq_of_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1213-L1213","name":"FreeAddGroup.reduce.eq_of_red","line":1213,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.eq_of_red","doc":"If a word reduces to another word, then they have a common maximal reduction."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.eq_of_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">eq_of_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1206-L1208","name":"FreeGroup.reduce.Step.eq","line":1206,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.Step.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.Step.eq\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">Step</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1205-L1205","name":"FreeAddGroup.reduce.Step.eq","line":1205,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.Step.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.Step.eq\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">Step</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1205-L1205","name":"FreeAddGroup.reduce.Step.eq.match_1","line":1205,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.Step.eq.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.Step.eq.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">Step</span>.<span class=\"name\">eq</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">_L₃</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">HR13</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">_L₃</span></span>)\n      (<span class=\"fn\">HR23</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">_L₃</span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∃ (c : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">c</span></span></span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1200-L1201","name":"FreeGroup.reduce.idem","line":1200,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.idem","doc":"`reduce` is idempotent, i.e. the maximal reduction of the maximal reduction of a word is the\nmaximal reduction of the word. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.idem\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1198-L1199","name":"FreeAddGroup.reduce.idem","line":1198,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.idem","doc":"`reduce` is idempotent, i.e. the maximal reduction of the maximal\nreduction of a word is the maximal reduction of the word."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.idem\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1188-L1192","name":"FreeGroup.reduce.min","line":1188,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.min","doc":"The second theorem that characterises the function `reduce`: the maximal reduction of a word\nonly reduces to itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.min\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1186-L1187","name":"FreeAddGroup.reduce.min","line":1186,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.min","doc":"The second theorem that characterises the function `reduce`: the maximal reduction of\na word only reduces to itself."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.min\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1151-L1180","name":"FreeGroup.reduce.not","line":1151,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.not\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₃</span></span></span></span></span> → <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1150-L1150","name":"FreeAddGroup.reduce.not","line":1150,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.not\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₃</span></span></span></span></span> → <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1150-L1150","name":"FreeAddGroup.reduce.not.match_1","line":1150,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.not.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.not.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">not</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 x_2 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_3</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_4</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">L2 </span>L3 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_5</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>), <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span> <span class=\"fn\">L2</span> <span class=\"fn\">L3</span> <span class=\"fn\">x</span> <span class=\"fn\">x_5</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">L1 </span>L2 L3 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x'</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>), <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L1</span></span>)</span> <span class=\"fn\">L2</span> <span class=\"fn\">L3</span> <span class=\"fn\">x'</span> <span class=\"fn\">b'</span></span></span>)</span> →\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x_2</span> <span class=\"fn\">x_3</span> <span class=\"fn\">x_4</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1125-L1146","name":"FreeGroup.reduce.red","line":1125,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.red","doc":"The first theorem that characterises the function `reduce`: a word reduces to its maximal\nreduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1123-L1124","name":"FreeAddGroup.reduce.red","line":1123,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.red","doc":"The first theorem that characterises the function `reduce`: a word reduces to its\nmaximal reduction."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1113-L1117","name":"FreeGroup.reduce.cons","line":1113,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce.cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.casesOn\">List.casesOn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\">FreeGroup.reduce</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">[<span class=\"fn\">x</span>]</span> <span class=\"fn\">fun (<span class=\"fn\">hd</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) (<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) =&gt;\n    <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">hd</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">hd</span>.2</span></span></span></span> then <span class=\"fn\">tl</span> else <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1112-L1112","name":"FreeAddGroup.reduce.cons","line":1112,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce.cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.casesOn\">List.casesOn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\">FreeAddGroup.reduce</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">[<span class=\"fn\">x</span>]</span> <span class=\"fn\">fun (<span class=\"fn\">hd</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) (<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) =&gt;\n    <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">hd</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\"><span class=\"fn\">hd</span>.2</span></span></span></span> then <span class=\"fn\">tl</span> else <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1105-L1108","name":"FreeGroup.reduce","line":1105,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce","doc":"The maximal reduction of a word. It is computable\niff `α` has decidable equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.reduce\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">reduce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1104-L1104","name":"FreeAddGroup.reduce","line":1104,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce","doc":"The maximal reduction of a word. It is computable iff `α` has decidable equality."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.reduce\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">reduce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1080-L1094","name":"FreeGroup.instLawfulMonadFreeGroupInstMonadFreeGroup","line":1080,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instLawfulMonadFreeGroupInstMonadFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instLawfulMonadFreeGroupInstMonadFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instLawfulMonadFreeGroupInstMonadFreeGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1079-L1079","name":"FreeAddGroup.instLawfulMonadFreeAddGroupInstMonadFreeAddGroup","line":1079,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instLawfulMonadFreeAddGroupInstMonadFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instLawfulMonadFreeAddGroupInstMonadFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instLawfulMonadFreeAddGroupInstMonadFreeAddGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful.html#LawfulMonad\">LawfulMonad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1074-L1075","name":"FreeGroup.inv_bind","line":1074,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">inv_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1073-L1073","name":"FreeAddGroup.neg_bind","line":1073,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">neg_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1068-L1069","name":"FreeGroup.mul_bind","line":1068,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mul_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1067-L1067","name":"FreeAddGroup.add_bind","line":1067,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">add_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span>)</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1062-L1063","name":"FreeGroup.one_bind","line":1062,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">one_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1061-L1061","name":"FreeAddGroup.zero_bind","line":1061,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">zero_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1056-L1057","name":"FreeGroup.pure_bind","line":1056,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pure_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.pure_bind\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">pure_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1055-L1055","name":"FreeAddGroup.pure_bind","line":1055,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.pure_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.pure_bind\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">pure_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1049-L1050","name":"FreeGroup.map_inv","line":1049,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_inv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1048-L1048","name":"FreeAddGroup.map_neg","line":1048,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_neg\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1043-L1044","name":"FreeGroup.map_mul","line":1043,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_mul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1042-L1042","name":"FreeAddGroup.map_add","line":1042,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_add\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1037-L1038","name":"FreeGroup.map_one","line":1037,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1036-L1036","name":"FreeAddGroup.map_zero","line":1036,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_zero\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1031-L1032","name":"FreeGroup.map_pure","line":1031,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_pure\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1030-L1030","name":"FreeAddGroup.map_pure","line":1030,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_pure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_pure\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1021-L1025","name":"FreeGroup.induction_on","line":1021,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.induction_on","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.induction_on\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">induction_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cp : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Ci : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cm : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1020-L1020","name":"FreeAddGroup.induction_on","line":1020,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.induction_on","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.induction_on\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">induction_on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(z : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(C1 : <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cp : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Ci : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Cm : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1015-L1018","name":"FreeGroup.instMonadFreeGroup","line":1015,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMonadFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMonadFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instMonadFreeGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L1014-L1014","name":"FreeAddGroup.instMonadFreeAddGroup","line":1014,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instMonadFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instMonadFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instMonadFreeAddGroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L986-L1007","name":"FreeGroup.freeGroupUnitEquivInt","line":986,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupUnitEquivInt","doc":"The bijection between the free group on a singleton, and the integers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupUnitEquivInt\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupUnitEquivInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L976-L981","name":"FreeGroup.freeGroupEmptyEquivUnit","line":976,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupEmptyEquivUnit","doc":"The bijection between the free group on the empty type, and a type with one element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupEmptyEquivUnit\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupEmptyEquivUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L974-L975","name":"FreeAddGroup.freeAddGroupEmptyEquivAddUnit.proof_1","line":974,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupEmptyEquivAddUnit</span>.<span class=\"name\">proof_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span>) =&gt; <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L974-L975","name":"FreeAddGroup.freeAddGroupEmptyEquivAddUnit.proof_2","line":974,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit.proof_2\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupEmptyEquivAddUnit</span>.<span class=\"name\">proof_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span>) =&gt; <a href=\"./Init/Prelude.html#Unit.unit\">()</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L974-L975","name":"FreeAddGroup.freeAddGroupEmptyEquivAddUnit.match_1","line":974,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupEmptyEquivAddUnit</span>.<span class=\"name\">match_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L974-L975","name":"FreeAddGroup.freeAddGroupEmptyEquivAddUnit","line":974,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit","doc":"The bijection between the additive free group on the empty type, and a type with one\nelement."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupEmptyEquivAddUnit\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupEmptyEquivAddUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L967-L968","name":"FreeGroup.sum.map_inv","line":967,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_inv\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\"><span class=\"fn\">x</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L962-L963","name":"FreeGroup.sum.map_one","line":962,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_one\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L957-L958","name":"FreeGroup.sum.map_mul","line":957,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.map_mul\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">map_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L950-L951","name":"FreeGroup.sum.of","line":950,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L945-L946","name":"FreeGroup.sum_mk","line":945,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\">FreeGroup.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.sum\">List.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L938-L939","name":"FreeGroup.sum","line":938,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum","doc":"If `α` is a group, then any function from `α` to `α` extends uniquely to a homomorphism from the\nfree group over `α` to `α`. This is the additive version of `prod`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.sum\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L925-L928","name":"FreeGroup.lift_eq_prod_map","line":925,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_eq_prod_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_eq_prod_map\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_eq_prod_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L924-L924","name":"FreeAddGroup.lift_eq_sum_map","line":924,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_eq_sum_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_eq_sum_map\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_eq_sum_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L917-L918","name":"FreeGroup.prod.unique","line":917,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L916-L916","name":"FreeAddGroup.sum.unique","line":916,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L911-L912","name":"FreeGroup.prod.of","line":911,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L910-L910","name":"FreeAddGroup.sum.of","line":910,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L905-L906","name":"FreeGroup.prod_mk","line":905,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeGroup.prod</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.1</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L904-L904","name":"FreeAddGroup.sum_mk","line":904,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeAddGroup.sum</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.sum\">List.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">x</span>.1</span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L897-L898","name":"FreeGroup.prod","line":897,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod","doc":"If `α` is a group, then any function from `α` to `α` extends uniquely to a homomorphism from the\nfree group over `α` to `α`. This is the multiplicative version of `FreeGroup.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.prod\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L895-L896","name":"FreeAddGroup.sum","line":895,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum","doc":"If `α` is an additive group, then any function from `α` to `α` extends uniquely to an\nadditive homomorphism from the additive free group over `α` to `α`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.sum\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L881-L883","name":"FreeGroup.freeGroupCongr_trans","line":881,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_trans\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.trans\">MulEquiv.trans</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.trans <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L880-L880","name":"FreeAddGroup.freeAddGroupCongr_trans","line":880,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_trans\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.trans\">AddEquiv.trans</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.trans <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L875-L876","name":"FreeGroup.freeGroupCongr_symm","line":875,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_symm\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.symm\">MulEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L874-L874","name":"FreeAddGroup.freeAddGroupCongr_symm","line":874,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_symm\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.symm\">AddEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">e</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L869-L870","name":"FreeGroup.freeGroupCongr_refl","line":869,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_refl\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv.refl\">MulEquiv.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L868-L868","name":"FreeAddGroup.freeAddGroupCongr_refl","line":868,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_refl\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv.refl\">AddEquiv.refl</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L857-L862","name":"FreeGroup.freeGroupCongr","line":857,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr","doc":"Equivalent types give rise to multiplicatively equivalent free groups.\n\nThe converse can be found in `GroupTheory.FreeAbelianGroupFinsupp`,\nas `Equiv.of_freeGroupEquiv`\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#MulEquiv\">≃*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L855-L855","name":"FreeAddGroup.freeAddGroupCongr_apply","line":855,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr_apply\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\">FreeAddGroup.freeAddGroupCongr</a> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L855-L855","name":"FreeGroup.freeGroupCongr_apply","line":855,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr_apply\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">freeGroupCongr_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.freeGroupCongr\">FreeGroup.freeGroupCongr</a> <span class=\"fn\">e</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L855-L856","name":"FreeAddGroup.freeAddGroupCongr.proof_1","line":855,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L855-L856","name":"FreeAddGroup.freeAddGroupCongr.proof_2","line":855,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr.proof_2\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">e</span>.symm</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L855-L856","name":"FreeAddGroup.freeAddGroupCongr","line":855,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr","doc":"Equivalent types give rise to additively equivalent additive free groups."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Equiv/Basic.html#AddEquiv\">≃+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L855-L856","name":"FreeAddGroup.freeAddGroupCongr.proof_3","line":855,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr.proof_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.freeAddGroupCongr.proof_3\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">freeAddGroupCongr</span>.<span class=\"name\">proof_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">⇑<span class=\"fn\">e</span></span></span>)</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L845-L846","name":"FreeGroup.map_eq_lift","line":845,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_eq_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map_eq_lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map_eq_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.of</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L844-L844","name":"FreeAddGroup.map_eq_lift","line":844,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_eq_lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map_eq_lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map_eq_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.of</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L830-L840","name":"FreeGroup.map.unique","line":830,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L829-L829","name":"FreeAddGroup.map.unique","line":829,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L824-L825","name":"FreeGroup.map.of","line":824,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L823-L823","name":"FreeAddGroup.map.of","line":823,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L817-L819","name":"FreeGroup.map.comp","line":817,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.comp\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L816-L816","name":"FreeAddGroup.map.comp","line":816,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.comp\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L811-L812","name":"FreeGroup.map.id'","line":811,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id'\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">z</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L810-L810","name":"FreeAddGroup.map.id'","line":810,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id'\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">fun (<span class=\"fn\">z</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">z</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L806-L806","name":"FreeGroup.map.id","line":806,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.id\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">id</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L805-L805","name":"FreeAddGroup.map.id","line":805,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.id\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">id</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L800-L801","name":"FreeGroup.map.mk","line":800,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\">FreeGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L799-L799","name":"FreeAddGroup.map.mk","line":799,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\">FreeAddGroup.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L790-L793","name":"FreeGroup.map","line":790,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map","doc":"Any function from `α` to `β` extends uniquely to a group homomorphism from the free group over\n`α` to the free group over `β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.map\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L788-L789","name":"FreeAddGroup.map.proof_2","line":788,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.proof_2\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span></span>)</span>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> →\n            <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₁</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₂</span></span>)</span></span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> →\n              <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₁</span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₂</span></span>)</span></span></span></span>)</span>\n        <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>       <span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> →\n              <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₁</span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₂</span></span>)</span></span></span></span>)</span>\n        <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L788-L789","name":"FreeAddGroup.map.proof_1","line":788,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₁</span></span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>, <span class=\"fn\"><span class=\"fn\">x</span>.2</span>)</span></span>)</span> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L788-L789","name":"FreeAddGroup.map","line":788,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map","doc":"Any function from `α` to `β` extends uniquely to an additive group homomorphism from\nthe additive free group over `α` to the additive free group over `β`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.map\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L772-L776","name":"FreeGroup.lift.range_eq_closure","line":772,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_eq_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_eq_closure\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#MonoidHom.range\">MonoidHom.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#Subgroup.closure\">Subgroup.closure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L771-L771","name":"FreeAddGroup.lift.range_eq_closure","line":771,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_eq_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_eq_closure\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_eq_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddMonoidHom.range\">AddMonoidHom.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddSubgroup.closure\">AddSubgroup.closure</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L762-L767","name":"FreeGroup.lift.range_le","line":762,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.range_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#Subgroup\">Subgroup</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#MonoidHom.range\">MonoidHom.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L761-L761","name":"FreeAddGroup.lift.range_le","line":761,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.range_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">range_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddSubgroup\">AddSubgroup</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.range\">Set.range</a> <span class=\"fn\">f</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddMonoidHom.range\">AddMonoidHom.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L756-L757","name":"FreeGroup.lift.of_eq","line":756,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of_eq\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">FreeGroup.of</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L755-L755","name":"FreeAddGroup.lift.of_eq","line":755,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of_eq\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">FreeAddGroup.of</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L749-L751","name":"FreeGroup.ext_hom","line":749,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom","doc":"Two homomorphisms out of a free group are equal if they are equal on generators.\n\nSee note [partially-applied ext lemmas]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.ext_hom\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">ext_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L747-L748","name":"FreeAddGroup.ext_hom","line":747,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom","doc":"Two homomorphisms out of a free additive group are equal if they are\nequal on generators. See note [partially-applied ext lemmas]."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.ext_hom\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">ext_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">a</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L738-L740","name":"FreeGroup.lift.unique","line":738,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.unique\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L737-L737","name":"FreeAddGroup.lift.unique","line":737,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.unique\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hg : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L732-L733","name":"FreeGroup.lift.of","line":732,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\">FreeGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L731-L731","name":"FreeAddGroup.lift.of","line":731,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\">FreeAddGroup.of</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L726-L727","name":"FreeGroup.lift.mk","line":726,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.prod\">List.prod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L725-L725","name":"FreeAddGroup.lift.mk","line":725,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.sum\">List.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span></span></span>)</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L701-L717","name":"FreeGroup.lift","line":701,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift","doc":"If `β` is a group, then any function from `α` to `β` extends uniquely to a group homomorphism\nfrom the free group over `α` to `β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L698","name":"FreeAddGroup.lift_symm_apply","line":698,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift_symm_apply\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeAddGroup.lift</span>.symm</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">FreeAddGroup.of</span></a>)</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L698","name":"FreeGroup.lift_symm_apply","line":698,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.lift_symm_apply\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">lift_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">→*</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">FreeGroup.lift</span>.symm</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.comp\">(<a href=\"./Init/Prelude.html#Function.comp\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">FreeGroup.of</span></a>)</a> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L700","name":"FreeAddGroup.lift.proof_2","line":698,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.proof_2\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">x</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt;\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) =&gt; <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\">x</span>.2</span> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span></span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\">x</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L700","name":"FreeAddGroup.lift","line":698,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift","doc":"If `β` is an additive group, then any function from `α` to `β` extends uniquely to an\nadditive group homomorphism from the free additive group over `α` to `β`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L700","name":"FreeAddGroup.lift.proof_3","line":698,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.proof_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.proof_3\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">proof_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.mk'\">AddMonoidHom.mk'</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span></span>)</span>\n          <span class=\"fn\">(_ :\n            <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n              <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span></span>)</span>\n                <span class=\"fn\">(_ :\n                  <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n                    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>               <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span></span>)</span>\n                  <span class=\"fn\">(_ :\n                    <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n                      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span>\n                  <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>                 <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span></span>)</span>\n                  <span class=\"fn\">(_ :\n                    <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n                      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span>\n                  <span class=\"fn\">b</span></span></span></span></span>)</span></span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">→+</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">FreeAddGroup.of</span></span></span>)</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L698-L700","name":"FreeAddGroup.lift.proof_1","line":698,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.lift.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">lift</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span></span>)</span>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span>\n        <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>       <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span>\n        <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L691-L692","name":"FreeGroup.Red.Step.lift","line":691,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.lift\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\">FreeGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\">FreeGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L690-L690","name":"FreeAddGroup.Red.Step.lift","line":690,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.lift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.lift\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\">FreeAddGroup.Lift.aux</a> <span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L685-L686","name":"FreeGroup.Lift.aux","line":685,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux","doc":"Given `f : α → β` with `β` a group, the canonical map `List (α × Bool) → β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Lift.aux\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Lift</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L683-L684","name":"FreeAddGroup.Lift.aux","line":683,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux","doc":"Given `f : α → β` with `β` an additive group, the canonical map\n`list (α × bool) → β`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Lift.aux\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Lift</span>.<span class=\"name\">aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L672-L674","name":"FreeGroup.of_injective","line":672,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of_injective","doc":"The canonical map from the type to the free group is an injection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of_injective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeGroup.of</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L671-L671","name":"FreeAddGroup.of_injective.match_1","line":671,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">of_injective</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\">α</span>) (<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x_1</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)\n  (<span class=\"fn\">x_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x_1</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span> <span class=\"fn\">L₁</span></span>) (<span class=\"fn\">hy</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x_1</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span> <span class=\"fn\">L₁</span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(_ : <span class=\"fn\">∃ (c : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x_1</span>, <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>]</span> <span class=\"fn\">c</span></span></span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x_2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L671-L671","name":"FreeAddGroup.of_injective","line":671,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective","doc":"The canonical map from the type to the additive free group is an injection."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of_injective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">of_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeAddGroup.of</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L663-L666","name":"FreeGroup.Red.exact","line":663,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.exact\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L662-L662","name":"FreeAddGroup.Red.exact","line":662,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.exact\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L657-L658","name":"FreeGroup.of","line":657,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of","doc":"`of` is the canonical injection from the type to the free group over that type by sending each\nelement to the equivalence class of the letter that is the element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.of\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L655-L656","name":"FreeAddGroup.of","line":655,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of","doc":"`of` is the canonical injection from the type to the free group over that type\nby sending each element to the equivalence class of the letter that is the element."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.of\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L640-L651","name":"FreeGroup.instGroupFreeGroup","line":640,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instGroupFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instGroupFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instGroupFreeGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_1","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span>b c : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_3","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_3\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_9","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_9","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_9\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_9</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">zsmulRec</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">Int.negSucc</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">zsmulRec</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">Int.negSucc</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_4","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_4","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_4\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_4</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nsmulRec</span> <span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">nsmulRec</span> <span class=\"fn\">0</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_5","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_5","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_5\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_5</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nsmulRec</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">nsmulRec</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup","line":639,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_2","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_2\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_7","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_7","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_7\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_7</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">zsmulRec</span> <span class=\"fn\">0</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">zsmulRec</span> <span class=\"fn\">0</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_6","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_6","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_6\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_6</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_8","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_8\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">zsmulRec</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">Int.ofNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">zsmulRec</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">Int.ofNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L639-L639","name":"FreeAddGroup.instAddGroupFreeAddGroup.proof_10","line":639,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_10","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddGroupFreeAddGroup.proof_10\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddGroupFreeAddGroup</span>.<span class=\"name\">proof_10</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L634-L635","name":"FreeGroup.red_invRev_iff","line":634,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red_invRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.red_invRev_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">red_invRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L633-L633","name":"FreeAddGroup.red_negRev_iff","line":633,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.red_negRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.red_negRev_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">red_negRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L627-L629","name":"FreeGroup.Red.step_invRev_iff","line":627,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.step_invRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.step_invRev_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">step_invRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L626-L626","name":"FreeAddGroup.Red.step_negRev_iff","line":626,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.step_negRev_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.step_negRev_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">step_negRev_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L621-L622","name":"FreeGroup.Red.invRev","line":621,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.invRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L620-L620","name":"FreeAddGroup.Red.negRev","line":620,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.negRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L613-L616","name":"FreeGroup.Red.Step.invRev","line":613,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.invRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L612-L612","name":"FreeAddGroup.Red.Step.negRev","line":612,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.negRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L607-L608","name":"FreeGroup.inv_mk","line":607,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.inv_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">inv_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L606-L606","name":"FreeAddGroup.neg_mk","line":606,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.neg_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">neg_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L599-L604","name":"FreeGroup.instInvFreeGroup","line":599,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInvFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInvFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instInvFreeGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Inv\">Inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L598-L598","name":"FreeAddGroup.instNegFreeAddGroup.proof_1","line":598,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNegFreeAddGroup.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNegFreeAddGroup.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instNegFreeAddGroup</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃a : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>⦄</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">⦃b : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>⦄</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">b</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L598-L598","name":"FreeAddGroup.instNegFreeAddGroup","line":598,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNegFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instNegFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instNegFreeAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L593-L594","name":"FreeGroup.invRev_bijective","line":593,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_bijective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L592-L592","name":"FreeAddGroup.negRev_bijective","line":592,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_bijective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L587-L588","name":"FreeGroup.invRev_surjective","line":587,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_surjective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L586-L586","name":"FreeAddGroup.negRev_surjective","line":586,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_surjective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L581-L582","name":"FreeGroup.invRev_injective","line":581,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_injective\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L580-L580","name":"FreeAddGroup.negRev_injective","line":580,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_injective\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L576-L576","name":"FreeGroup.invRev_involutive","line":576,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_involutive\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">FreeGroup.invRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L575-L575","name":"FreeAddGroup.negRev_involutive","line":575,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_involutive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_involutive\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_involutive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">FreeAddGroup.negRev</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L570-L571","name":"FreeGroup.invRev_empty","line":570,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_empty\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L569-L569","name":"FreeAddGroup.negRev_empty","line":569,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_empty\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L564-L565","name":"FreeGroup.invRev_invRev","line":564,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_invRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L563-L563","name":"FreeAddGroup.negRev_negRev","line":563,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_negRev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L559-L559","name":"FreeGroup.invRev_length","line":559,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev_length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\">FreeGroup.invRev</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L558-L558","name":"FreeAddGroup.negRev_length","line":558,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev_length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\">FreeAddGroup.negRev</a> <span class=\"fn\">L₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L553-L554","name":"FreeGroup.invRev","line":553,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev","doc":"Transform a word representing a free group element into a word representing its inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.invRev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">invRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L551-L552","name":"FreeAddGroup.negRev","line":551,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev","doc":"Transform a word representing a free group element into a word representing its\nnegative."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.negRev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">negRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L545-L546","name":"FreeGroup.mul_mk","line":545,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mul_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mul_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L544-L544","name":"FreeAddGroup.add_mk","line":544,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.add_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">add_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L536-L542","name":"FreeGroup.instMulFreeGroup","line":536,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMulFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instMulFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instMulFreeGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L535-L535","name":"FreeAddGroup.instAddFreeAddGroup.proof_2","line":535,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddFreeAddGroup.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddFreeAddGroup.proof_2\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddFreeAddGroup</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">_L₁</span> <span class=\"fn\">_L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∀ (<span class=\"fn\">_L₂ </span>_L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">_L₂</span> <span class=\"fn\">_L₃</span></span> →\n              <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">_L₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">_L₃</span></span>)</span></span></span></span></span>)</span></span></span>)</span>\n    <span class=\"fn\">_L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">L₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">y</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">L₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∀ (<span class=\"fn\">_L₂ </span>_L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">_L₂</span> <span class=\"fn\">_L₃</span></span> →\n              <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">_L₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">_L₃</span></span>)</span></span></span></span></span>)</span></span></span>)</span>\n    <span class=\"fn\">_L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L535-L535","name":"FreeAddGroup.instAddFreeAddGroup.proof_1","line":535,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddFreeAddGroup.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddFreeAddGroup.proof_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddFreeAddGroup</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(_L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">_L₂</span> <span class=\"fn\">_L₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">_L₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">_L₃</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L535-L535","name":"FreeAddGroup.instAddFreeAddGroup","line":535,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instAddFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instAddFreeAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L533-L533","name":"FreeGroup.instUniqueFreeGroup","line":533,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instUniqueFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instUniqueFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instUniqueFreeGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L532-L532","name":"FreeAddGroup.instUniqueFreeAddGroup","line":532,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instUniqueFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instUniqueFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instUniqueFreeAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L529-L530","name":"FreeGroup.instInhabitedFreeGroup","line":529,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInhabitedFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instInhabitedFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instInhabitedFreeGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L528-L528","name":"FreeAddGroup.instInhabitedFreeAddGroup","line":528,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instInhabitedFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instInhabitedFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instInhabitedFreeAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L523-L524","name":"FreeGroup.one_eq_mk","line":523,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.one_eq_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">one_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L522-L522","name":"FreeAddGroup.zero_eq_mk","line":522,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.zero_eq_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">zero_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L519-L520","name":"FreeGroup.instOneFreeGroup","line":519,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instOneFreeGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.instOneFreeGroup\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">instOneFreeGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#One\">One</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L518-L518","name":"FreeAddGroup.instZeroFreeAddGroup","line":518,"kind":"instance","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instZeroFreeAddGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.instZeroFreeAddGroup\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">instZeroFreeAddGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/ZeroOne.html#Zero\">Zero</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L512-L514","name":"FreeGroup.quot_map_mk","line":512,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_map_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_map_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_map_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\"><span class=\"fn\">FreeGroup.Red.Step</span> <a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">⇒</a> <span class=\"fn\">FreeGroup.Red.Step</span></a>)</a> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L511-L511","name":"FreeAddGroup.quot_map_mk","line":511,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_map_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_map_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_map_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">(<a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\"><span class=\"fn\">FreeAddGroup.Red.Step</span> <a href=\"./Mathlib/Logic/Relator.html#Relator.LiftFun\">⇒</a> <span class=\"fn\">FreeAddGroup.Red.Step</span></a>)</a> <span class=\"fn\">f</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Quot.html#Quot.map\">Quot.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L505-L507","name":"FreeGroup.quot_liftOn_mk","line":505,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_liftOn_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_liftOn_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_liftOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L504-L504","name":"FreeAddGroup.quot_liftOn_mk","line":504,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_liftOn_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_liftOn_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_liftOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Quot.liftOn\">Quot.liftOn</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L498-L500","name":"FreeGroup.quot_lift_mk","line":498,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_lift_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_lift_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L497-L497","name":"FreeAddGroup.quot_lift_mk","line":497,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_lift_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_lift_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_lift_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(β : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.lift\">Quot.lift</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L492-L493","name":"FreeGroup.quot_mk_eq_mk","line":492,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_mk_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.quot_mk_eq_mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">quot_mk_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeGroup.Red.Step</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\">FreeGroup.mk</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L491-L491","name":"FreeAddGroup.quot_mk_eq_mk","line":491,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_mk_eq_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.quot_mk_eq_mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">quot_mk_eq_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\">FreeAddGroup.mk</a> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L486-L487","name":"FreeGroup.mk","line":486,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk","doc":"The canonical map from `List (α × Bool)` to the free group on `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.mk\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\">FreeGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L485-L485","name":"FreeAddGroup.mk","line":485,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk","doc":"The canonical map from `list (α × bool)` to the free additive group on `α`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.mk\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\">FreeAddGroup</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L475-L476","name":"FreeGroup","line":475,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup","doc":"The free group over a type, i.e. the words formed by the elements of the type and their formal\ninverses, quotient by one step reduction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup\"><span class=\"name\">FreeGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L473-L474","name":"FreeAddGroup","line":473,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup","doc":"The free additive group over a type, i.e. the words formed by the elements of the\ntype and their formal inverses, quotient by one step reduction."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup\"><span class=\"name\">FreeAddGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L459-L465","name":"FreeGroup.eqvGen_step_iff_join_red","line":459,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.eqvGen_step_iff_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.eqvGen_step_iff_join_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">eqvGen_step_iff_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Data/Quot.html#EqvGen\">EqvGen</a> <span class=\"fn\">FreeGroup.Red.Step</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L458-L458","name":"FreeAddGroup.eqvGen_step_iff_join_red","line":458,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.eqvGen_step_iff_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.eqvGen_step_iff_join_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">eqvGen_step_iff_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Data/Quot.html#EqvGen\">EqvGen</a> <span class=\"fn\">FreeAddGroup.Red.Step</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L453-L454","name":"FreeGroup.join_red_of_step","line":453,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.join_red_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.join_red_of_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">join_red_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L452-L452","name":"FreeAddGroup.join_red_of_step","line":452,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.join_red_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.join_red_of_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">join_red_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L444-L448","name":"FreeGroup.equivalence_join_red","line":444,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.equivalence_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.equivalence_join_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">equivalence_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L443-L443","name":"FreeAddGroup.equivalence_join_red","line":443,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.equivalence_join_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.equivalence_join_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">equivalence_join_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L436-L437","name":"FreeGroup.Red.antisymm","line":436,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.antisymm\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L435-L435","name":"FreeAddGroup.Red.antisymm","line":435,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.antisymm\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L426-L431","name":"FreeGroup.Red.length","line":426,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L425-L425","name":"FreeAddGroup.Red.length","line":425,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L402-L421","name":"FreeGroup.Red.sizeof_of_step","line":402,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sizeof_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sizeof_of_step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sizeof_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L401-L401","name":"FreeAddGroup.Red.sizeof_of_step","line":401,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sizeof_of_step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sizeof_of_step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sizeof_of_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">L₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L395-L396","name":"FreeGroup.Red.length_le","line":395,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.length_le\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L394-L394","name":"FreeAddGroup.Red.length_le","line":394,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.length_le\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L385-L390","name":"FreeGroup.Red.sublist","line":385,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sublist","doc":"If `w₁ w₂` are words such that `w₁` reduces to `w₂`, then `w₂` is a sublist of `w₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.sublist\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Sublist\">List.Sublist</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L383-L384","name":"FreeAddGroup.Red.sublist","line":383,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sublist","doc":"If `w₁ w₂` are words such that `w₁` reduces to `w₂`, then `w₂` is a sublist of\n`w₁`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.sublist\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Sublist\">List.Sublist</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L377-L378","name":"FreeGroup.Red.Step.sublist","line":377,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.sublist\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Sublist\">List.Sublist</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L376-L376","name":"FreeAddGroup.Red.Step.sublist","line":376,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.sublist\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/List/Basic.html#List.Sublist\">List.Sublist</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L358-L370","name":"FreeGroup.Red.inv_of_red_of_ne","line":358,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.inv_of_red_of_ne","doc":"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `xw₁` reduces to `yw₂`, then\n`w₁` reduces to `x⁻¹yw₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.inv_of_red_of_ne\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">inv_of_red_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L356-L357","name":"FreeAddGroup.Red.neg_of_red_of_ne","line":356,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.neg_of_red_of_ne","doc":"If `x` and `y` are distinct letters and `w₁ w₂` are words such that `x + w₁` reduces\nto `y + w₂`, then `w₁` reduces to `-x + y + w₂`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.neg_of_red_of_ne\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">neg_of_red_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H1 : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H2 : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L342-L350","name":"FreeGroup.Red.red_iff_irreducible","line":342,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.red_iff_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.red_iff_irreducible\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">red_iff_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L341-L341","name":"FreeAddGroup.Red.red_iff_irreducible","line":341,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.red_iff_irreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.red_iff_irreducible\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">red_iff_irreducible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span>, <span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L328-L337","name":"FreeGroup.Red.cons_nil_iff_singleton","line":328,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_nil_iff_singleton","doc":"If `x` is a letter and `w` is a word such that `xw` reduces to the empty word, then `w` reduces\nto `x⁻¹` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_nil_iff_singleton\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_nil_iff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L325-L327","name":"FreeAddGroup.Red.cons_nil_iff_singleton.match_1","line":325,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_nil_iff_singleton</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span>]</span> <span class=\"fn\">L</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span>]</span> <span class=\"fn\">L</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">L'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span>]</span> <span class=\"fn\">L'</span></span>) (<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">L'</span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(_ : <span class=\"fn\">∃ (c : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span>]</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">c</span></span></span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x_1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L325-L327","name":"FreeAddGroup.Red.cons_nil_iff_singleton","line":325,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton","doc":"If `x` is a letter and `w` is a word such that `x + w` reduces to the empty word, then `w`\nreduces to `-x`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_nil_iff_singleton\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_nil_iff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span>)</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L318-L319","name":"FreeGroup.Red.singleton_iff","line":318,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.singleton_iff","doc":"A letter only reduces to itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.singleton_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L317-L317","name":"FreeAddGroup.Red.singleton_iff","line":317,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.singleton_iff","doc":"A letter only reduces to itself."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.singleton_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[<span class=\"fn\">x</span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L311-L312","name":"FreeGroup.Red.nil_iff","line":311,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.nil_iff","doc":"The empty word `[]` only reduces to itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.nil_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L310-L310","name":"FreeAddGroup.Red.nil_iff","line":310,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.nil_iff","doc":"The empty word `[]` only reduces to itself."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.nil_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L288-L305","name":"FreeGroup.Red.to_append_iff","line":288,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.to_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.to_append_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">to_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L287-L287","name":"FreeAddGroup.Red.to_append_iff","line":287,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">to_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L287-L287","name":"FreeAddGroup.Red.to_append_iff.match_1","line":287,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.to_append_iff.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">to_append_iff</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">∃ (L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">L₃ </span>L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">Eq</span> : <span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span>) (<span class=\"fn\">h₃</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span>) (<span class=\"fn\">h₄</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\">∃ (L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>),\n            <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₂</span></span></span></span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L282-L283","name":"FreeGroup.Red.append_append","line":282,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L281-L281","name":"FreeAddGroup.Red.append_append","line":281,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L275-L277","name":"FreeGroup.Red.append_append_left_iff","line":275,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.append_append_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L274-L274","name":"FreeAddGroup.Red.append_append_left_iff","line":274,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.append_append_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">append_append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L252-L270","name":"FreeGroup.Red.cons_cons_iff","line":252,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L251-L251","name":"FreeAddGroup.Red.cons_cons_iff","line":251,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L246-L247","name":"FreeGroup.Red.cons_cons","line":246,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.cons_cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L245-L245","name":"FreeAddGroup.Red.cons_cons","line":245,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.cons_cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L237-L241","name":"FreeGroup.Red.church_rosser","line":237,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.church_rosser","doc":"**Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\nrespectively. This is also known as Newman's diamond lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.church_rosser\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">church_rosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeGroup.Red</span> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L233-L236","name":"FreeAddGroup.Red.church_rosser.match_1","line":233,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">church_rosser</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\">(<span class=\"fn\">b </span>c : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) →\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">b</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">c</span> <span class=\"fn\">L₅</span></span></span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">b </span>c : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)\n  (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">b</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">c</span> <span class=\"fn\">L₅</span></span></span></span></span>)\n  (<span class=\"fn\">hab</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>) (<span class=\"fn\">hac</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">hab </span>hac : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">b</span> <span class=\"fn\">b</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">b</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">b</span> <span class=\"fn\">L₅</span></span></span></span></span>)</span> <span class=\"fn\">hab</span>\n        <span class=\"fn\">hac</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">b </span>c d : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">hbd</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">b</span> <span class=\"fn\">d</span></span>) (<span class=\"fn\">hcd</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span>)\n        (<span class=\"fn\">hab</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>) (<span class=\"fn\">hac</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>),\n        <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">b</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">c</span> <span class=\"fn\">L₅</span></span></span></span></span>)</span> <span class=\"fn\">hab</span>\n          <span class=\"fn\">hac</span></span></span>)</span> →\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span> <span class=\"fn\">x</span> <span class=\"fn\">hab</span> <span class=\"fn\">hac</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L233-L236","name":"FreeAddGroup.Red.church_rosser","line":233,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser","doc":"**Church-Rosser theorem** for word reduction: If `w1 w2 w3` are words such that `w1` reduces\nto `w2` and `w3` respectively, then there is a word `w4` such that `w2` and `w3` reduce to `w4`\nrespectively. This is also known as Newman's diamond lemma."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.church_rosser\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">church_rosser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Join\">Relation.Join</a> <span class=\"fn\">FreeAddGroup.Red</span> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L225-L226","name":"FreeGroup.Red.Step.to_red","line":225,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.to_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.to_red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">to_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L224-L224","name":"FreeAddGroup.Red.Step.to_red","line":224,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.to_red","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.to_red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">to_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L217-L220","name":"FreeGroup.Red.Step.diamond","line":217,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₄</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₅</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L216-L216","name":"FreeAddGroup.Red.Step.diamond.match_1","line":216,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\">(<span class=\"fn\">x </span>x_1 x_2 x_3 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x</span> <span class=\"fn\">x_2</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x_1</span> <span class=\"fn\">x_3</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 x_2 x_3 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_4</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x</span> <span class=\"fn\">x_2</span></span>) (<span class=\"fn\">x_5</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x_1</span> <span class=\"fn\">x_3</span></span>)\n  (<span class=\"fn\">x_6</span> : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x_1</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">L₁ </span>L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">L₁_1 </span>L₂_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_7</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b_1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n      (<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₁_1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_7</span>, <span class=\"fn\">b_1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_7</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b_1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂_1</span></span></span></span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁_1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_7</span>, <span class=\"fn\">b_1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_7</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b_1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂_1</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁_1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂_1</span></span>)</span>\n        <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span>)</span>\n        <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁_1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_7</span>, <span class=\"fn\">b_1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_7</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b_1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂_1</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁_1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂_1</span></span>)</span></span>)</span> <span class=\"fn\">H</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x_2</span> <span class=\"fn\">x_3</span> <span class=\"fn\">x_4</span> <span class=\"fn\">x_5</span> <span class=\"fn\">x_6</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L216-L216","name":"FreeAddGroup.Red.Step.diamond","line":216,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₄</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L₄</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₃</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₄</span> <span class=\"fn\">L₅</span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L197-L212","name":"FreeGroup.Red.Step.diamond_aux","line":197,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.diamond_aux\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b2</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₄</span></span></span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span>)</span> <span class=\"fn\">L₅</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L196-L196","name":"FreeAddGroup.Red.Step.diamond_aux.match_3","line":196,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux.match_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux.match_3\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span>.<span class=\"name\">match_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\">(<span class=\"fn\">x </span>x_1 x_2 x_3 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) →\n  <span class=\"fn\">(<span class=\"fn\">x_4</span> : <span class=\"fn\">α</span>) →\n    <span class=\"fn\">(<span class=\"fn\">x_5</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) →\n      <span class=\"fn\">(<span class=\"fn\">x_6</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">x_7</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">x_5</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_5</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x_2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_6</span>, <span class=\"fn\">x_7</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_6</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_7</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_3</span></span></span></span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 x_2 x_3 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_5</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_6</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_7</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n  (<span class=\"fn\">x_8</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">x_5</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_5</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x_2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_6</span>, <span class=\"fn\">x_7</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_6</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_7</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_3</span></span></span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x </span>x_9 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_10</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_11</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_12</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_13</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n      (<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\">x_11</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_11</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\">x_13</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_13</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_9</span></span></span></span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span> <span class=\"fn\">x</span> <span class=\"fn\">[]</span> <span class=\"fn\">x_9</span> <span class=\"fn\">x_10</span> <span class=\"fn\">x_11</span> <span class=\"fn\">x_12</span> <span class=\"fn\">x_13</span> <span class=\"fn\">H</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x3</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b3</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_9</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_10</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_11</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_12</span> : <span class=\"fn\">α</span>)\n        (<span class=\"fn\">x_13</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n        (<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\">x_11</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_11</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span>]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\">x_13</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_13</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_9</span></span></span></span></span>),\n        <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span> <span class=\"fn\">x</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span>]</span> <span class=\"fn\">x_9</span> <span class=\"fn\">x_10</span> <span class=\"fn\">x_11</span> <span class=\"fn\">x_12</span> <span class=\"fn\">x_13</span> <span class=\"fn\">H</span></span></span>)</span> →\n      <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x3</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b3</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x </span>x_9 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_10</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_11</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_12</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_13</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n          (<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span>]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\">x_11</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_11</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\">x_13</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_13</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_9</span></span></span></span></span>),\n          <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span>]</span> <span class=\"fn\">x</span> <span class=\"fn\">[]</span> <span class=\"fn\">x_9</span> <span class=\"fn\">x_10</span> <span class=\"fn\">x_11</span> <span class=\"fn\">x_12</span> <span class=\"fn\">x_13</span> <span class=\"fn\">H</span></span></span>)</span> →\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x3</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b3</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b4</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">tl </span>x_9 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_10</span> : <span class=\"fn\">α</span>)\n            (<span class=\"fn\">x_11</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_12</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_13</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n            (<span class=\"fn\">H</span> :\n              <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\">x_11</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_11</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>                 <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\">x_13</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_13</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_9</span></span></span></span></span>),\n            <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span></span>)</span> <span class=\"fn\">x_9</span> <span class=\"fn\">x_10</span> <span class=\"fn\">x_11</span> <span class=\"fn\">x_12</span> <span class=\"fn\">x_13</span> <span class=\"fn\">H</span></span></span>)</span> →\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x3</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b3</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b4</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">tl </span>x x_9 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_10</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_11</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_12</span> : <span class=\"fn\">α</span>)\n              (<span class=\"fn\">x_13</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n              (<span class=\"fn\">H</span> :\n                <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\">x_11</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_11</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>                   <span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\">x_13</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_13</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_9</span></span></span></span></span>),\n              <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">[]</span> <span class=\"fn\">x_9</span> <span class=\"fn\">x_10</span> <span class=\"fn\">x_11</span> <span class=\"fn\">x_12</span> <span class=\"fn\">x_13</span> <span class=\"fn\">H</span></span></span>)</span> →\n            <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x3</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b3</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">tl </span>x : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b4</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">tl2 </span>x_9 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_10</span> : <span class=\"fn\">α</span>)\n                (<span class=\"fn\">x_11</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_12</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_13</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n                (<span class=\"fn\">H</span> :\n                  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\">x_11</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_10</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_11</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>                     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl2</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\">x_13</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_12</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_13</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_9</span></span></span></span></span>),\n                <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl2</span></span>)</span> <span class=\"fn\">x_9</span> <span class=\"fn\">x_10</span> <span class=\"fn\">x_11</span> <span class=\"fn\">x_12</span> <span class=\"fn\">x_13</span> <span class=\"fn\">H</span></span></span>)</span> →\n              <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x_2</span> <span class=\"fn\">x_3</span> <span class=\"fn\">x_4</span> <span class=\"fn\">x_5</span> <span class=\"fn\">x_6</span> <span class=\"fn\">x_7</span> <span class=\"fn\">x_8</span></span></span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L196-L196","name":"FreeAddGroup.Red.Step.diamond_aux.match_2","line":196,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux.match_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux.match_2\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span>.<span class=\"name\">match_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x3 : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b3 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tl : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b4</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">tl2 </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_2</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_3</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">x_4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x_5</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)\n  (<span class=\"fn\">motive</span> :\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\">x_3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_3</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl2</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">x_5</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_5</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span>)</span></span></span></span> →\n      <a href=\"./foundational_types.html\">Prop</a></span>)\n  (<span class=\"fn\">x_6</span> :\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\">x_3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_3</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl2</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">x_5</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_5</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span>)</span></span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">H1</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span></span>)\n      (<span class=\"fn\">H2</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\">x_3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_3</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl2</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">x_5</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_5</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span>)</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x3</span>, <span class=\"fn\">b3</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">x4</span>, <span class=\"fn\">b4</span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>             <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\">x_3</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_3</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.append\">List.append</a> <span class=\"fn\">tl2</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">x_5</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">x_5</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x_1</span></span></span>)</span></span></span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x_6</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L196-L196","name":"FreeAddGroup.Red.Step.diamond_aux","line":196,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₄ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x1 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b1 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x2 : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b2 : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\">b1</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x1</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b1</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\">b2</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x2</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b2</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₄</span></span></span></span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a>     <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₃</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₄</span></span>)</span> <span class=\"fn\">L₅</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L196-L196","name":"FreeAddGroup.Red.Step.diamond_aux.match_1","line":196,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.diamond_aux.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">diamond_aux</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(tl : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>tl2 x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)\n  (<span class=\"fn\">motive</span> :\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a>         <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">L₅</span></span></span></span></span>)</span> →\n      <a href=\"./foundational_types.html\">Prop</a></span>)\n  (<span class=\"fn\">x_2</span> :\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a>       <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">L₅</span></span></span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">H3</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\">motive</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a>             <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">L₅</span></span></span></span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">L₅</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">H3</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">L₅</span></span>) (<span class=\"fn\">H4</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">L₅</span></span>),\n        <span class=\"fn\"><span class=\"fn\">motive</span>\n          <span class=\"fn\">(_ :\n            <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a>               <span class=\"fn\">∃ (L₅ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">L₅</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">tl2</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">L₅</span></span></span></span></span>)</span></span></span>)</span> →\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x_2</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L190-L192","name":"FreeGroup.Red.Step.append_left_iff","line":190,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L189-L189","name":"FreeAddGroup.Red.Step.append_left_iff","line":189,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L189-L189","name":"FreeAddGroup.Red.Step.append_left_iff.match_1","line":189,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left_iff.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left_iff</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">[]</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L184-L185","name":"FreeGroup.Red.Step.cons_cons_iff","line":184,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_cons_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L183-L183","name":"FreeAddGroup.Red.Step.cons_cons_iff","line":183,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_cons_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_cons_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_cons_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L178-L179","name":"FreeGroup.Red.not_step_singleton","line":178,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_singleton\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">[<span class=\"fn\">p</span>]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L177-L177","name":"FreeAddGroup.Red.not_step_singleton","line":177,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">[<span class=\"fn\">p</span>]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L177-L177","name":"FreeAddGroup.Red.not_step_singleton.match_1","line":177,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_singleton.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_singleton</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>), <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L160-L173","name":"FreeGroup.Red.Step.cons_left_iff","line":160,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_left_iff\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L159-L159","name":"FreeAddGroup.Red.Step.cons_left_iff","line":159,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_left_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_left_iff\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_left_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∃ (L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L151-L155","name":"FreeGroup.Red.not_step_nil","line":151,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.not_step_nil\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L150-L150","name":"FreeAddGroup.Red.not_step_nil","line":150,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.not_step_nil\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">not_step_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">[]</span> <span class=\"fn\">L</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L145-L146","name":"FreeGroup.Red.Step.append_right","line":145,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_right\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L144-L144","name":"FreeAddGroup.Red.Step.append_right","line":144,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L144-L144","name":"FreeAddGroup.Red.Step.append_right.match_1","line":144,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_right.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_right</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\">(<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 x_2 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_3</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x </span>L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">x</span>\n        <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x_2</span> <span class=\"fn\">x_3</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L139-L140","name":"FreeGroup.Red.Step.cons","line":139,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L138-L138","name":"FreeAddGroup.Red.Step.cons","line":138,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L133-L134","name":"FreeGroup.Red.Step.append_left","line":133,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.append_left\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L132-L132","name":"FreeAddGroup.Red.Step.append_left","line":132,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₃</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L132-L132","name":"FreeAddGroup.Red.Step.append_left.match_1","line":132,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.append_left.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">append_left</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\">(<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 x_2 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_3</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x_1</span> <span class=\"fn\">x_2</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">x </span>L₁ L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_4</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span>\n        <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x_4</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x_2</span> <span class=\"fn\">x_3</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L127-L128","name":"FreeGroup.Red.Step.cons_not_rev","line":127,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not_rev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L126-L126","name":"FreeAddGroup.Red.Step.cons_not_rev","line":126,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not_rev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L121-L122","name":"FreeGroup.Red.Step.cons_not","line":121,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.cons_not\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L120-L120","name":"FreeAddGroup.Red.Step.cons_not","line":120,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.cons_not\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">cons_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span></span></span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L115-L116","name":"FreeGroup.Red.Step.not_rev","line":115,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not_rev\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L114-L114","name":"FreeAddGroup.Red.Step.not_rev","line":114,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not_rev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not_rev\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not_rev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L109-L110","name":"FreeGroup.Red.Step.length","line":109,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.length","doc":"Predicate asserting that the word `w₁` can be reduced to `w₂` in one step, i.e. there are words\n`w₃ w₄` and letter `x` such that `w₁ = w₃xx⁻¹w₄` and `w₂ = w₃w₄`  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.length\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L107-L108","name":"FreeAddGroup.Red.Step.length","line":107,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length","doc":"Predicate asserting that the word `w₁` can be reduced to `w₂` in one step, i.e. there\nare words `w₃ w₄` and letter `x` such that `w₁ = w₃ + x + (-x) + w₄` and `w₂ = w₃w₄`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">L₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L107-L108","name":"FreeAddGroup.Red.Step.length.match_1","line":107,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length.match_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.length.match_1\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">length</span>.<span class=\"name\">match_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(motive : <span class=\"fn\">(<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x_2</span> : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">L1 </span>L2 : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>),\n      <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L2</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L2</span></span>)</span>\n        <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L2</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L2</span></span>)</span></span>)</span></span></span>)</span> →\n    <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x_2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L98-L99","name":"FreeGroup.Red.trans","line":98,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.trans\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L97-L97","name":"FreeAddGroup.Red.trans","line":97,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.trans\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₃ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₂</span> <span class=\"fn\">L₃</span></span> → <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L₁</span> <span class=\"fn\">L₃</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L92-L93","name":"FreeGroup.Red.refl","line":92,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.refl\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\">FreeGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L91-L91","name":"FreeAddGroup.Red.refl","line":91,"kind":"theorem","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.refl\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\">FreeAddGroup.Red</a> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L86-L87","name":"FreeGroup.Red","line":86,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red","doc":"Reflexive-transitive closure of `Red.Step` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L85-L85","name":"FreeAddGroup.Red","line":85,"kind":"def","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red","doc":"Reflexive-transitive closure of `Red.Step`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L75-L75","name":"FreeGroup.Red.Step.not","line":75,"kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step.not\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\">FreeGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L74-L75","name":"FreeGroup.Red.Step","line":74,"kind":"inductive","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step","doc":"Reduction step for the multiplicative free group relation: `w * x * x⁻¹ * v ~> w * v` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeGroup.Red.Step\"><span class=\"name\">FreeGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L67-L67","name":"FreeAddGroup.Red.Step.not","line":67,"kind":"ctor","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step.not\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{L₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\">FreeAddGroup.Red.Step</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#not\">!</a><span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L₂</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">L₂</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/GroupTheory/FreeGroup/Basic.lean#L66-L67","name":"FreeAddGroup.Red.Step","line":66,"kind":"inductive","docLink":"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step","doc":"Reduction step for the additive free group relation: `w + x + (-x) + v ~> w + v` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/FreeGroup/Basic.html#FreeAddGroup.Red.Step\"><span class=\"name\">FreeAddGroup</span>.<span class=\"name\">Red</span>.<span class=\"name\">Step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}