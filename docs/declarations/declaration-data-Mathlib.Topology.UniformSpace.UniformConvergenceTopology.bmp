{"name":"Mathlib.Topology.UniformSpace.UniformConvergenceTopology","instances":[{"typeNames":["UniformFun"],"name":"instNonemptyUniformFun","className":"Nonempty"},{"typeNames":["UniformOnFun"],"name":"instNonemptyUniformOnFun","className":"Nonempty"},{"typeNames":["UniformFun"],"name":"UniformFun.uniformSpace","className":"UniformSpace"},{"typeNames":["UniformFun"],"name":"UniformFun.topologicalSpace","className":"TopologicalSpace"},{"typeNames":["UniformFun"],"name":"UniformFun.instT2SpaceUniformFunTopologicalSpace","className":"T2Space"},{"typeNames":["UniformOnFun"],"name":"UniformOnFun.uniformSpace","className":"UniformSpace"},{"typeNames":["UniformOnFun"],"name":"UniformOnFun.topologicalSpace","className":"TopologicalSpace"}],"imports":["Init","Mathlib.Topology.UniformSpace.UniformConvergence","Mathlib.Topology.UniformSpace.Pi","Mathlib.Topology.UniformSpace.Equiv"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L881-L899","name":"UniformOnFun.uniformEquivPiComm","line":881,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivPiComm","doc":"The natural bijection between `Œ± ‚Üí Œ† i, Œ¥ i` and `Œ† i, Œ± ‚Üí Œ¥ i`, upgraded to a uniform\nisomorphism between `Œ± ‚Üí·µ§[ùîñ] (Œ† i, Œ¥ i)` and `Œ† i, Œ± ‚Üí·µ§[ùîñ] Œ¥ i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivPiComm\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformEquivPiComm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ¥ : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ¥</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">Œ¥</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ¥</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">ùîñ</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L852-L873","name":"UniformOnFun.uniformEquivProdArrow","line":852,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivProdArrow","doc":"The natural bijection between `Œ± ‚Üí Œ≤ √ó Œ≥` and `(Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≥)`, upgraded to a uniform\nisomorphism between `Œ± ‚Üí·µ§[ùîñ] Œ≤ √ó Œ≥` and `(Œ± ‚Üí·µ§[ùîñ] Œ≤) √ó (Œ± ‚Üí·µ§[ùîñ] Œ≥)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformEquivProdArrow\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformEquivProdArrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span></span>)</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L839-L847","name":"UniformOnFun.tendsto_iff_tendstoUniformlyOn","line":839,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.tendsto_iff_tendstoUniformlyOn","doc":"Convergence in the topology of `ùîñ`-convergence means uniform convergence on `S` (in the sense\nof `TendstoUniformlyOn`) for all `S ‚àà ùîñ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.tendsto_iff_tendstoUniformlyOn\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">tendsto_iff_tendstoUniformlyOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">F</span> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ <span class=\"fn\">s</span> ‚àà <span class=\"fn\">ùîñ</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformlyOn\">TendstoUniformlyOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L829-L834","name":"UniformOnFun.uniformContinuous_toFun","line":829,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_toFun","doc":"If `ùîñ` covers `Œ±`, the natural map `UniformOnFun.toFun` from `Œ± ‚Üí·µ§[ùîñ] Œ≤` to `Œ± ‚Üí Œ≤` is\nuniformly continuous.\n\nIn other words, if `ùîñ` covers `Œ±`, then the uniform structure of `ùîñ`-convergence is finer than\nthat of pointwise convergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_toFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Lattice.html#Set.sUnion\">‚ãÉ‚ÇÄ</a> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L817-L821","name":"UniformOnFun.t2Space_of_covering","line":817,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.t2Space_of_covering","doc":"If `ùîñ` covers `Œ±`, then the topology of `ùîñ`-convergence is T‚ÇÇ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.t2Space_of_covering\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">t2Space_of_covering</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Lattice.html#Set.sUnion\">‚ãÉ‚ÇÄ</a> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Set.univ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L806-L813","name":"UniformOnFun.congrLeft","line":806,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrLeft","doc":"Turn a bijection `e : Œ≥ ‚âÉ Œ±` such that we have both `‚àÄ T ‚àà ùîó, e '' T ‚àà ùîñ` and\n`‚àÄ S ‚àà ùîñ, e ‚Åª¬π' S ‚àà ùîó` into a uniform isomorphism `(Œ≥ ‚Üí·µ§[ùîó] Œ≤) ‚âÉ·µ§ (Œ± ‚Üí·µ§[ùîñ] Œ≤)` by pre-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrLeft\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">congrLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîó : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ≥</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œ≥</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(he : <span class=\"fn\"><span class=\"fn\">ùîó</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.image\">Set.image</a> <span class=\"fn\">‚áë<span class=\"fn\">e</span></span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">‚Åª¬π'</a> <span class=\"fn\">ùîñ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(he' : <span class=\"fn\"><span class=\"fn\">ùîñ</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">Set.preimage</a> <span class=\"fn\">‚áë<span class=\"fn\">e</span></span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">‚Åª¬π'</a> <span class=\"fn\">ùîó</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ≥</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîó</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L777-L801","name":"UniformOnFun.precomp_uniformContinuous","line":777,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.precomp_uniformContinuous","doc":"Let `f : Œ≥ ‚Üí Œ±`, `ùîñ : Set (Set Œ±)`, `ùîó : Set (Set Œ≥)`, and assume that `‚àÄ T ‚àà ùîó, f '' T ‚àà ùîñ`.\nThen, the function `(fun g ‚Ü¶ g ‚àò f) : (Œ± ‚Üí·µ§[ùîñ] Œ≤) ‚Üí (Œ≥ ‚Üí·µ§[ùîó] Œ≤)` is uniformly continuous.\n\nNote that one can easily see that assuming `‚àÄ T ‚àà ùîó, ‚àÉ S ‚àà ùîñ, f '' T ‚äÜ S` would work too, but\nwe will get this for free when we prove that `ùí±(Œ±, Œ≤, ùîñ, uŒ≤) = ùí±(Œ±, Œ≤, ùîñ', uŒ≤)` where `ùîñ'` is the\n***noncovering*** bornology generated by `ùîñ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.precomp_uniformContinuous\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">precomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîó : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ≥</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><span class=\"fn\">ùîó</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.image\">Set.image</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">‚Åª¬π'</a> <span class=\"fn\">ùîñ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">UniformOnFun.ofFun</a> <span class=\"fn\">ùîó</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L765-L768","name":"UniformOnFun.congrRight","line":765,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrRight","doc":"Turn a uniform isomorphism `Œ≥ ‚âÉ·µ§ Œ≤` into a uniform isomorphism `(Œ± ‚Üí·µ§[ùîñ] Œ≥) ‚âÉ·µ§ (Œ± ‚Üí·µ§[ùîñ] Œ≤)`\nby post-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.congrRight\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">congrRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œ≥</span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L751-L760","name":"UniformOnFun.postcomp_uniformInducing","line":751,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformInducing","doc":"Post-composition by a uniform inducing is a uniform inducing for the\nuniform structures of `ùîñ`-convergence.\n\nMore precisely, if `f : Œ≥ ‚Üí Œ≤` is a uniform inducing, then\n`(fun g ‚Ü¶ f ‚àò g) : (Œ± ‚Üí·µ§[ùîñ] Œ≥) ‚Üí (Œ± ‚Üí·µ§[ùîñ] Œ≤)` is a uniform inducing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformInducing\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">postcomp_uniformInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#UniformInducing\">UniformInducing</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#UniformInducing\">UniformInducing</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">UniformOnFun.ofFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≥</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L739-L743","name":"UniformOnFun.postcomp_uniformContinuous","line":739,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformContinuous","doc":"Post-composition by a uniformly continuous function is uniformly continuous for the\nuniform structures of `ùîñ`-convergence.\n\nMore precisely, if `f : Œ≥ ‚Üí Œ≤` is uniformly continuous, then\n`(fun g ‚Ü¶ f ‚àò g) : (Œ± ‚Üí·µ§[ùîñ] Œ≥) ‚Üí (Œ± ‚Üí·µ§[ùîñ] Œ≤)` is uniformly continuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.postcomp_uniformContinuous\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">postcomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">UniformOnFun.ofFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≥</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L724-L730","name":"UniformOnFun.comap_eq","line":724,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.comap_eq","doc":"If `u` is a uniform structure on `Œ≤` and `f : Œ≥ ‚Üí Œ≤`, then\n`ùí±(Œ±, Œ≥, ùîñ, comap f u) = comap (fun g ‚Ü¶ f ‚àò g) ùí±(Œ±, Œ≥, ùîñ, u‚ÇÅ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.comap_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">comap_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≥</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L715-L719","name":"UniformOnFun.inf_eq","line":715,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.inf_eq","doc":"If `u‚ÇÅ` and `u‚ÇÇ` are two uniform structures on `Œ≥`, then\n`ùí±(Œ±, Œ≥, ùîñ, u‚ÇÅ ‚äì u‚ÇÇ) = ùí±(Œ±, Œ≥, ùîñ, u‚ÇÅ) ‚äì ùí±(Œ±, Œ≥, ùîñ, u‚ÇÇ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.inf_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">inf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">‚äì</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L706-L710","name":"UniformOnFun.iInf_eq","line":706,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.iInf_eq","doc":"If `u` is a family of uniform structures on `Œ≥`, then\n`ùí±(Œ±, Œ≥, ùîñ, (‚®Ö i, u i)) = ‚®Ö i, ùí±(Œ±, Œ≥, ùîñ, u i)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.iInf_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">iInf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚®Ö (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L696-L699","name":"UniformOnFun.uniformContinuous_eval_of_mem","line":696,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval_of_mem","doc":"If `x : Œ±` is in some `S ‚àà ùîñ`, then evaluation at `x` is uniformly continuous on\n`Œ± ‚Üí·µ§[ùîñ] Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_eval_of_mem\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_eval_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">Œ±</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hxs : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hs : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L687-L691","name":"UniformOnFun.mono","line":687,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.mono","doc":"Let `u‚ÇÅ`, `u‚ÇÇ` be two uniform structures on `Œ≥` and `ùîñ‚ÇÅ ùîñ‚ÇÇ : Set (Set Œ±)`. If `u‚ÇÅ ‚â§ u‚ÇÇ` and\n`ùîñ‚ÇÇ ‚äÜ ùîñ‚ÇÅ` then `ùí±(Œ±, Œ≥, ùîñ‚ÇÅ, u‚ÇÅ) ‚â§ ùí±(Œ±, Œ≥, ùîñ‚ÇÇ, u‚ÇÇ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.mono\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶Éu‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶Éu‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hu : <span class=\"fn\"><span class=\"fn\">u‚ÇÅ</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">u‚ÇÇ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶Éùîñ‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶Éùîñ‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hùîñ : <span class=\"fn\"><span class=\"fn\">ùîñ‚ÇÇ</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">ùîñ‚ÇÅ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ‚ÇÅ</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\">UniformOnFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span> <span class=\"fn\">ùîñ‚ÇÇ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L676-L680","name":"UniformOnFun.uniformContinuous_restrict","line":676,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_restrict","doc":"If `S ‚àà ùîñ`, then the restriction to `S` is a uniformly continuous map from `Œ± ‚Üí·µ§[ùîñ] Œ≤` to\n`‚Ü•S ‚Üí·µ§ Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformContinuous_restrict\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformContinuous_restrict</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">UniformFun.ofFun</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Function.html#Set.restrict\">Set.restrict</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L668-L671","name":"UniformOnFun.hasBasis_nhds","line":668,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds","doc":"For `f : Œ± ‚Üí·µ§[ùîñ] Œ≤`, where `ùîñ : Set (Set Œ±)` is nonempty and directed, `ùìù f` admits the\nfamily `{g | ‚àÄ x ‚àà S, (f x, g x) ‚àà V}` for `S ‚àà ùîñ` and `V ‚àà ùì§ Œ≤` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_nhds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SV</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>) =&gt; <span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span> | <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span>, <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L658-L663","name":"UniformOnFun.hasBasis_nhds_of_basis","line":658,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds_of_basis","doc":"For `f : Œ± ‚Üí·µ§[ùîñ] Œ≤`, where `ùîñ : Set (Set Œ±)` is nonempty and directed, `ùìù f` admits the\nfamily `{g | ‚àÄ x ‚àà S, (f x, g x) ‚àà V}` for `S ‚àà ùîñ` and `V ‚àà ùìë` as a filter basis, for any basis\n`ùìë` of `ùì§ Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_nhds_of_basis\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_nhds_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œπ</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œπ</span></span>) =&gt;\n  <span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span> | <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span>, <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span></span>)</span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L649-L652","name":"UniformOnFun.hasBasis_uniformity","line":649,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity","doc":"If `ùîñ : Set (Set Œ±)` is nonempty and directed, then the uniformity of `Œ± ‚Üí·µ§[ùîñ] Œ≤` admits the\nfamily `{(f, g) | ‚àÄ x ‚àà S, (f x, g x) ‚àà V}` for `S ‚àà ùîñ` and `V ‚àà ùì§ Œ≤` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SV</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span></span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L636-L644","name":"UniformOnFun.hasBasis_uniformity_of_basis","line":636,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis","doc":"If `ùîñ : Set (Set Œ±)` is nonempty and directed and `ùìë` is a filter basis of `ùì§ Œ≤`, then the\nuniformity of `Œ± ‚Üí·µ§[ùîñ] Œ≤` admits the family `{(f, g) | ‚àÄ x ‚àà S, (f x, g x) ‚àà V}` for `S ‚àà ùîñ` and\n`V ‚àà ùìë` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œπ</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">Si</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œπ</span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\"><span class=\"fn\">Si</span>.1</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">Si</span>.2</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L621-L630","name":"UniformOnFun.hasBasis_uniformity_of_basis_aux‚ÇÇ","line":621,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux‚ÇÇ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux‚ÇÇ\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis_aux‚ÇÇ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Function.html#Set.restrict\">Set.restrict</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">(<span class=\"fn\">‚Üë<span class=\"fn\">s</span></span>)</span> <span class=\"fn\">Œ≤</span></span>)</span></span></span>)</span> <a href=\"./Mathlib/Order/Basic.html#Order.Preimage\">‚Åª¬π'o</a> <span class=\"fn\">GE.ge</span></span>)</span> <span class=\"fn\">ùîñ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L613-L618","name":"UniformOnFun.hasBasis_uniformity_of_basis_aux‚ÇÅ","line":613,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux‚ÇÅ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.hasBasis_uniformity_of_basis_aux‚ÇÅ\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis_aux‚ÇÅ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L605-L610","name":"UniformOnFun.topologicalSpace_eq","line":605,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace_eq","doc":"The topology of `ùîñ`-convergence is the infimum, for `S ‚àà ùîñ`, of topology induced by the map\nof `S.restrict : (Œ± ‚Üí·µ§[ùîñ] Œ≤) ‚Üí (‚Ü•S ‚Üí·µ§ Œ≤)` of restriction to `S`, where `‚Ü•S ‚Üí·µ§ Œ≤` is endowed with\nthe topology of uniform convergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace_eq\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">topologicalSpace_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace\">UniformOnFun.topologicalSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">‚®Ö s ‚àà <span class=\"fn\">ùîñ</span>,\n    <span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#TopologicalSpace.induced\">TopologicalSpace.induced</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">UniformFun.ofFun</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Function.html#Set.restrict\">Set.restrict</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span></span></span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.topologicalSpace\">UniformFun.topologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">‚Üë<span class=\"fn\">s</span></span>)</span> <span class=\"fn\">Œ≤</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L599-L600","name":"UniformOnFun.topologicalSpace","line":599,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace","doc":"Topology of `ùîñ`-convergence, i.e uniform convergence on the elements of `ùîñ`, declared as an\ninstance on `Œ± ‚Üí·µ§[ùîñ] Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.topologicalSpace\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">topologicalSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L592-L593","name":"UniformOnFun.uniformSpace","line":592,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace","doc":"Uniform structure of `ùîñ`-convergence, i.e uniform convergence on the elements of `ùîñ`,\ndeclared as an instance on `Œ± ‚Üí·µ§[ùîñ] Œ≤`. It is defined as the infimum, for `S ‚àà ùîñ`, of the pullback\nby `S.restrict`, the map of restriction to `S`, of the uniform structure `ùí∞(s, Œ≤, uŒ≤)` on\n`‚Ü•S ‚Üí·µ§ Œ≤`. We will denote it `ùí±(Œ±, Œ≤, ùîñ, uŒ≤)`, where `uŒ≤` is the uniform structure on `Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.uniformSpace\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">uniformSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L574-L583","name":"UniformOnFun.isBasis_gen","line":574,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isBasis_gen","doc":"If `ùîñ : Set (Set Œ±)` is nonempty and directed and `ùìë` is a filter basis on `Œ≤ √ó Œ≤`, then the\nfamily `UniformOnFun.gen ùîñ S V` for `S ‚àà ùîñ` and `V ‚àà ùìë` is a filter basis on\n`(Œ± ‚Üí·µ§[ùîñ] Œ≤) √ó (Œ± ‚Üí·µ§[ùîñ] Œ≤)`.\nWe will show in `has_basis_uniformity_of_basis` that, if `ùìë` is a basis for `ùì§ Œ≤`, then the\ncorresponding filter is the uniformity of `Œ± ‚Üí·µ§[ùîñ] Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.isBasis_gen\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">isBasis_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set.Nonempty\">Set.Nonempty</a> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h' : <span class=\"fn\"><a href=\"./Mathlib/Order/Directed.html#DirectedOn\">DirectedOn</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ùìë : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#FilterBasis\">FilterBasis</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.IsBasis\">Filter.IsBasis</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SV</span>.2</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùìë</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">SV</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\"><span class=\"fn\">SV</span>.1</span> <span class=\"fn\"><span class=\"fn\">SV</span>.2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L565-L566","name":"UniformOnFun.gen_mono","line":565,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mono","doc":"`UniformOnFun.gen` is antitone in the first argument and monotone in the second. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_mono\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{S' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V' : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hS : <span class=\"fn\"><span class=\"fn\">S'</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hV : <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\">V'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\">S</span> <span class=\"fn\">V</span></span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">‚äÜ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\">S'</span> <span class=\"fn\">V'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L556-L561","name":"UniformOnFun.gen_eq_preimage_restrict","line":556,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_eq_preimage_restrict","doc":"For `S : Set Œ±` and `V : Set (Œ≤ √ó Œ≤)`, we have\n`UniformOnFun.gen ùîñ S V = (S.restrict √ó S.restrict) ‚Åª¬π' (UniformFun.gen S Œ≤ V)`.\nThis is the crucial fact for proving that the family `UniformOnFun.gen S V` for `S ‚àà ùîñ` and\n`V ‚àà ùì§ Œ≤` is indeed a basis for the uniformity `Œ± ‚Üí·µ§[ùîñ] Œ≤` endowed with `ùí±(Œ±, Œ≤, ùîñ, uŒ≤)`\nthe uniform structure of `ùîñ`-convergence, as defined in `UniformOnFun.uniform_space`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen_eq_preimage_restrict\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen_eq_preimage_restrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(V : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\">UniformOnFun.gen</a> <span class=\"fn\">ùîñ</span> <span class=\"fn\">S</span> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Function.html#Set.restrict\">Set.restrict</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">UniformFun.toFun</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Function.html#Set.restrict\">Set.restrict</a> <span class=\"fn\">S</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">UniformFun.toFun</span></span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.preimage\">‚Åª¬π'</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">(<span class=\"fn\">‚Üë<span class=\"fn\">S</span></span>)</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">V</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L547-L548","name":"UniformOnFun.gen","line":547,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen","doc":"Basis sets for the uniformity of `ùîñ`-convergence: for `S : Set Œ±` and `V : Set (Œ≤ √ó Œ≤)`,\n`gen ùîñ S V` is the set of pairs `(f, g)` of functions `Œ± ‚Üí·µ§[ùîñ] Œ≤` such that\n`‚àÄ x ‚àà S, (f x, g x) ‚àà V`. Note that the family `ùîñ : Set (Set Œ±)` is only used to specify which\ntype alias of `Œ± ‚Üí Œ≤` to use here. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.gen\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(V : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L510-L528","name":"UniformFun.uniformEquivPiComm","line":510,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivPiComm","doc":"The natural bijection between `Œ± ‚Üí Œ† i, Œ¥ i` and `Œ† i, Œ± ‚Üí Œ¥ i`, upgraded to a uniform\nisomorphism between `Œ± ‚Üí·µ§ (Œ† i, Œ¥ i)` and `Œ† i, Œ± ‚Üí·µ§ Œ¥ i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivPiComm\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformEquivPiComm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Œ¥ : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ¥</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><span class=\"fn\">Œ¥</span> <span class=\"fn\">i</span></span></span>)</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ¥</span> <span class=\"fn\">i</span></span>)</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L484-L502","name":"UniformFun.uniformEquivProdArrow","line":484,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivProdArrow","doc":"The natural bijection between `Œ± ‚Üí Œ≤ √ó Œ≥` and `(Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≥)`, upgraded to a uniform\nisomorphism between `Œ± ‚Üí·µ§ Œ≤ √ó Œ≥` and `(Œ± ‚Üí·µ§ Œ≤) √ó (Œ± ‚Üí·µ§ Œ≥)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformEquivProdArrow\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformEquivProdArrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≥</span></span>)</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L476-L479","name":"UniformFun.tendsto_iff_tendstoUniformly","line":476,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.tendsto_iff_tendstoUniformly","doc":"The topology of uniform convergence indeed gives the same notion of convergence as\n`TendstoUniformly`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.tendsto_iff_tendstoUniformly\"><span class=\"name\">UniformFun</span>.<span class=\"name\">tendsto_iff_tendstoUniformly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">Œπ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">F</span> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergence.html#TendstoUniformly\">TendstoUniformly</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">UniformFun.toFun</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">UniformFun.toFun</span> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L471-L472","name":"UniformFun.instT2SpaceUniformFunTopologicalSpace","line":471,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.instT2SpaceUniformFunTopologicalSpace","doc":"The topology of uniform convergence is T‚ÇÇ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.instT2SpaceUniformFunTopologicalSpace\"><span class=\"name\">UniformFun</span>.<span class=\"name\">instT2SpaceUniformFunTopologicalSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T2Space\">T2Space</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L463-L467","name":"UniformFun.uniformContinuous_toFun","line":463,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_toFun","doc":"The natural map `UniformFun.toFun` from `Œ± ‚Üí·µ§ Œ≤` to `Œ± ‚Üí Œ≤` is uniformly continuous.\n\nIn other words, the uniform structure of uniform convergence is finer than that of pointwise\nconvergence, aka the product uniform structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_toFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformContinuous_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">‚áë<span class=\"fn\">UniformFun.toFun</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L453-L456","name":"UniformFun.congrLeft","line":453,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrLeft","doc":"Turn a bijection `Œ≥ ‚âÉ Œ±` into a uniform isomorphism\n`(Œ≥ ‚Üí·µ§ Œ≤) ‚âÉ·µ§ (Œ± ‚Üí·µ§ Œ≤)` by pre-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrLeft\"><span class=\"name\">UniformFun</span>.<span class=\"name\">congrLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œ≥</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ≥</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L440-L448","name":"UniformFun.precomp_uniformContinuous","line":440,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.precomp_uniformContinuous","doc":"Pre-composition by any function is uniformly continuous for the uniform structures of\nuniform convergence.\n\nMore precisely, for any `f : Œ≥ ‚Üí Œ±`, the function `(¬∑ ‚àò f) : (Œ± ‚Üí·µ§ Œ≤) ‚Üí (Œ≥ ‚Üí·µ§ Œ≤)` is uniformly\ncontinuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.precomp_uniformContinuous\"><span class=\"name\">UniformFun</span>.<span class=\"name\">precomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ±</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">UniformFun.ofFun</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">UniformFun.toFun</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">f</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L429-L432","name":"UniformFun.congrRight","line":429,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrRight","doc":"Turn a uniform isomorphism `Œ≥ ‚âÉ·µ§ Œ≤` into a uniform isomorphism `(Œ± ‚Üí·µ§ Œ≥) ‚âÉ·µ§ (Œ± ‚Üí·µ§ Œ≤)` by\npost-composing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.congrRight\"><span class=\"name\">UniformFun</span>.<span class=\"name\">congrRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">Œ≥</span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span> <a href=\"./Mathlib/Topology/UniformSpace/Equiv.html#UniformEquiv\">‚âÉ·µ§</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L414-L419","name":"UniformFun.postcomp_uniformContinuous","line":414,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformContinuous","doc":"Post-composition by a uniformly continuous function is uniformly continuous on `Œ± ‚Üí·µ§ Œ≤`.\n\nMore precisely, if `f : Œ≥ ‚Üí Œ≤` is uniformly continuous, then `(fun g ‚Ü¶ f ‚àò g) : (Œ± ‚Üí·µ§ Œ≥) ‚Üí (Œ± ‚Üí·µ§ Œ≤)`\nis uniformly continuous. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformContinuous\"><span class=\"name\">UniformFun</span>.<span class=\"name\">postcomp_uniformContinuous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">UniformFun.ofFun</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≥</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">UniformFun.toFun</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L404-L407","name":"UniformFun.comap_eq","line":404,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.comap_eq","doc":"If `u` is a uniform structures on `Œ≤` and `f : Œ≥ ‚Üí Œ≤`, then\n`ùí∞(Œ±, Œ≥, comap f u) = comap (fun g ‚Ü¶ f ‚àò g) ùí∞(Œ±, Œ≥, u‚ÇÅ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.comap_eq\"><span class=\"name\">UniformFun</span>.<span class=\"name\">comap_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.comap\">UniformSpace.comap</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≥</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L395-L398","name":"UniformFun.postcomp_uniformInducing","line":395,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformInducing","doc":"Post-composition by a uniform inducing function is\na uniform inducing function for the uniform structures of uniform convergence.\n\nMore precisely, if `f : Œ≥ ‚Üí Œ≤` is uniform inducing,\nthen `(f ‚àò ¬∑) : (Œ± ‚Üí·µ§ Œ≥) ‚Üí (Œ± ‚Üí·µ§ Œ≤)` is uniform inducing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.postcomp_uniformInducing\"><span class=\"name\">UniformFun</span>.<span class=\"name\">postcomp_uniformInducing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">Œ≥</span> ‚Üí <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#UniformInducing\">UniformInducing</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformEmbedding.html#UniformInducing\">UniformInducing</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">‚áë<span class=\"fn\">UniformFun.ofFun</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≥</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">UniformFun.toFun</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L381-L387","name":"UniformFun.inf_eq","line":381,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.inf_eq","doc":"If `u‚ÇÅ` and `u‚ÇÇ` are two uniform structures on `Œ≥`, then\n`ùí∞(Œ±, Œ≥, u‚ÇÅ ‚äì u‚ÇÇ) = ùí∞(Œ±, Œ≥, u‚ÇÅ) ‚äì ùí∞(Œ±, Œ≥, u‚ÇÇ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.inf_eq\"><span class=\"name\">UniformFun</span>.<span class=\"name\">inf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">‚äì</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L370-L376","name":"UniformFun.iInf_eq","line":370,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.iInf_eq","doc":"If `u` is a family of uniform structures on `Œ≥`, then\n`ùí∞(Œ±, Œ≥, (‚®Ö i, u i)) = ‚®Ö i, ùí∞(Œ±, Œ≥, u i)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.iInf_eq\"><span class=\"name\">UniformFun</span>.<span class=\"name\">iInf_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≥</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚®Ö (i : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L364-L365","name":"UniformFun.mono","line":364,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mono","doc":"If `u‚ÇÅ` and `u‚ÇÇ` are two uniform structures on `Œ≥` and `u‚ÇÅ ‚â§ u‚ÇÇ`, then\n`ùí∞(Œ±, Œ≥, u‚ÇÅ) ‚â§ ùí∞(Œ±, Œ≥, u‚ÇÇ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mono\"><span class=\"name\">UniformFun</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≥ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Basic.html#Monotone\">Monotone</a> <span class=\"fn\">(<span class=\"fn\">@<a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\">UniformFun.uniformSpace</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≥</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L358-L360","name":"UniformFun.mem_gen","line":358,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mem_gen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.mem_gen\"><span class=\"name\">UniformFun</span>.<span class=\"name\">mem_gen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{V : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span>, <span class=\"fn\">g</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">V</span></span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">Œ±</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">UniformFun.toFun</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">UniformFun.toFun</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">V</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L347-L352","name":"UniformFun.uniformContinuous_eval","line":347,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_eval","doc":"Evaluation at a fixed point is uniformly continuous on `Œ± ‚Üí·µ§ Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformContinuous_eval\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformContinuous_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">Œ±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformContinuous\">UniformContinuous</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.eval\">Function.eval</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">‚áë<span class=\"fn\">UniformFun.toFun</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L339-L341","name":"UniformFun.hasBasis_nhds","line":339,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds","doc":"For `f : Œ± ‚Üí·µ§ Œ≤`, `ùìù f` admits the family `{g | ‚àÄ x, (f x, g x) ‚àà V}` for `V ‚àà ùì§ Œ≤` as a\nfilter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_nhds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>) =&gt;\n  <span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> | <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span>, <span class=\"fn\">g</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">V</span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L331-L334","name":"UniformFun.hasBasis_nhds_of_basis","line":331,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds_of_basis","doc":"For `f : Œ± ‚Üí·µ§ Œ≤`, `ùìù f` admits the family `{g | ‚àÄ x, (f x, g x) ‚àà V}` for `V ‚àà ùìë` as a filter\nbasis, for any basis `ùìë` of `ùì§ Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_nhds_of_basis\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_nhds_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> | <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span>, <span class=\"fn\">g</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span> <span class=\"fn\">i</span></span>)</span></span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L320-L326","name":"UniformFun.hasBasis_uniformity_of_basis","line":320,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity_of_basis","doc":"The uniformity of `Œ± ‚Üí·µ§ Œ≤` admits the family `{(f, g) | ‚àÄ x, (f x, g x) ‚àà V}` for `V ‚àà ùìë` as\na filter basis, for any basis `ùìë` of `ùì§ Œ≤` (in the case `ùìë = (ùì§ Œ≤).as_basis` this is true by\ndefinition). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity_of_basis\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_uniformity_of_basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œπ : <a href=\"./foundational_types.html\">Sort</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#Function.comp\">‚àò</a> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L312-L314","name":"UniformFun.hasBasis_uniformity","line":312,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity","doc":"By definition, the uniformity of `Œ± ‚Üí·µ§ Œ≤` admits the family `{(f, g) | ‚àÄ x, (f x, g x) ‚àà V}`\nfor `V ‚àà ùì§ Œ≤` as a filter basis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.hasBasis_uniformity\"><span class=\"name\">UniformFun</span>.<span class=\"name\">hasBasis_uniformity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.HasBasis\">Filter.HasBasis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">Œ≤</span></span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L304-L305","name":"UniformFun.topologicalSpace","line":304,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.topologicalSpace","doc":"Topology of uniform convergence, declared as an instance on `Œ± ‚Üí·µ§ Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.topologicalSpace\"><span class=\"name\">UniformFun</span>.<span class=\"name\">topologicalSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L300-L301","name":"UniformFun.uniformSpace","line":300,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace","doc":"Uniform structure of uniform convergence, declared as an instance on `Œ± ‚Üí·µ§ Œ≤`.\nWe will denote it `ùí∞(Œ±, Œ≤, uŒ≤)` in the rest of this file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformSpace\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L285-L295","name":"UniformFun.uniformCore","line":285,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformCore","doc":"Core of the uniform structure of uniform convergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.uniformCore\"><span class=\"name\">UniformFun</span>.<span class=\"name\">uniformCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace.Core\">UniformSpace.Core</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L264-L279","name":"UniformFun.gc","line":264,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gc","doc":"The function `UniformFun.filter Œ± Œ≤ : Filter (Œ≤ √ó Œ≤) ‚Üí Filter ((Œ± ‚Üí·µ§ Œ≤) √ó (Œ± ‚Üí·µ§ Œ≤))`\nhas a lower adjoint `l` (in the sense of `GaloisConnection`). The exact definition of `l` is not\ninteresting; we will only use that it exists (in `UniformFun.mono` and\n`UniformFun.iInf_eq`) and that\n`l (Filter.map (Prod.map f f) ùìï) = Filter.map (Prod.map ((‚àò) f) ((‚àò) f)) (l ùìï)` for each\n`ùìï : Filter (Œ≥ √ó Œ≥)` and `f : Œ≥ ‚Üí Œ±` (in `UniformFun.comap_eq`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gc\"><span class=\"name\">UniformFun</span>.<span class=\"name\">gc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/GaloisConnection.html#GaloisConnection\">GaloisConnection</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">ùìê</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.map\">Filter.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.phi\">UniformFun.phi</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ùìê</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">√óÀ¢</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></span>)</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">ùìï</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.filter\">UniformFun.filter</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùìï</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L247-L248","name":"UniformFun.phi","line":247,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.phi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.phi\"><span class=\"name\">UniformFun</span>.<span class=\"name\">phi</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_6)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(uvx : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span>)</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L239-L240","name":"UniformFun.filter","line":239,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.filter","doc":"For `ùìï : Filter (Œ≤ √ó Œ≤)`, this is the filter generated by the filter basis\n`UniformFun.basis Œ± Œ≤ ùìï`. For `ùìï = ùì§ Œ≤`, this will be the uniformity of uniform\nconvergence on `Œ±`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.filter\"><span class=\"name\">UniformFun</span>.<span class=\"name\">filter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ùìï : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L232-L233","name":"UniformFun.basis","line":232,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.basis","doc":"For `ùìï : Filter (Œ≤ √ó Œ≤)`, this is the set of all `UniformFun.gen Œ± Œ≤ V` for\n`V ‚àà ùìï` as a bundled `FilterBasis` over `(Œ± ‚Üí·µ§ Œ≤) √ó (Œ± ‚Üí·µ§ Œ≤)`. This will only be applied to\n`ùìï = ùì§ Œ≤` when `Œ≤` is equipped with a `UniformSpace` structure, but it is useful to define it for\nany filter in order to be able to state that it has a lower adjoint\n(see `UniformFun.gc`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.basis\"><span class=\"name\">UniformFun</span>.<span class=\"name\">basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ùìï : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#FilterBasis\">FilterBasis</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L221-L224","name":"UniformFun.isBasis_gen","line":221,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.isBasis_gen","doc":"If `ùìï` is a filter on `Œ≤ √ó Œ≤`, then the set of all `UniformFun.gen Œ± Œ≤ V` for\n`V ‚àà ùìï` is a filter basis on `(Œ± ‚Üí·µ§ Œ≤) √ó (Œ± ‚Üí·µ§ Œ≤)`. This will only be applied to `ùìï = ùì§ Œ≤` when\n`Œ≤` is equipped with a `UniformSpace` structure, but it is useful to define it for any filter in\norder to be able to state that it has a lower adjoint (see `UniformFun.gc`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.isBasis_gen\"><span class=\"name\">UniformFun</span>.<span class=\"name\">isBasis_gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ùìë : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter\">Filter</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.IsBasis\">Filter.IsBasis</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">V</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\">ùìë</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\">UniformFun.gen</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L213-L214","name":"UniformFun.gen","line":213,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen","doc":"Basis sets for the uniformity of uniform convergence: `gen Œ± Œ≤ V` is the set of pairs `(f, g)`\nof functions `Œ± ‚Üí·µ§ Œ≤` such that `‚àÄ x, (f x, g x) ‚àà V`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.gen\"><span class=\"name\">UniformFun</span>.<span class=\"name\">gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(V : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ≤</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">Œ≤</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L197-L197","name":"UniformOnFun.ofFun_toFun","line":197,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun_toFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">ofFun_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">UniformOnFun.ofFun</a> <span class=\"fn\">ùîñ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L196-L196","name":"UniformOnFun.toFun_ofFun","line":196,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun_ofFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun_ofFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">toFun_ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\">UniformOnFun.toFun</a> <span class=\"fn\">ùîñ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\">UniformOnFun.ofFun</a> <span class=\"fn\">ùîñ</span></span>)</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L195-L195","name":"UniformFun.ofFun_toFun","line":195,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun_toFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun_toFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">ofFun_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">UniformFun.ofFun</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">UniformFun.toFun</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L194-L194","name":"UniformFun.toFun_ofFun","line":194,"kind":"theorem","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun_ofFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun_ofFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">toFun_ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≤</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">UniformFun.toFun</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">UniformFun.ofFun</span> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L190-L191","name":"UniformOnFun.toFun","line":190,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun","doc":"Reinterpret `f : Œ± ‚Üí·µ§[ùîñ] Œ≤` as an element of `Œ± ‚Üí Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.toFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L185-L186","name":"UniformFun.toFun","line":185,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun","doc":"Reinterpret `f : Œ± ‚Üí·µ§ Œ≤` as an element of `Œ± ‚Üí Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.toFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L180-L181","name":"UniformOnFun.ofFun","line":180,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun","doc":"Reinterpret `f : Œ± ‚Üí Œ≤` as an element of `Œ± ‚Üí·µ§[ùîñ] Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun.ofFun\"><span class=\"name\">UniformOnFun</span>.<span class=\"name\">ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≤</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L175-L176","name":"UniformFun.ofFun","line":175,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun","doc":"Reinterpret `f : Œ± ‚Üí Œ≤` as an element of `Œ± ‚Üí·µ§ Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun.ofFun\"><span class=\"name\">UniformFun</span>.<span class=\"name\">ofFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Œ±</span> ‚Üí <span class=\"fn\">Œ≤</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L172-L172","name":"instNonemptyUniformOnFun","line":172,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformOnFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformOnFun\"><span class=\"name\">instNonemptyUniformOnFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ùîñ : <span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\">UniformOnFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">ùîñ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L170-L170","name":"instNonemptyUniformFun","line":170,"kind":"instance","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#instNonemptyUniformFun\"><span class=\"name\">instNonemptyUniformFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ± : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">Œ≤</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\">UniformFun</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L159-L159","name":"UniformConvergence.¬´term_‚Üí·µ§[_]_¬ª","line":159,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.¬´term_‚Üí·µ§[_]_¬ª","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.¬´term_‚Üí·µ§[_]_¬ª\"><span class=\"name\">UniformConvergence</span>.<span class=\"name\">¬´term_‚Üí·µ§[_]_¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L157-L157","name":"UniformConvergence.¬´term_‚Üí·µ§_¬ª","line":157,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.¬´term_‚Üí·µ§_¬ª","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformConvergence.¬´term_‚Üí·µ§_¬ª\"><span class=\"name\">UniformConvergence</span>.<span class=\"name\">¬´term_‚Üí·µ§_¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L153-L154","name":"UniformOnFun","line":153,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun","doc":"The type of functions from `Œ±` to `Œ≤` equipped with the uniform structure and topology of\nuniform convergence on some family `ùîñ` of subsets of `Œ±`. We denote it `Œ± ‚Üí·µ§[ùîñ] Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformOnFun\"><span class=\"name\">UniformOnFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Init/Set.html#Set\">Set</a> <span class=\"fn\">Œ±</span></span>)</span></span> ‚Üí <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/UniformSpace/UniformConvergenceTopology.lean#L146-L147","name":"UniformFun","line":146,"kind":"def","docLink":"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun","doc":"The type of functions from `Œ±` to `Œ≤` equipped with the uniform structure and topology of\nuniform convergence. We denote it `Œ± ‚Üí·µ§ Œ≤`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/UniformSpace/UniformConvergenceTopology.html#UniformFun\"><span class=\"name\">UniformFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(Œ± : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Œ≤ : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}