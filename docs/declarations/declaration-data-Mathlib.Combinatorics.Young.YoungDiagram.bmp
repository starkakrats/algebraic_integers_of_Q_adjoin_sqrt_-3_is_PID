{"name":"Mathlib.Combinatorics.Young.YoungDiagram","instances":[{"typeNames":["YoungDiagram","Prod"],"name":"YoungDiagram.instSetLikeYoungDiagramProdNat","className":"SetLike"},{"typeNames":[],"name":"YoungDiagram.decidableMem","className":"Decidable"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instSupYoungDiagram","className":"Sup"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instInfYoungDiagram","className":"Inf"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instOrderBotYoungDiagramToLEToPreorderInstPartialOrderProdNatInstSetLikeYoungDiagramProdNat","className":"OrderBot"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instInhabitedYoungDiagram","className":"Inhabited"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instDistribLatticeYoungDiagram","className":"DistribLattice"}],"imports":["Init","Mathlib.Order.UpperLower.Basic","Mathlib.Data.Finset.Preimage"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L531-L536","name":"YoungDiagram.equivListRowLens","line":531,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens","doc":"Equivalence between Young diagrams and weakly decreasing lists of positive natural numbers.\nA Young diagram `μ` is equivalent to a list of row lengths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">{ <span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L530-L530","name":"YoungDiagram.equivListRowLens_apply_coe","line":530,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_apply_coe\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\">YoungDiagram.equivListRowLens</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L530-L530","name":"YoungDiagram.equivListRowLens_symm_apply","line":530,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_symm_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ww : <span class=\"fn\">{ <span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> // <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span></span> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\">YoungDiagram.equivListRowLens</a>.symm</span> <span class=\"fn\">ww</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">↑<span class=\"fn\">ww</span></span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">ww</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L521-L525","name":"YoungDiagram.rowLens_ofRowLens_eq_self","line":521,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_ofRowLens_eq_self","doc":"The right_inv direction of the equivalence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_ofRowLens_eq_self\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_ofRowLens_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hpos : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L514-L517","name":"YoungDiagram.ofRowLens_to_rowLens_eq_self","line":514,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens_to_rowLens_eq_self","doc":"The left_inv direction of the equivalence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens_to_rowLens_eq_self\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ofRowLens_to_rowLens_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span>)</span>\n    <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L508-L510","name":"YoungDiagram.rowLen_ofRowLens","line":508,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_ofRowLens","doc":"The length of the `i`th row in `ofRowLens w hw` is the `i`th entry of `w` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">w</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">w</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L499-L503","name":"YoungDiagram.rowLens_length_ofRowLens","line":499,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_length_ofRowLens","doc":"The number of rows in `ofRowLens w hw` is the length of `w` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_length_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_length_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hpos : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L493-L495","name":"YoungDiagram.mem_ofRowLens","line":493,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_ofRowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">YoungDiagram.ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">w</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">w</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">c</span>.1</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h</span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L475-L489","name":"YoungDiagram.ofRowLens","line":475,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens","doc":"Young diagram from a sorted list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ofRowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hw : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L463-L470","name":"YoungDiagram.mem_cellsOfRowLens","line":463,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cellsOfRowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cellsOfRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_cellsOfRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens\">YoungDiagram.cellsOfRowLens</a> <span class=\"fn\">w</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">w</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">w</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\"><span class=\"fn\">c</span>.1</span>, <span class=\"fn\">isLt</span> := <span class=\"fn\">h</span> }</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L454-L459","name":"YoungDiagram.cellsOfRowLens","line":454,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens","doc":"The cells making up a `YoungDiagram` from a list of row lengths "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cellsOfRowLens</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L431-L434","name":"YoungDiagram.pos_of_mem_rowLens","line":431,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.pos_of_mem_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.pos_of_mem_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">pos_of_mem_rowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hx : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L427-L428","name":"YoungDiagram.rowLens_sorted","line":427,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_sorted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_sorted\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_sorted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> x_1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L423-L424","name":"YoungDiagram.length_rowLens","line":423,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.length_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.length_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">length_rowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L418-L419","name":"YoungDiagram.get_rowLens","line":418,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.get_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.get_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">get_rowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span>)</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.get\">List.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">YoungDiagram.rowLens</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L412-L413","name":"YoungDiagram.rowLens","line":412,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens","doc":"List of row lengths of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L394-L395","name":"YoungDiagram.colLen_anti","line":394,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_anti\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_anti</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">j2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">j1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L389-L390","name":"YoungDiagram.colLen_eq_card","line":389,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_eq_card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_eq_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">YoungDiagram.col</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span>)</span>.card</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L381-L386","name":"YoungDiagram.col_eq_prod","line":381,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col_eq_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col_eq_prod\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">col_eq_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">YoungDiagram.col</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span>)</span></span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">{<span class=\"fn\">j</span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L376-L378","name":"YoungDiagram.mem_iff_lt_colLen","line":376,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_colLen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_colLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_iff_lt_colLen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L372-L373","name":"YoungDiagram.rowLen_transpose","line":372,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L367-L368","name":"YoungDiagram.colLen_transpose","line":367,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">YoungDiagram.colLen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L362-L363","name":"YoungDiagram.colLen","line":362,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen","doc":"Length of a column of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L356-L358","name":"YoungDiagram.exists_not_mem_col","line":356,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_col","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_col\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">exists_not_mem_col</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> ∉ <span class=\"fn\"><span class=\"fn\">μ</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L353-L353","name":"YoungDiagram.mk_mem_col_iff","line":353,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_col_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_col_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk_mem_col_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">YoungDiagram.col</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L349-L350","name":"YoungDiagram.mem_col_iff","line":349,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_col_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_col_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_col_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">YoungDiagram.col</a> <span class=\"fn\">μ</span> <span class=\"fn\">j</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L345-L346","name":"YoungDiagram.col","line":345,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col","doc":"The `j`-th column of a Young diagram consists of the cells whose second coordinate is `j`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">col</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L328-L332","name":"YoungDiagram.rowLen_anti","line":328,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_anti\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_anti</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">i2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">i1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L323-L324","name":"YoungDiagram.rowLen_eq_card","line":323,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_eq_card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_eq_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">YoungDiagram.row</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span>)</span>.card</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L315-L320","name":"YoungDiagram.row_eq_prod","line":315,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row_eq_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row_eq_prod\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">row_eq_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">YoungDiagram.row</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">i</span>}</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L309-L312","name":"YoungDiagram.mem_iff_lt_rowLen","line":309,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_rowLen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_rowLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_iff_lt_rowLen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">YoungDiagram.rowLen</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L305-L306","name":"YoungDiagram.rowLen","line":305,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen","doc":"Length of a row of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L294-L301","name":"YoungDiagram.exists_not_mem_row","line":294,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_row","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_row\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">exists_not_mem_row</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> ∉ <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L291-L291","name":"YoungDiagram.mk_mem_row_iff","line":291,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_row_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_row_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk_mem_row_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">YoungDiagram.row</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L287-L288","name":"YoungDiagram.mem_row_iff","line":287,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_row_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_row_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_row_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">YoungDiagram.row</a> <span class=\"fn\">μ</span> <span class=\"fn\">i</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L283-L284","name":"YoungDiagram.row","line":283,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row","doc":"The `i`-th row of a Young diagram consists of the cells whose first coordinate is `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">row</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L262-L263","name":"YoungDiagram.transposeOrderIso","line":262,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso","doc":"Transposing Young diagrams is an `OrderIso`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L261-L261","name":"YoungDiagram.transposeOrderIso_apply","line":261,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\">YoungDiagram.transposeOrderIso</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L261-L261","name":"YoungDiagram.transposeOrderIso_symm_apply","line":261,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_symm_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\">YoungDiagram.transposeOrderIso</a></span>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L256-L257","name":"YoungDiagram.transpose_mono","line":256,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_mono\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h_le : <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L247-L252","name":"YoungDiagram.transpose_le_iff","line":247,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_le_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">ν</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L239-L243","name":"YoungDiagram.le_of_transpose_le","line":239,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.le_of_transpose_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.le_of_transpose_le\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">le_of_transpose_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h_le : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L233-L235","name":"YoungDiagram.transpose_eq_iff","line":233,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">ν</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L226-L229","name":"YoungDiagram.transpose_eq_iff_eq_transpose","line":226,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff_eq_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff_eq_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_eq_iff_eq_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L221-L223","name":"YoungDiagram.transpose_transpose","line":221,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L216-L217","name":"YoungDiagram.mem_transpose","line":216,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">YoungDiagram.transpose</a> <span class=\"fn\">μ</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Prod/Basic.html#Prod.swap\">Prod.swap</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L206-L212","name":"YoungDiagram.transpose","line":206,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose","doc":"The `transpose` of a Young diagram is obtained by swapping i's with j's. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L199-L200","name":"YoungDiagram.card","line":199,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.card","doc":"Cardinality of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L191-L193","name":"YoungDiagram.instDistribLatticeYoungDiagram","line":191,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instDistribLatticeYoungDiagram","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instDistribLatticeYoungDiagram\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instDistribLatticeYoungDiagram</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L188-L189","name":"YoungDiagram.instInhabitedYoungDiagram","line":188,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInhabitedYoungDiagram","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInhabitedYoungDiagram\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instInhabitedYoungDiagram</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L184-L185","name":"YoungDiagram.not_mem_bot","line":184,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.not_mem_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.not_mem_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">not_mem_bot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L175-L180","name":"YoungDiagram.coe_bot","line":175,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.cells</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L168-L169","name":"YoungDiagram.cells_bot","line":168,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L156-L165","name":"YoungDiagram.instOrderBotYoungDiagramToLEToPreorderInstPartialOrderProdNatInstSetLikeYoungDiagramProdNat","line":156,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instOrderBotYoungDiagramToLEToPreorderInstPartialOrderProdNatInstSetLikeYoungDiagramProdNat","doc":"The empty Young diagram is (⊥ : young_diagram). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instOrderBotYoungDiagramToLEToPreorderInstPartialOrderProdNatInstSetLikeYoungDiagramProdNat\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instOrderBotYoungDiagramToLEToPreorderInstPartialOrderProdNatInstSetLikeYoungDiagramProdNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#OrderBot\">OrderBot</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L151-L152","name":"YoungDiagram.mem_inf","line":151,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">ν</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L146-L147","name":"YoungDiagram.coe_inf","line":146,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_inf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">ν</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">μ</span></span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L141-L142","name":"YoungDiagram.cells_inf","line":141,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_inf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Inf.inf\">⊓</a> <span class=\"fn\">ν</span></span>)</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Std/Classes/SetNotation.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L133-L138","name":"YoungDiagram.instInfYoungDiagram","line":133,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInfYoungDiagram","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInfYoungDiagram\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instInfYoungDiagram</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Inf\">Inf</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L129-L130","name":"YoungDiagram.mem_sup","line":129,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">ν</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L124-L125","name":"YoungDiagram.coe_sup","line":124,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">ν</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">μ</span></span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L119-L120","name":"YoungDiagram.cells_sup","line":119,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_sup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Mathlib/Order/Notation.html#Sup.sup\">⊔</a> <span class=\"fn\">ν</span></span>)</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Std/Classes/SetNotation.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L111-L116","name":"YoungDiagram.instSupYoungDiagram","line":111,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSupYoungDiagram","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSupYoungDiagram\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instSupYoungDiagram</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Sup\">Sup</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L107-L108","name":"YoungDiagram.cells_ssubset_iff","line":107,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_ssubset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_ssubset_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_ssubset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Std/Classes/SetNotation.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L102-L103","name":"YoungDiagram.cells_subset_iff","line":102,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_subset_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ν : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.cells</span> <a href=\"./Std/Classes/SetNotation.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">ν</span>.cells</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L94-L96","name":"YoungDiagram.up_left_mem","line":94,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.up_left_mem","doc":"In \"English notation\", a Young diagram is drawn so that (i1, j1) ≤ (i2, j2)\nmeans (i1, j1) is weakly up-and-left of (i2, j2). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.up_left_mem\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">up_left_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcell : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i2</span>, <span class=\"fn\">j2</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i1</span>, <span class=\"fn\">j1</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L88-L89","name":"YoungDiagram.decidableMem","line":88,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.decidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.decidableMem\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">decidableMem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L83-L85","name":"YoungDiagram.mem_mk","line":83,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_mk\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cells : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isLowerSet : <span class=\"fn\"><a href=\"./Mathlib/Order/UpperLower/Basic.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\">cells</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">{ <span class=\"fn\">cells</span> := <span class=\"fn\">cells</span>, <span class=\"fn\">isLowerSet</span> := <span class=\"fn\">isLowerSet</span> }</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L78-L79","name":"YoungDiagram.mem_cells","line":78,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cells","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cells\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_cells</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span>.cells</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L71-L75","name":"YoungDiagram.instSetLikeYoungDiagramProdNat","line":71,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSetLikeYoungDiagramProdNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSetLikeYoungDiagramProdNat\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instSetLikeYoungDiagramProdNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/SetLike/Basic.html#SetLike\">SetLike</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L66-L66","name":"YoungDiagram.isLowerSet","line":66,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.isLowerSet","doc":"Cells are up-left justified, witnessed by the fact that `cells` is a lower set in `ℕ × ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.isLowerSet\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">isLowerSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/UpperLower/Basic.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.cells</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L64-L64","name":"YoungDiagram.cells","line":64,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells","doc":"A finite set which represents a finite collection of cells on the `ℕ × ℕ` grid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L62-L62","name":"YoungDiagram.mk","line":62,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cells : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isLowerSet : <span class=\"fn\"><a href=\"./Mathlib/Order/UpperLower/Basic.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\">cells</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L62-L66","name":"YoungDiagram","line":62,"kind":"structure","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram","doc":"A Young diagram is a finite collection of cells on the `ℕ × ℕ` grid such that whenever\na cell is present, so are all the ones above and to the left of it. Like matrices, an `(i, j)` cell\nis a cell in row `i` and column `j`, where rows are enumerated downward and columns rightward.\n\nYoung diagrams are modeled as finite sets in `ℕ × ℕ` that are lower sets with respect to the\nstandard order on products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\"><span class=\"name\">YoungDiagram</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L61-L61","name":"YoungDiagram.ext","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cells : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.cells</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/YoungDiagram.lean#L61-L61","name":"YoungDiagram.ext_iff","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.cells</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.cells</span></span></span></div></div>"}]}