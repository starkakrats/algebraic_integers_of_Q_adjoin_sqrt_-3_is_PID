{"name":"Mathlib.Tactic.Polyrith","instances":[{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instBEqPoly","className":"BEq"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instReprPoly","className":"Repr"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instToFormatPoly","className":"Std.ToFormat"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instToStringPoly","className":"ToString"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instReprPoly_1","className":"Repr"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instInhabitedPoly","className":"Inhabited"},{"typeNames":["Int","Lean.Name.mkStr1"],"name":"Mathlib.Tactic.Polyrith.instQuoteIntMkStr1","className":"Lean.Quote"},{"typeNames":["Rat","Lean.Name.mkStr1"],"name":"Mathlib.Tactic.Polyrith.instQuoteRatMkStr1","className":"Lean.Quote"},{"typeNames":["Mathlib.Tactic.Polyrith.Poly"],"name":"Mathlib.Tactic.Polyrith.instFromJsonPoly","className":"Lean.FromJson"},{"typeNames":["Mathlib.Tactic.Polyrith.SageCoeffAndPower"],"name":"Mathlib.Tactic.Polyrith.instFromJsonSageCoeffAndPower","className":"Lean.FromJson"},{"typeNames":["Mathlib.Tactic.Polyrith.SageCoeffAndPower"],"name":"Mathlib.Tactic.Polyrith.instReprSageCoeffAndPower","className":"Repr"},{"typeNames":["Mathlib.Tactic.Polyrith.SageSuccess"],"name":"Mathlib.Tactic.Polyrith.instFromJsonSageSuccess","className":"Lean.FromJson"},{"typeNames":["Mathlib.Tactic.Polyrith.SageSuccess"],"name":"Mathlib.Tactic.Polyrith.instReprSageSuccess","className":"Repr"},{"typeNames":["Mathlib.Tactic.Polyrith.SageError"],"name":"Mathlib.Tactic.Polyrith.instFromJsonSageError","className":"Lean.FromJson"},{"typeNames":["Mathlib.Tactic.Polyrith.SageResult"],"name":"Mathlib.Tactic.Polyrith.instFromJsonSageResult","className":"Lean.FromJson"}],"imports":["Init","Mathlib.Data.Rat.Basic","Mathlib.Tactic.LinearCombination"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L379-L418","name":"Mathlib.Tactic.Polyrith.«tacticPolyrithOnly[_]»","line":379,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.«tacticPolyrithOnly[_]»","doc":"Attempts to prove polynomial equality goals through polynomial arithmetic\non the hypotheses (and additional proof terms if the user specifies them).\nIt proves the goal by generating an appropriate call to the tactic\n`linear_combination`. If this call succeeds, the call to `linear_combination`\nis suggested to the user.\n\n* `polyrith` will use all relevant hypotheses in the local context.\n* `polyrith [t1, t2, t3]` will add proof terms t1, t2, t3 to the local context.\n* `polyrith only [h1, h2, h3, t1, t2, t3]` will use only local hypotheses\n  `h1`, `h2`, `h3`, and proofs `t1`, `t2`, `t3`. It will ignore the rest of the local context.\n\nNotes:\n* This tactic only works with a working internet connection, since it calls Sage\n  using the SageCell web API at <https://sagecell.sagemath.org/>.\n  Many thanks to the Sage team and organization for allowing this use.\n* This tactic assumes that the user has `python3` installed and available on the path.\n  (Test by opening a terminal and executing `python3 --version`.)\n  It also assumes that the `requests` library is installed: `python3 -m pip install requests`.\n\nExamples:\n\n```lean\nexample (x y : ℚ) (h1 : x*y + 2*x = 1) (h2 : x = y) :\n  x*y = -2*y + 1 :=\nby polyrith\n-- Try this: linear_combination h1 - 2 * h2\n\nexample (x y z w : ℚ) (hzw : z = w) : x*z + 2*y*z = x*w + 2*y*w :=\nby polyrith\n-- Try this: linear_combination (2 * y + x) * hzw\n\nconstant scary : ∀ a b : ℚ, a + b = 0\n\nexample (a b c d : ℚ) (h : a + b = 0) (h2: b + c = 0) : a + b + c + d = 0 :=\nby polyrith only [scary c d, h]\n-- Try this: linear_combination scary c d + h\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.«tacticPolyrithOnly[_]»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">«tacticPolyrithOnly[_]»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L344-L349","name":"Mathlib.Tactic.Polyrith.polyrith.byRing","line":344,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.polyrith.byRing","doc":"Try to prove the goal by `ring` and fail with the given message otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.polyrith.byRing\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">polyrith</span>.<span class=\"name\">byRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">Mathlib.Tactic.AtomM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L337-L377","name":"Mathlib.Tactic.Polyrith.polyrith","line":337,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.polyrith","doc":"This is the main body of the `polyrith` tactic. It takes in the following inputs:\n* `only : Bool` - This represents whether the user used the key word \"only\"\n* `hyps : Array Expr` - the hypotheses/proof terms selected by the user\n* `traceOnly : Bool` - If enabled, the returned syntax will be `.missing`\n\nFirst, the tactic converts the target into a `Poly`, and finds out what type it\nis an equality of. (It also fills up a list of `Expr`s with its atoms). Then, it\ncollects all the relevant hypotheses/proof terms from the context, and from those\nselected by the user, taking into account whether `only` is true. (The list of atoms is\nupdated accordingly as well).\n\nThis information is used to create a list of args that get used in a call to\nthe appropriate python file that executes a grobner basis computation. The\noutput of this computation is a `String` representing the certificate. This\nstring is parsed into a list of `Poly` objects that are then converted into\n`Expr`s (using the updated list of atoms).\n\nthe names of the hypotheses, along with the corresponding coefficients are\ngiven to `linear_combination`. If that tactic succeeds, the user is prompted\nto replace the call to `polyrith` with the appropriate call to\n`linear_combination`.\n\nReturns `.error g` if this was a \"dry run\" attempt that does not actually invoke sage.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.polyrith\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">polyrith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(g : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(only : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(traceOnly : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L300-L310","name":"Mathlib.Tactic.Polyrith.sageOutput","line":300,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.sageOutput","doc":"This tactic calls python from the command line with the args in `arg_list`.\nThe output printed to the console is parsed as a `Json`.\nIt assumes that `python3` is available on the path.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.sageOutput\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">sageOutput</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(args : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageResult\">Mathlib.Tactic.Polyrith.SageResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L289-L293","name":"Mathlib.Tactic.Polyrith.instFromJsonSageResult","line":289,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instFromJsonSageResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageResult\">Mathlib.Tactic.Polyrith.SageResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L287-L287","name":"Mathlib.Tactic.Polyrith.SageResult","line":287,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageResult","doc":"The result of a sage call. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L284-L284","name":"Mathlib.Tactic.Polyrith.instFromJsonSageError","line":284,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instFromJsonSageError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError\">Mathlib.Tactic.Polyrith.SageError</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L283-L283","name":"Mathlib.Tactic.Polyrith.SageError.value","line":283,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.value","doc":"The error message "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.value\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageError</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError\">Mathlib.Tactic.Polyrith.SageError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L281-L281","name":"Mathlib.Tactic.Polyrith.SageError.name","line":281,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.name","doc":"The error kind "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.name\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageError</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError\">Mathlib.Tactic.Polyrith.SageError</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L279-L279","name":"Mathlib.Tactic.Polyrith.SageError.mk","line":279,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageError</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(value : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError\">Mathlib.Tactic.Polyrith.SageError</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L279-L284","name":"Mathlib.Tactic.Polyrith.SageError","line":279,"kind":"structure","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError","doc":"The result of a sage call in the failure case. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L276-L276","name":"Mathlib.Tactic.Polyrith.instReprSageSuccess","line":276,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprSageSuccess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprSageSuccess\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instReprSageSuccess</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess\">Mathlib.Tactic.Polyrith.SageSuccess</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L276-L276","name":"Mathlib.Tactic.Polyrith.instFromJsonSageSuccess","line":276,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageSuccess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageSuccess\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instFromJsonSageSuccess</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess\">Mathlib.Tactic.Polyrith.SageSuccess</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L275-L275","name":"Mathlib.Tactic.Polyrith.SageSuccess.data","line":275,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.data","doc":"The main result of the function call is an array of polynomials\nparallel to the input list of hypotheses and an exponent for the goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.data\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageSuccess</span>.<span class=\"name\">data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess\">Mathlib.Tactic.Polyrith.SageSuccess</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\">Mathlib.Tactic.Polyrith.SageCoeffAndPower</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L272-L272","name":"Mathlib.Tactic.Polyrith.SageSuccess.trace","line":272,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.trace","doc":"The script returns a string containing python script to be sent to the remote server,\nwhen the tracing option is set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.trace\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageSuccess</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess\">Mathlib.Tactic.Polyrith.SageSuccess</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L269-L269","name":"Mathlib.Tactic.Polyrith.SageSuccess.mk","line":269,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageSuccess</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(trace : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(data : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\">Mathlib.Tactic.Polyrith.SageCoeffAndPower</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess\">Mathlib.Tactic.Polyrith.SageSuccess</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L269-L276","name":"Mathlib.Tactic.Polyrith.SageSuccess","line":269,"kind":"structure","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess","doc":"The result of a sage call in the success case. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageSuccess\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageSuccess</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L266-L266","name":"Mathlib.Tactic.Polyrith.instReprSageCoeffAndPower","line":266,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprSageCoeffAndPower","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprSageCoeffAndPower\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instReprSageCoeffAndPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\">Mathlib.Tactic.Polyrith.SageCoeffAndPower</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L266-L266","name":"Mathlib.Tactic.Polyrith.instFromJsonSageCoeffAndPower","line":266,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageCoeffAndPower","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonSageCoeffAndPower\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instFromJsonSageCoeffAndPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\">Mathlib.Tactic.Polyrith.SageCoeffAndPower</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L265-L265","name":"Mathlib.Tactic.Polyrith.SageCoeffAndPower.power","line":265,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower.power","doc":"Sage produces an exponent (default 1) in the case where the hypothesess\nsum to a power of the goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower.power\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageCoeffAndPower</span>.<span class=\"name\">power</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\">Mathlib.Tactic.Polyrith.SageCoeffAndPower</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L262-L262","name":"Mathlib.Tactic.Polyrith.SageCoeffAndPower.coeffs","line":262,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower.coeffs","doc":"The function call produces an array of polynomials\nparallel to the input list of hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower.coeffs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageCoeffAndPower</span>.<span class=\"name\">coeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\">Mathlib.Tactic.Polyrith.SageCoeffAndPower</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L259-L259","name":"Mathlib.Tactic.Polyrith.SageCoeffAndPower.mk","line":259,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageCoeffAndPower</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(coeffs : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(power : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\">Mathlib.Tactic.Polyrith.SageCoeffAndPower</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L259-L266","name":"Mathlib.Tactic.Polyrith.SageCoeffAndPower","line":259,"kind":"structure","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower","doc":"A schema for the data reported by the Sage calculation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.SageCoeffAndPower\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">SageCoeffAndPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L250-L256","name":"Mathlib.Tactic.Polyrith.instFromJsonPoly","line":250,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonPoly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instFromJsonPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L247-L248","name":"Mathlib.Tactic.Polyrith.Poly.sumM","line":247,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.sumM","doc":"Constructs a sum from a monadic function supplying the monomials. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.sumM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">sumM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L241-L244","name":"Mathlib.Tactic.Polyrith.Poly.pow'","line":241,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.pow'","doc":"Constructs a power expression `v_i ^ j`, performing some simplifications in trivial cases. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.pow'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pow'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L234-L238","name":"Mathlib.Tactic.Polyrith.Poly.unDiv?","line":234,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.unDiv?","doc":"Extracts the divisor `c : ℕ` from a polynomial of the form `1/c * b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.unDiv?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">unDiv?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L227-L231","name":"Mathlib.Tactic.Polyrith.Poly.mul'","line":227,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.mul'","doc":"Multiplies two polynomials, performing some simple simplifications for presentation like\n`1 * a = a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.mul'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L216-L223","name":"Mathlib.Tactic.Polyrith.Poly.add'","line":216,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.add'","doc":"Adds two polynomials, performing some simple simplifications for presentation like\n`a + -b = a - b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.add'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">add'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L208-L212","name":"Mathlib.Tactic.Polyrith.Poly.unNeg?","line":208,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.unNeg?","doc":"Removes an initial `-` sign from a polynomial with negative leading coefficient. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.unNeg?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">unNeg?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L203-L205","name":"Mathlib.Tactic.Polyrith.instFromJsonRat","line":203,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonRat","doc":"A JSON parser for `ℚ` specific to the return value of `polyrith_sage.py`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instFromJsonRat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instFromJsonRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L197-L200","name":"Mathlib.Tactic.Polyrith.createSageArgs","line":197,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.createSageArgs","doc":"Constructs the list of arguments to pass to the external sage script `polyrith_sage.py`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.createSageArgs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">createSageArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(trace : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(atoms : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\">Mathlib.Tactic.Polyrith.Source</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tgt : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L183-L187","name":"Mathlib.Tactic.Polyrith.parseContext.processHyp","line":183,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parseContext.processHyp","doc":"Parses a hypothesis and adds it to the `out` list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parseContext.processHyp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">parseContext</span>.<span class=\"name\">processHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(sα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Ring/Basic.html#Mathlib.Tactic.Ring.Cache\">Mathlib.Tactic.Ring.Cache</a> <span class=\"fn\">sα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(src : <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\">Mathlib.Tactic.Polyrith.Source</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(out : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\">Mathlib.Tactic.Polyrith.Source</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">Mathlib.Tactic.AtomM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\">Mathlib.Tactic.Polyrith.Source</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L170-L194","name":"Mathlib.Tactic.Polyrith.parseContext","line":170,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parseContext","doc":"The first half of `polyrith` produces a list of arguments to be sent to Sage. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parseContext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">parseContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(only : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tgt : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">Mathlib.Tactic.AtomM</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\">Mathlib.Tactic.Polyrith.Source</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L166-L167","name":"Mathlib.Tactic.Polyrith.Source.fvar","line":166,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source.fvar","doc":"`fvar h` refers to hypothesis `h` from the local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source.fvar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Source</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\">Mathlib.Tactic.Polyrith.Source</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L164-L165","name":"Mathlib.Tactic.Polyrith.Source.input","line":164,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source.input","doc":"`input n` refers to the `n`'th input `ai` in `polyrith [a1, ..., an]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source.input\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Source</span>.<span class=\"name\">input</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\">Mathlib.Tactic.Polyrith.Source</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L163-L167","name":"Mathlib.Tactic.Polyrith.Source","line":163,"kind":"inductive","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source","doc":"The possible hypothesis sources for a polyrith proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Source\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Source</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L134-L160","name":"Mathlib.Tactic.Polyrith.parse","line":134,"kind":"opaque","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parse","doc":"Reifies a ring expression of type `α` as a `Poly`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.parse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">parse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{u : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(sα : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommSemiring\">CommSemiring</a> <span class=\"fn\">«$α»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Ring/Basic.html#Mathlib.Tactic.Ring.Cache\">Mathlib.Tactic.Ring.Cache</a> <span class=\"fn\">sα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\">Q(<span class=\"fn\">«$α»</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Util/AtomM.html#Mathlib.Tactic.AtomM\">Mathlib.Tactic.AtomM</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L122-L131","name":"Mathlib.Tactic.Polyrith.Poly.toSyntax","line":122,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.toSyntax","doc":"Converts a `Poly` expression into a `Syntax` suitable as an input to `linear_combination`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.toSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">toSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(vars : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <span class=\"fn\"><a href=\"./Lean/Hygiene.html#Lean.Unhygienic\">Lean.Unhygienic</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L115-L118","name":"Mathlib.Tactic.Polyrith.instQuoteRatMkStr1","line":115,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instQuoteRatMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instQuoteRatMkStr1\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instQuoteRatMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L111-L113","name":"Mathlib.Tactic.Polyrith.instQuoteIntMkStr1","line":111,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instQuoteIntMkStr1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instQuoteIntMkStr1\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instQuoteIntMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Lean.Quote</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L109-L109","name":"Mathlib.Tactic.Polyrith.instInhabitedPoly","line":109,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instInhabitedPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instInhabitedPoly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instInhabitedPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L108-L108","name":"Mathlib.Tactic.Polyrith.instReprPoly_1","line":108,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprPoly_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprPoly_1\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instReprPoly_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L107-L107","name":"Mathlib.Tactic.Polyrith.instToStringPoly","line":107,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instToStringPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instToStringPoly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instToStringPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L106-L106","name":"Mathlib.Tactic.Polyrith.instToFormatPoly","line":106,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instToFormatPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instToFormatPoly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instToFormatPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Lean.ToFormat</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L95-L104","name":"Mathlib.Tactic.Polyrith.Poly.format","line":95,"kind":"def","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.format","doc":"This converts a poly object into a string representing it. The string\nmaintains the semantic structure of the poly object.\n\nThe output of this function must be valid Python syntax, and it assumes the variables `varN` from\n`scripts/polyrith.py.`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.format\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Lean.Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L86-L86","name":"Mathlib.Tactic.Polyrith.instReprPoly","line":86,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instReprPoly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instReprPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L86-L86","name":"Mathlib.Tactic.Polyrith.instBEqPoly","line":86,"kind":"instance","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instBEqPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.instBEqPoly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">instBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L85-L85","name":"Mathlib.Tactic.Polyrith.Poly.neg","line":85,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.neg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L84-L84","name":"Mathlib.Tactic.Polyrith.Poly.pow","line":84,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.pow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L83-L83","name":"Mathlib.Tactic.Polyrith.Poly.div","line":83,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.div\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L82-L82","name":"Mathlib.Tactic.Polyrith.Poly.mul","line":82,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.mul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L81-L81","name":"Mathlib.Tactic.Polyrith.Poly.sub","line":81,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.sub\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L80-L80","name":"Mathlib.Tactic.Polyrith.Poly.add","line":80,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.add\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L79-L79","name":"Mathlib.Tactic.Polyrith.Poly.hyp","line":79,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.hyp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.hyp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">hyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L78-L78","name":"Mathlib.Tactic.Polyrith.Poly.var","line":78,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.var\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L77-L77","name":"Mathlib.Tactic.Polyrith.Poly.const","line":77,"kind":"ctor","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly.const\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Rat/Basic.html#Rat\">ℚ</a> → <a href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\">Mathlib.Tactic.Polyrith.Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Polyrith.lean#L76-L86","name":"Mathlib.Tactic.Polyrith.Poly","line":76,"kind":"inductive","docLink":"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly","doc":"A datatype representing the semantics of multivariable polynomials.\nEach `poly` can be converted into a string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Polyrith.html#Mathlib.Tactic.Polyrith.Poly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Polyrith</span>.<span class=\"name\">Poly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}