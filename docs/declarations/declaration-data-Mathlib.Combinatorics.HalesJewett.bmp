{"name":"Mathlib.Combinatorics.HalesJewett","instances":[{"typeNames":["Combinatorics.Line"],"name":"Combinatorics.Line.instCoeFunLineForAll","className":"CoeFun"},{"typeNames":["Combinatorics.Line"],"name":"Combinatorics.Line.instInhabitedLine","className":"Inhabited"},{"typeNames":["Combinatorics.Line.AlmostMono"],"name":"Combinatorics.Line.instInhabitedAlmostMonoForAllOptionDefault","className":"Inhabited"},{"typeNames":["Combinatorics.Line.ColorFocused"],"name":"Combinatorics.Line.instInhabitedColorFocused","className":"Inhabited"}],"imports":["Init","Mathlib.Data.Fintype.Option","Mathlib.Data.Fintype.Pi","Mathlib.Data.Fintype.Sum","Mathlib.Algebra.BigOperators.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L342-L368","name":"Combinatorics.exists_mono_homothetic_copy","line":342,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.exists_mono_homothetic_copy","doc":"A generalization of Van der Waerden's theorem: if `M` is a finitely colored commutative\nmonoid, and `S` is a finite subset, then there exists a monochromatic homothetic copy of `S`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.exists_mono_homothetic_copy\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">exists_mono_homothetic_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(S : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset\">Finset</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ a &gt; <span class=\"fn\">0</span>, <span class=\"fn\">∃ (b : <span class=\"fn\">M</span>) (c : <span class=\"fn\">κ</span>), <span class=\"fn\">∀ <span class=\"fn\">s</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Group/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L330-L335","name":"Combinatorics.Line.exists_mono_in_high_dimension","line":330,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.exists_mono_in_high_dimension","doc":"The Hales-Jewett theorem: for any finite types `α` and `κ`, there exists a finite type `ι` such\nthat whenever the hypercube `ι → α` is `κ`-colored, there is a monochromatic combinatorial line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.exists_mono_in_high_dimension\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">exists_mono_in_high_dimension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(κ : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (ι : <a href=\"./foundational_types.html\">Type</a>) (x : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>), <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>), <span class=\"fn\">∃ (l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\">Combinatorics.Line.IsMono</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L213-L214","name":"Combinatorics.Line.diagonal_apply","line":213,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">diagonal_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal\">Combinatorics.Line.diagonal</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L206-L209","name":"Combinatorics.Line.prod_apply","line":206,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">prod_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod\">Combinatorics.Line.prod</a> <span class=\"fn\">l</span> <span class=\"fn\">l'</span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l'</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L199-L202","name":"Combinatorics.Line.horizontal_apply","line":199,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">horizontal_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal\">Combinatorics.Line.horizontal</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L192-L195","name":"Combinatorics.Line.vertical_apply","line":192,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">vertical_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical\">Combinatorics.Line.vertical</a> <span class=\"fn\">v</span> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι'</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L186-L188","name":"Combinatorics.Line.map_apply","line":186,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map_apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α'</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map\">Combinatorics.Line.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L181-L182","name":"Combinatorics.Line.apply_of_ne_none","line":181,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_of_ne_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_of_ne_none\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">apply_of_ne_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L177-L178","name":"Combinatorics.Line.apply_none","line":177,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply_none\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">apply_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L173-L174","name":"Combinatorics.Line.apply","line":173,"kind":"theorem","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.apply\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L168-L170","name":"Combinatorics.Line.prod","line":168,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod","doc":"One line in `ι → α` and one in `ι' → α` together determine a line in `ι ⊕ ι' → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.prod\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L162-L164","name":"Combinatorics.Line.horizontal","line":162,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal","doc":"A line in `ι → α` and a point in `ι' → α` determine a line in `ι ⊕ ι' → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.horizontal\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">horizontal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L156-L158","name":"Combinatorics.Line.vertical","line":156,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical","doc":"A point in `ι → α` and a line in `ι' → α` determine a line in `ι ⊕ ι' → α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.vertical\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">vertical</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">ι'</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L150-L152","name":"Combinatorics.Line.map","line":150,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map","doc":"A function `f : α → α'` determines a function `line α ι → line α' ι`. For a coordinate `i`,\n`l.map f` is the identity at `i` if `l` is, and constantly `f y` if `l` is constantly `y` at `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.map\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α' : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α'</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L144-L146","name":"Combinatorics.Line.instInhabitedColorFocused","line":144,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedColorFocused","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedColorFocused\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instInhabitedColorFocused</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L141-L141","name":"Combinatorics.Line.ColorFocused.distinct_colors","line":141,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.distinct_colors","doc":"The proposition that all lines in a color-focused collection of lines have distinct colors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.distinct_colors\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">distinct_colors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Nodup.html#Multiset.Nodup\">Multiset.Nodup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.map\">Multiset.map</a> <span class=\"fn\">Combinatorics.Line.AlmostMono.color</span> <span class=\"fn\"><span class=\"fn\">self</span>.lines</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L139-L139","name":"Combinatorics.Line.ColorFocused.is_focused","line":139,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.is_focused","doc":"The proposition that all lines in a color-focused collection have the same endpoint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.is_focused\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">is_focused</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">self</span>.lines</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\"><span class=\"fn\">p</span>.line</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.focus</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L137-L137","name":"Combinatorics.Line.ColorFocused.focus","line":137,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.focus","doc":"The common endpoint of the lines in the color-focused collection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.focus\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">focus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L135-L135","name":"Combinatorics.Line.ColorFocused.lines","line":135,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.lines","doc":"The underlying multiset of almost monochromatic lines of a color-focused collection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.lines\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">lines</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L133-L133","name":"Combinatorics.Line.ColorFocused.mk","line":133,"kind":"ctor","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused.mk\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lines : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset\">Multiset</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(focus : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(is_focused : <span class=\"fn\">∀ <span class=\"fn\">p</span> ∈ <span class=\"fn\">lines</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\"><span class=\"fn\">p</span>.line</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">none</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">focus</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(distinct_colors : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Nodup.html#Multiset.Nodup\">Multiset.Nodup</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Basic.html#Multiset.map\">Multiset.map</a> <span class=\"fn\">Combinatorics.Line.AlmostMono.color</span> <span class=\"fn\">lines</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\">Combinatorics.Line.ColorFocused</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L133-L141","name":"Combinatorics.Line.ColorFocused","line":133,"kind":"structure","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused","doc":"The type of collections of lines such that\n- each line is only one color except possibly at its endpoint\n- the lines all have the same endpoint\n- the colors of the lines are distinct.\nUsed in the proof `exists_mono_in_high_dimension`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.ColorFocused\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">ColorFocused</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_1 u_2) u_3)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L122-L126","name":"Combinatorics.Line.instInhabitedAlmostMonoForAllOptionDefault","line":122,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedAlmostMonoForAllOptionDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedAlmostMonoForAllOptionDefault\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instInhabitedAlmostMonoForAllOptionDefault</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">κ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>) =&gt; <span class=\"fn\">default</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L119-L119","name":"Combinatorics.Line.AlmostMono.has_color","line":119,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.has_color","doc":"The proposition that the underlying line of an almost monochromatic line assumes its main\ncolor except possibly at the endpoints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.has_color\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">has_color</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\"><span class=\"fn\">self</span>.line</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.color</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L116-L116","name":"Combinatorics.Line.AlmostMono.color","line":116,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.color","doc":"The main color of an almost monochromatic line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.color\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">color</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">κ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L114-L114","name":"Combinatorics.Line.AlmostMono.line","line":114,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.line","doc":"The underlying line of an almost monochromatic line, where the coordinate dimension `α` is\nextended by an additional symbol `none`, thought to be marking the endpoint of the line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.line\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">line</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L111-L111","name":"Combinatorics.Line.AlmostMono.mk","line":111,"kind":"ctor","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono.mk\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(line : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(color : <span class=\"fn\">κ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(has_color : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.getD\">Option.getD</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">line</span> <span class=\"fn\">i</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">color</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\">Combinatorics.Line.AlmostMono</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L111-L119","name":"Combinatorics.Line.AlmostMono","line":111,"kind":"structure","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono","doc":"The type of lines that are only one color except possibly at their endpoints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.AlmostMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">AlmostMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u_1 u_2) u_3)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L107-L108","name":"Combinatorics.Line.instInhabitedLine","line":107,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedLine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instInhabitedLine\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instInhabitedLine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L102-L104","name":"Combinatorics.Line.diagonal","line":102,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal","doc":"The diagonal line. It is the identity at every coordinate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.diagonal\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">diagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L97-L98","name":"Combinatorics.Line.IsMono","line":97,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono","doc":"A line is monochromatic if all its points are the same color. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.IsMono\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">IsMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{κ : <a href=\"./foundational_types.html\">Sort</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(C : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\">κ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L93-L94","name":"Combinatorics.Line.instCoeFunLineForAll","line":93,"kind":"instance","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instCoeFunLineForAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.instCoeFunLineForAll\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">instCoeFunLineForAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L87-L87","name":"Combinatorics.Line.proper","line":87,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.proper","doc":"We require combinatorial lines to be nontrivial in the sense that `fun x ↦ l x i` is `id` for\nat least one coordinate `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.proper\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">proper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (i : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\">Combinatorics.Line.idxFun</a> <span class=\"fn\">self</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L84-L84","name":"Combinatorics.Line.idxFun","line":84,"kind":"def","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun","doc":"The word representing a combinatorial line. `l.idxfun i = none` means that\n`l x i = x` for all `x` and `l.idxfun i = some y` means that `l x i = y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.idxFun\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">idxFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L81-L81","name":"Combinatorics.Line.mk","line":81,"kind":"ctor","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line.mk\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(idxFun : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(proper : <span class=\"fn\">∃ (i : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">idxFun</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">none</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\">Combinatorics.Line</a> <span class=\"fn\">α</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/HalesJewett.lean#L81-L87","name":"Combinatorics.Line","line":81,"kind":"structure","docLink":"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line","doc":"The type of combinatorial lines. A line `l : Line α ι` in the hypercube `ι → α` defines a\nfunction `α → ι → α` from `α` to the hypercube, such that for each coordinate `i : ι`, the function\n`fun x ↦ l x i` is either `id` or constant. We require lines to be nontrivial in the sense that\n`fun x ↦ l x i` is `id` for at least one `i`.\n\nFormally, a line is represented by a word `l.idxFun : ι → Option α` which says whether\n`fun x ↦ l x i` is `id` (corresponding to `l.idxFun i = none`) or constantly `y` (corresponding to\n`l.idxFun i = some y`).\n\nWhen `α` has size `1` there can be many elements of `Line α ι` defining the same function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/HalesJewett.html#Combinatorics.Line\"><span class=\"name\">Combinatorics</span>.<span class=\"name\">Line</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ι : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}