{"name":"Mathlib.Order.GameAdd","instances":[],"imports":["Init","Mathlib.Data.Sym.Sym2","Mathlib.Logic.Relation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L247-L251","name":"Sym2.GameAdd.induction","line":247,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.induction","doc":"Induction on the well-founded `Sym2.GameAdd` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.induction\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span> →\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a₁ </span>b₁ : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a₂ </span>b₂ : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span></span></span>)</span> → <span class=\"fn\">∀ (<span class=\"fn\">a </span>b : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L238-L243","name":"Sym2.GameAdd.fix_eq","line":238,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix_eq\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">fix_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IH : <span class=\"fn\">(<span class=\"fn\">a₁ </span>b₁ : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a₂ </span>b₂ : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix\">Sym2.GameAdd.fix</a> <span class=\"fn\">hr</span> <span class=\"fn\">IH</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">IH</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">fun (<span class=\"fn\">a'</span> b' : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a'</span>, <span class=\"fn\">b'</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix\">Sym2.GameAdd.fix</a> <span class=\"fn\">hr</span> <span class=\"fn\">IH</span> <span class=\"fn\">a'</span> <span class=\"fn\">b'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L228-L235","name":"Sym2.GameAdd.fix","line":228,"kind":"def","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix","doc":"Recursion on the well-founded `Sym2.GameAdd` relation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fix\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IH : <span class=\"fn\">(<span class=\"fn\">a₁ </span>b₁ : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a₂ </span>b₂ : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L219-L220","name":"WellFounded.sym2_gameAdd","line":219,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#WellFounded.sym2_gameAdd","doc":"The `Sym2.GameAdd` relation on well-founded inputs is well-founded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#WellFounded.sym2_gameAdd\"><span class=\"name\">WellFounded</span>.<span class=\"name\">sym2_gameAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L201-L215","name":"Acc.sym2_gameAdd","line":201,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Acc.sym2_gameAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Acc.sym2_gameAdd\"><span class=\"name\">Acc</span>.<span class=\"name\">sym2_gameAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">rα</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">rα</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span></span>)</span> <span class=\"fn\">s(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L194-L196","name":"Sym2.GameAdd.snd_fst","line":194,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.snd_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.snd_fst\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">snd_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">rα</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">b</span>, <span class=\"fn\">a₁</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a₂</span>, <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L189-L191","name":"Sym2.GameAdd.fst_snd","line":189,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fst_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fst_snd\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">fst_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">rα</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a₁</span>, <span class=\"fn\">b</span>)</span> <span class=\"fn\">s(<span class=\"fn\">b</span>, <span class=\"fn\">a₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L185-L186","name":"Sym2.GameAdd.snd","line":185,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.snd\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">rα</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a</span>, <span class=\"fn\">b₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L181-L182","name":"Sym2.GameAdd.fst","line":181,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd.fst\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">rα</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a₁</span>, <span class=\"fn\">b</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a₂</span>, <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L176-L178","name":"Prod.GameAdd.to_sym2","line":176,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.to_sym2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.to_sym2\"><span class=\"name\">Prod</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">to_sym2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rα</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L170-L173","name":"Sym2.gameAdd_mk'_iff","line":170,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.gameAdd_mk'_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.gameAdd_mk'_iff\"><span class=\"name\">Sym2</span>.<span class=\"name\">gameAdd_mk'_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">s(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">s(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rα</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rα</span> <span class=\"fn\">(<span class=\"fn\">b₁</span>, <span class=\"fn\">a₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L164-L167","name":"Sym2.gameAdd_iff","line":164,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Sym2.gameAdd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.gameAdd_iff\"><span class=\"name\">Sym2</span>.<span class=\"name\">gameAdd_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\">Sym2.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">Sym2.mk</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">Sym2.mk</a> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rα</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rα</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Prod/Basic.html#Prod.swap\">Prod.swap</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L155-L161","name":"Sym2.GameAdd","line":155,"kind":"def","docLink":"./Mathlib/Order/GameAdd.html#Sym2.GameAdd","doc":"`Sym2.GameAdd rα x y` means that `x` can be reached from `y` by decreasing either entry with\nrespect to the relation `rα`.\n\nSee `Prod.GameAdd` for the ordered pair analog. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Sym2.GameAdd\"><span class=\"name\">Sym2</span>.<span class=\"name\">GameAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L138-L142","name":"Prod.GameAdd.induction","line":138,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.induction","doc":"Induction on the well-founded `Prod.GameAdd` relation.\nNote that it's strictly more general to induct on the lexicographic order instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.induction\"><span class=\"name\">Prod</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rβ</span></span> →\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a₁</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b₁</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b₂</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span></span></span>)</span> →\n      <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L130-L133","name":"Prod.GameAdd.fix_eq","line":130,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix_eq\"><span class=\"name\">Prod</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">fix_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hα : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hβ : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rβ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IH : <span class=\"fn\">(<span class=\"fn\">a₁</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b₁</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b₂</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix\">Prod.GameAdd.fix</a> <span class=\"fn\">hα</span> <span class=\"fn\">hβ</span> <span class=\"fn\">IH</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">IH</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">fun (<span class=\"fn\">a'</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a'</span>, <span class=\"fn\">b'</span>)</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix\">Prod.GameAdd.fix</a> <span class=\"fn\">hα</span> <span class=\"fn\">hβ</span> <span class=\"fn\">IH</span> <span class=\"fn\">a'</span> <span class=\"fn\">b'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L123-L127","name":"Prod.GameAdd.fix","line":123,"kind":"def","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix","doc":"Recursion on the well-founded `Prod.GameAdd` relation.\nNote that it's strictly more general to recurse on the lexicographic order instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fix\"><span class=\"name\">Prod</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Sort</a> u_3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hα : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hβ : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rβ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(IH : <span class=\"fn\">(<span class=\"fn\">a₁</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b₁</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">b₂</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L114-L116","name":"WellFounded.prod_gameAdd","line":114,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#WellFounded.prod_gameAdd","doc":"The `Prod.GameAdd` relation on well-founded inputs is well-founded.\n\nIn particular, the sum of two well-founded games is well-founded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#WellFounded.prod_gameAdd\"><span class=\"name\">WellFounded</span>.<span class=\"name\">prod_gameAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hα : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rα</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hβ : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">rβ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L102-L108","name":"Acc.prod_gameAdd","line":102,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Acc.prod_gameAdd","doc":"If `a` is accessible under `rα` and `b` is accessible under `rβ`, then `(a, b)` is\naccessible under `Prod.GameAdd rα rβ`. Notice that `Prod.lexAccessible` requires the\nstronger condition `∀ b, Acc rβ b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Acc.prod_gameAdd\"><span class=\"name\">Acc</span>.<span class=\"name\">prod_gameAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ha : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">rα</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hb : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">rβ</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L91-L94","name":"Prod.rprod_le_transGen_gameAdd","line":91,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.rprod_le_transGen_gameAdd","doc":"`Prod.RProd` is a subrelation of the transitive closure of `Prod.GameAdd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.rprod_le_transGen_gameAdd\"><span class=\"name\">Prod</span>.<span class=\"name\">rprod_le_transGen_gameAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/WF.html#Prod.RProd\">Prod.RProd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.TransGen\">Relation.TransGen</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L86-L87","name":"Prod.gameAdd_le_lex","line":86,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_le_lex","doc":"`Prod.GameAdd` is a subrelation of `Prod.Lex`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.gameAdd_le_lex\"><span class=\"name\">Prod</span>.<span class=\"name\">gameAdd_le_lex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/WF.html#Prod.Lex\">Prod.Lex</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L80-L82","name":"Prod.gameAdd_swap_swap_mk","line":80,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_swap_swap_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.gameAdd_swap_swap_mk\"><span class=\"name\">Prod</span>.<span class=\"name\">gameAdd_swap_swap_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₁ : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b₂ : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rβ</span> <span class=\"fn\">rα</span> <span class=\"fn\">(<span class=\"fn\">b₁</span>, <span class=\"fn\">a₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">b₂</span>, <span class=\"fn\">a₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L76-L77","name":"Prod.gameAdd_swap_swap","line":76,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_swap_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.gameAdd_swap_swap\"><span class=\"name\">Prod</span>.<span class=\"name\">gameAdd_swap_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rβ</span> <span class=\"fn\">rα</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Prod/Basic.html#Prod.swap\">Prod.swap</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Prod/Basic.html#Prod.swap\">Prod.swap</a> <span class=\"fn\">b</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L70-L72","name":"Prod.gameAdd_mk_iff","line":70,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_mk_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.gameAdd_mk_iff\"><span class=\"name\">Prod</span>.<span class=\"name\">gameAdd_mk_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b₂</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rα</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b₂</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rβ</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L60-L67","name":"Prod.gameAdd_iff","line":60,"kind":"theorem","docLink":"./Mathlib/Order/GameAdd.html#Prod.gameAdd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.gameAdd_iff\"><span class=\"name\">Prod</span>.<span class=\"name\">gameAdd_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rα</span> <span class=\"fn\"><span class=\"fn\">x</span>.1</span> <span class=\"fn\"><span class=\"fn\">y</span>.1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.2</span></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rβ</span> <span class=\"fn\"><span class=\"fn\">x</span>.2</span> <span class=\"fn\"><span class=\"fn\">y</span>.2</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L57-L57","name":"Prod.GameAdd.snd","line":57,"kind":"ctor","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.snd\"><span class=\"name\">Prod</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₁ : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b₂ : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rβ</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b₁</span>)</span> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\">b₂</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L56-L56","name":"Prod.GameAdd.fst","line":56,"kind":"ctor","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd.fst\"><span class=\"name\">Prod</span>.<span class=\"name\">GameAdd</span>.<span class=\"name\">fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₁ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a₂ : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rα</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\">Prod.GameAdd</a> <span class=\"fn\">rα</span> <span class=\"fn\">rβ</span> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<span class=\"fn\">a₂</span>, <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/GameAdd.lean#L55-L57","name":"Prod.GameAdd","line":55,"kind":"inductive","docLink":"./Mathlib/Order/GameAdd.html#Prod.GameAdd","doc":"`Prod.GameAdd rα rβ x y` means that `x` can be reached from `y` by decreasing either entry with\nrespect to the relations `rα` and `rβ`.\n\nIt is so called, as it models game addition within combinatorial game theory. If `rα a₁ a₂` means\nthat `a₂ ⟶ a₁` is a valid move in game `α`, and `rβ b₁ b₂` means that `b₂ ⟶ b₁` is a valid move\nin game `β`, then `GameAdd rα rβ` specifies the valid moves in the juxtaposition of `α` and `β`:\nthe player is free to choose one of the games and make a move in it, while leaving the other game\nunchanged.\n\nSee `Sym2.GameAdd` for the unordered pair analog. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/GameAdd.html#Prod.GameAdd\"><span class=\"name\">Prod</span>.<span class=\"name\">GameAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}