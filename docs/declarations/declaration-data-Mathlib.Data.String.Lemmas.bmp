{"name":"Mathlib.Data.String.Lemmas","instances":[],"imports":["Init","Mathlib.Init.Data.Nat.Notation","Mathlib.Data.String.Defs","Mathlib.Tactic.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Lemmas.lean#L36-L37","name":"String.leftpad_suffix","line":36,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.leftpad_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.leftpad_suffix\"><span class=\"name\">String</span>.<span class=\"name\">leftpad_suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.IsSuffix\">String.IsSuffix</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.leftpad\">String.leftpad</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Lemmas.lean#L33-L34","name":"String.leftpad_prefix","line":33,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.leftpad_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.leftpad_prefix\"><span class=\"name\">String</span>.<span class=\"name\">leftpad_prefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.IsPrefix\">String.IsPrefix</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.replicate\">String.replicate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">s</span></span></span>)</span> <span class=\"fn\">c</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.leftpad\">String.leftpad</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Lemmas.lean#L29-L31","name":"String.leftpad_length","line":29,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.leftpad_length","doc":"The length of the String returned by `String.leftpad n a c` is equal\nto the larger of `n` and `s.length` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.leftpad_length\"><span class=\"name\">String</span>.<span class=\"name\">leftpad_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.leftpad\">String.leftpad</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Lemmas.lean#L24-L25","name":"String.length_eq_list_length","line":24,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.length_eq_list_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.length_eq_list_length\"><span class=\"name\">String</span>.<span class=\"name\">length_eq_list_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Lemmas.lean#L21-L22","name":"String.length_replicate","line":21,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.length_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.length_replicate\"><span class=\"name\">String</span>.<span class=\"name\">length_replicate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/String/Defs.html#String.replicate\">String.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Lemmas.lean#L15-L19","name":"String.length_append","line":15,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.length_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.length_append\"><span class=\"name\">String</span>.<span class=\"name\">length_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(as : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bs : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.length\">String.length</a> <span class=\"fn\">bs</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/String/Lemmas.lean#L12-L13","name":"String.congr_append","line":12,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.congr_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.congr_append\"><span class=\"name\">String</span>.<span class=\"name\">congr_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.data</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">b</span>.data</span></span> }</span></span></div></div>"}]}