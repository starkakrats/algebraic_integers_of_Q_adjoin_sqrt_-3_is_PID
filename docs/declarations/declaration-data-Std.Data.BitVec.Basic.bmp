{"name":"Std.Data.BitVec.Basic","instances":[{"typeNames":["Eq"],"name":"Std.instDecidableEqBitVec","className":"Decidable"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instInhabitedBitVec","className":"Inhabited"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instOfNatBitVec","className":"OfNat"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instReprBitVec","className":"Repr"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instToStringBitVec","className":"ToString"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instAddBitVec","className":"Add"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instSubBitVec","className":"Sub"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instNegBitVec","className":"Neg"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instMulBitVec","className":"Mul"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instDivBitVec","className":"Div"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instModBitVec","className":"Mod"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instLTBitVec","className":"LT"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instLEBitVec","className":"LE"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instAndOpBitVec","className":"AndOp"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instOrOpBitVec","className":"OrOp"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instXorBitVec","className":"Xor"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instComplementBitVec","className":"Complement"},{"typeNames":["Std.BitVec","Nat","Std.BitVec"],"name":"Std.BitVec.instHShiftLeftBitVecNat","className":"HShiftLeft"},{"typeNames":["Std.BitVec","Nat","Std.BitVec"],"name":"Std.BitVec.instHShiftRightBitVecNat","className":"HShiftRight"},{"typeNames":["Std.BitVec","Std.BitVec","Std.BitVec"],"name":"Std.BitVec.instHShiftLeftBitVec","className":"HShiftLeft"},{"typeNames":["Std.BitVec","Std.BitVec","Std.BitVec"],"name":"Std.BitVec.instHShiftRightBitVec","className":"HShiftRight"},{"typeNames":["Std.BitVec","Std.BitVec","Std.BitVec"],"name":"Std.BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat","className":"HAppend"},{"typeNames":["Std.BitVec"],"name":"Std.BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat","className":"Subsingleton"}],"imports":["Init","Std.Data.Fin.Basic","Std.Data.Int.Basic","Std.Data.Nat.Bitwise","Std.Tactic.Alias"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L521-L523","name":"Std.BitVec.ofBool_append","line":521,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool_append\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsbs : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">msb</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">lsbs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">w</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\">Std.BitVec.cons</a> <span class=\"fn\">msb</span> <span class=\"fn\">lsbs</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L517-L519","name":"Std.BitVec.append_ofBool","line":517,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.append_ofBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.append_ofBool\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_ofBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">msbs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <span class=\"fn\">lsb</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.concat\">Std.BitVec.concat</a> <span class=\"fn\">msbs</span> <span class=\"fn\">lsb</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L514-L515","name":"Std.BitVec.eq_nil","line":514,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.eq_nil","doc":"Every bitvector of length 0 is equal to `nil`, i.e., there is only one empty bitvector "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.eq_nil\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">eq_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.nil\">Std.BitVec.nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L510-L511","name":"Std.BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat","line":510,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat","doc":"All empty bitvectors are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instSubsingletonBitVecOfNatNatInstOfNatNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instSubsingletonBitVecOfNatNatInstOfNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">0</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L506-L507","name":"Std.BitVec.cons","line":506,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.cons","doc":"Prepend a single bit to the front of a bitvector, using big endian order (see `append`).\nThat is, the new bit is the most significant bit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cons\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsbs : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L502-L502","name":"Std.BitVec.concat","line":502,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.concat","doc":"Append a single bit to the end of a bitvector, using big endian order (see `append`).\nThat is, the new bit is the least significant bit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.concat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsb : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L490-L490","name":"Std.BitVec.nil","line":490,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.nil","doc":"The empty bitvector "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.nil\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L487-L487","name":"Std.BitVec.ofBool_true","line":487,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool_true\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_true</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L486-L486","name":"Std.BitVec.ofBool_false","line":486,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool_false\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_false</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\">Std.BitVec.ofBool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L484-L484","name":"Std.BitVec.ofBool","line":484,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool","doc":"Turn a `Bool` into a bitvector of length `1` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofBool\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L479-L481","name":"Std.BitVec.cast_eq","line":479,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.cast_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">cast_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L475-L477","name":"Std.BitVec.cast_cast","line":475,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.cast_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast_cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">cast_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h₂</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h₁</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L471-L473","name":"Std.BitVec.cast_ofNat","line":471,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.cast_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">cast_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\">Std.BitVec.cast</a> <span class=\"fn\">h</span> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>#<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L469-L469","name":"Std.BitVec.zero_eq","line":469,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.zero_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zero_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zero\">Std.BitVec.zero</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">0</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L468-L468","name":"Std.BitVec.mul_eq","line":468,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.mul_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.mul_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.mul\">Std.BitVec.mul</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L467-L467","name":"Std.BitVec.sub_eq","line":467,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.sub_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.sub_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.sub\">Std.BitVec.sub</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L466-L466","name":"Std.BitVec.add_eq","line":466,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.add_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.add_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.add\">Std.BitVec.add</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L465-L465","name":"Std.BitVec.neg_eq","line":465,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.neg_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.neg_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.neg\">Std.BitVec.neg</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L464-L464","name":"Std.BitVec.xor_eq","line":464,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.xor_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.xor_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">xor_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.xor\">Std.BitVec.xor</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L463-L463","name":"Std.BitVec.or_eq","line":463,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.or_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.or\">Std.BitVec.or</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L462-L462","name":"Std.BitVec.and_eq","line":462,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.and_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.and_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.and\">Std.BitVec.and</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L461-L461","name":"Std.BitVec.not_eq","line":461,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.not_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.not_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.not\">Std.BitVec.not</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L460-L460","name":"Std.BitVec.ushiftRight_eq","line":460,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ushiftRight_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ushiftRight_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ushiftRight\">Std.BitVec.ushiftRight</a> <span class=\"fn\">x</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L459-L459","name":"Std.BitVec.shiftLeft_eq","line":459,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeft_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeft_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeft\">Std.BitVec.shiftLeft</a> <span class=\"fn\">x</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L458-L458","name":"Std.BitVec.append_eq","line":458,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.append_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.append_eq\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.append\">Std.BitVec.append</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L455-L455","name":"Std.BitVec.signExtend","line":455,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.signExtend","doc":"Sign extend a vector of length `w`, extending with `i` additional copies of the most significant\nbit in `x`. If `x` is an empty vector, then the sign is treated as zero.\n\nSMT-Lib name: `sign_extend`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.signExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">signExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L443-L447","name":"Std.BitVec.truncate","line":443,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate","doc":"Truncate the high bits of bitvector `x` of length `w`, resulting in a vector of length `v`.\nIf `v > w` then it zero-extends the vector instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.truncate\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L437-L441","name":"Std.BitVec.zeroExtend","line":437,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend","doc":"Zero extend vector `x` of length `w` by adding zeros in the high bits until it has length `v`.\nIf `v < w` then it truncates the high bits instead.\n\nSMT-Lib name: `zero_extend`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L429-L429","name":"Std.BitVec.fill","line":429,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.fill","doc":"Fills a bitvector with `w` copies of the bit `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.fill\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L421-L426","name":"Std.BitVec.replicate","line":421,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.replicate","doc":"`replicate i x` concatenates `i` copies of `x` into a new vector of length `w*i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.replicate\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L417-L417","name":"Std.BitVec.extractLsb","line":417,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb","doc":"Extraction of bits `hi` (inclusive) down to `lo` (inclusive) from a bit vector of size `n` to\nyield a new bitvector of size `hi - lo + 1`.\n\nSMT-Lib name: `extract`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lo : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L409-L409","name":"Std.BitVec.extractLsb'","line":409,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb'","doc":"Extraction of bits `start` to `start + len - 1` from a bit vector of size `n` to yield a\nnew bitvector of size `len`. If `start + len > n`, then the vector will be zero-padded in the\nhigh bits.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.extractLsb'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(start : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(len : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">len</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L402-L402","name":"Std.BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat","line":402,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instHAppendBitVecHAddNatInstHAddInstAddNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instHAppendBitVecHAddNatInstHAddInstAddNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAppend\">HAppend</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">v</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L399-L400","name":"Std.BitVec.append","line":399,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.append","doc":"Concatenation of bitvectors. This uses the \"big endian\" convention that the more significant\ninput is on the left, so `0xAB#8 ++ 0xCD#8 = 0xABCD#16`.\n\nSMT-Lib name: `concat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.append\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lsbs : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L386-L391","name":"Std.BitVec.shiftLeftZeroExtend","line":386,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeftZeroExtend","doc":"`shiftLeftZeroExtend x n` returns `zeroExtend (w+n) x <<< n` without\nneeding to compute `x % 2^(2+n)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeftZeroExtend\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftZeroExtend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msbs : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L377-L380","name":"Std.BitVec.zeroExtend'","line":377,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend'","doc":"A version of `zeroExtend` that requires a proof, but is a noop.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zeroExtend'\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zeroExtend'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(le : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L372-L372","name":"Std.BitVec.rotateRight","line":372,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.rotateRight","doc":"Rotate right for bit vectors. All the bits of `x` are shifted to lower positions, with the\nbottom `n` bits wrapping around to fill the high bits.\n\n```lean\nrotateRight 0b01001#5 1 = 0b10100\n```\nSMT-Lib name: `rotate_right` except this operator uses a `Nat` shift amount.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.rotateRight\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">rotateRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L361-L361","name":"Std.BitVec.rotateLeft","line":361,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.rotateLeft","doc":"Rotate left for bit vectors. All the bits of `x` are shifted to higher positions, with the top `n`\nbits wrapping around to fill the low bits.\n\n```lean\nrotateLeft  0b0011#4 3 = 0b1001\n```\nSMT-Lib name: `rotate_left` except this operator uses a `Nat` shift amount.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.rotateLeft\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">rotateLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L350-L350","name":"Std.BitVec.instHShiftRightBitVec","line":350,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftRightBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftRightBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftRightBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L349-L349","name":"Std.BitVec.instHShiftLeftBitVec","line":349,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftLeftBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftLeftBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftLeftBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L347-L347","name":"Std.BitVec.sshiftRight","line":347,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.sshiftRight","doc":"Arithmetic right shift for bit vectors. The high bits are filled with the\nmost-significant bit.\nAs a numeric operation, this is equivalent to `a.toInt >>> s`.\n\nSMT-Lib name: `bvashr` except this operator uses a `Nat` shift value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.sshiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L338-L338","name":"Std.BitVec.instHShiftRightBitVecNat","line":338,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftRightBitVecNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftRightBitVecNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftRightBitVecNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L337-L337","name":"Std.BitVec.ushiftRight","line":337,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ushiftRight","doc":"(Logical) right shift for bit vectors. The high bits are filled with zeros.\nAs a numeric operation, this is equivalent to `a / 2^s`, rounding down.\n\nSMT-Lib name: `bvlshr` except this operator uses a `Nat` shift value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ushiftRight\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L329-L329","name":"Std.BitVec.instHShiftLeftBitVecNat","line":329,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftLeftBitVecNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instHShiftLeftBitVecNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instHShiftLeftBitVecNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L328-L328","name":"Std.BitVec.shiftLeft","line":328,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeft","doc":"Left shift for bit vectors. The low bits are filled with zeros. As a numeric operation, this is\nequivalent to `a * 2^s`, modulo `2^n`.\n\nSMT-Lib name: `bvshl` except this operator uses a `Nat` shift value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.shiftLeft\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L317-L320","name":"Std.BitVec.ofInt","line":317,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofInt","doc":"The `BitVec` with value `(2^n + (i mod 2^n)) mod 2^n`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L314-L314","name":"Std.BitVec.instComplementBitVec","line":314,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instComplementBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instComplementBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instComplementBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L309-L313","name":"Std.BitVec.not","line":309,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.not","doc":"Bitwise NOT for bit vectors.\n\n```lean\n~~~(0b0101#4) == 0b1010\n```\nSMT-Lib name: `bvnot`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.not\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L299-L299","name":"Std.BitVec.instXorBitVec","line":299,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instXorBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instXorBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instXorBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L297-L298","name":"Std.BitVec.xor","line":297,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.xor","doc":"Bitwise XOR for bit vectors.\n\n```lean\n0b1010#4 ^^^ 0b0110#4 = 0b1100#4\n```\n\nSMT-Lib name: `bvxor`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.xor\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L286-L286","name":"Std.BitVec.instOrOpBitVec","line":286,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instOrOpBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instOrOpBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instOrOpBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L284-L285","name":"Std.BitVec.or","line":284,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.or","doc":"Bitwise OR for bit vectors.\n\n```lean\n0b1010#4 ||| 0b0110#4 = 0b1110#4\n```\n\nSMT-Lib name: `bvor`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.or\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L273-L273","name":"Std.BitVec.instAndOpBitVec","line":273,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instAndOpBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instAndOpBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instAndOpBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L271-L272","name":"Std.BitVec.and","line":271,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.and","doc":"Bitwise AND for bit vectors.\n\n```lean\n0b1010#4 &&& 0b0110#4 = 0b0010#4\n```\n\nSMT-Lib name: `bvand`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.and\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L260-L260","name":"Std.BitVec.sle","line":260,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.sle","doc":"Signed less-than-or-equal-to for bit vectors.\n\nSMT-Lib name: `bvsle`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.sle\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L253-L253","name":"Std.BitVec.slt","line":253,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.slt","doc":"Signed less-than for bit vectors.\n\n```lean\nBitVec.slt 6#4 7 = true\nBitVec.slt 7#4 8 = false\n```\nSMT-Lib name: `bvslt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.slt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">slt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L242-L242","name":"Std.BitVec.instLEBitVec","line":242,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instLEBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instLEBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instLEBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L240-L240","name":"Std.BitVec.ule","line":240,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ule","doc":"Unsigned less-than-or-equal-to for bit vectors.\n\nSMT-Lib name: `bvule`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ule\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L233-L233","name":"Std.BitVec.instLTBitVec","line":233,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instLTBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instLTBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instLTBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L232-L232","name":"Std.BitVec.ult","line":232,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ult","doc":"Unsigned less-than for bit vectors.\n\nSMT-Lib name: `bvult`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ult\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L216-L225","name":"Std.BitVec.smod","line":216,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.smod","doc":"Remainder for signed division rounded to negative infinity.\n\nSMT_Lib name: `bvsmod`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.smod\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">smod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L204-L209","name":"Std.BitVec.srem","line":204,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.srem","doc":"Remainder for signed division rounding to zero.\n\nSMT_Lib name: `bvsrem`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.srem\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">srem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L192-L197","name":"Std.BitVec.smtSDiv","line":192,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.smtSDiv","doc":"Signed division for bit vectors using SMTLIB rules for division by zero.\n\nSpecifically, `smtSDiv x 0 = if x >= 0 then -1 else 1`\n\nSMT-Lib name: `bvsdiv`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.smtSDiv\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">smtSDiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L178-L183","name":"Std.BitVec.sdiv","line":178,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.sdiv","doc":"Signed t-division for bit vectors using the Lean convention where division\nby zero returns zero.\n\n```lean\nsdiv 7#4 2 = 3#4\nsdiv (-9#4) 2 = -4#4\nsdiv 5#4 -2 = -2#4\nsdiv (-7#4) (-2) = 3#4\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.sdiv\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L165-L165","name":"Std.BitVec.smtUDiv","line":165,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.smtUDiv","doc":"Unsigned division for bit vectors using the\n[SMT-Lib convention](http://smtlib.cs.uiowa.edu/theories-FixedSizeBitVectors.shtml)\nwhere division by zero returns the `allOnes` bitvector.\n\nSMT-Lib name: `bvudiv`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.smtUDiv\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">smtUDiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L156-L156","name":"Std.BitVec.instModBitVec","line":156,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instModBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instModBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instModBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L155-L155","name":"Std.BitVec.umod","line":155,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.umod","doc":"Unsigned modulo for bit vectors.\n\nSMT-Lib name: `bvurem`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.umod\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L148-L148","name":"Std.BitVec.instDivBitVec","line":148,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instDivBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instDivBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instDivBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L147-L147","name":"Std.BitVec.udiv","line":147,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.udiv","doc":"Unsigned division for bit vectors using the Lean convention where division by zero returns zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.udiv\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L142-L142","name":"Std.BitVec.instMulBitVec","line":142,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instMulBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instMulBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instMulBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L141-L141","name":"Std.BitVec.mul","line":141,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.mul","doc":"Multiplication for bit vectors. This can be interpreted as either signed or unsigned negation\nmodulo `2^n`.\n\nSMT-Lib name: `bvmul`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.mul\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L133-L133","name":"Std.BitVec.abs","line":133,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.abs","doc":"Return the absolute value of a signed bitvector.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.abs\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L128-L128","name":"Std.BitVec.allOnes","line":128,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes","doc":"Bit vector of size `n` where all bits are `1`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.allOnes\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">allOnes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L125-L125","name":"Std.BitVec.instNegBitVec","line":125,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instNegBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instNegBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instNegBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L124-L124","name":"Std.BitVec.neg","line":124,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.neg","doc":"Negation for bit vectors. This can be interpreted as either signed or unsigned negation\nmodulo `2^n`.\n\nSMT-Lib name: `bvneg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.neg\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L116-L116","name":"Std.BitVec.instSubBitVec","line":116,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instSubBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instSubBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instSubBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L115-L115","name":"Std.BitVec.sub","line":115,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.sub","doc":"Subtraction for bit vectors. This can be interpreted as either signed or unsigned subtraction\nmodulo `2^n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.sub\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L109-L109","name":"Std.BitVec.instAddBitVec","line":109,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instAddBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instAddBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instAddBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L108-L108","name":"Std.BitVec.add","line":108,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.add","doc":"Addition for bit vectors. This can be interpreted as either signed or unsigned addition\nmodulo `2^n`.\n\nSMT-Lib name: `bvadd`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.add\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L100-L100","name":"Std.BitVec.ofNat_eq_ofNat","line":100,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofNat_eq_ofNat","doc":"Theorem for normalizing the bit vector literal representation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofNat_eq_ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat_eq_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>#<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L96-L96","name":"Std.BitVec.instToStringBitVec","line":96,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instToStringBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instToStringBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instToStringBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L94-L94","name":"Std.BitVec.instReprBitVec","line":94,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instReprBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instReprBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instReprBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L89-L92","name":"Std.BitVec.toHex","line":89,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.toHex","doc":"Convert bitvector into a fixed-width hex number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toHex\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toHex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L84-L86","name":"Std.BitVec.unexpandBitVecOfNat","line":84,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.unexpandBitVecOfNat","doc":"Unexpander for bit vector literals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.unexpandBitVecOfNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">unexpandBitVecOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L76-L77","name":"Std.BitVec.«term__#__»","line":76,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.«term__#__»","doc":"Notation for bit vector literals. `i#n` is a shorthand for `BitVec.ofNat n i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.«term__#__»\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">«term__#__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L74-L74","name":"Std.BitVec.instOfNatBitVec","line":74,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instOfNatBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instOfNatBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instOfNatBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L72-L72","name":"Std.BitVec.instInhabitedBitVec","line":72,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.instInhabitedBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.instInhabitedBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">instInhabitedBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L70-L70","name":"Std.BitVec.zero","line":70,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.zero","doc":"Return a bitvector `0` of size `n`. This is the bitvector with all zero bits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.zero\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L66-L67","name":"Std.BitVec.toInt","line":66,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.toInt","doc":"Interpret the bitvector as an integer stored in two's complement form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toInt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L63-L63","name":"Std.BitVec.msb","line":63,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.msb","doc":"Return most-significant bit in bitvector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.msb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">msb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L60-L60","name":"Std.BitVec.getMsb","line":60,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb","doc":"Return the `i`-th most significant bit or `false` if `i ≥ w`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getMsb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getMsb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L57-L57","name":"Std.BitVec.getLsb","line":57,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb","doc":"Return the `i`-th least significant bit or `false` if `i ≥ w`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.getLsb\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L54-L54","name":"Std.BitVec.isLt","line":54,"kind":"theorem","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.isLt","doc":"Return the bound in terms of toNat. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.isLt\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">isLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\">Std.BitVec.toNat</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L51-L51","name":"Std.BitVec.toNat","line":51,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat","doc":"Given a bitvector `a`, return the underlying `Nat`. This is O(1) because `BitVec` is a\n(zero-cost) wrapper around a `Nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L46-L47","name":"Std.BitVec.ofNat","line":46,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofNat","doc":"The `BitVec` with value `i mod 2^n`. Treated as an operation on bitvectors,\nthis is truncation of the high bits when downcasting and zero-extension when upcasting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L41-L42","name":"Std.BitVec.cast","line":41,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.cast","doc":"`cast eq i` embeds `i` into an equal `BitVec` type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.cast\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(eq : <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L36-L36","name":"Std.instDecidableEqBitVec","line":36,"kind":"instance","docLink":"./Std/Data/BitVec/Basic.html#Std.instDecidableEqBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.instDecidableEqBitVec\"><span class=\"name\">Std</span>.<span class=\"name\">instDecidableEqBitVec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L35-L35","name":"Std.BitVec.toFin","line":35,"kind":"def","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.toFin","doc":"Interpret a bitvector as a number less than `2^w`.\nO(1), because we use `Fin` as the internal representation of a bitvector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.toFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">toFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L32-L32","name":"Std.BitVec.ofFin","line":32,"kind":"ctor","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec.ofFin","doc":"Construct a `BitVec w` from a number less than `2^w`.\nO(1), because we use `Fin` as the internal representation of a bitvector. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec.ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(toFin : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\">Std.BitVec</a> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/BitVec/Basic.lean#L29-L36","name":"Std.BitVec","line":29,"kind":"structure","docLink":"./Std/Data/BitVec/Basic.html#Std.BitVec","doc":"A bitvector of the specified width. This is represented as the underlying `Nat` number\nin both the runtime and the kernel, inheriting all the special support for `Nat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/BitVec/Basic.html#Std.BitVec\"><span class=\"name\">Std</span>.<span class=\"name\">BitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(w : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}