{"name":"Std.Util.TermUnsafe","instances":[],"imports":["Init","Lean.Elab.ElabRules","Lean.Meta.Closure","Lean.Compiler.ImplementedByAttr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/TermUnsafe.lean#L30-L61","name":"Std.TermUnsafe.termUnsafe_","line":30,"kind":"def","docLink":"./Std/Util/TermUnsafe.html#Std.TermUnsafe.termUnsafe_","doc":"`unsafe t : α` is an expression constructor which allows using unsafe declarations inside the\nbody of `t : α`, by creating an auxiliary definition containing `t` and using `implementedBy` to\nwrap it in a safe interface. It is required that `α` is nonempty for this to be sound,\nbut even beyond that, an `unsafe` block should be carefully inspected for memory safety because\nthe compiler is unable to guarantee the safety of the operation.\n\nFor example, the `evalExpr` function is unsafe, because the compiler cannot guarantee that when\nyou call ```evalExpr Foo ``Foo e``` that the type `Foo` corresponds to the name `Foo`, but in a\nparticular use case, we can ensure this, so `unsafe (evalExpr Foo ``Foo e)` is a correct usage.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/TermUnsafe.html#Std.TermUnsafe.termUnsafe_\"><span class=\"name\">Std</span>.<span class=\"name\">TermUnsafe</span>.<span class=\"name\">termUnsafe_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Util/TermUnsafe.lean#L25-L28","name":"Std.TermUnsafe.mkAuxName","line":25,"kind":"def","docLink":"./Std/Util/TermUnsafe.html#Std.TermUnsafe.mkAuxName","doc":"Construct an auxiliary name based on the current declaration name and the given `hint` base. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Util/TermUnsafe.html#Std.TermUnsafe.mkAuxName\"><span class=\"name\">Std</span>.<span class=\"name\">TermUnsafe</span>.<span class=\"name\">mkAuxName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hint : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"}]}